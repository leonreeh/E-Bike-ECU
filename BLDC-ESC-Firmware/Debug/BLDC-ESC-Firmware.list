
BLDC-ESC-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800ffb8  0800ffb8  00010fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010450  08010450  000122dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010450  08010450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010458  08010458  000122dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010458  08010458  00011458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801045c  0801045c  0001145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08010460  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122dc  2**0
                  CONTENTS
 10 .bss          00001ff4  200002dc  200002dc  000122dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022d0  200022d0  000122dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dec3  00000000  00000000  0001230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000474d  00000000  00000000  000301cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  00034920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c0  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026070  00000000  00000000  00037898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023525  00000000  00000000  0005d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6f7b  00000000  00000000  00080e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157da8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082b0  00000000  00000000  00157dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0016009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff9c 	.word	0x0800ff9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	0800ff9c 	.word	0x0800ff9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <hallState>:
  *				110		180° - 240°		4320° - 5760°
  *				010		240° - 300°		5760° - 7200°
  *				011		300° - 360°		7200° - 8640°
  *
  */
uint16_t hallState(uint16_t hall[]){
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	uint16_t commutatorState = -1;
 8000f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f44:	81fb      	strh	r3, [r7, #14]
	  if ((hall[0] == 1) && (hall[1] == 0) && (hall[2] == 1)) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10c      	bne.n	8000f68 <hallState+0x30>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3302      	adds	r3, #2
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d107      	bne.n	8000f68 <hallState+0x30>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <hallState+0x30>
		//Mechanical Angle 0°-60°
		  commutatorState = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	81fb      	strh	r3, [r7, #14]
 8000f66:	e053      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 0) && (hall[2] == 1)) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10c      	bne.n	8000f8a <hallState+0x52>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3302      	adds	r3, #2
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d107      	bne.n	8000f8a <hallState+0x52>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <hallState+0x52>
		//Mechanical Angle 60°-120°
		  commutatorState = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	e042      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 1) && (hall[2] == 1)) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <hallState+0x74>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3302      	adds	r3, #2
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d107      	bne.n	8000fac <hallState+0x74>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <hallState+0x74>
		//Mechanical Angle 120°-180°
		  commutatorState = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	81fb      	strh	r3, [r7, #14]
 8000faa:	e031      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 1) && (hall[2] == 0)) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10c      	bne.n	8000fce <hallState+0x96>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <hallState+0x96>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <hallState+0x96>
		//Mechanical Angle 180°-240°
		  commutatorState = 3;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	81fb      	strh	r3, [r7, #14]
 8000fcc:	e020      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 1) && (hall[1] == 1) && (hall[2] == 0)) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10c      	bne.n	8000ff0 <hallState+0xb8>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <hallState+0xb8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <hallState+0xb8>
		//Mechanical Angle 240°-300°
		  commutatorState = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	81fb      	strh	r3, [r7, #14]
 8000fee:	e00f      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 1) && (hall[1] == 0) && (hall[2] == 0)) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10b      	bne.n	8001010 <hallState+0xd8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <hallState+0xd8>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3304      	adds	r3, #4
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <hallState+0xd8>
		//Mechanical Angle 300°-360°
		  commutatorState = 5;
 800100c:	2305      	movs	r3, #5
 800100e:	81fb      	strh	r3, [r7, #14]
	  }
	  return commutatorState;
 8001010:	89fb      	ldrh	r3, [r7, #14]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <commutator>:
  * @param commutatorStep 		= 0-5 determined by FOC hall sensor position
  * @param duty					= PWM duty cycle 0-100
  * @param dir					= motor direction: 1 = fwr; -1= rws
  * @retval			= void
  */
void commutator(int commutatorStep, int duty, int dir){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]

	if(dir ==1){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	f040 80d8 	bne.w	80011e4 <commutator+0x1c4>
		switch(commutatorStep){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b05      	cmp	r3, #5
 8001038:	f200 80b8 	bhi.w	80011ac <commutator+0x18c>
 800103c:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <commutator+0x24>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001095 	.word	0x08001095
 800104c:	080010cd 	.word	0x080010cd
 8001050:	08001105 	.word	0x08001105
 8001054:	0800113d 	.word	0x0800113d
 8001058:	08001175 	.word	0x08001175
		//Phase Current:	U = I		V =	-I		W = 0
		//High Side			U = PWM		V = OFF		W = OFF
		//Low Side			U = OFF		V = ON		W = OFF
		case 0:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001062:	4871      	ldr	r0, [pc, #452]	@ (8001228 <commutator+0x208>)
 8001064:	f003 fb86 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106e:	486e      	ldr	r0, [pc, #440]	@ (8001228 <commutator+0x208>)
 8001070:	f003 fb80 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107a:	486b      	ldr	r0, [pc, #428]	@ (8001228 <commutator+0x208>)
 800107c:	f003 fb7a 	bl	8004774 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = duty;
 8001080:	4a6a      	ldr	r2, [pc, #424]	@ (800122c <commutator+0x20c>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = 0;
 8001086:	4b69      	ldr	r3, [pc, #420]	@ (800122c <commutator+0x20c>)
 8001088:	2200      	movs	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 800108c:	4b67      	ldr	r3, [pc, #412]	@ (800122c <commutator+0x20c>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 8001092:	e0a7      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = 0		V =	-I		W = I
		//High Side			U = OFF		V = OFF		W = PWM
		//Low Side			U = OFF		V = ON		W = OFF
		case 1:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109a:	4863      	ldr	r0, [pc, #396]	@ (8001228 <commutator+0x208>)
 800109c:	f003 fb6a 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a6:	4860      	ldr	r0, [pc, #384]	@ (8001228 <commutator+0x208>)
 80010a8:	f003 fb64 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b2:	485d      	ldr	r0, [pc, #372]	@ (8001228 <commutator+0x208>)
 80010b4:	f003 fb5e 	bl	8004774 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 80010b8:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <commutator+0x20c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80010be:	4b5b      	ldr	r3, [pc, #364]	@ (800122c <commutator+0x20c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = duty;
 80010c4:	4a59      	ldr	r2, [pc, #356]	@ (800122c <commutator+0x20c>)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	63d3      	str	r3, [r2, #60]	@ 0x3c

			break;
 80010ca:	e08b      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = -I		V =	0		W = I
		//High Side			U = OFF		V = OFF		W = PWM
		//Low Side			U = ON		V = OFF		W = OFF
		case 2:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d2:	4855      	ldr	r0, [pc, #340]	@ (8001228 <commutator+0x208>)
 80010d4:	f003 fb4e 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010de:	4852      	ldr	r0, [pc, #328]	@ (8001228 <commutator+0x208>)
 80010e0:	f003 fb48 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ea:	484f      	ldr	r0, [pc, #316]	@ (8001228 <commutator+0x208>)
 80010ec:	f003 fb42 	bl	8004774 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 80010f0:	4b4e      	ldr	r3, [pc, #312]	@ (800122c <commutator+0x20c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <commutator+0x20c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = duty;
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <commutator+0x20c>)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	63d3      	str	r3, [r2, #60]	@ 0x3c

			break;
 8001102:	e06f      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = -I		V =	I		W = 0
		//High Side			U = OFF		V = PWM		W = OFF
		//Low Side			U = ON		V = OFF		W = OFF
		case 3:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	4847      	ldr	r0, [pc, #284]	@ (8001228 <commutator+0x208>)
 800110c:	f003 fb32 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001116:	4844      	ldr	r0, [pc, #272]	@ (8001228 <commutator+0x208>)
 8001118:	f003 fb2c 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001122:	4841      	ldr	r0, [pc, #260]	@ (8001228 <commutator+0x208>)
 8001124:	f003 fb26 	bl	8004774 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 8001128:	4b40      	ldr	r3, [pc, #256]	@ (800122c <commutator+0x20c>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = duty;
 800112e:	4a3f      	ldr	r2, [pc, #252]	@ (800122c <commutator+0x20c>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM1->CCR3 = 0;
 8001134:	4b3d      	ldr	r3, [pc, #244]	@ (800122c <commutator+0x20c>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 800113a:	e053      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = 0		V =	I		W = -I
		//High Side			U = OFF		V = PWM		W = OFF
		//Low Side			U = OFF		V = OFF		W = ON
		case 4:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	4839      	ldr	r0, [pc, #228]	@ (8001228 <commutator+0x208>)
 8001144:	f003 fb16 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800114e:	4836      	ldr	r0, [pc, #216]	@ (8001228 <commutator+0x208>)
 8001150:	f003 fb10 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800115a:	4833      	ldr	r0, [pc, #204]	@ (8001228 <commutator+0x208>)
 800115c:	f003 fb0a 	bl	8004774 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <commutator+0x20c>)
 8001162:	2200      	movs	r2, #0
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = duty;
 8001166:	4a31      	ldr	r2, [pc, #196]	@ (800122c <commutator+0x20c>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM1->CCR3 = 0;
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <commutator+0x20c>)
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 8001172:	e037      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = I		V =	0		W = -I
		//High Side			U = PWM		V = OFF		W = OFF
		//Low Side			U = OFF		V = OFF		W = ON
		case 5:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117a:	482b      	ldr	r0, [pc, #172]	@ (8001228 <commutator+0x208>)
 800117c:	f003 fafa 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001186:	4828      	ldr	r0, [pc, #160]	@ (8001228 <commutator+0x208>)
 8001188:	f003 faf4 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001192:	4825      	ldr	r0, [pc, #148]	@ (8001228 <commutator+0x208>)
 8001194:	f003 faee 	bl	8004774 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = duty;
 8001198:	4a24      	ldr	r2, [pc, #144]	@ (800122c <commutator+0x20c>)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = 0;
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <commutator+0x20c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <commutator+0x20c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 80011aa:	e01b      	b.n	80011e4 <commutator+0x1c4>

		//i have no idea how you ended up here pls stop motor
		//High Side			U = OFF		V = OFF		W = OFF
		//Low Side			U = HIGH	V = HIGH	W = HIGH
		default:
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	481d      	ldr	r0, [pc, #116]	@ (8001228 <commutator+0x208>)
 80011b4:	f003 fade 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011be:	481a      	ldr	r0, [pc, #104]	@ (8001228 <commutator+0x208>)
 80011c0:	f003 fad8 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ca:	4817      	ldr	r0, [pc, #92]	@ (8001228 <commutator+0x208>)
 80011cc:	f003 fad2 	bl	8004774 <HAL_GPIO_WritePin>

			TIM1->CCR1 = 0;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <commutator+0x20c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <commutator+0x20c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <commutator+0x20c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80011e2:	bf00      	nop
		}
	}
	if(dir !=1){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d01a      	beq.n	8001220 <commutator+0x200>
		//not implimented yet just break
		HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <commutator+0x208>)
 80011f2:	f003 fabf 	bl	8004774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011fc:	480a      	ldr	r0, [pc, #40]	@ (8001228 <commutator+0x208>)
 80011fe:	f003 fab9 	bl	8004774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001208:	4807      	ldr	r0, [pc, #28]	@ (8001228 <commutator+0x208>)
 800120a:	f003 fab3 	bl	8004774 <HAL_GPIO_WritePin>

		TIM1->CCR1 = 0;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <commutator+0x20c>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <commutator+0x20c>)
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <commutator+0x20c>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020400 	.word	0x40020400
 800122c:	40010000 	.word	0x40010000

08001230 <initBLDC>:

void initBLDC(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
	uint16_t hall[3];
	hall[0]= (GPIOC->IDR & GPIO_IDR_ID6)? 0x0001 : 0x0000; // Sensor A
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <initBLDC+0x60>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	80bb      	strh	r3, [r7, #4]
	hall[1]= (GPIOC->IDR & GPIO_IDR_ID7)? 0x0001 : 0x0000; // Sensor B
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <initBLDC+0x60>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	80fb      	strh	r3, [r7, #6]
	hall[2]= (GPIOC->IDR & GPIO_IDR_ID8)? 0x0001 : 0x0000; // Sensor C
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <initBLDC+0x60>)
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	813b      	strh	r3, [r7, #8]

	int step= hallState(hall);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe5f 	bl	8000f38 <hallState>
 800127a:	4603      	mov	r3, r0
 800127c:	60fb      	str	r3, [r7, #12]
	commutator(step, 15,1);
 800127e:	2201      	movs	r2, #1
 8001280:	210f      	movs	r1, #15
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fecc 	bl	8001020 <commutator>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020800 	.word	0x40020800

08001294 <map>:
  * @param in_max	= The upper bound of the value’s current range.
  * @param out_min	= The lower bound of the value’s target range.
  * @param out_max	= The upper bound of the value’s target range.
  * @retval			= The mapped value
  */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001294:	b490      	push	{r4, r7}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	4603      	mov	r3, r0
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
 80012ae:	4613      	mov	r3, r2
 80012b0:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	8a39      	ldrh	r1, [r7, #16]
 80012ba:	883a      	ldrh	r2, [r7, #0]
 80012bc:	1a8a      	subs	r2, r1, r2
 80012be:	fb03 f202 	mul.w	r2, r3, r2
 80012c2:	8879      	ldrh	r1, [r7, #2]
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	1acb      	subs	r3, r1, r3
 80012c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b29b      	uxth	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <adc_volt>:

float adc_volt(uint16_t val){
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	//((val/(39000+2200))*2200) /12bitADC
    float Vcc = 3.3;
 80012ea:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <adc_volt+0x90>)
 80012ec:	61fb      	str	r3, [r7, #28]
    float R1 = 37000.0;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <adc_volt+0x94>)
 80012f0:	61bb      	str	r3, [r7, #24]
    float R2 = 2200.0;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <adc_volt+0x98>)
 80012f4:	617b      	str	r3, [r7, #20]
    // Convert ADC value to voltage across R2
    float Vout = (val / 4095.0) * Vcc;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f913 	bl	8000524 <__aeabi_i2d>
 80012fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8001368 <adc_volt+0x88>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff faa2 	bl	800084c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4614      	mov	r4, r2
 800130e:	461d      	mov	r5, r3
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f7ff f919 	bl	8000548 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff f96b 	bl	80005f8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc3d 	bl	8000ba8 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	613b      	str	r3, [r7, #16]

    // Calculate the total voltage across R1 and R2
    float Vin = Vout * (R1 + R2) / R2;
 8001332:	ed97 7a06 	vldr	s14, [r7, #24]
 8001336:	edd7 7a05 	vldr	s15, [r7, #20]
 800133a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001342:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001346:	ed97 7a05 	vldr	s14, [r7, #20]
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	edc7 7a03 	vstr	s15, [r7, #12]

    return Vin;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	ee07 3a90 	vmov	s15, r3
}
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40affe00 	.word	0x40affe00
 8001370:	40533333 	.word	0x40533333
 8001374:	47108800 	.word	0x47108800
 8001378:	45098000 	.word	0x45098000
 800137c:	00000000 	.word	0x00000000

08001380 <adc_cur>:

float adc_cur(uint16_t val){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
    float Vcc = 3.3;
 800138a:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <adc_cur+0xb0>)
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    float amplification_factor = 20.0;
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <adc_cur+0xb4>)
 8001390:	623b      	str	r3, [r7, #32]
    float R_shunt = 0.004;
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <adc_cur+0xb8>)
 8001394:	61fb      	str	r3, [r7, #28]
    float offset_voltage = Vcc / 2.0;
 8001396:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800139a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800139e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Convert ADC value to the amplified voltage
    float Vadc = (val / 4095.0) * Vcc;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8bb 	bl	8000524 <__aeabi_i2d>
 80013ae:	a31e      	add	r3, pc, #120	@ (adr r3, 8001428 <adc_cur+0xa8>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa4a 	bl	800084c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4614      	mov	r4, r2
 80013be:	461d      	mov	r5, r3
 80013c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7ff f913 	bl	80005f8 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fbe5 	bl	8000ba8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	617b      	str	r3, [r7, #20]

    // Adjust for the offset voltage
    float Vadc_adjusted = Vadc - offset_voltage;
 80013e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80013e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a04 	vstr	s15, [r7, #16]

    // Determine the actual voltage drop across the shunt
    float Vshunt = Vadc_adjusted / amplification_factor;
 80013f2:	edd7 6a04 	vldr	s13, [r7, #16]
 80013f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80013fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fe:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate the current through the shunt
    float current = Vshunt / R_shunt;
 8001402:	edd7 6a03 	vldr	s13, [r7, #12]
 8001406:	ed97 7a07 	vldr	s14, [r7, #28]
 800140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140e:	edc7 7a02 	vstr	s15, [r7, #8]

    return current;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	ee07 3a90 	vmov	s15, r3
}
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	3728      	adds	r7, #40	@ 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bdb0      	pop	{r4, r5, r7, pc}
 8001422:	bf00      	nop
 8001424:	f3af 8000 	nop.w
 8001428:	00000000 	.word	0x00000000
 800142c:	40affe00 	.word	0x40affe00
 8001430:	40533333 	.word	0x40533333
 8001434:	41a00000 	.word	0x41a00000
 8001438:	3b83126f 	.word	0x3b83126f
 800143c:	00000000 	.word	0x00000000

08001440 <adc_temp>:

float adc_temp(uint16_t val){
 8001440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001444:	b08c      	sub	sp, #48	@ 0x30
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	80fb      	strh	r3, [r7, #6]
    float Vcc = 3.3;
 800144c:	4b58      	ldr	r3, [pc, #352]	@ (80015b0 <adc_temp+0x170>)
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float R2 = 10000.0;
 8001450:	4b58      	ldr	r3, [pc, #352]	@ (80015b4 <adc_temp+0x174>)
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
    float T0 = 298.15; // 25°C in Kelvin
 8001454:	4b58      	ldr	r3, [pc, #352]	@ (80015b8 <adc_temp+0x178>)
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
    float R0 = 10000.0; // Resistance at 25°C
 8001458:	4b56      	ldr	r3, [pc, #344]	@ (80015b4 <adc_temp+0x174>)
 800145a:	623b      	str	r3, [r7, #32]
    float B = 2904.0; // Beta parameter
 800145c:	4b57      	ldr	r3, [pc, #348]	@ (80015bc <adc_temp+0x17c>)
 800145e:	61fb      	str	r3, [r7, #28]

    // Convert ADC value to voltage
    float Vadc = (val / 4095.0) * Vcc;
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f85e 	bl	8000524 <__aeabi_i2d>
 8001468:	a34d      	add	r3, pc, #308	@ (adr r3, 80015a0 <adc_temp+0x160>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f9ed 	bl	800084c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4614      	mov	r4, r2
 8001478:	461d      	mov	r5, r3
 800147a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800147c:	f7ff f864 	bl	8000548 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7ff f8b6 	bl	80005f8 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb88 	bl	8000ba8 <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]

    // Calculate the resistance of the NTC thermistor
    float R1 = R2 * (Vcc / Vadc - 1.0);
 800149c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014b2:	ee16 0a90 	vmov	r0, s13
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b40      	ldr	r3, [pc, #256]	@ (80015c0 <adc_temp+0x180>)
 80014c0:	f7fe fee2 	bl	8000288 <__aeabi_dsub>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f894 	bl	80005f8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb66 	bl	8000ba8 <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	617b      	str	r3, [r7, #20]

    // Calculate temperature in Kelvin using B-parameter equation
    float T = 1.0 / ((1.0 / T0) + (1.0 / B) * log(R1 / R0));
 80014e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e2:	f7ff f831 	bl	8000548 <__aeabi_f2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	4934      	ldr	r1, [pc, #208]	@ (80015c0 <adc_temp+0x180>)
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4614      	mov	r4, r2
 80014fa:	461d      	mov	r5, r3
 80014fc:	69f8      	ldr	r0, [r7, #28]
 80014fe:	f7ff f823 	bl	8000548 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	492d      	ldr	r1, [pc, #180]	@ (80015c0 <adc_temp+0x180>)
 800150c:	f7ff f99e 	bl	800084c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4690      	mov	r8, r2
 8001516:	4699      	mov	r9, r3
 8001518:	ed97 7a05 	vldr	s14, [r7, #20]
 800151c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001520:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001524:	ee16 0a90 	vmov	r0, s13
 8001528:	f7ff f80e 	bl	8000548 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	ec43 2b10 	vmov	d0, r2, r3
 8001534:	f00e fb34 	bl	800fba0 <log>
 8001538:	ec53 2b10 	vmov	r2, r3, d0
 800153c:	4640      	mov	r0, r8
 800153e:	4649      	mov	r1, r9
 8001540:	f7ff f85a 	bl	80005f8 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fe9e 	bl	800028c <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	f04f 0000 	mov.w	r0, #0
 8001558:	4919      	ldr	r1, [pc, #100]	@ (80015c0 <adc_temp+0x180>)
 800155a:	f7ff f977 	bl	800084c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb1f 	bl	8000ba8 <__aeabi_d2f>
 800156a:	4603      	mov	r3, r0
 800156c:	613b      	str	r3, [r7, #16]

    // Convert Kelvin to Celsius
    float T_Celsius = T - 273.15;
 800156e:	6938      	ldr	r0, [r7, #16]
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	a30c      	add	r3, pc, #48	@ (adr r3, 80015a8 <adc_temp+0x168>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe fe85 	bl	8000288 <__aeabi_dsub>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fb0f 	bl	8000ba8 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	60fb      	str	r3, [r7, #12]

    return T_Celsius;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	ee07 3a90 	vmov	s15, r3
}
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	3730      	adds	r7, #48	@ 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40affe00 	.word	0x40affe00
 80015a8:	66666666 	.word	0x66666666
 80015ac:	40711266 	.word	0x40711266
 80015b0:	40533333 	.word	0x40533333
 80015b4:	461c4000 	.word	0x461c4000
 80015b8:	43951333 	.word	0x43951333
 80015bc:	45358000 	.word	0x45358000
 80015c0:	3ff00000 	.word	0x3ff00000

080015c4 <rpm_tokmh>:

float rpm_tokmh(float rpm){
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	ed87 0a01 	vstr	s0, [r7, #4]
	//36inch wheel
	//91,44 cm wheel
	//U = 2·π·r
	//U = 287,267cm
	//U = 2,87267m
	float circumference = 2.87267;
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <rpm_tokmh+0x4c>)
 80015d0:	617b      	str	r3, [r7, #20]
    // distance traveled per minute in meters
    float distance_per_minute = rpm * circumference;
 80015d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015de:	edc7 7a04 	vstr	s15, [r7, #16]
    // Convert distance to kilometers per hour
    float speed_kmh = distance_per_minute * 60 / 1000;
 80015e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001614 <rpm_tokmh+0x50>
 80015ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ee:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001618 <rpm_tokmh+0x54>
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	edc7 7a03 	vstr	s15, [r7, #12]
    return speed_kmh;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ee07 3a90 	vmov	s15, r3
}
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	4037d9d3 	.word	0x4037d9d3
 8001614:	42700000 	.word	0x42700000
 8001618:	447a0000 	.word	0x447a0000

0800161c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001626:	4a38      	ldr	r2, [pc, #224]	@ (8001708 <HD44780_Init+0xec>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800162c:	4b37      	ldr	r3, [pc, #220]	@ (800170c <HD44780_Init+0xf0>)
 800162e:	2208      	movs	r2, #8
 8001630:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001632:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <HD44780_Init+0xf4>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <HD44780_Init+0xec>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d907      	bls.n	8001650 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001640:	4b33      	ldr	r3, [pc, #204]	@ (8001710 <HD44780_Init+0xf4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <HD44780_Init+0xf4>)
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	e006      	b.n	800165e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001650:	4b2f      	ldr	r3, [pc, #188]	@ (8001710 <HD44780_Init+0xf4>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HD44780_Init+0xf4>)
 800165c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800165e:	f000 f985 	bl	800196c <DelayInit>
  HAL_Delay(50);
 8001662:	2032      	movs	r0, #50	@ 0x32
 8001664:	f001 ffd2 	bl	800360c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HD44780_Init+0xf0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f943 	bl	80018f8 <ExpanderWrite>
  HAL_Delay(1000);
 8001672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001676:	f001 ffc9 	bl	800360c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800167a:	2030      	movs	r0, #48	@ 0x30
 800167c:	f000 f92b 	bl	80018d6 <Write4Bits>
  DelayUS(4500);
 8001680:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001684:	f000 f99c 	bl	80019c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001688:	2030      	movs	r0, #48	@ 0x30
 800168a:	f000 f924 	bl	80018d6 <Write4Bits>
  DelayUS(4500);
 800168e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001692:	f000 f995 	bl	80019c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001696:	2030      	movs	r0, #48	@ 0x30
 8001698:	f000 f91d 	bl	80018d6 <Write4Bits>
  DelayUS(4500);
 800169c:	f241 1094 	movw	r0, #4500	@ 0x1194
 80016a0:	f000 f98e 	bl	80019c0 <DelayUS>

  Write4Bits(0x02 << 4);
 80016a4:	2020      	movs	r0, #32
 80016a6:	f000 f916 	bl	80018d6 <Write4Bits>
  DelayUS(100);
 80016aa:	2064      	movs	r0, #100	@ 0x64
 80016ac:	f000 f988 	bl	80019c0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <HD44780_Init+0xf4>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f8ce 	bl	800185c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HD44780_Init+0xf8>)
 80016c2:	2204      	movs	r2, #4
 80016c4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80016c6:	f000 f875 	bl	80017b4 <HD44780_Display>
  HD44780_Clear();
 80016ca:	f000 f82b 	bl	8001724 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HD44780_Init+0xfc>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HD44780_Init+0xfc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f8bc 	bl	800185c <SendCommand>
  DelayUS(4500);
 80016e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80016e8:	f000 f96a 	bl	80019c0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80016ec:	490b      	ldr	r1, [pc, #44]	@ (800171c <HD44780_Init+0x100>)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f876 	bl	80017e0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80016f4:	490a      	ldr	r1, [pc, #40]	@ (8001720 <HD44780_Init+0x104>)
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 f872 	bl	80017e0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80016fc:	f000 f81d 	bl	800173a <HD44780_Home>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002fb 	.word	0x200002fb
 800170c:	200002fc 	.word	0x200002fc
 8001710:	200002f8 	.word	0x200002f8
 8001714:	200002f9 	.word	0x200002f9
 8001718:	200002fa 	.word	0x200002fa
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008

08001724 <HD44780_Clear>:

void HD44780_Clear()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001728:	2001      	movs	r0, #1
 800172a:	f000 f897 	bl	800185c <SendCommand>
  DelayUS(2000);
 800172e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001732:	f000 f945 	bl	80019c0 <DelayUS>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}

0800173a <HD44780_Home>:

void HD44780_Home()
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800173e:	2002      	movs	r0, #2
 8001740:	f000 f88c 	bl	800185c <SendCommand>
  DelayUS(2000);
 8001744:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001748:	f000 f93a 	bl	80019c0 <DelayUS>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	4613      	mov	r3, r2
 800175e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HD44780_SetCursor+0x5c>)
 8001762:	f107 0408 	add.w	r4, r7, #8
 8001766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800176c:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HD44780_SetCursor+0x60>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	79ba      	ldrb	r2, [r7, #6]
 8001772:	429a      	cmp	r2, r3
 8001774:	d303      	bcc.n	800177e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HD44780_SetCursor+0x60>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3b01      	subs	r3, #1
 800177c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	3318      	adds	r3, #24
 8001784:	443b      	add	r3, r7
 8001786:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4413      	add	r3, r2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	b25b      	sxtb	r3, r3
 8001794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f85d 	bl	800185c <SendCommand>
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	0800ffb8 	.word	0x0800ffb8
 80017b0:	200002fb 	.word	0x200002fb

080017b4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HD44780_Display+0x28>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HD44780_Display+0x28>)
 80017c4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HD44780_Display+0x28>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f843 	bl	800185c <SendCommand>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002f9 	.word	0x200002f9

080017e0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f82a 	bl	800185c <SendCommand>
  for (int i=0; i<8; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e009      	b.n	8001822 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f82e 	bl	8001878 <SendChar>
  for (int i=0; i<8; i++)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b07      	cmp	r3, #7
 8001826:	ddf2      	ble.n	800180e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800183a:	e006      	b.n	800184a <HD44780_PrintStr+0x18>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f817 	bl	8001878 <SendChar>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f4      	bne.n	800183c <HD44780_PrintStr+0xa>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f812 	bl	8001894 <Send>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2101      	movs	r1, #1
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f804 	bl	8001894 <Send>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	460a      	mov	r2, r1
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	4613      	mov	r3, r2
 80018a2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f023 030f 	bic.w	r3, r3, #15
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f80b 	bl	80018d6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80018c0:	7bba      	ldrb	r2, [r7, #14]
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f804 	bl	80018d6 <Write4Bits>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f808 	bl	80018f8 <ExpanderWrite>
  PulseEnable(value);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f820 	bl	8001930 <PulseEnable>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <ExpanderWrite+0x30>)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4313      	orrs	r3, r2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800190e:	f107 020f 	add.w	r2, r7, #15
 8001912:	230a      	movs	r3, #10
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	214e      	movs	r1, #78	@ 0x4e
 800191a:	4804      	ldr	r0, [pc, #16]	@ (800192c <ExpanderWrite+0x34>)
 800191c:	f003 f8ba 	bl	8004a94 <HAL_I2C_Master_Transmit>
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002fc 	.word	0x200002fc
 800192c:	200003d8 	.word	0x200003d8

08001930 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ffd8 	bl	80018f8 <ExpanderWrite>
  DelayUS(20);
 8001948:	2014      	movs	r0, #20
 800194a:	f000 f839 	bl	80019c0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ffce 	bl	80018f8 <ExpanderWrite>
  DelayUS(20);
 800195c:	2014      	movs	r0, #20
 800195e:	f000 f82f 	bl	80019c0 <DelayUS>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <DelayInit>:

static void DelayInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <DelayInit+0x4c>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a10      	ldr	r2, [pc, #64]	@ (80019b8 <DelayInit+0x4c>)
 8001976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800197a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800197c:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <DelayInit+0x4c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <DelayInit+0x4c>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <DelayInit+0x50>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <DelayInit+0x50>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <DelayInit+0x50>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <DelayInit+0x50>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <DelayInit+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80019a6:	bf00      	nop
  __ASM volatile ("NOP");
 80019a8:	bf00      	nop
  __ASM volatile ("NOP");
 80019aa:	bf00      	nop
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000edf0 	.word	0xe000edf0
 80019bc:	e0001000 	.word	0xe0001000

080019c0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <DelayUS+0x44>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <DelayUS+0x48>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9a      	lsrs	r2, r3, #18
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <DelayUS+0x4c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <DelayUS+0x4c>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f6      	bhi.n	80019e2 <DelayUS+0x22>
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000018 	.word	0x20000018
 8001a08:	431bde83 	.word	0x431bde83
 8001a0c:	e0001000 	.word	0xe0001000

08001a10 <Init_lcd_ar>:

void Init_lcd_ar(lcd_ar* lcd){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	//Load cursor positions
	lcd ->cur_volt[0] =15;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	74da      	strb	r2, [r3, #19]
	lcd ->cur_volt[1] =0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	751a      	strb	r2, [r3, #20]

	lcd ->cur_temp[0]=0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	755a      	strb	r2, [r3, #21]
	lcd ->cur_temp[1]=0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	759a      	strb	r2, [r3, #22]

	lcd ->cur_amp[0] =15;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	220f      	movs	r2, #15
 8001a34:	75da      	strb	r2, [r3, #23]
	lcd ->cur_amp[1] =1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	761a      	strb	r2, [r3, #24]

	lcd ->cur_speed[0]=9;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2209      	movs	r2, #9
 8001a40:	765a      	strb	r2, [r3, #25]
	lcd ->cur_speed[1]=3;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2203      	movs	r2, #3
 8001a46:	769a      	strb	r2, [r3, #26]

	lcd ->cur_erpm[0]=0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	76da      	strb	r2, [r3, #27]
	lcd ->cur_erpm[1]=3;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2203      	movs	r2, #3
 8001a52:	771a      	strb	r2, [r3, #28]

	lcd ->cur_pwm[0]=1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	775a      	strb	r2, [r3, #29]
	lcd ->cur_pwm[1]=2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	779a      	strb	r2, [r3, #30]

	//Set up Display for array mode
	//Init Volt
	HD44780_SetCursor(15,0);
 8001a60:	2100      	movs	r1, #0
 8001a62:	200f      	movs	r0, #15
 8001a64:	f7ff fe74 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("42.0V");
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <Init_lcd_ar+0xa0>)
 8001a6a:	f7ff fee2 	bl	8001832 <HD44780_PrintStr>
	//Init Temp
	HD44780_SetCursor(0,0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fe6d 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("069C");
 8001a76:	480f      	ldr	r0, [pc, #60]	@ (8001ab4 <Init_lcd_ar+0xa4>)
 8001a78:	f7ff fedb 	bl	8001832 <HD44780_PrintStr>
	//Init Current
	HD44780_SetCursor(15,1);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f7ff fe66 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("02.5A");
 8001a84:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <Init_lcd_ar+0xa8>)
 8001a86:	f7ff fed4 	bl	8001832 <HD44780_PrintStr>
	//Init Speed
	HD44780_SetCursor(9,3);
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	2009      	movs	r0, #9
 8001a8e:	f7ff fe5f 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("10KM/H");
 8001a92:	480a      	ldr	r0, [pc, #40]	@ (8001abc <Init_lcd_ar+0xac>)
 8001a94:	f7ff fecd 	bl	8001832 <HD44780_PrintStr>
	//Init ERPM
	HD44780_SetCursor(0,3);
 8001a98:	2103      	movs	r1, #3
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fe58 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("4000");
 8001aa0:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <Init_lcd_ar+0xb0>)
 8001aa2:	f7ff fec6 	bl	8001832 <HD44780_PrintStr>
	//Iinit PWM
	//HD44780_SetCursor(1,2);
	//HD44780_PrintStr("00%");
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800ffc8 	.word	0x0800ffc8
 8001ab4:	0800ffd0 	.word	0x0800ffd0
 8001ab8:	0800ffd8 	.word	0x0800ffd8
 8001abc:	0800ffe0 	.word	0x0800ffe0
 8001ac0:	0800ffe8 	.word	0x0800ffe8

08001ac4 <update_lcd_val>:

void update_lcd_val(lcd_ar* ar, float val[]){
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	//Set Voltage
	snprintf(ar->volt, 5, "%04.1f", val[0]);
 8001ace:	687c      	ldr	r4, [r7, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd37 	bl	8000548 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	e9cd 2300 	strd	r2, r3, [sp]
 8001ae2:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <update_lcd_val+0x13c>)
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f00b ff1a 	bl	800d920 <sniprintf>
	HD44780_SetCursor(ar->cur_volt[0],ar->cur_volt[1]);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7cda      	ldrb	r2, [r3, #19]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7d1b      	ldrb	r3, [r3, #20]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff fe2a 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->volt);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe97 	bl	8001832 <HD44780_PrintStr>
	//Set Current
	snprintf(ar->amp, 5, "%04.1f", val[1]);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1ddc      	adds	r4, r3, #7
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd1a 	bl	8000548 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1c:	4a38      	ldr	r2, [pc, #224]	@ (8001c00 <update_lcd_val+0x13c>)
 8001b1e:	2105      	movs	r1, #5
 8001b20:	4620      	mov	r0, r4
 8001b22:	f00b fefd 	bl	800d920 <sniprintf>
	HD44780_SetCursor(ar->cur_amp[0],ar->cur_amp[1]);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7dda      	ldrb	r2, [r3, #23]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7ff fe0d 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->amp);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3307      	adds	r3, #7
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe79 	bl	8001832 <HD44780_PrintStr>
	//Set Temp
	snprintf(ar->temp, 4, "%03.0f", val[2]);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	1d1c      	adds	r4, r3, #4
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3308      	adds	r3, #8
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcfc 	bl	8000548 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9cd 2300 	strd	r2, r3, [sp]
 8001b58:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <update_lcd_val+0x140>)
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f00b fedf 	bl	800d920 <sniprintf>
	HD44780_SetCursor(ar->cur_temp[0],ar->cur_temp[1]);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7d5a      	ldrb	r2, [r3, #21]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7d9b      	ldrb	r3, [r3, #22]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7ff fdef 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->temp);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fe5b 	bl	8001832 <HD44780_PrintStr>
	//Set Speed
	snprintf(ar->speed, 3, "%02.0f",val[3] );
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f103 040b 	add.w	r4, r3, #11
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	330c      	adds	r3, #12
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fcdd 	bl	8000548 <__aeabi_f2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	e9cd 2300 	strd	r2, r3, [sp]
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <update_lcd_val+0x144>)
 8001b98:	2103      	movs	r1, #3
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f00b fec0 	bl	800d920 <sniprintf>
	HD44780_SetCursor(ar->cur_speed[0],ar->cur_speed[1]);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7e5a      	ldrb	r2, [r3, #25]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e9b      	ldrb	r3, [r3, #26]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7ff fdd0 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->speed);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	330b      	adds	r3, #11
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fe3c 	bl	8001832 <HD44780_PrintStr>
	//Set ERPM
	snprintf(ar->erpm, 5, "%04.0f",rpm);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 040d 	add.w	r4, r3, #13
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <update_lcd_val+0x148>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcbf 	bl	8000548 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	e9cd 2300 	strd	r2, r3, [sp]
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c10 <update_lcd_val+0x14c>)
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f00b fea2 	bl	800d920 <sniprintf>
	HD44780_SetCursor(ar->cur_erpm[0],ar->cur_erpm[1]);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7eda      	ldrb	r2, [r3, #27]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7f1b      	ldrb	r3, [r3, #28]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f7ff fdb2 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->erpm);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	330d      	adds	r3, #13
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe1e 	bl	8001832 <HD44780_PrintStr>
	//Set PWm
	//snprintf(ar->pwm,3,"%02.0f",val[4] );
	//HD44780_SetCursor(ar->cur_pwm[0],ar->cur_pwm[1]);
	//HD44780_PrintStr(ar->pwm);

}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	0800fff0 	.word	0x0800fff0
 8001c04:	0800fff8 	.word	0x0800fff8
 8001c08:	08010000 	.word	0x08010000
 8001c0c:	20000554 	.word	0x20000554
 8001c10:	08010008 	.word	0x08010008

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	//init button array
	but[0]=1;
 8001c18:	4b5a      	ldr	r3, [pc, #360]	@ (8001d84 <main+0x170>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	801a      	strh	r2, [r3, #0]
	but[1]=1;
 8001c1e:	4b59      	ldr	r3, [pc, #356]	@ (8001d84 <main+0x170>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	805a      	strh	r2, [r3, #2]
	but[2]=1;
 8001c24:	4b57      	ldr	r3, [pc, #348]	@ (8001d84 <main+0x170>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	809a      	strh	r2, [r3, #4]
	but[3]=1;
 8001c2a:	4b56      	ldr	r3, [pc, #344]	@ (8001d84 <main+0x170>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f001 fc7a 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f8c0 	bl	8001db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f000 fc1a 	bl	8002470 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c3c:	f000 f928 	bl	8001e90 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c40:	f000 f978 	bl	8001f34 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c44:	f000 f9c8 	bl	8001fd8 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001c48:	f000 fa34 	bl	80020b4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001c4c:	f000 fb64 	bl	8002318 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001c50:	f000 fbe4 	bl	800241c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001c54:	f00a fc56 	bl	800c504 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001c58:	f000 fa5a 	bl	8002110 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c5c:	f000 fb10 	bl	8002280 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Start 100ms AUX Timer
   */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001c60:	4849      	ldr	r0, [pc, #292]	@ (8001d88 <main+0x174>)
 8001c62:	f005 f9ab 	bl	8006fbc <HAL_TIM_Base_Start_IT>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <main+0x5c>
  {
    /* Starting Error */
    Error_Handler();
 8001c6c:	f001 f84a 	bl	8002d04 <Error_Handler>
  }

  //Close Relay
  HAL_GPIO_WritePin(GPIOB,PB5_DO_DC_ON_Pin,GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2120      	movs	r1, #32
 8001c74:	4845      	ldr	r0, [pc, #276]	@ (8001d8c <main+0x178>)
 8001c76:	f002 fd7d 	bl	8004774 <HAL_GPIO_WritePin>
  //Init Blinker
  TIM3->CCR1 = 250;
 8001c7a:	4b45      	ldr	r3, [pc, #276]	@ (8001d90 <main+0x17c>)
 8001c7c:	22fa      	movs	r2, #250	@ 0xfa
 8001c7e:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c80:	2100      	movs	r1, #0
 8001c82:	4844      	ldr	r0, [pc, #272]	@ (8001d94 <main+0x180>)
 8001c84:	f005 fa64 	bl	8007150 <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 250;
 8001c88:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <main+0x17c>)
 8001c8a:	22fa      	movs	r2, #250	@ 0xfa
 8001c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4840      	ldr	r0, [pc, #256]	@ (8001d94 <main+0x180>)
 8001c92:	f005 fa5d 	bl	8007150 <HAL_TIM_PWM_Start>

   HD44780_Init(4);
 8001c96:	2004      	movs	r0, #4
 8001c98:	f7ff fcc0 	bl	800161c <HD44780_Init>
   HD44780_Clear();
 8001c9c:	f7ff fd42 	bl	8001724 <HD44780_Clear>

   HD44780_SetCursor(6,0);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2006      	movs	r0, #6
 8001ca4:	f7ff fd54 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("Init...");
 8001ca8:	483b      	ldr	r0, [pc, #236]	@ (8001d98 <main+0x184>)
 8001caa:	f7ff fdc2 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(500);
 8001cae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cb2:	f001 fcab 	bl	800360c <HAL_Delay>

   HD44780_SetCursor(5,1);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	2005      	movs	r0, #5
 8001cba:	f7ff fd49 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("BLDC DRIVE");
 8001cbe:	4837      	ldr	r0, [pc, #220]	@ (8001d9c <main+0x188>)
 8001cc0:	f7ff fdb7 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(500);
 8001cc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cc8:	f001 fca0 	bl	800360c <HAL_Delay>

   HD44780_SetCursor(8,2);
 8001ccc:	2102      	movs	r1, #2
 8001cce:	2008      	movs	r0, #8
 8001cd0:	f7ff fd3e 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("By:");
 8001cd4:	4832      	ldr	r0, [pc, #200]	@ (8001da0 <main+0x18c>)
 8001cd6:	f7ff fdac 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(500);
 8001cda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cde:	f001 fc95 	bl	800360c <HAL_Delay>

   HD44780_SetCursor(5,3);
 8001ce2:	2103      	movs	r1, #3
 8001ce4:	2005      	movs	r0, #5
 8001ce6:	f7ff fd33 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("LEON REEH");
 8001cea:	482e      	ldr	r0, [pc, #184]	@ (8001da4 <main+0x190>)
 8001cec:	f7ff fda1 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(1000);
 8001cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cf4:	f001 fc8a 	bl	800360c <HAL_Delay>
   HD44780_Clear();
 8001cf8:	f7ff fd14 	bl	8001724 <HD44780_Clear>

   Init_lcd_ar(&lcd_val);
 8001cfc:	482a      	ldr	r0, [pc, #168]	@ (8001da8 <main+0x194>)
 8001cfe:	f7ff fe87 	bl	8001a10 <Init_lcd_ar>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Read inputs
	  readADCs();
 8001d02:	f000 fce7 	bl	80026d4 <readADCs>
	  readDI();
 8001d06:	f000 fdcd 	bl	80028a4 <readDI>
	  doADCs();
 8001d0a:	f000 fd41 	bl	8002790 <doADCs>
	  /* STATE MACHINE */
	  switch(STATE){
 8001d0e:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <main+0x198>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d822      	bhi.n	8001d5c <main+0x148>
 8001d16:	a201      	add	r2, pc, #4	@ (adr r2, 8001d1c <main+0x108>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001d39 	.word	0x08001d39
 8001d20:	08001d3f 	.word	0x08001d3f
 8001d24:	08001d45 	.word	0x08001d45
 8001d28:	08001d4b 	.word	0x08001d4b
 8001d2c:	08001d51 	.word	0x08001d51
 8001d30:	08001d5d 	.word	0x08001d5d
 8001d34:	08001d57 	.word	0x08001d57

	  	  case READY:
	  		  ready();
 8001d38:	f000 fe3a 	bl	80029b0 <ready>
	  		  break;
 8001d3c:	e011      	b.n	8001d62 <main+0x14e>

	  	  case DRIVE:
	  		  drive();
 8001d3e:	f000 fe85 	bl	8002a4c <drive>
	  		  break;
 8001d42:	e00e      	b.n	8001d62 <main+0x14e>

	  	  case BREAK:
	  		  breaking();
 8001d44:	f000 feae 	bl	8002aa4 <breaking>
	  		  break;
 8001d48:	e00b      	b.n	8001d62 <main+0x14e>

	  	  case SWFAULT:
	  		  swfault();
 8001d4a:	f000 fee1 	bl	8002b10 <swfault>
	  		  break;
 8001d4e:	e008      	b.n	8001d62 <main+0x14e>

	  	  case HWFAULT:
	  		  hwfault();
 8001d50:	f000 ff2a 	bl	8002ba8 <hwfault>
	  		  break;
 8001d54:	e005      	b.n	8001d62 <main+0x14e>

	  	  case DEBUGST:
	  		  debug();
 8001d56:	f000 ff51 	bl	8002bfc <debug>
	  		  break;
 8001d5a:	e002      	b.n	8001d62 <main+0x14e>

	  	  default:
	  		  hwfault();
 8001d5c:	f000 ff24 	bl	8002ba8 <hwfault>
	  		  break;
 8001d60:	bf00      	nop

	  	  }
	  //set outputs
	  setDO();
 8001d62:	f000 fde9 	bl	8002938 <setDO>
	  //Update LCD every 500ms
	  if(timcc>=5){
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <main+0x19c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	dd06      	ble.n	8001d7c <main+0x168>
		  update_lcd_val(&lcd_val,ADC_VAL);
 8001d6e:	4911      	ldr	r1, [pc, #68]	@ (8001db4 <main+0x1a0>)
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <main+0x194>)
 8001d72:	f7ff fea7 	bl	8001ac4 <update_lcd_val>
		  timcc =0;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <main+0x19c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(100);
 8001d7c:	2064      	movs	r0, #100	@ 0x64
 8001d7e:	f001 fc45 	bl	800360c <HAL_Delay>
	  readADCs();
 8001d82:	e7be      	b.n	8001d02 <main+0xee>
 8001d84:	2000056c 	.word	0x2000056c
 8001d88:	20000474 	.word	0x20000474
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40000400 	.word	0x40000400
 8001d94:	200004bc 	.word	0x200004bc
 8001d98:	08010010 	.word	0x08010010
 8001d9c:	08010018 	.word	0x08010018
 8001da0:	08010024 	.word	0x08010024
 8001da4:	08010028 	.word	0x08010028
 8001da8:	20000574 	.word	0x20000574
 8001dac:	20000010 	.word	0x20000010
 8001db0:	20000594 	.word	0x20000594
 8001db4:	2000055c 	.word	0x2000055c

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b094      	sub	sp, #80	@ 0x50
 8001dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbe:	f107 0320 	add.w	r3, r7, #32
 8001dc2:	2230      	movs	r2, #48	@ 0x30
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00b fe21 	bl	800da0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <SystemClock_Config+0xd0>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <SystemClock_Config+0xd0>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dec:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <SystemClock_Config+0xd0>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <SystemClock_Config+0xd4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a22      	ldr	r2, [pc, #136]	@ (8001e8c <SystemClock_Config+0xd4>)
 8001e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <SystemClock_Config+0xd4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e14:	2303      	movs	r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e22:	2310      	movs	r3, #16
 8001e24:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e26:	2302      	movs	r3, #2
 8001e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e30:	2304      	movs	r3, #4
 8001e32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e34:	2348      	movs	r3, #72	@ 0x48
 8001e36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fbd1 	bl	80065ec <HAL_RCC_OscConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e50:	f000 ff58 	bl	8002d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e54:	230f      	movs	r3, #15
 8001e56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fe34 	bl	8006adc <HAL_RCC_ClockConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e7a:	f000 ff43 	bl	8002d04 <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3750      	adds	r7, #80	@ 0x50
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e96:	463b      	mov	r3, r7
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001ea4:	4a21      	ldr	r2, [pc, #132]	@ (8001f2c <MX_ADC1_Init+0x9c>)
 8001ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001ed0:	4a17      	ldr	r2, [pc, #92]	@ (8001f30 <MX_ADC1_Init+0xa0>)
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eee:	480e      	ldr	r0, [pc, #56]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001ef0:	f001 fbb0 	bl	8003654 <HAL_ADC_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001efa:	f000 ff03 	bl	8002d04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001efe:	2305      	movs	r3, #5
 8001f00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <MX_ADC1_Init+0x98>)
 8001f10:	f001 feb0 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f1a:	f000 fef3 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000300 	.word	0x20000300
 8001f2c:	40012000 	.word	0x40012000
 8001f30:	0f000001 	.word	0x0f000001

08001f34 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001f46:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f48:	4a21      	ldr	r2, [pc, #132]	@ (8001fd0 <MX_ADC2_Init+0x9c>)
 8001f4a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f72:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f74:	4a17      	ldr	r2, [pc, #92]	@ (8001fd4 <MX_ADC2_Init+0xa0>)
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f92:	480e      	ldr	r0, [pc, #56]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001f94:	f001 fb5e 	bl	8003654 <HAL_ADC_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001f9e:	f000 feb1 	bl	8002d04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	@ (8001fcc <MX_ADC2_Init+0x98>)
 8001fb4:	f001 fe5e 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001fbe:	f000 fea1 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000348 	.word	0x20000348
 8001fd0:	40012100 	.word	0x40012100
 8001fd4:	0f000001 	.word	0x0f000001

08001fd8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fde:	463b      	mov	r3, r7
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001fea:	4b2f      	ldr	r3, [pc, #188]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8001fec:	4a2f      	ldr	r2, [pc, #188]	@ (80020ac <MX_ADC3_Init+0xd4>)
 8001fee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8001ffe:	2204      	movs	r2, #4
 8002000:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002002:	4b29      	ldr	r3, [pc, #164]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002004:	2204      	movs	r2, #4
 8002006:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002008:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002010:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002012:	2200      	movs	r2, #0
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002018:	4a25      	ldr	r2, [pc, #148]	@ (80020b0 <MX_ADC3_Init+0xd8>)
 800201a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800201c:	4b22      	ldr	r3, [pc, #136]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002024:	2203      	movs	r2, #3
 8002026:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002028:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002032:	2201      	movs	r2, #1
 8002034:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002036:	481c      	ldr	r0, [pc, #112]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002038:	f001 fb0c 	bl	8003654 <HAL_ADC_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002042:	f000 fe5f 	bl	8002d04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002046:	2301      	movs	r3, #1
 8002048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800204e:	2302      	movs	r3, #2
 8002050:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002052:	463b      	mov	r3, r7
 8002054:	4619      	mov	r1, r3
 8002056:	4814      	ldr	r0, [pc, #80]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002058:	f001 fe0c 	bl	8003c74 <HAL_ADC_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002062:	f000 fe4f 	bl	8002d04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800206a:	2302      	movs	r3, #2
 800206c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	4619      	mov	r1, r3
 8002072:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002074:	f001 fdfe 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 800207e:	f000 fe41 	bl	8002d04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002082:	230d      	movs	r3, #13
 8002084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002086:	2303      	movs	r3, #3
 8002088:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800208a:	463b      	mov	r3, r7
 800208c:	4619      	mov	r1, r3
 800208e:	4806      	ldr	r0, [pc, #24]	@ (80020a8 <MX_ADC3_Init+0xd0>)
 8002090:	f001 fdf0 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 800209a:	f000 fe33 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000390 	.word	0x20000390
 80020ac:	40012200 	.word	0x40012200
 80020b0:	0f000001 	.word	0x0f000001

080020b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020ba:	4a13      	ldr	r2, [pc, #76]	@ (8002108 <MX_I2C1_Init+0x54>)
 80020bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020c0:	4a12      	ldr	r2, [pc, #72]	@ (800210c <MX_I2C1_Init+0x58>)
 80020c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e4:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f0:	4804      	ldr	r0, [pc, #16]	@ (8002104 <MX_I2C1_Init+0x50>)
 80020f2:	f002 fb8b 	bl	800480c <HAL_I2C_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020fc:	f000 fe02 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200003d8 	.word	0x200003d8
 8002108:	40005400 	.word	0x40005400
 800210c:	000186a0 	.word	0x000186a0

08002110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b096      	sub	sp, #88	@ 0x58
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800212e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	615a      	str	r2, [r3, #20]
 8002140:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2220      	movs	r2, #32
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f00b fc60 	bl	800da0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800214e:	4b4a      	ldr	r3, [pc, #296]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002150:	4a4a      	ldr	r2, [pc, #296]	@ (800227c <MX_TIM1_Init+0x16c>)
 8002152:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8002154:	4b48      	ldr	r3, [pc, #288]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002156:	220f      	movs	r2, #15
 8002158:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <MX_TIM1_Init+0x168>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002160:	4b45      	ldr	r3, [pc, #276]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002162:	2263      	movs	r2, #99	@ 0x63
 8002164:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b44      	ldr	r3, [pc, #272]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800216c:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <MX_TIM1_Init+0x168>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002172:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002178:	483f      	ldr	r0, [pc, #252]	@ (8002278 <MX_TIM1_Init+0x168>)
 800217a:	f004 fecf 	bl	8006f1c <HAL_TIM_Base_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002184:	f000 fdbe 	bl	8002d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800218e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002192:	4619      	mov	r1, r3
 8002194:	4838      	ldr	r0, [pc, #224]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002196:	f005 fac5 	bl	8007724 <HAL_TIM_ConfigClockSource>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80021a0:	f000 fdb0 	bl	8002d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021a4:	4834      	ldr	r0, [pc, #208]	@ (8002278 <MX_TIM1_Init+0x168>)
 80021a6:	f004 ff79 	bl	800709c <HAL_TIM_PWM_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80021b0:	f000 fda8 	bl	8002d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021c0:	4619      	mov	r1, r3
 80021c2:	482d      	ldr	r0, [pc, #180]	@ (8002278 <MX_TIM1_Init+0x168>)
 80021c4:	f005 fec4 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80021ce:	f000 fd99 	bl	8002d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d2:	2360      	movs	r3, #96	@ 0x60
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021de:	2300      	movs	r3, #0
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f2:	2200      	movs	r2, #0
 80021f4:	4619      	mov	r1, r3
 80021f6:	4820      	ldr	r0, [pc, #128]	@ (8002278 <MX_TIM1_Init+0x168>)
 80021f8:	f005 f9d2 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002202:	f000 fd7f 	bl	8002d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220a:	2204      	movs	r2, #4
 800220c:	4619      	mov	r1, r3
 800220e:	481a      	ldr	r0, [pc, #104]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002210:	f005 f9c6 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800221a:	f000 fd73 	bl	8002d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800221e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002222:	2208      	movs	r2, #8
 8002224:	4619      	mov	r1, r3
 8002226:	4814      	ldr	r0, [pc, #80]	@ (8002278 <MX_TIM1_Init+0x168>)
 8002228:	f005 f9ba 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002232:	f000 fd67 	bl	8002d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800224a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800224e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	4619      	mov	r1, r3
 8002258:	4807      	ldr	r0, [pc, #28]	@ (8002278 <MX_TIM1_Init+0x168>)
 800225a:	f005 fef5 	bl	8008048 <HAL_TIMEx_ConfigBreakDeadTime>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002264:	f000 fd4e 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002268:	4803      	ldr	r0, [pc, #12]	@ (8002278 <MX_TIM1_Init+0x168>)
 800226a:	f000 feeb 	bl	8003044 <HAL_TIM_MspPostInit>

}
 800226e:	bf00      	nop
 8002270:	3758      	adds	r7, #88	@ 0x58
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000042c 	.word	0x2000042c
 800227c:	40010000 	.word	0x40010000

08002280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <MX_TIM2_Init+0x94>)
 800229e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022a6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80022aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80022b2:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022b4:	2263      	movs	r2, #99	@ 0x63
 80022b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022c4:	4813      	ldr	r0, [pc, #76]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c6:	f004 fe29 	bl	8006f1c <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022d0:	f000 fd18 	bl	8002d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022e2:	f005 fa1f 	bl	8007724 <HAL_TIM_ConfigClockSource>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022ec:	f000 fd0a 	bl	8002d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022fe:	f005 fe27 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002308:	f000 fcfc 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000474 	.word	0x20000474

08002318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	@ 0x38
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002348:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <MX_TIM3_Init+0xfc>)
 800234a:	4a33      	ldr	r2, [pc, #204]	@ (8002418 <MX_TIM3_Init+0x100>)
 800234c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 800234e:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <MX_TIM3_Init+0xfc>)
 8002350:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002356:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <MX_TIM3_Init+0xfc>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800235c:	4b2d      	ldr	r3, [pc, #180]	@ (8002414 <MX_TIM3_Init+0xfc>)
 800235e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <MX_TIM3_Init+0xfc>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <MX_TIM3_Init+0xfc>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002370:	4828      	ldr	r0, [pc, #160]	@ (8002414 <MX_TIM3_Init+0xfc>)
 8002372:	f004 fdd3 	bl	8006f1c <HAL_TIM_Base_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800237c:	f000 fcc2 	bl	8002d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002386:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800238a:	4619      	mov	r1, r3
 800238c:	4821      	ldr	r0, [pc, #132]	@ (8002414 <MX_TIM3_Init+0xfc>)
 800238e:	f005 f9c9 	bl	8007724 <HAL_TIM_ConfigClockSource>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002398:	f000 fcb4 	bl	8002d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800239c:	481d      	ldr	r0, [pc, #116]	@ (8002414 <MX_TIM3_Init+0xfc>)
 800239e:	f004 fe7d 	bl	800709c <HAL_TIM_PWM_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80023a8:	f000 fcac 	bl	8002d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023b4:	f107 0320 	add.w	r3, r7, #32
 80023b8:	4619      	mov	r1, r3
 80023ba:	4816      	ldr	r0, [pc, #88]	@ (8002414 <MX_TIM3_Init+0xfc>)
 80023bc:	f005 fdc8 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80023c6:	f000 fc9d 	bl	8002d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ca:	2360      	movs	r3, #96	@ 0x60
 80023cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2200      	movs	r2, #0
 80023de:	4619      	mov	r1, r3
 80023e0:	480c      	ldr	r0, [pc, #48]	@ (8002414 <MX_TIM3_Init+0xfc>)
 80023e2:	f005 f8dd 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80023ec:	f000 fc8a 	bl	8002d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2204      	movs	r2, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4807      	ldr	r0, [pc, #28]	@ (8002414 <MX_TIM3_Init+0xfc>)
 80023f8:	f005 f8d2 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002402:	f000 fc7f 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002406:	4803      	ldr	r0, [pc, #12]	@ (8002414 <MX_TIM3_Init+0xfc>)
 8002408:	f000 fe1c 	bl	8003044 <HAL_TIM_MspPostInit>

}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	@ 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200004bc 	.word	0x200004bc
 8002418:	40000400 	.word	0x40000400

0800241c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 8002422:	4a12      	ldr	r2, [pc, #72]	@ (800246c <MX_USART2_UART_Init+0x50>)
 8002424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 8002428:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800242c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	@ (8002468 <MX_USART2_UART_Init+0x4c>)
 8002454:	f005 fe5e 	bl	8008114 <HAL_UART_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800245e:	f000 fc51 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000504 	.word	0x20000504
 800246c:	40004400 	.word	0x40004400

08002470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b4a      	ldr	r3, [pc, #296]	@ (80025b4 <MX_GPIO_Init+0x144>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4a49      	ldr	r2, [pc, #292]	@ (80025b4 <MX_GPIO_Init+0x144>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6313      	str	r3, [r2, #48]	@ 0x30
 8002496:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <MX_GPIO_Init+0x144>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b43      	ldr	r3, [pc, #268]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	4a42      	ldr	r2, [pc, #264]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b2:	4b40      	ldr	r3, [pc, #256]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b3c      	ldr	r3, [pc, #240]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a3b      	ldr	r2, [pc, #236]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b39      	ldr	r3, [pc, #228]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a34      	ldr	r2, [pc, #208]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b32      	ldr	r3, [pc, #200]	@ (80025b4 <MX_GPIO_Init+0x144>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB1_LED_RED_Pin|PB0_LED_GREEN_Pin|PB13_U_Pin|PB14_V_Pin
 80024f6:	2200      	movs	r2, #0
 80024f8:	f24e 110b 	movw	r1, #57611	@ 0xe10b
 80024fc:	482e      	ldr	r0, [pc, #184]	@ (80025b8 <MX_GPIO_Init+0x148>)
 80024fe:	f002 f939 	bl	8004774 <HAL_GPIO_WritePin>
                          |PB15_W_Pin|PB3_DO_LIGHT_Pin|PB8_DO_FAN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_DO_DC_ON_GPIO_Port, PB5_DO_DC_ON_Pin, GPIO_PIN_SET);
 8002502:	2201      	movs	r2, #1
 8002504:	2120      	movs	r1, #32
 8002506:	482c      	ldr	r0, [pc, #176]	@ (80025b8 <MX_GPIO_Init+0x148>)
 8002508:	f002 f934 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_DI_AUX_Pin PC10_DI_LIGHT_Pin PC11_DI_BLINKER_L_Pin PC12_DI_BLINKER_R_Pin */
  GPIO_InitStruct.Pin = PC13_DI_AUX_Pin|PC10_DI_LIGHT_Pin|PC11_DI_BLINKER_L_Pin|PC12_DI_BLINKER_R_Pin;
 800250c:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	4826      	ldr	r0, [pc, #152]	@ (80025bc <MX_GPIO_Init+0x14c>)
 8002522:	f001 ff73 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI5_Break_Pin EXTI6_HALL_U_Pin EXTI7_HALL_V_Pin EXTI8_HALL_W_Pin */
  GPIO_InitStruct.Pin = EXTI5_Break_Pin|EXTI6_HALL_U_Pin|EXTI7_HALL_V_Pin|EXTI8_HALL_W_Pin;
 8002526:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800252c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	481f      	ldr	r0, [pc, #124]	@ (80025bc <MX_GPIO_Init+0x14c>)
 800253e:	f001 ff65 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_LED_RED_Pin PB0_LED_GREEN_Pin PB3_DO_LIGHT_Pin PB5_DO_DC_ON_Pin
                           PB8_DO_FAN_Pin */
  GPIO_InitStruct.Pin = PB1_LED_RED_Pin|PB0_LED_GREEN_Pin|PB3_DO_LIGHT_Pin|PB5_DO_DC_ON_Pin
 8002542:	f240 132b 	movw	r3, #299	@ 0x12b
 8002546:	617b      	str	r3, [r7, #20]
                          |PB8_DO_FAN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002548:	2311      	movs	r3, #17
 800254a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254c:	2301      	movs	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4817      	ldr	r0, [pc, #92]	@ (80025b8 <MX_GPIO_Init+0x148>)
 800255c:	f001 ff56 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13_U_Pin PB14_V_Pin PB15_W_Pin */
  GPIO_InitStruct.Pin = PB13_U_Pin|PB14_V_Pin|PB15_W_Pin;
 8002560:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	2301      	movs	r3, #1
 8002568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	480f      	ldr	r0, [pc, #60]	@ (80025b8 <MX_GPIO_Init+0x148>)
 800257a:	f001 ff47 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI9_FAULT_Pin */
  GPIO_InitStruct.Pin = EXTI9_FAULT_Pin;
 800257e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002584:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI9_FAULT_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4809      	ldr	r0, [pc, #36]	@ (80025bc <MX_GPIO_Init+0x14c>)
 8002596:	f001 ff39 	bl	800440c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2017      	movs	r0, #23
 80025a0:	f001 fe6b 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025a4:	2017      	movs	r0, #23
 80025a6:	f001 fe84 	bl	80042b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	@ 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020400 	.word	0x40020400
 80025bc:	40020800 	.word	0x40020800

080025c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//Interrupt Pin Function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
	//Break Signal Interrupt
	if(GPIO_Pin == EXTI5_Break_Pin){
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d129      	bne.n	8002624 <HAL_GPIO_EXTI_Callback+0x64>
		uint16_t b =(GPIOC->IDR & GPIO_IDR_ID5)? 0x0001 : 0x0000;
 80025d0:	4b3a      	ldr	r3, [pc, #232]	@ (80026bc <HAL_GPIO_EXTI_Callback+0xfc>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	82fb      	strh	r3, [r7, #22]
		if(b==0){
 80025e4:	8afb      	ldrh	r3, [r7, #22]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_GPIO_EXTI_Callback+0x44>
			STATE = BREAK;
 80025ea:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x100>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port,PB0_LED_GREEN_Pin,GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2102      	movs	r1, #2
 80025f4:	4833      	ldr	r0, [pc, #204]	@ (80026c4 <HAL_GPIO_EXTI_Callback+0x104>)
 80025f6:	f002 f8bd 	bl	8004774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port,PB1_LED_RED_Pin,GPIO_PIN_SET);
 80025fa:	2201      	movs	r2, #1
 80025fc:	2101      	movs	r1, #1
 80025fe:	4831      	ldr	r0, [pc, #196]	@ (80026c4 <HAL_GPIO_EXTI_Callback+0x104>)
 8002600:	f002 f8b8 	bl	8004774 <HAL_GPIO_WritePin>

		}
		if(b==1){
 8002604:	8afb      	ldrh	r3, [r7, #22]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d10c      	bne.n	8002624 <HAL_GPIO_EXTI_Callback+0x64>
			STATE = READY;
 800260a:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x100>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
	  		HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port,PB0_LED_GREEN_Pin,GPIO_PIN_SET);
 8002610:	2201      	movs	r2, #1
 8002612:	2102      	movs	r1, #2
 8002614:	482b      	ldr	r0, [pc, #172]	@ (80026c4 <HAL_GPIO_EXTI_Callback+0x104>)
 8002616:	f002 f8ad 	bl	8004774 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port,PB1_LED_RED_Pin,GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	2101      	movs	r1, #1
 800261e:	4829      	ldr	r0, [pc, #164]	@ (80026c4 <HAL_GPIO_EXTI_Callback+0x104>)
 8002620:	f002 f8a8 	bl	8004774 <HAL_GPIO_WritePin>
	if(GPIO_Pin == EXTI9_FAULT_Pin){
		//STATE = HWFAULT;
		//readADCs();
	}
	//Hall Sensor Interrupt
	if(STATE == DRIVE || STATE == READY){
 8002624:	4b26      	ldr	r3, [pc, #152]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x100>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_EXTI_Callback+0x74>
 800262c:	4b24      	ldr	r3, [pc, #144]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x100>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d13c      	bne.n	80026ae <HAL_GPIO_EXTI_Callback+0xee>
		if(GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin){
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	2b40      	cmp	r3, #64	@ 0x40
 8002638:	d006      	beq.n	8002648 <HAL_GPIO_EXTI_Callback+0x88>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b80      	cmp	r3, #128	@ 0x80
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_EXTI_Callback+0x88>
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002646:	d134      	bne.n	80026b2 <HAL_GPIO_EXTI_Callback+0xf2>

			hallCC++;
 8002648:	4b1f      	ldr	r3, [pc, #124]	@ (80026c8 <HAL_GPIO_EXTI_Callback+0x108>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <HAL_GPIO_EXTI_Callback+0x108>)
 8002650:	6013      	str	r3, [r2, #0]
			uint16_t hall[3];
			hall[0]= (GPIOC->IDR & GPIO_IDR_ID6)? 0x0001 : 0x0000; // Sensor A
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_GPIO_EXTI_Callback+0xfc>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	81bb      	strh	r3, [r7, #12]
			hall[1]= (GPIOC->IDR & GPIO_IDR_ID7)? 0x0001 : 0x0000; // Sensor B
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <HAL_GPIO_EXTI_Callback+0xfc>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	81fb      	strh	r3, [r7, #14]
			hall[2]= (GPIOC->IDR & GPIO_IDR_ID8)? 0x0001 : 0x0000; // Sensor C
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_GPIO_EXTI_Callback+0xfc>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	823b      	strh	r3, [r7, #16]
			 * uint16_t phaseAngle = electricalAngle(commutatorStep);
			 * FOCcommutator(phaseAngle,duty);
			 */

			//trapazoidal control
			  uint16_t commutatorStep= hallState(hall);
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc50 	bl	8000f38 <hallState>
 8002698:	4603      	mov	r3, r0
 800269a:	82bb      	strh	r3, [r7, #20]
			  commutator(commutatorStep, duty,dir);
 800269c:	8abb      	ldrh	r3, [r7, #20]
 800269e:	4a0b      	ldr	r2, [pc, #44]	@ (80026cc <HAL_GPIO_EXTI_Callback+0x10c>)
 80026a0:	6811      	ldr	r1, [r2, #0]
 80026a2:	4a0b      	ldr	r2, [pc, #44]	@ (80026d0 <HAL_GPIO_EXTI_Callback+0x110>)
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fcba 	bl	8001020 <commutator>
		if(GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin){
 80026ac:	e001      	b.n	80026b2 <HAL_GPIO_EXTI_Callback+0xf2>

		}
	}
	else {
      __NOP();
 80026ae:	bf00      	nop
	}
}
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_EXTI_Callback+0xf4>
		if(GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin){
 80026b2:	bf00      	nop
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40020800 	.word	0x40020800
 80026c0:	20000010 	.word	0x20000010
 80026c4:	40020400 	.word	0x40020400
 80026c8:	20000550 	.word	0x20000550
 80026cc:	2000054c 	.word	0x2000054c
 80026d0:	20000014 	.word	0x20000014

080026d4 <readADCs>:
/* Input Functions*/
//Analog Input
void readADCs(){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
	uint16_t x =0;
 80026da:	2300      	movs	r3, #0
 80026dc:	80fb      	strh	r3, [r7, #6]

	//READ Voltage
	ADC3_Select_CH(0);
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 fac2 	bl	8002c68 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 80026e4:	4828      	ldr	r0, [pc, #160]	@ (8002788 <readADCs+0xb4>)
 80026e6:	f000 fff9 	bl	80036dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 20);
 80026ea:	2114      	movs	r1, #20
 80026ec:	4826      	ldr	r0, [pc, #152]	@ (8002788 <readADCs+0xb4>)
 80026ee:	f001 f8fa 	bl	80038e6 <HAL_ADC_PollForConversion>
	x =HAL_ADC_GetValue(&hadc3);
 80026f2:	4825      	ldr	r0, [pc, #148]	@ (8002788 <readADCs+0xb4>)
 80026f4:	f001 fa92 	bl	8003c1c <HAL_ADC_GetValue>
 80026f8:	4603      	mov	r3, r0
 80026fa:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 80026fc:	4822      	ldr	r0, [pc, #136]	@ (8002788 <readADCs+0xb4>)
 80026fe:	f001 f8bf 	bl	8003880 <HAL_ADC_Stop>
	ADC_VAL[0] = adc_volt(x);
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fdeb 	bl	80012e0 <adc_volt>
 800270a:	eef0 7a40 	vmov.f32	s15, s0
 800270e:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <readADCs+0xb8>)
 8002710:	edc3 7a00 	vstr	s15, [r3]

	//READ Current
	ADC3_Select_CH(1);
 8002714:	2001      	movs	r0, #1
 8002716:	f000 faa7 	bl	8002c68 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 800271a:	481b      	ldr	r0, [pc, #108]	@ (8002788 <readADCs+0xb4>)
 800271c:	f000 ffde 	bl	80036dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 20);
 8002720:	2114      	movs	r1, #20
 8002722:	4819      	ldr	r0, [pc, #100]	@ (8002788 <readADCs+0xb4>)
 8002724:	f001 f8df 	bl	80038e6 <HAL_ADC_PollForConversion>
	x =HAL_ADC_GetValue(&hadc3);
 8002728:	4817      	ldr	r0, [pc, #92]	@ (8002788 <readADCs+0xb4>)
 800272a:	f001 fa77 	bl	8003c1c <HAL_ADC_GetValue>
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 8002732:	4815      	ldr	r0, [pc, #84]	@ (8002788 <readADCs+0xb4>)
 8002734:	f001 f8a4 	bl	8003880 <HAL_ADC_Stop>
	ADC_VAL[1] = adc_cur(x);
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fe20 	bl	8001380 <adc_cur>
 8002740:	eef0 7a40 	vmov.f32	s15, s0
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <readADCs+0xb8>)
 8002746:	edc3 7a01 	vstr	s15, [r3, #4]

	//READ Temperature
	ADC3_Select_CH(2);
 800274a:	2002      	movs	r0, #2
 800274c:	f000 fa8c 	bl	8002c68 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 8002750:	480d      	ldr	r0, [pc, #52]	@ (8002788 <readADCs+0xb4>)
 8002752:	f000 ffc3 	bl	80036dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 20);
 8002756:	2114      	movs	r1, #20
 8002758:	480b      	ldr	r0, [pc, #44]	@ (8002788 <readADCs+0xb4>)
 800275a:	f001 f8c4 	bl	80038e6 <HAL_ADC_PollForConversion>
	x =HAL_ADC_GetValue(&hadc3);
 800275e:	480a      	ldr	r0, [pc, #40]	@ (8002788 <readADCs+0xb4>)
 8002760:	f001 fa5c 	bl	8003c1c <HAL_ADC_GetValue>
 8002764:	4603      	mov	r3, r0
 8002766:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 8002768:	4807      	ldr	r0, [pc, #28]	@ (8002788 <readADCs+0xb4>)
 800276a:	f001 f889 	bl	8003880 <HAL_ADC_Stop>
	ADC_VAL[2] = adc_temp(x);
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fe65 	bl	8001440 <adc_temp>
 8002776:	eef0 7a40 	vmov.f32	s15, s0
 800277a:	4b04      	ldr	r3, [pc, #16]	@ (800278c <readADCs+0xb8>)
 800277c:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000390 	.word	0x20000390
 800278c:	2000055c 	.word	0x2000055c

08002790 <doADCs>:

void doADCs(){
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0

	//FAN ON
	if(ADC_VAL[2]>=Temp_FAN_ON){
 8002794:	4b39      	ldr	r3, [pc, #228]	@ (800287c <doADCs+0xec>)
 8002796:	edd3 7a02 	vldr	s15, [r3, #8]
 800279a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002880 <doADCs+0xf0>
 800279e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	db06      	blt.n	80027b6 <doADCs+0x26>
		HAL_GPIO_WritePin(GPIOB,PB8_DO_FAN_Pin,GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027ae:	4835      	ldr	r0, [pc, #212]	@ (8002884 <doADCs+0xf4>)
 80027b0:	f001 ffe0 	bl	8004774 <HAL_GPIO_WritePin>
 80027b4:	e00f      	b.n	80027d6 <doADCs+0x46>
	}
	//FAN OFF
	else if(ADC_VAL[2]<=Temp_FAN_OFF){
 80027b6:	4b31      	ldr	r3, [pc, #196]	@ (800287c <doADCs+0xec>)
 80027b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027bc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80027c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d805      	bhi.n	80027d6 <doADCs+0x46>
		HAL_GPIO_WritePin(GPIOB,PB8_DO_FAN_Pin,GPIO_PIN_SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027d0:	482c      	ldr	r0, [pc, #176]	@ (8002884 <doADCs+0xf4>)
 80027d2:	f001 ffcf 	bl	8004774 <HAL_GPIO_WritePin>
	}


	//ADC SOFTWAR FAULT
	//Over Voltage
	if(ADC_VAL[0]>=SW_OV){
 80027d6:	4b29      	ldr	r3, [pc, #164]	@ (800287c <doADCs+0xec>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002888 <doADCs+0xf8>
 80027e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	db09      	blt.n	80027fe <doADCs+0x6e>
		STATE = SWFAULT;
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <doADCs+0xfc>)
 80027ec:	2203      	movs	r2, #3
 80027ee:	601a      	str	r2, [r3, #0]
		HD44780_SetCursor(0,1);
 80027f0:	2101      	movs	r1, #1
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe ffac 	bl	8001750 <HD44780_SetCursor>
		HD44780_PrintStr("ERR:SW OV");
 80027f8:	4825      	ldr	r0, [pc, #148]	@ (8002890 <doADCs+0x100>)
 80027fa:	f7ff f81a 	bl	8001832 <HD44780_PrintStr>
	}
	//Under Voltage
	if(ADC_VAL[0]<=SW_UV){
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <doADCs+0xec>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	d809      	bhi.n	8002826 <doADCs+0x96>
		STATE = SWFAULT;
 8002812:	4b1e      	ldr	r3, [pc, #120]	@ (800288c <doADCs+0xfc>)
 8002814:	2203      	movs	r2, #3
 8002816:	601a      	str	r2, [r3, #0]
		HD44780_SetCursor(0,1);
 8002818:	2101      	movs	r1, #1
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe ff98 	bl	8001750 <HD44780_SetCursor>
		HD44780_PrintStr("ERR:SW UV");
 8002820:	481c      	ldr	r0, [pc, #112]	@ (8002894 <doADCs+0x104>)
 8002822:	f7ff f806 	bl	8001832 <HD44780_PrintStr>
	}
	//Over Current
	if(ADC_VAL[1]>=SW_OC){
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <doADCs+0xec>)
 8002828:	edd3 7a01 	vldr	s15, [r3, #4]
 800282c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002838:	db09      	blt.n	800284e <doADCs+0xbe>
		STATE = SWFAULT;
 800283a:	4b14      	ldr	r3, [pc, #80]	@ (800288c <doADCs+0xfc>)
 800283c:	2203      	movs	r2, #3
 800283e:	601a      	str	r2, [r3, #0]
		HD44780_SetCursor(0,1);
 8002840:	2101      	movs	r1, #1
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe ff84 	bl	8001750 <HD44780_SetCursor>
		HD44780_PrintStr("ERR:SW OC");
 8002848:	4813      	ldr	r0, [pc, #76]	@ (8002898 <doADCs+0x108>)
 800284a:	f7fe fff2 	bl	8001832 <HD44780_PrintStr>
	}
	//Over Temp
	if(ADC_VAL[2]>=SW_OT){
 800284e:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <doADCs+0xec>)
 8002850:	edd3 7a02 	vldr	s15, [r3, #8]
 8002854:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800289c <doADCs+0x10c>
 8002858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	da00      	bge.n	8002864 <doADCs+0xd4>
		STATE = SWFAULT;
		HD44780_SetCursor(0,1);
		HD44780_PrintStr("ERROR:SW OT");
	}
}
 8002862:	e009      	b.n	8002878 <doADCs+0xe8>
		STATE = SWFAULT;
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <doADCs+0xfc>)
 8002866:	2203      	movs	r2, #3
 8002868:	601a      	str	r2, [r3, #0]
		HD44780_SetCursor(0,1);
 800286a:	2101      	movs	r1, #1
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe ff6f 	bl	8001750 <HD44780_SetCursor>
		HD44780_PrintStr("ERROR:SW OT");
 8002872:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <doADCs+0x110>)
 8002874:	f7fe ffdd 	bl	8001832 <HD44780_PrintStr>
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000055c 	.word	0x2000055c
 8002880:	42200000 	.word	0x42200000
 8002884:	40020400 	.word	0x40020400
 8002888:	42700000 	.word	0x42700000
 800288c:	20000010 	.word	0x20000010
 8002890:	08010034 	.word	0x08010034
 8002894:	08010040 	.word	0x08010040
 8002898:	0801004c 	.word	0x0801004c
 800289c:	42b40000 	.word	0x42b40000
 80028a0:	08010058 	.word	0x08010058

080028a4 <readDI>:

void readDI(){
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
    // Button data[Light, Blinker L, Blinker R, Aux]
    uint16_t but_new[4];
    but_new[0] = (GPIOC->IDR & GPIO_IDR_ID10) ? 0x0001 : 0x0000;
 80028aa:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <readDI+0x8c>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	80bb      	strh	r3, [r7, #4]
    but_new[1] = (GPIOC->IDR & GPIO_IDR_ID11) ? 0x0001 : 0x0000;
 80028be:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <readDI+0x8c>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	2300      	moveq	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	80fb      	strh	r3, [r7, #6]
    but_new[2] = (GPIOC->IDR & GPIO_IDR_ID12) ? 0x0001 : 0x0000;
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <readDI+0x8c>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	813b      	strh	r3, [r7, #8]
    but_new[3] = (GPIOC->IDR & GPIO_IDR_ID13) ? 0x0001 : 0x0000;
 80028e6:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <readDI+0x8c>)
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < 4; i++) {
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e00c      	b.n	800291a <readDI+0x76>
    	but[i] = but_new[i];
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	3310      	adds	r3, #16
 8002906:	443b      	add	r3, r7
 8002908:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 800290c:	4a09      	ldr	r2, [pc, #36]	@ (8002934 <readDI+0x90>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3301      	adds	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b03      	cmp	r3, #3
 800291e:	ddef      	ble.n	8002900 <readDI+0x5c>
        }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40020800 	.word	0x40020800
 8002934:	2000056c 	.word	0x2000056c

08002938 <setDO>:

void setDO() {
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
    // Button data[Light, Blinker L, Blinker R, Aux]
    // Toggle lights
    HAL_GPIO_WritePin(GPIOB, PB3_DO_LIGHT_Pin, but[0] == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <setDO+0x6c>)
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	2108      	movs	r1, #8
 800294e:	4816      	ldr	r0, [pc, #88]	@ (80029a8 <setDO+0x70>)
 8002950:	f001 ff10 	bl	8004774 <HAL_GPIO_WritePin>

    // Toggle blinker L
    if (but[1] == 1) {
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <setDO+0x6c>)
 8002956:	885b      	ldrh	r3, [r3, #2]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <setDO+0x2a>
    	//Start PWM
        TIM3->CCR2 = 250;
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <setDO+0x74>)
 800295e:	22fa      	movs	r2, #250	@ 0xfa
 8002960:	639a      	str	r2, [r3, #56]	@ 0x38

    }
    if (but[1] == 0){
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <setDO+0x6c>)
 8002964:	885b      	ldrh	r3, [r3, #2]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <setDO+0x3a>
    	// Stop the PWM
        TIM3->CCR2 = 500;
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <setDO+0x74>)
 800296c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002970:	639a      	str	r2, [r3, #56]	@ 0x38

    }

    // Toggle blinker R
    if (but[2] == 1) {
 8002972:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <setDO+0x6c>)
 8002974:	889b      	ldrh	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <setDO+0x48>
    	//Start PWM
        TIM3->CCR1 = 250;
 800297a:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <setDO+0x74>)
 800297c:	22fa      	movs	r2, #250	@ 0xfa
 800297e:	635a      	str	r2, [r3, #52]	@ 0x34

    }
    if (but[2] == 0){
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <setDO+0x6c>)
 8002982:	889b      	ldrh	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <setDO+0x58>
        // Stop the PWM
    	TIM3->CCR1 = 500;
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <setDO+0x74>)
 800298a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800298e:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Use Aux signal for something
    if (but[3] == 0) {
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <setDO+0x6c>)
 8002992:	88db      	ldrh	r3, [r3, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <setDO+0x68>
        HAL_GPIO_TogglePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin);
 8002998:	2101      	movs	r1, #1
 800299a:	4803      	ldr	r0, [pc, #12]	@ (80029a8 <setDO+0x70>)
 800299c:	f001 ff03 	bl	80047a6 <HAL_GPIO_TogglePin>
    }
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2000056c 	.word	0x2000056c
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40000400 	.word	0x40000400

080029b0 <ready>:

/* STATE Machine Functions */
void ready(){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af02      	add	r7, sp, #8

	  HAL_ADC_Start(&hadc1);
 80029b6:	481f      	ldr	r0, [pc, #124]	@ (8002a34 <ready+0x84>)
 80029b8:	f000 fe90 	bl	80036dc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 80029bc:	2114      	movs	r1, #20
 80029be:	481d      	ldr	r0, [pc, #116]	@ (8002a34 <ready+0x84>)
 80029c0:	f000 ff91 	bl	80038e6 <HAL_ADC_PollForConversion>
	  rawThrot =HAL_ADC_GetValue(&hadc1);
 80029c4:	481b      	ldr	r0, [pc, #108]	@ (8002a34 <ready+0x84>)
 80029c6:	f001 f929 	bl	8003c1c <HAL_ADC_GetValue>
 80029ca:	4603      	mov	r3, r0
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <ready+0x88>)
 80029d0:	801a      	strh	r2, [r3, #0]
	  int THrotduty = map(rawThrot, MINADC,MAXADC,MINDUTY,MAXDUTY);
 80029d2:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <ready+0x88>)
 80029d4:	8818      	ldrh	r0, [r3, #0]
 80029d6:	2364      	movs	r3, #100	@ 0x64
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2300      	movs	r3, #0
 80029dc:	f640 4262 	movw	r2, #3170	@ 0xc62
 80029e0:	f240 411f 	movw	r1, #1055	@ 0x41f
 80029e4:	f7fe fc56 	bl	8001294 <map>
 80029e8:	4603      	mov	r3, r0
 80029ea:	607b      	str	r3, [r7, #4]
	  if(THrotduty >= 30){
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b1d      	cmp	r3, #29
 80029f0:	dd1c      	ble.n	8002a2c <ready+0x7c>
		  /*
		   * Init PWM
		   */
		  TIM1->CCR1 = 0;
 80029f2:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <ready+0x8c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM1->CCR2 = 0;
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <ready+0x8c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
		  TIM1->CCR3 = 0;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <ready+0x8c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	63da      	str	r2, [r3, #60]	@ 0x3c
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002a04:	2100      	movs	r1, #0
 8002a06:	480e      	ldr	r0, [pc, #56]	@ (8002a40 <ready+0x90>)
 8002a08:	f004 fba2 	bl	8007150 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	480c      	ldr	r0, [pc, #48]	@ (8002a40 <ready+0x90>)
 8002a10:	f004 fb9e 	bl	8007150 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002a14:	2108      	movs	r1, #8
 8002a16:	480a      	ldr	r0, [pc, #40]	@ (8002a40 <ready+0x90>)
 8002a18:	f004 fb9a 	bl	8007150 <HAL_TIM_PWM_Start>

		  initBLDC();
 8002a1c:	f7fe fc08 	bl	8001230 <initBLDC>
		  duty = 10;
 8002a20:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <ready+0x94>)
 8002a22:	220a      	movs	r2, #10
 8002a24:	601a      	str	r2, [r3, #0]
		 //duty = THrotduty;
		  STATE = DRIVE;
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <ready+0x98>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
	  }

}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000300 	.word	0x20000300
 8002a38:	20000558 	.word	0x20000558
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	2000042c 	.word	0x2000042c
 8002a44:	2000054c 	.word	0x2000054c
 8002a48:	20000010 	.word	0x20000010

08002a4c <drive>:

void drive(){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af02      	add	r7, sp, #8
	  //HAL_Delay(100);
	  HAL_ADC_Start(&hadc1);
 8002a52:	4811      	ldr	r0, [pc, #68]	@ (8002a98 <drive+0x4c>)
 8002a54:	f000 fe42 	bl	80036dc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8002a58:	2114      	movs	r1, #20
 8002a5a:	480f      	ldr	r0, [pc, #60]	@ (8002a98 <drive+0x4c>)
 8002a5c:	f000 ff43 	bl	80038e6 <HAL_ADC_PollForConversion>
	  rawThrot =HAL_ADC_GetValue(&hadc1);
 8002a60:	480d      	ldr	r0, [pc, #52]	@ (8002a98 <drive+0x4c>)
 8002a62:	f001 f8db 	bl	8003c1c <HAL_ADC_GetValue>
 8002a66:	4603      	mov	r3, r0
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <drive+0x50>)
 8002a6c:	801a      	strh	r2, [r3, #0]
	  int THrotduty = map(rawThrot, MINADC,MAXADC,MINDUTY,MAXDUTY);
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <drive+0x50>)
 8002a70:	8818      	ldrh	r0, [r3, #0]
 8002a72:	2364      	movs	r3, #100	@ 0x64
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2300      	movs	r3, #0
 8002a78:	f640 4262 	movw	r2, #3170	@ 0xc62
 8002a7c:	f240 411f 	movw	r1, #1055	@ 0x41f
 8002a80:	f7fe fc08 	bl	8001294 <map>
 8002a84:	4603      	mov	r3, r0
 8002a86:	607b      	str	r3, [r7, #4]
	  duty = THrotduty;
 8002a88:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <drive+0x54>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]

}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000300 	.word	0x20000300
 8002a9c:	20000558 	.word	0x20000558
 8002aa0:	2000054c 	.word	0x2000054c

08002aa4 <breaking>:

void breaking(){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
		TIM1->CCR1 = 0;
 8002aa8:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <breaking+0x5c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8002aae:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <breaking+0x5c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <breaking+0x5c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
		duty = 0;
 8002aba:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <breaking+0x60>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4811      	ldr	r0, [pc, #68]	@ (8002b08 <breaking+0x64>)
 8002ac4:	f004 fc0c 	bl	80072e0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002ac8:	2104      	movs	r1, #4
 8002aca:	480f      	ldr	r0, [pc, #60]	@ (8002b08 <breaking+0x64>)
 8002acc:	f004 fc08 	bl	80072e0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002ad0:	2108      	movs	r1, #8
 8002ad2:	480d      	ldr	r0, [pc, #52]	@ (8002b08 <breaking+0x64>)
 8002ad4:	f004 fc04 	bl	80072e0 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ade:	480b      	ldr	r0, [pc, #44]	@ (8002b0c <breaking+0x68>)
 8002ae0:	f001 fe48 	bl	8004774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002aea:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <breaking+0x68>)
 8002aec:	f001 fe42 	bl	8004774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 8002af0:	2201      	movs	r2, #1
 8002af2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002af6:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <breaking+0x68>)
 8002af8:	f001 fe3c 	bl	8004774 <HAL_GPIO_WritePin>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40010000 	.word	0x40010000
 8002b04:	2000054c 	.word	0x2000054c
 8002b08:	2000042c 	.word	0x2000042c
 8002b0c:	40020400 	.word	0x40020400

08002b10 <swfault>:

void swfault(){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	breaking();
 8002b14:	f7ff ffc6 	bl	8002aa4 <breaking>
	HAL_Delay(300);
 8002b18:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002b1c:	f000 fd76 	bl	800360c <HAL_Delay>
	readADCs();
 8002b20:	f7ff fdd8 	bl	80026d4 <readADCs>

	//Voltage OK
	if((ADC_VAL[0]<SW_OV)&&(ADC_VAL[0]>SW_UV)){
 8002b24:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <swfault+0x84>)
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002b98 <swfault+0x88>
 8002b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d400      	bmi.n	8002b3a <swfault+0x2a>
	}

	//Over Temp


}
 8002b38:	e02a      	b.n	8002b90 <swfault+0x80>
	if((ADC_VAL[0]<SW_OV)&&(ADC_VAL[0]>SW_UV)){
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <swfault+0x84>)
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4c:	dc00      	bgt.n	8002b50 <swfault+0x40>
}
 8002b4e:	e01f      	b.n	8002b90 <swfault+0x80>
		if(ADC_VAL[1]<SW_OC){
 8002b50:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <swfault+0x84>)
 8002b52:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b56:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b62:	d400      	bmi.n	8002b66 <swfault+0x56>
}
 8002b64:	e014      	b.n	8002b90 <swfault+0x80>
			if(ADC_VAL[2]<SW_OT){
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <swfault+0x84>)
 8002b68:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b6c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002b9c <swfault+0x8c>
 8002b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	d400      	bmi.n	8002b7c <swfault+0x6c>
}
 8002b7a:	e009      	b.n	8002b90 <swfault+0x80>
				STATE = DEBUGST;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <swfault+0x90>)
 8002b7e:	2206      	movs	r2, #6
 8002b80:	601a      	str	r2, [r3, #0]
				HD44780_SetCursor(0,1);
 8002b82:	2101      	movs	r1, #1
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fe fde3 	bl	8001750 <HD44780_SetCursor>
				HD44780_PrintStr("           ");
 8002b8a:	4806      	ldr	r0, [pc, #24]	@ (8002ba4 <swfault+0x94>)
 8002b8c:	f7fe fe51 	bl	8001832 <HD44780_PrintStr>
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000055c 	.word	0x2000055c
 8002b98:	42700000 	.word	0x42700000
 8002b9c:	42b40000 	.word	0x42b40000
 8002ba0:	20000010 	.word	0x20000010
 8002ba4:	08010064 	.word	0x08010064

08002ba8 <hwfault>:

void hwfault(){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0

	breaking();
 8002bac:	f7ff ff7a 	bl	8002aa4 <breaking>
	HD44780_SetCursor(0,1);
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fe fdcc 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("ERROR:HW FAULT");
 8002bb8:	480c      	ldr	r0, [pc, #48]	@ (8002bec <hwfault+0x44>)
 8002bba:	f7fe fe3a 	bl	8001832 <HD44780_PrintStr>
	while(HAL_GPIO_ReadPin(GPIOC,EXTI9_FAULT_Pin)==1){
 8002bbe:	e002      	b.n	8002bc6 <hwfault+0x1e>
		HAL_Delay(100);
 8002bc0:	2064      	movs	r0, #100	@ 0x64
 8002bc2:	f000 fd23 	bl	800360c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,EXTI9_FAULT_Pin)==1){
 8002bc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bca:	4809      	ldr	r0, [pc, #36]	@ (8002bf0 <hwfault+0x48>)
 8002bcc:	f001 fdba 	bl	8004744 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d0f4      	beq.n	8002bc0 <hwfault+0x18>
	}
	HD44780_Clear();
 8002bd6:	f7fe fda5 	bl	8001724 <HD44780_Clear>
	Init_lcd_ar(&lcd_val);
 8002bda:	4806      	ldr	r0, [pc, #24]	@ (8002bf4 <hwfault+0x4c>)
 8002bdc:	f7fe ff18 	bl	8001a10 <Init_lcd_ar>
	STATE = DRIVE;
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <hwfault+0x50>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	08010070 	.word	0x08010070
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	20000574 	.word	0x20000574
 8002bf8:	20000010 	.word	0x20000010

08002bfc <debug>:

void debug(){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8002c00:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <debug+0x5c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 8002c06:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <debug+0x5c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <debug+0x5c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	63da      	str	r2, [r3, #60]	@ 0x3c
	duty = 0;
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <debug+0x60>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4811      	ldr	r0, [pc, #68]	@ (8002c60 <debug+0x64>)
 8002c1c:	f004 fb60 	bl	80072e0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002c20:	2104      	movs	r1, #4
 8002c22:	480f      	ldr	r0, [pc, #60]	@ (8002c60 <debug+0x64>)
 8002c24:	f004 fb5c 	bl	80072e0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002c28:	2108      	movs	r1, #8
 8002c2a:	480d      	ldr	r0, [pc, #52]	@ (8002c60 <debug+0x64>)
 8002c2c:	f004 fb58 	bl	80072e0 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8002c30:	2200      	movs	r2, #0
 8002c32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c36:	480b      	ldr	r0, [pc, #44]	@ (8002c64 <debug+0x68>)
 8002c38:	f001 fd9c 	bl	8004774 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c42:	4808      	ldr	r0, [pc, #32]	@ (8002c64 <debug+0x68>)
 8002c44:	f001 fd96 	bl	8004774 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c4e:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <debug+0x68>)
 8002c50:	f001 fd90 	bl	8004774 <HAL_GPIO_WritePin>
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	2000054c 	.word	0x2000054c
 8002c60:	2000042c 	.word	0x2000042c
 8002c64:	40020400 	.word	0x40020400

08002c68 <ADC3_Select_CH>:

/*
 * @param ch	= 0 == Bus Voltage; 1 == Bus Current, 2 == Temperature
 */
void ADC3_Select_CH(int ch){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002c70:	f107 0308 	add.w	r3, r7, #8
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
	if(ch ==0){
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d110      	bne.n	8002ca6 <ADC3_Select_CH+0x3e>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c90:	f107 0308 	add.w	r3, r7, #8
 8002c94:	4619      	mov	r1, r3
 8002c96:	481a      	ldr	r0, [pc, #104]	@ (8002d00 <ADC3_Select_CH+0x98>)
 8002c98:	f000 ffec 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <ADC3_Select_CH+0x3e>
		  {
		    Error_Handler();
 8002ca2:	f000 f82f 	bl	8002d04 <Error_Handler>
		  }
	}

	if(ch==1){
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d110      	bne.n	8002cce <ADC3_Select_CH+0x66>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002cb8:	f107 0308 	add.w	r3, r7, #8
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4810      	ldr	r0, [pc, #64]	@ (8002d00 <ADC3_Select_CH+0x98>)
 8002cc0:	f000 ffd8 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <ADC3_Select_CH+0x66>
		  {
		    Error_Handler();
 8002cca:	f000 f81b 	bl	8002d04 <Error_Handler>
		  }
	}
	if(ch==2){
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d110      	bne.n	8002cf6 <ADC3_Select_CH+0x8e>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_13;
 8002cd4:	230d      	movs	r3, #13
 8002cd6:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4806      	ldr	r0, [pc, #24]	@ (8002d00 <ADC3_Select_CH+0x98>)
 8002ce8:	f000 ffc4 	bl	8003c74 <HAL_ADC_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <ADC3_Select_CH+0x8e>
		  {
		    Error_Handler();
 8002cf2:	f000 f807 	bl	8002d04 <Error_Handler>
		  }
	}
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000390 	.word	0x20000390

08002d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d08:	b672      	cpsid	i
}
 8002d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <Error_Handler+0x8>

08002d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_MspInit+0x4c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d5c <HAL_MspInit+0x4c>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <HAL_MspInit+0x4c>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <HAL_MspInit+0x4c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	4a08      	ldr	r2, [pc, #32]	@ (8002d5c <HAL_MspInit+0x4c>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <HAL_MspInit+0x4c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	@ 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef8 <HAL_ADC_MspInit+0x198>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d130      	bne.n	8002de4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	4b5d      	ldr	r3, [pc, #372]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d92:	4b5a      	ldr	r3, [pc, #360]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	4b56      	ldr	r3, [pc, #344]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a55      	ldr	r2, [pc, #340]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN5_Throttle_Pin;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC1_IN5_Throttle_GPIO_Port, &GPIO_InitStruct);
 8002dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dca:	4619      	mov	r1, r3
 8002dcc:	484c      	ldr	r0, [pc, #304]	@ (8002f00 <HAL_ADC_MspInit+0x1a0>)
 8002dce:	f001 fb1d 	bl	800440c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2012      	movs	r0, #18
 8002dd8:	f001 fa4f 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ddc:	2012      	movs	r0, #18
 8002dde:	f001 fa68 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002de2:	e084      	b.n	8002eee <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a46      	ldr	r2, [pc, #280]	@ (8002f04 <HAL_ADC_MspInit+0x1a4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d130      	bne.n	8002e50 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	4b42      	ldr	r3, [pc, #264]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	4a41      	ldr	r2, [pc, #260]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002df8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a3a      	ldr	r2, [pc, #232]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ADC2_IN10_U_CUR_Pin|ADC2_IN11_V_CUR_Pin|ADC2_IN12_W_CUR_Pin;
 8002e26:	2307      	movs	r3, #7
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e36:	4619      	mov	r1, r3
 8002e38:	4833      	ldr	r0, [pc, #204]	@ (8002f08 <HAL_ADC_MspInit+0x1a8>)
 8002e3a:	f001 fae7 	bl	800440c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	2012      	movs	r0, #18
 8002e44:	f001 fa19 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e48:	2012      	movs	r0, #18
 8002e4a:	f001 fa32 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8002e4e:	e04e      	b.n	8002eee <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2d      	ldr	r2, [pc, #180]	@ (8002f0c <HAL_ADC_MspInit+0x1ac>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d149      	bne.n	8002eee <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	4a26      	ldr	r2, [pc, #152]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6a:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e86:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <HAL_ADC_MspInit+0x19c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC3_IN13_TEMP_Pin;
 8002eae:	2308      	movs	r3, #8
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC3_IN13_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4811      	ldr	r0, [pc, #68]	@ (8002f08 <HAL_ADC_MspInit+0x1a8>)
 8002ec2:	f001 faa3 	bl	800440c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN0_BUS_VOLT_Pin|ADC3_IN1_BUS_CUR_Pin;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4809      	ldr	r0, [pc, #36]	@ (8002f00 <HAL_ADC_MspInit+0x1a0>)
 8002eda:	f001 fa97 	bl	800440c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2012      	movs	r0, #18
 8002ee4:	f001 f9c9 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ee8:	2012      	movs	r0, #18
 8002eea:	f001 f9e2 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8002eee:	bf00      	nop
 8002ef0:	3738      	adds	r7, #56	@ 0x38
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40012000 	.word	0x40012000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	40012100 	.word	0x40012100
 8002f08:	40020800 	.word	0x40020800
 8002f0c:	40012200 	.word	0x40012200

08002f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	@ 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	@ (8002f94 <HAL_I2C_MspInit+0x84>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d12b      	bne.n	8002f8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	4b18      	ldr	r3, [pc, #96]	@ (8002f98 <HAL_I2C_MspInit+0x88>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <HAL_I2C_MspInit+0x88>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f42:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <HAL_I2C_MspInit+0x88>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f4e:	23c0      	movs	r3, #192	@ 0xc0
 8002f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f52:	2312      	movs	r3, #18
 8002f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f62:	f107 0314 	add.w	r3, r7, #20
 8002f66:	4619      	mov	r1, r3
 8002f68:	480c      	ldr	r0, [pc, #48]	@ (8002f9c <HAL_I2C_MspInit+0x8c>)
 8002f6a:	f001 fa4f 	bl	800440c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_I2C_MspInit+0x88>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <HAL_I2C_MspInit+0x88>)
 8002f78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_I2C_MspInit+0x88>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40005400 	.word	0x40005400
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020400 	.word	0x40020400

08002fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a22      	ldr	r2, [pc, #136]	@ (8003038 <HAL_TIM_Base_MspInit+0x98>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	4b21      	ldr	r3, [pc, #132]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	4a20      	ldr	r2, [pc, #128]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fce:	e02e      	b.n	800302e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd8:	d116      	bne.n	8003008 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	4b17      	ldr	r3, [pc, #92]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	4a16      	ldr	r2, [pc, #88]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fea:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	201c      	movs	r0, #28
 8002ffc:	f001 f93d 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003000:	201c      	movs	r0, #28
 8003002:	f001 f956 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8003006:	e012      	b.n	800302e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0c      	ldr	r2, [pc, #48]	@ (8003040 <HAL_TIM_Base_MspInit+0xa0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10d      	bne.n	800302e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	4b09      	ldr	r3, [pc, #36]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	4a08      	ldr	r2, [pc, #32]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6413      	str	r3, [r2, #64]	@ 0x40
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_TIM_Base_MspInit+0x9c>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40010000 	.word	0x40010000
 800303c:	40023800 	.word	0x40023800
 8003040:	40000400 	.word	0x40000400

08003044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	@ 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a24      	ldr	r2, [pc, #144]	@ (80030f4 <HAL_TIM_MspPostInit+0xb0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d11f      	bne.n	80030a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	4b23      	ldr	r3, [pc, #140]	@ (80030f8 <HAL_TIM_MspPostInit+0xb4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a22      	ldr	r2, [pc, #136]	@ (80030f8 <HAL_TIM_MspPostInit+0xb4>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_TIM_MspPostInit+0xb4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_U_Pin|TIM1_CH2_V_Pin|TIM1_CH3_W_Pin;
 8003082:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4619      	mov	r1, r3
 800309e:	4817      	ldr	r0, [pc, #92]	@ (80030fc <HAL_TIM_MspPostInit+0xb8>)
 80030a0:	f001 f9b4 	bl	800440c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030a4:	e022      	b.n	80030ec <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a15      	ldr	r2, [pc, #84]	@ (8003100 <HAL_TIM_MspPostInit+0xbc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d11d      	bne.n	80030ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_TIM_MspPostInit+0xb4>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	4a0f      	ldr	r2, [pc, #60]	@ (80030f8 <HAL_TIM_MspPostInit+0xb4>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c0:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <HAL_TIM_MspPostInit+0xb4>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_Blinker_R_Pin|TIM3_CH2_Blinker_L_Pin;
 80030cc:	23c0      	movs	r3, #192	@ 0xc0
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030dc:	2302      	movs	r3, #2
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	4805      	ldr	r0, [pc, #20]	@ (80030fc <HAL_TIM_MspPostInit+0xb8>)
 80030e8:	f001 f990 	bl	800440c <HAL_GPIO_Init>
}
 80030ec:	bf00      	nop
 80030ee:	3728      	adds	r7, #40	@ 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40000400 	.word	0x40000400

08003104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	@ 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_UART_MspInit+0x94>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d133      	bne.n	800318e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	4b1c      	ldr	r3, [pc, #112]	@ (800319c <HAL_UART_MspInit+0x98>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <HAL_UART_MspInit+0x98>)
 8003130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003134:	6413      	str	r3, [r2, #64]	@ 0x40
 8003136:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_UART_MspInit+0x98>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <HAL_UART_MspInit+0x98>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	4a14      	ldr	r2, [pc, #80]	@ (800319c <HAL_UART_MspInit+0x98>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6313      	str	r3, [r2, #48]	@ 0x30
 8003152:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_UART_MspInit+0x98>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800315e:	230c      	movs	r3, #12
 8003160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800316e:	2307      	movs	r3, #7
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4619      	mov	r1, r3
 8003178:	4809      	ldr	r0, [pc, #36]	@ (80031a0 <HAL_UART_MspInit+0x9c>)
 800317a:	f001 f947 	bl	800440c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	2026      	movs	r0, #38	@ 0x26
 8003184:	f001 f879 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003188:	2026      	movs	r0, #38	@ 0x26
 800318a:	f001 f892 	bl	80042b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	@ 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40004400 	.word	0x40004400
 800319c:	40023800 	.word	0x40023800
 80031a0:	40020000 	.word	0x40020000

080031a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <NMI_Handler+0x4>

080031ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <HardFault_Handler+0x4>

080031b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <MemManage_Handler+0x4>

080031bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <BusFault_Handler+0x4>

080031c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <UsageFault_Handler+0x4>

080031cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fa:	f000 f9e7 	bl	80035cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003208:	4805      	ldr	r0, [pc, #20]	@ (8003220 <ADC_IRQHandler+0x1c>)
 800320a:	f000 fbf7 	bl	80039fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800320e:	4805      	ldr	r0, [pc, #20]	@ (8003224 <ADC_IRQHandler+0x20>)
 8003210:	f000 fbf4 	bl	80039fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8003214:	4804      	ldr	r0, [pc, #16]	@ (8003228 <ADC_IRQHandler+0x24>)
 8003216:	f000 fbf1 	bl	80039fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000300 	.word	0x20000300
 8003224:	20000348 	.word	0x20000348
 8003228:	20000390 	.word	0x20000390

0800322c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI5_Break_Pin);
 8003230:	2020      	movs	r0, #32
 8003232:	f001 fad3 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI6_HALL_U_Pin);
 8003236:	2040      	movs	r0, #64	@ 0x40
 8003238:	f001 fad0 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI7_HALL_V_Pin);
 800323c:	2080      	movs	r0, #128	@ 0x80
 800323e:	f001 facd 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI8_HALL_W_Pin);
 8003242:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003246:	f001 fac9 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI9_FAULT_Pin);
 800324a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800324e:	f001 fac5 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	int x = hallCC*10;
 800325e:	4b20      	ldr	r3, [pc, #128]	@ (80032e0 <TIM2_IRQHandler+0x88>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	607b      	str	r3, [r7, #4]
	float rev = x/24;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a1d      	ldr	r2, [pc, #116]	@ (80032e4 <TIM2_IRQHandler+0x8c>)
 8003270:	fb82 1203 	smull	r1, r2, r2, r3
 8003274:	1092      	asrs	r2, r2, #2
 8003276:	17db      	asrs	r3, r3, #31
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003282:	edc7 7a00 	vstr	s15, [r7]
	rpm = rev*60;
 8003286:	edd7 7a00 	vldr	s15, [r7]
 800328a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80032e8 <TIM2_IRQHandler+0x90>
 800328e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <TIM2_IRQHandler+0x94>)
 8003294:	edc3 7a00 	vstr	s15, [r3]
	hallCC = 0;
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <TIM2_IRQHandler+0x88>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
	ADC_VAL[3] = rpm_tokmh(rpm);
 800329e:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <TIM2_IRQHandler+0x94>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	eeb0 0a67 	vmov.f32	s0, s15
 80032a8:	f7fe f98c 	bl	80015c4 <rpm_tokmh>
 80032ac:	eef0 7a40 	vmov.f32	s15, s0
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <TIM2_IRQHandler+0x98>)
 80032b2:	edc3 7a03 	vstr	s15, [r3, #12]
	//HAL_GPIO_TogglePin(PB1_LED_RED_GPIO_Port,PB1_LED_RED_Pin);
	if(timcc >= 10){
 80032b6:	4b0f      	ldr	r3, [pc, #60]	@ (80032f4 <TIM2_IRQHandler+0x9c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b09      	cmp	r3, #9
 80032bc:	dd03      	ble.n	80032c6 <TIM2_IRQHandler+0x6e>
		timcc = 0;
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <TIM2_IRQHandler+0x9c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e004      	b.n	80032d0 <TIM2_IRQHandler+0x78>
	}else{
		timcc++;
 80032c6:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <TIM2_IRQHandler+0x9c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	4a09      	ldr	r2, [pc, #36]	@ (80032f4 <TIM2_IRQHandler+0x9c>)
 80032ce:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032d0:	4809      	ldr	r0, [pc, #36]	@ (80032f8 <TIM2_IRQHandler+0xa0>)
 80032d2:	f004 f875 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000550 	.word	0x20000550
 80032e4:	2aaaaaab 	.word	0x2aaaaaab
 80032e8:	42700000 	.word	0x42700000
 80032ec:	20000554 	.word	0x20000554
 80032f0:	2000055c 	.word	0x2000055c
 80032f4:	20000594 	.word	0x20000594
 80032f8:	20000474 	.word	0x20000474

080032fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003300:	4802      	ldr	r0, [pc, #8]	@ (800330c <USART2_IRQHandler+0x10>)
 8003302:	f004 ff57 	bl	80081b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000504 	.word	0x20000504

08003310 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003314:	4802      	ldr	r0, [pc, #8]	@ (8003320 <OTG_FS_IRQHandler+0x10>)
 8003316:	f002 f85a 	bl	80053ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20001a80 	.word	0x20001a80

08003324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return 1;
 8003328:	2301      	movs	r3, #1
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_kill>:

int _kill(int pid, int sig)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800333e:	f00a fbb9 	bl	800dab4 <__errno>
 8003342:	4603      	mov	r3, r0
 8003344:	2216      	movs	r2, #22
 8003346:	601a      	str	r2, [r3, #0]
  return -1;
 8003348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_exit>:

void _exit (int status)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800335c:	f04f 31ff 	mov.w	r1, #4294967295
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffe7 	bl	8003334 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <_exit+0x12>

0800336a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e00a      	b.n	8003392 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800337c:	f3af 8000 	nop.w
 8003380:	4601      	mov	r1, r0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	60ba      	str	r2, [r7, #8]
 8003388:	b2ca      	uxtb	r2, r1
 800338a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3301      	adds	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	dbf0      	blt.n	800337c <_read+0x12>
  }

  return len;
 800339a:	687b      	ldr	r3, [r7, #4]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	e009      	b.n	80033ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	60ba      	str	r2, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	dbf1      	blt.n	80033b6 <_write+0x12>
  }
  return len;
 80033d2:	687b      	ldr	r3, [r7, #4]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_close>:

int _close(int file)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003404:	605a      	str	r2, [r3, #4]
  return 0;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_isatty>:

int _isatty(int file)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800341c:	2301      	movs	r3, #1
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800344c:	4a14      	ldr	r2, [pc, #80]	@ (80034a0 <_sbrk+0x5c>)
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <_sbrk+0x60>)
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003458:	4b13      	ldr	r3, [pc, #76]	@ (80034a8 <_sbrk+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003460:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <_sbrk+0x64>)
 8003462:	4a12      	ldr	r2, [pc, #72]	@ (80034ac <_sbrk+0x68>)
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003466:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d207      	bcs.n	8003484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003474:	f00a fb1e 	bl	800dab4 <__errno>
 8003478:	4603      	mov	r3, r0
 800347a:	220c      	movs	r2, #12
 800347c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e009      	b.n	8003498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003484:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348a:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	4a05      	ldr	r2, [pc, #20]	@ (80034a8 <_sbrk+0x64>)
 8003494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20020000 	.word	0x20020000
 80034a4:	00000400 	.word	0x00000400
 80034a8:	20000598 	.word	0x20000598
 80034ac:	200022d0 	.word	0x200022d0

080034b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <SystemInit+0x20>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ba:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <SystemInit+0x20>)
 80034bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800350c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80034d8:	f7ff ffea 	bl	80034b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034dc:	480c      	ldr	r0, [pc, #48]	@ (8003510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034de:	490d      	ldr	r1, [pc, #52]	@ (8003514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e4:	e002      	b.n	80034ec <LoopCopyDataInit>

080034e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ea:	3304      	adds	r3, #4

080034ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f0:	d3f9      	bcc.n	80034e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f2:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f8:	e001      	b.n	80034fe <LoopFillZerobss>

080034fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034fc:	3204      	adds	r2, #4

080034fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003500:	d3fb      	bcc.n	80034fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003502:	f00a fadd 	bl	800dac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7fe fb85 	bl	8001c14 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800350c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8003518:	08010460 	.word	0x08010460
  ldr r2, =_sbss
 800351c:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8003520:	200022d0 	.word	0x200022d0

08003524 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <CAN1_RX0_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <HAL_Init+0x40>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	@ (8003568 <HAL_Init+0x40>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003544:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	@ (8003568 <HAL_Init+0x40>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003550:	2003      	movs	r0, #3
 8003552:	f000 fe87 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003556:	200f      	movs	r0, #15
 8003558:	f000 f808 	bl	800356c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355c:	f7ff fbd8 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003574:	4b12      	ldr	r3, [pc, #72]	@ (80035c0 <HAL_InitTick+0x54>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_InitTick+0x58>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4619      	mov	r1, r3
 800357e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003582:	fbb3 f3f1 	udiv	r3, r3, r1
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fe9f 	bl	80042ce <HAL_SYSTICK_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00e      	b.n	80035b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d80a      	bhi.n	80035b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a0:	2200      	movs	r2, #0
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f000 fe67 	bl	800427a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035ac:	4a06      	ldr	r2, [pc, #24]	@ (80035c8 <HAL_InitTick+0x5c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000018 	.word	0x20000018
 80035c4:	20000020 	.word	0x20000020
 80035c8:	2000001c 	.word	0x2000001c

080035cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d0:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <HAL_IncTick+0x20>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <HAL_IncTick+0x24>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	@ (80035f0 <HAL_IncTick+0x24>)
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000020 	.word	0x20000020
 80035f0:	2000059c 	.word	0x2000059c

080035f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return uwTick;
 80035f8:	4b03      	ldr	r3, [pc, #12]	@ (8003608 <HAL_GetTick+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000059c 	.word	0x2000059c

0800360c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff ffee 	bl	80035f4 <HAL_GetTick>
 8003618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d005      	beq.n	8003632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <HAL_Delay+0x44>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003632:	bf00      	nop
 8003634:	f7ff ffde 	bl	80035f4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d8f7      	bhi.n	8003634 <HAL_Delay+0x28>
  {
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000020 	.word	0x20000020

08003654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e033      	b.n	80036d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fb74 	bl	8002d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d118      	bne.n	80036c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800369a:	f023 0302 	bic.w	r3, r3, #2
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fc06 	bl	8003eb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80036c2:	e001      	b.n	80036c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_Start+0x1a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e0b2      	b.n	800385c <HAL_ADC_Start+0x180>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d018      	beq.n	800373e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800371c:	4b52      	ldr	r3, [pc, #328]	@ (8003868 <HAL_ADC_Start+0x18c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a52      	ldr	r2, [pc, #328]	@ (800386c <HAL_ADC_Start+0x190>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0c9a      	lsrs	r2, r3, #18
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003730:	e002      	b.n	8003738 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3b01      	subs	r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f9      	bne.n	8003732 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d17a      	bne.n	8003842 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003776:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378a:	d106      	bne.n	800379a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	f023 0206 	bic.w	r2, r3, #6
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44
 8003798:	e002      	b.n	80037a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037a8:	4b31      	ldr	r3, [pc, #196]	@ (8003870 <HAL_ADC_Start+0x194>)
 80037aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80037b4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d12a      	bne.n	8003818 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003874 <HAL_ADC_Start+0x198>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d015      	beq.n	80037f8 <HAL_ADC_Start+0x11c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a29      	ldr	r2, [pc, #164]	@ (8003878 <HAL_ADC_Start+0x19c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d105      	bne.n	80037e2 <HAL_ADC_Start+0x106>
 80037d6:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <HAL_ADC_Start+0x194>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a25      	ldr	r2, [pc, #148]	@ (800387c <HAL_ADC_Start+0x1a0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d136      	bne.n	800385a <HAL_ADC_Start+0x17e>
 80037ec:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_ADC_Start+0x194>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d130      	bne.n	800385a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d129      	bne.n	800385a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	e020      	b.n	800385a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a15      	ldr	r2, [pc, #84]	@ (8003874 <HAL_ADC_Start+0x198>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d11b      	bne.n	800385a <HAL_ADC_Start+0x17e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d114      	bne.n	800385a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e00b      	b.n	800385a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f043 0210 	orr.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	20000018 	.word	0x20000018
 800386c:	431bde83 	.word	0x431bde83
 8003870:	40012300 	.word	0x40012300
 8003874:	40012000 	.word	0x40012000
 8003878:	40012100 	.word	0x40012100
 800387c:	40012200 	.word	0x40012200

08003880 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_ADC_Stop+0x16>
 8003892:	2302      	movs	r3, #2
 8003894:	e021      	b.n	80038da <HAL_ADC_Stop+0x5a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	f043 0201 	orr.w	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d113      	bne.n	800392c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800390e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003912:	d10b      	bne.n	800392c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e063      	b.n	80039f4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800392c:	f7ff fe62 	bl	80035f4 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003932:	e021      	b.n	8003978 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d01d      	beq.n	8003978 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_ADC_PollForConversion+0x6c>
 8003942:	f7ff fe57 	bl	80035f4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d212      	bcs.n	8003978 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d00b      	beq.n	8003978 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f043 0204 	orr.w	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e03d      	b.n	80039f4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d1d6      	bne.n	8003934 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0212 	mvn.w	r2, #18
 800398e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d123      	bne.n	80039f2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11f      	bne.n	80039f2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d006      	beq.n	80039ce <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d111      	bne.n	80039f2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d049      	beq.n	8003ac6 <HAL_ADC_IRQHandler+0xca>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d046      	beq.n	8003ac6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12b      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d127      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d119      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0220 	bic.w	r2, r2, #32
 8003a90:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8bd 	bl	8003c36 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0212 	mvn.w	r2, #18
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d057      	beq.n	8003b8c <HAL_ADC_IRQHandler+0x190>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d054      	beq.n	8003b8c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d105      	bne.n	8003afa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d139      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d12b      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d124      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11d      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d119      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	f043 0201 	orr.w	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fa97 	bl	80040b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 020c 	mvn.w	r2, #12
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d017      	beq.n	8003bd2 <HAL_ADC_IRQHandler+0x1d6>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d014      	beq.n	8003bd2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f841 	bl	8003c4a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003be0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_ADC_IRQHandler+0x218>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d012      	beq.n	8003c14 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f043 0202 	orr.w	r2, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0220 	mvn.w	r2, #32
 8003c02:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f82a 	bl	8003c5e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0220 	mvn.w	r2, #32
 8003c12:	601a      	str	r2, [r3, #0]
  }
}
 8003c14:	bf00      	nop
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e105      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x228>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d925      	bls.n	8003cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b1e      	subs	r3, #30
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68d9      	ldr	r1, [r3, #12]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4603      	mov	r3, r0
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4403      	add	r3, r0
 8003cde:	3b1e      	subs	r3, #30
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e022      	b.n	8003d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6919      	ldr	r1, [r3, #16]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	2207      	movs	r2, #7
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6919      	ldr	r1, [r3, #16]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4618      	mov	r0, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4403      	add	r3, r0
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d824      	bhi.n	8003d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b05      	subs	r3, #5
 8003d4c:	221f      	movs	r2, #31
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	400a      	ands	r2, r1
 8003d5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	3b05      	subs	r3, #5
 8003d76:	fa00 f203 	lsl.w	r2, r0, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d82:	e04c      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d824      	bhi.n	8003dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b23      	subs	r3, #35	@ 0x23
 8003d9e:	221f      	movs	r2, #31
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43da      	mvns	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	400a      	ands	r2, r1
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3b23      	subs	r3, #35	@ 0x23
 8003dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dd4:	e023      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	3b41      	subs	r3, #65	@ 0x41
 8003de8:	221f      	movs	r2, #31
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	400a      	ands	r2, r1
 8003df6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4618      	mov	r0, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b41      	subs	r3, #65	@ 0x41
 8003e12:	fa00 f203 	lsl.w	r2, r0, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x234>)
 8003e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	@ (8003eac <HAL_ADC_ConfigChannel+0x238>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d109      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b12      	cmp	r3, #18
 8003e32:	d105      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a19      	ldr	r2, [pc, #100]	@ (8003eac <HAL_ADC_ConfigChannel+0x238>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d123      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d003      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x1e6>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b11      	cmp	r3, #17
 8003e58:	d11b      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d111      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x23c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a10      	ldr	r2, [pc, #64]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x240>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	0c9a      	lsrs	r2, r3, #18
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e84:	e002      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f9      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012300 	.word	0x40012300
 8003eac:	40012000 	.word	0x40012000
 8003eb0:	20000018 	.word	0x20000018
 8003eb4:	431bde83 	.word	0x431bde83

08003eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec0:	4b79      	ldr	r3, [pc, #484]	@ (80040a8 <ADC_Init+0x1f0>)
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	021a      	lsls	r2, r3, #8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	4a58      	ldr	r2, [pc, #352]	@ (80040ac <ADC_Init+0x1f4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d022      	beq.n	8003f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	e00f      	b.n	8003fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0202 	bic.w	r2, r2, #2
 8003fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6899      	ldr	r1, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7e1b      	ldrb	r3, [r3, #24]
 8003fd0:	005a      	lsls	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	3b01      	subs	r3, #1
 8004010:	035a      	lsls	r2, r3, #13
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	e007      	b.n	800402c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800403a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	3b01      	subs	r3, #1
 8004048:	051a      	lsls	r2, r3, #20
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800406e:	025a      	lsls	r2, r3, #9
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	029a      	lsls	r2, r3, #10
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40012300 	.word	0x40012300
 80040ac:	0f000001 	.word	0x0f000001

080040b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f6:	4a04      	ldr	r2, [pc, #16]	@ (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	60d3      	str	r3, [r2, #12]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	@ (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	@ (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	@ (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	@ 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
         );
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	@ 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004230:	d301      	bcc.n	8004236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004232:	2301      	movs	r3, #1
 8004234:	e00f      	b.n	8004256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004236:	4a0a      	ldr	r2, [pc, #40]	@ (8004260 <SysTick_Config+0x40>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800423e:	210f      	movs	r1, #15
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	f7ff ff8e 	bl	8004164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <SysTick_Config+0x40>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800424e:	4b04      	ldr	r3, [pc, #16]	@ (8004260 <SysTick_Config+0x40>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff29 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800428c:	f7ff ff3e 	bl	800410c <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff8e 	bl	80041b8 <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff5d 	bl	8004164 <__NVIC_SetPriority>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff31 	bl	8004128 <__NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffa2 	bl	8004220 <SysTick_Config>
 80042dc:	4603      	mov	r3, r0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff f97e 	bl	80035f4 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d008      	beq.n	8004318 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e052      	b.n	80043be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0216 	bic.w	r2, r2, #22
 8004326:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004336:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <HAL_DMA_Abort+0x62>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0208 	bic.w	r2, r2, #8
 8004356:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004368:	e013      	b.n	8004392 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800436a:	f7ff f943 	bl	80035f4 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b05      	cmp	r3, #5
 8004376:	d90c      	bls.n	8004392 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2203      	movs	r2, #3
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e015      	b.n	80043be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e4      	bne.n	800436a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	223f      	movs	r2, #63	@ 0x3f
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2280      	movs	r2, #128	@ 0x80
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e00c      	b.n	80043fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2205      	movs	r2, #5
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	@ 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e16b      	b.n	8004700 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004428:	2201      	movs	r2, #1
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	429a      	cmp	r2, r3
 8004442:	f040 815a 	bne.w	80046fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d005      	beq.n	800445e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800445a:	2b02      	cmp	r3, #2
 800445c:	d130      	bne.n	80044c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2203      	movs	r2, #3
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004494:	2201      	movs	r2, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 0201 	and.w	r2, r3, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d017      	beq.n	80044fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2203      	movs	r2, #3
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d123      	bne.n	8004550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3208      	adds	r2, #8
 8004510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	220f      	movs	r2, #15
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	08da      	lsrs	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3208      	adds	r2, #8
 800454a:	69b9      	ldr	r1, [r7, #24]
 800454c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	2203      	movs	r2, #3
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0203 	and.w	r2, r3, #3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80b4 	beq.w	80046fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	4b60      	ldr	r3, [pc, #384]	@ (8004718 <HAL_GPIO_Init+0x30c>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	4a5f      	ldr	r2, [pc, #380]	@ (8004718 <HAL_GPIO_Init+0x30c>)
 800459c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80045a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004718 <HAL_GPIO_Init+0x30c>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ae:	4a5b      	ldr	r2, [pc, #364]	@ (800471c <HAL_GPIO_Init+0x310>)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	3302      	adds	r3, #2
 80045b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	220f      	movs	r2, #15
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a52      	ldr	r2, [pc, #328]	@ (8004720 <HAL_GPIO_Init+0x314>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02b      	beq.n	8004632 <HAL_GPIO_Init+0x226>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a51      	ldr	r2, [pc, #324]	@ (8004724 <HAL_GPIO_Init+0x318>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d025      	beq.n	800462e <HAL_GPIO_Init+0x222>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a50      	ldr	r2, [pc, #320]	@ (8004728 <HAL_GPIO_Init+0x31c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01f      	beq.n	800462a <HAL_GPIO_Init+0x21e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4f      	ldr	r2, [pc, #316]	@ (800472c <HAL_GPIO_Init+0x320>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d019      	beq.n	8004626 <HAL_GPIO_Init+0x21a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004730 <HAL_GPIO_Init+0x324>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_GPIO_Init+0x216>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4d      	ldr	r2, [pc, #308]	@ (8004734 <HAL_GPIO_Init+0x328>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00d      	beq.n	800461e <HAL_GPIO_Init+0x212>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4c      	ldr	r2, [pc, #304]	@ (8004738 <HAL_GPIO_Init+0x32c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <HAL_GPIO_Init+0x20e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a4b      	ldr	r2, [pc, #300]	@ (800473c <HAL_GPIO_Init+0x330>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <HAL_GPIO_Init+0x20a>
 8004612:	2307      	movs	r3, #7
 8004614:	e00e      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004616:	2308      	movs	r3, #8
 8004618:	e00c      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800461a:	2306      	movs	r3, #6
 800461c:	e00a      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800461e:	2305      	movs	r3, #5
 8004620:	e008      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004622:	2304      	movs	r3, #4
 8004624:	e006      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004626:	2303      	movs	r3, #3
 8004628:	e004      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800462a:	2302      	movs	r3, #2
 800462c:	e002      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004632:	2300      	movs	r3, #0
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	f002 0203 	and.w	r2, r2, #3
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	4093      	lsls	r3, r2
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004644:	4935      	ldr	r1, [pc, #212]	@ (800471c <HAL_GPIO_Init+0x310>)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	3302      	adds	r3, #2
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004652:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <HAL_GPIO_Init+0x334>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004676:	4a32      	ldr	r2, [pc, #200]	@ (8004740 <HAL_GPIO_Init+0x334>)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800467c:	4b30      	ldr	r3, [pc, #192]	@ (8004740 <HAL_GPIO_Init+0x334>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046a0:	4a27      	ldr	r2, [pc, #156]	@ (8004740 <HAL_GPIO_Init+0x334>)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046a6:	4b26      	ldr	r3, [pc, #152]	@ (8004740 <HAL_GPIO_Init+0x334>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004740 <HAL_GPIO_Init+0x334>)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <HAL_GPIO_Init+0x334>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046f4:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <HAL_GPIO_Init+0x334>)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	f67f ae90 	bls.w	8004428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3724      	adds	r7, #36	@ 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	40013800 	.word	0x40013800
 8004720:	40020000 	.word	0x40020000
 8004724:	40020400 	.word	0x40020400
 8004728:	40020800 	.word	0x40020800
 800472c:	40020c00 	.word	0x40020c00
 8004730:	40021000 	.word	0x40021000
 8004734:	40021400 	.word	0x40021400
 8004738:	40021800 	.word	0x40021800
 800473c:	40021c00 	.word	0x40021c00
 8004740:	40013c00 	.word	0x40013c00

08004744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e001      	b.n	8004766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	807b      	strh	r3, [r7, #2]
 8004780:	4613      	mov	r3, r2
 8004782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004784:	787b      	ldrb	r3, [r7, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478a:	887a      	ldrh	r2, [r7, #2]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004790:	e003      	b.n	800479a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004792:	887b      	ldrh	r3, [r7, #2]
 8004794:	041a      	lsls	r2, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	619a      	str	r2, [r3, #24]
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047b8:	887a      	ldrh	r2, [r7, #2]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	041a      	lsls	r2, r3, #16
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43d9      	mvns	r1, r3
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	400b      	ands	r3, r1
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	619a      	str	r2, [r3, #24]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f2:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fee0 	bl	80025c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40013c00 	.word	0x40013c00

0800480c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e12b      	b.n	8004a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fe fb6c 	bl	8002f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	@ 0x24
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800485e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800486e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004870:	f002 fb2c 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 8004874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a81      	ldr	r2, [pc, #516]	@ (8004a80 <HAL_I2C_Init+0x274>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d807      	bhi.n	8004890 <HAL_I2C_Init+0x84>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a80      	ldr	r2, [pc, #512]	@ (8004a84 <HAL_I2C_Init+0x278>)
 8004884:	4293      	cmp	r3, r2
 8004886:	bf94      	ite	ls
 8004888:	2301      	movls	r3, #1
 800488a:	2300      	movhi	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e006      	b.n	800489e <HAL_I2C_Init+0x92>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a7d      	ldr	r2, [pc, #500]	@ (8004a88 <HAL_I2C_Init+0x27c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	bf94      	ite	ls
 8004898:	2301      	movls	r3, #1
 800489a:	2300      	movhi	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0e7      	b.n	8004a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a78      	ldr	r2, [pc, #480]	@ (8004a8c <HAL_I2C_Init+0x280>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0c9b      	lsrs	r3, r3, #18
 80048b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004a80 <HAL_I2C_Init+0x274>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d802      	bhi.n	80048e0 <HAL_I2C_Init+0xd4>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3301      	adds	r3, #1
 80048de:	e009      	b.n	80048f4 <HAL_I2C_Init+0xe8>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	4a69      	ldr	r2, [pc, #420]	@ (8004a90 <HAL_I2C_Init+0x284>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	3301      	adds	r3, #1
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004906:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	495c      	ldr	r1, [pc, #368]	@ (8004a80 <HAL_I2C_Init+0x274>)
 8004910:	428b      	cmp	r3, r1
 8004912:	d819      	bhi.n	8004948 <HAL_I2C_Init+0x13c>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e59      	subs	r1, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004922:	1c59      	adds	r1, r3, #1
 8004924:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004928:	400b      	ands	r3, r1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_I2C_Init+0x138>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1e59      	subs	r1, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fbb1 f3f3 	udiv	r3, r1, r3
 800493c:	3301      	adds	r3, #1
 800493e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004942:	e051      	b.n	80049e8 <HAL_I2C_Init+0x1dc>
 8004944:	2304      	movs	r3, #4
 8004946:	e04f      	b.n	80049e8 <HAL_I2C_Init+0x1dc>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d111      	bne.n	8004974 <HAL_I2C_Init+0x168>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1e58      	subs	r0, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	440b      	add	r3, r1
 800495e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004962:	3301      	adds	r3, #1
 8004964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e012      	b.n	800499a <HAL_I2C_Init+0x18e>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1e58      	subs	r0, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	0099      	lsls	r1, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	fbb0 f3f3 	udiv	r3, r0, r3
 800498a:	3301      	adds	r3, #1
 800498c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_Init+0x196>
 800499e:	2301      	movs	r3, #1
 80049a0:	e022      	b.n	80049e8 <HAL_I2C_Init+0x1dc>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10e      	bne.n	80049c8 <HAL_I2C_Init+0x1bc>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1e58      	subs	r0, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	440b      	add	r3, r1
 80049b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c6:	e00f      	b.n	80049e8 <HAL_I2C_Init+0x1dc>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1e58      	subs	r0, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	0099      	lsls	r1, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	fbb0 f3f3 	udiv	r3, r0, r3
 80049de:	3301      	adds	r3, #1
 80049e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6911      	ldr	r1, [r2, #16]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68d2      	ldr	r2, [r2, #12]
 8004a22:	4311      	orrs	r1, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	000186a0 	.word	0x000186a0
 8004a84:	001e847f 	.word	0x001e847f
 8004a88:	003d08ff 	.word	0x003d08ff
 8004a8c:	431bde83 	.word	0x431bde83
 8004a90:	10624dd3 	.word	0x10624dd3

08004a94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	817b      	strh	r3, [r7, #10]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aa8:	f7fe fda4 	bl	80035f4 <HAL_GetTick>
 8004aac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	f040 80e0 	bne.w	8004c7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	2319      	movs	r3, #25
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4970      	ldr	r1, [pc, #448]	@ (8004c88 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f964 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e0d3      	b.n	8004c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_I2C_Master_Transmit+0x50>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0cc      	b.n	8004c7e <HAL_I2C_Master_Transmit+0x1ea>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d007      	beq.n	8004b0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2221      	movs	r2, #33	@ 0x21
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2210      	movs	r2, #16
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	893a      	ldrh	r2, [r7, #8]
 8004b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a50      	ldr	r2, [pc, #320]	@ (8004c8c <HAL_I2C_Master_Transmit+0x1f8>)
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b4c:	8979      	ldrh	r1, [r7, #10]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f89c 	bl	8004c90 <I2C_MasterRequestWrite>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e08d      	b.n	8004c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b78:	e066      	b.n	8004c48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	6a39      	ldr	r1, [r7, #32]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fa22 	bl	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e06b      	b.n	8004c7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11b      	bne.n	8004c1c <HAL_I2C_Master_Transmit+0x188>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d017      	beq.n	8004c1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	6a39      	ldr	r1, [r7, #32]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fa19 	bl	8005058 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d107      	bne.n	8004c44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e01a      	b.n	8004c7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d194      	bne.n	8004b7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e000      	b.n	8004c7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
  }
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	00100002 	.word	0x00100002
 8004c8c:	ffff0000 	.word	0xffff0000

08004c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d006      	beq.n	8004cba <I2C_MasterRequestWrite+0x2a>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d003      	beq.n	8004cba <I2C_MasterRequestWrite+0x2a>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cb8:	d108      	bne.n	8004ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e00b      	b.n	8004ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	2b12      	cmp	r3, #18
 8004cd2:	d107      	bne.n	8004ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f84f 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00d      	beq.n	8004d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0a:	d103      	bne.n	8004d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e035      	b.n	8004d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d20:	d108      	bne.n	8004d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d22:	897b      	ldrh	r3, [r7, #10]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d30:	611a      	str	r2, [r3, #16]
 8004d32:	e01b      	b.n	8004d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d34:	897b      	ldrh	r3, [r7, #10]
 8004d36:	11db      	asrs	r3, r3, #7
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f003 0306 	and.w	r3, r3, #6
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f063 030f 	orn	r3, r3, #15
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	490e      	ldr	r1, [pc, #56]	@ (8004d8c <I2C_MasterRequestWrite+0xfc>)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f898 	bl	8004e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e010      	b.n	8004d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d62:	897b      	ldrh	r3, [r7, #10]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4907      	ldr	r1, [pc, #28]	@ (8004d90 <I2C_MasterRequestWrite+0x100>)
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f888 	bl	8004e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	00010008 	.word	0x00010008
 8004d90:	00010002 	.word	0x00010002

08004d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da4:	e048      	b.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d044      	beq.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dae:	f7fe fc21 	bl	80035f4 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d139      	bne.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10d      	bne.n	8004dea <I2C_WaitOnFlagUntilTimeout+0x56>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	e00c      	b.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d116      	bne.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e023      	b.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10d      	bne.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	e00c      	b.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	43da      	mvns	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d093      	beq.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e96:	e071      	b.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea6:	d123      	bne.n	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	f043 0204 	orr.w	r2, r3, #4
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e067      	b.n	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d041      	beq.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef8:	f7fe fb7c 	bl	80035f4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d302      	bcc.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d136      	bne.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10c      	bne.n	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4013      	ands	r3, r2
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	e00b      	b.n	8004f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	f043 0220 	orr.w	r2, r3, #32
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e021      	b.n	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d10c      	bne.n	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	43da      	mvns	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e00b      	b.n	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4013      	ands	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bf14      	ite	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	2300      	moveq	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f47f af6d 	bne.w	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd4:	e034      	b.n	8005040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f886 	bl	80050e8 <I2C_IsAcknowledgeFailed>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e034      	b.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d028      	beq.n	8005040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fe fb01 	bl	80035f4 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11d      	bne.n	8005040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500e:	2b80      	cmp	r3, #128	@ 0x80
 8005010:	d016      	beq.n	8005040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e007      	b.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504a:	2b80      	cmp	r3, #128	@ 0x80
 800504c:	d1c3      	bne.n	8004fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005064:	e034      	b.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f83e 	bl	80050e8 <I2C_IsAcknowledgeFailed>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e034      	b.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d028      	beq.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fe fab9 	bl	80035f4 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d11d      	bne.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d016      	beq.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e007      	b.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d1c3      	bne.n	8005066 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fe:	d11b      	bne.n	8005138 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005108:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	f043 0204 	orr.w	r2, r3, #4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b086      	sub	sp, #24
 800514a:	af02      	add	r7, sp, #8
 800514c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e101      	b.n	800535c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f007 fba6 	bl	800c8c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2203      	movs	r2, #3
 800517c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005186:	d102      	bne.n	800518e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f003 fff3 	bl	800917e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7c1a      	ldrb	r2, [r3, #16]
 80051a0:	f88d 2000 	strb.w	r2, [sp]
 80051a4:	3304      	adds	r3, #4
 80051a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051a8:	f003 fed2 	bl	8008f50 <USB_CoreInit>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0ce      	b.n	800535c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f003 ffeb 	bl	80091a0 <USB_SetCurrentMode>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0bf      	b.n	800535c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e04a      	b.n	8005278 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3315      	adds	r3, #21
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3314      	adds	r3, #20
 8005206:	7bfa      	ldrb	r2, [r7, #15]
 8005208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	b298      	uxth	r0, r3
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	332e      	adds	r3, #46	@ 0x2e
 800521e:	4602      	mov	r2, r0
 8005220:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3318      	adds	r3, #24
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005236:	7bfa      	ldrb	r2, [r7, #15]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	331c      	adds	r3, #28
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3320      	adds	r3, #32
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3324      	adds	r3, #36	@ 0x24
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	3301      	adds	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	791b      	ldrb	r3, [r3, #4]
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	429a      	cmp	r2, r3
 8005280:	d3af      	bcc.n	80051e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	e044      	b.n	8005312 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800529e:	7bfa      	ldrb	r2, [r7, #15]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	3301      	adds	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	791b      	ldrb	r3, [r3, #4]
 8005316:	7bfa      	ldrb	r2, [r7, #15]
 8005318:	429a      	cmp	r2, r3
 800531a:	d3b5      	bcc.n	8005288 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7c1a      	ldrb	r2, [r3, #16]
 8005324:	f88d 2000 	strb.w	r2, [sp]
 8005328:	3304      	adds	r3, #4
 800532a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800532c:	f003 ff84 	bl	8009238 <USB_DevInit>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e00c      	b.n	800535c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f004 ffce 	bl	800a2f6 <USB_DevDisconnect>

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_PCD_Start+0x1c>
 800537c:	2302      	movs	r3, #2
 800537e:	e022      	b.n	80053c6 <HAL_PCD_Start+0x62>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f003 fed5 	bl	800915c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 ff7c 	bl	800a2b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053ce:	b590      	push	{r4, r7, lr}
 80053d0:	b08d      	sub	sp, #52	@ 0x34
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f005 f83a 	bl	800a45e <USB_GetMode>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f040 848c 	bne.w	8005d0a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f004 ff9e 	bl	800a338 <USB_ReadInterrupts>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8482 	beq.w	8005d08 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f004 ff8b 	bl	800a338 <USB_ReadInterrupts>
 8005422:	4603      	mov	r3, r0
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b02      	cmp	r3, #2
 800542a:	d107      	bne.n	800543c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f002 0202 	and.w	r2, r2, #2
 800543a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f004 ff79 	bl	800a338 <USB_ReadInterrupts>
 8005446:	4603      	mov	r3, r0
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b10      	cmp	r3, #16
 800544e:	d161      	bne.n	8005514 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0210 	bic.w	r2, r2, #16
 800545e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4413      	add	r3, r2
 800547c:	3304      	adds	r3, #4
 800547e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	0c5b      	lsrs	r3, r3, #17
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	2b02      	cmp	r3, #2
 800548a:	d124      	bne.n	80054d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d035      	beq.n	8005504 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	6a38      	ldr	r0, [r7, #32]
 80054ac:	f004 fdb0 	bl	800a010 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054bc:	441a      	add	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ce:	441a      	add	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	615a      	str	r2, [r3, #20]
 80054d4:	e016      	b.n	8005504 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	0c5b      	lsrs	r3, r3, #17
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d110      	bne.n	8005504 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054e8:	2208      	movs	r2, #8
 80054ea:	4619      	mov	r1, r3
 80054ec:	6a38      	ldr	r0, [r7, #32]
 80054ee:	f004 fd8f 	bl	800a010 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054fe:	441a      	add	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0210 	orr.w	r2, r2, #16
 8005512:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f004 ff0d 	bl	800a338 <USB_ReadInterrupts>
 800551e:	4603      	mov	r3, r0
 8005520:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005524:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005528:	f040 80a7 	bne.w	800567a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f004 ff12 	bl	800a35e <USB_ReadDevAllOutEpInterrupt>
 800553a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800553c:	e099      	b.n	8005672 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 808e 	beq.w	8005666 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f004 ff36 	bl	800a3c6 <USB_ReadDevOutEPInterrupt>
 800555a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005572:	461a      	mov	r2, r3
 8005574:	2301      	movs	r3, #1
 8005576:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fea4 	bl	80062c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005596:	461a      	mov	r2, r3
 8005598:	2308      	movs	r3, #8
 800559a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800559c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 ff7a 	bl	8006498 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ba:	461a      	mov	r2, r3
 80055bc:	2310      	movs	r3, #16
 80055be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d030      	beq.n	800562c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d2:	2b80      	cmp	r3, #128	@ 0x80
 80055d4:	d109      	bne.n	80055ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	3304      	adds	r3, #4
 80055fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d108      	bne.n	800561a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2200      	movs	r2, #0
 800560c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	b2db      	uxtb	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f007 fa5b 	bl	800cad0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005626:	461a      	mov	r2, r3
 8005628:	2302      	movs	r3, #2
 800562a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005642:	461a      	mov	r2, r3
 8005644:	2320      	movs	r3, #32
 8005646:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005664:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	3301      	adds	r3, #1
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	f47f af62 	bne.w	800553e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f004 fe5a 	bl	800a338 <USB_ReadInterrupts>
 8005684:	4603      	mov	r3, r0
 8005686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800568a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800568e:	f040 80db 	bne.w	8005848 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f004 fe7b 	bl	800a392 <USB_ReadDevAllInEpInterrupt>
 800569c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80056a2:	e0cd      	b.n	8005840 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80c2 	beq.w	8005834 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f004 fea1 	bl	800a402 <USB_ReadDevInEPInterrupt>
 80056c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d057      	beq.n	800577c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	2201      	movs	r2, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69f9      	ldr	r1, [r7, #28]
 80056e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056ec:	4013      	ands	r3, r2
 80056ee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fc:	461a      	mov	r2, r3
 80056fe:	2301      	movs	r3, #1
 8005700:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	799b      	ldrb	r3, [r3, #6]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d132      	bne.n	8005770 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	3320      	adds	r3, #32
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4403      	add	r3, r0
 800572a:	331c      	adds	r3, #28
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4419      	add	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4403      	add	r3, r0
 800573e:	3320      	adds	r3, #32
 8005740:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d113      	bne.n	8005770 <HAL_PCD_IRQHandler+0x3a2>
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3324      	adds	r3, #36	@ 0x24
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d108      	bne.n	8005770 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005768:	461a      	mov	r2, r3
 800576a:	2101      	movs	r1, #1
 800576c:	f004 fea8 	bl	800a4c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	b2db      	uxtb	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f007 f925 	bl	800c9c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	2308      	movs	r3, #8
 8005796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ae:	461a      	mov	r2, r3
 80057b0:	2310      	movs	r3, #16
 80057b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ca:	461a      	mov	r2, r3
 80057cc:	2340      	movs	r3, #64	@ 0x40
 80057ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d023      	beq.n	8005822 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80057da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057dc:	6a38      	ldr	r0, [r7, #32]
 80057de:	f003 fe8f 	bl	8009500 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80057e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	3310      	adds	r3, #16
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	3304      	adds	r3, #4
 80057f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	78db      	ldrb	r3, [r3, #3]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d108      	bne.n	8005810 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	b2db      	uxtb	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f007 f972 	bl	800caf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800581c:	461a      	mov	r2, r3
 800581e:	2302      	movs	r3, #2
 8005820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800582c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fcbd 	bl	80061ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	3301      	adds	r3, #1
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	f47f af2e 	bne.w	80056a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f004 fd73 	bl	800a338 <USB_ReadInterrupts>
 8005852:	4603      	mov	r3, r0
 8005854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585c:	d122      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005878:	2b01      	cmp	r3, #1
 800587a:	d108      	bne.n	800588e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005884:	2100      	movs	r1, #0
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fea4 	bl	80065d4 <HAL_PCDEx_LPM_Callback>
 800588c:	e002      	b.n	8005894 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f007 f910 	bl	800cab4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80058a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f004 fd45 	bl	800a338 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058b8:	d112      	bne.n	80058e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d102      	bne.n	80058d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f007 f8cc 	bl	800ca68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80058de:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f004 fd27 	bl	800a338 <USB_ReadInterrupts>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f4:	f040 80b7 	bne.w	8005a66 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2110      	movs	r1, #16
 8005912:	4618      	mov	r0, r3
 8005914:	f003 fdf4 	bl	8009500 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800591c:	e046      	b.n	80059ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800591e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592a:	461a      	mov	r2, r3
 800592c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005930:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005950:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595e:	461a      	mov	r2, r3
 8005960:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005964:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005980:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005984:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a8:	3301      	adds	r3, #1
 80059aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	791b      	ldrb	r3, [r3, #4]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d3b2      	bcc.n	800591e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80059ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7bdb      	ldrb	r3, [r3, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d016      	beq.n	8005a02 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e4:	f043 030b 	orr.w	r3, r3, #11
 80059e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059fa:	f043 030b 	orr.w	r3, r3, #11
 80059fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a00:	e015      	b.n	8005a2e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a14:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005a18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a28:	f043 030b 	orr.w	r3, r3, #11
 8005a2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a50:	461a      	mov	r2, r3
 8005a52:	f004 fd35 	bl	800a4c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f004 fc64 	bl	800a338 <USB_ReadInterrupts>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7a:	d123      	bne.n	8005ac4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f004 fcfa 	bl	800a47a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f003 fdb1 	bl	80095f2 <USB_GetDevSpeed>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681c      	ldr	r4, [r3, #0]
 8005a9c:	f001 fa0a 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8005aa0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f003 fab5 	bl	8009018 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f006 ffb1 	bl	800ca16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f004 fc35 	bl	800a338 <USB_ReadInterrupts>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d10a      	bne.n	8005aee <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f006 ff8e 	bl	800c9fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695a      	ldr	r2, [r3, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f002 0208 	and.w	r2, r2, #8
 8005aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f004 fc20 	bl	800a338 <USB_ReadInterrupts>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	2b80      	cmp	r3, #128	@ 0x80
 8005b00:	d123      	bne.n	8005b4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b0e:	2301      	movs	r3, #1
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b12:	e014      	b.n	8005b3e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d105      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb0a 	bl	800614c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d3e4      	bcc.n	8005b14 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f004 fbf2 	bl	800a338 <USB_ReadInterrupts>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b5e:	d13c      	bne.n	8005bda <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b60:	2301      	movs	r3, #1
 8005b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b64:	e02b      	b.n	8005bbe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3318      	adds	r3, #24
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d115      	bne.n	8005bb8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	da12      	bge.n	8005bb8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b96:	4613      	mov	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3317      	adds	r3, #23
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 faca 	bl	800614c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	791b      	ldrb	r3, [r3, #4]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d3cd      	bcc.n	8005b66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 fbaa 	bl	800a338 <USB_ReadInterrupts>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bee:	d156      	bne.n	8005c9e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf4:	e045      	b.n	8005c82 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d12e      	bne.n	8005c7c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	da2b      	bge.n	8005c7c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005c30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d121      	bne.n	8005c7c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c78:	6053      	str	r3, [r2, #4]
            break;
 8005c7a:	e008      	b.n	8005c8e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	3301      	adds	r3, #1
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	791b      	ldrb	r3, [r3, #4]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d3b3      	bcc.n	8005bf6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f004 fb48 	bl	800a338 <USB_ReadInterrupts>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb2:	d10a      	bne.n	8005cca <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f006 ff2f 	bl	800cb18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f004 fb32 	bl	800a338 <USB_ReadInterrupts>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d115      	bne.n	8005d0a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f006 ff1f 	bl	800cb34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6859      	ldr	r1, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	e000      	b.n	8005d0a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005d08:	bf00      	nop
    }
  }
}
 8005d0a:	3734      	adds	r7, #52	@ 0x34
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd90      	pop	{r4, r7, pc}

08005d10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_PCD_SetAddress+0x1a>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e012      	b.n	8005d50 <HAL_PCD_SetAddress+0x40>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f004 fa91 	bl	800a268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	4608      	mov	r0, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	70fb      	strb	r3, [r7, #3]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	803b      	strh	r3, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da0f      	bge.n	8005d9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	3304      	adds	r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	705a      	strb	r2, [r3, #1]
 8005d9c:	e00f      	b.n	8005dbe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	f003 020f 	and.w	r2, r3, #15
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005dca:	883b      	ldrh	r3, [r7, #0]
 8005dcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	78ba      	ldrb	r2, [r7, #2]
 8005dd8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005dec:	78bb      	ldrb	r3, [r7, #2]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d102      	bne.n	8005df8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_PCD_EP_Open+0xae>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e00e      	b.n	8005e24 <HAL_PCD_EP_Open+0xcc>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f003 fc11 	bl	800963c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005e22:	7afb      	ldrb	r3, [r7, #11]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da0f      	bge.n	8005e60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 020f 	and.w	r2, r3, #15
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	3310      	adds	r3, #16
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	3304      	adds	r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	705a      	strb	r2, [r3, #1]
 8005e5e:	e00f      	b.n	8005e80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 020f 	and.w	r2, r3, #15
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	3304      	adds	r3, #4
 8005e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_PCD_EP_Close+0x6e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e00e      	b.n	8005eb8 <HAL_PCD_EP_Close+0x8c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f003 fc4f 	bl	800974c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	f003 020f 	and.w	r2, r3, #15
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2200      	movs	r2, #0
 8005f00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	799b      	ldrb	r3, [r3, #6]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d102      	bne.n	8005f1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	799b      	ldrb	r3, [r3, #6]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6979      	ldr	r1, [r7, #20]
 8005f28:	f003 fcec 	bl	8009904 <USB_EPStartXfer>

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	f003 020f 	and.w	r2, r3, #15
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005f58:	681b      	ldr	r3, [r3, #0]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	460b      	mov	r3, r1
 8005f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	3310      	adds	r3, #16
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	799b      	ldrb	r3, [r3, #6]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d102      	bne.n	8005fc0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	799b      	ldrb	r3, [r3, #6]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6979      	ldr	r1, [r7, #20]
 8005fcc:	f003 fc9a 	bl	8009904 <USB_EPStartXfer>

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	7912      	ldrb	r2, [r2, #4]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e04f      	b.n	8006098 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da0f      	bge.n	8006020 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	f003 020f 	and.w	r2, r3, #15
 8006006:	4613      	mov	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	3310      	adds	r3, #16
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	705a      	strb	r2, [r3, #1]
 800601e:	e00d      	b.n	800603c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	4613      	mov	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	3304      	adds	r3, #4
 8006034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	b2da      	uxtb	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_PCD_EP_SetStall+0x82>
 8006058:	2302      	movs	r3, #2
 800605a:	e01d      	b.n	8006098 <HAL_PCD_EP_SetStall+0xbe>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	4618      	mov	r0, r3
 800606c:	f004 f828 	bl	800a0c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	7999      	ldrb	r1, [r3, #6]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006088:	461a      	mov	r2, r3
 800608a:	f004 fa19 	bl	800a4c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	7912      	ldrb	r2, [r2, #4]
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e042      	b.n	8006144 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	da0f      	bge.n	80060e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	f003 020f 	and.w	r2, r3, #15
 80060cc:	4613      	mov	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	3310      	adds	r3, #16
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	4413      	add	r3, r2
 80060da:	3304      	adds	r3, #4
 80060dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	705a      	strb	r2, [r3, #1]
 80060e4:	e00f      	b.n	8006106 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	f003 020f 	and.w	r2, r3, #15
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	b2da      	uxtb	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_PCD_EP_ClrStall+0x86>
 8006122:	2302      	movs	r3, #2
 8006124:	e00e      	b.n	8006144 <HAL_PCD_EP_ClrStall+0xa4>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	4618      	mov	r0, r3
 8006136:	f004 f831 	bl	800a19c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800615c:	2b00      	cmp	r3, #0
 800615e:	da0c      	bge.n	800617a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	f003 020f 	and.w	r2, r3, #15
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	3310      	adds	r3, #16
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	3304      	adds	r3, #4
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e00c      	b.n	8006194 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	3304      	adds	r3, #4
 8006192:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68f9      	ldr	r1, [r7, #12]
 800619a:	4618      	mov	r0, r3
 800619c:	f003 fe50 	bl	8009e40 <USB_EPStopXfer>
 80061a0:	4603      	mov	r3, r0
 80061a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80061a4:	7afb      	ldrb	r3, [r7, #11]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b08a      	sub	sp, #40	@ 0x28
 80061b2:	af02      	add	r7, sp, #8
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	3310      	adds	r3, #16
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4413      	add	r3, r2
 80061d2:	3304      	adds	r3, #4
 80061d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d901      	bls.n	80061e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e06b      	b.n	80062be <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d902      	bls.n	8006202 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	3303      	adds	r3, #3
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800620a:	e02a      	b.n	8006262 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	429a      	cmp	r2, r3
 8006220:	d902      	bls.n	8006228 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3303      	adds	r3, #3
 800622c:	089b      	lsrs	r3, r3, #2
 800622e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68d9      	ldr	r1, [r3, #12]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	4603      	mov	r3, r0
 8006244:	6978      	ldr	r0, [r7, #20]
 8006246:	f003 fea5 	bl	8009f94 <USB_WritePacket>

    ep->xfer_buff  += len;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	441a      	add	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	429a      	cmp	r2, r3
 8006276:	d809      	bhi.n	800628c <PCD_WriteEmptyTxFifo+0xde>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006280:	429a      	cmp	r2, r3
 8006282:	d203      	bcs.n	800628c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1bf      	bne.n	800620c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	429a      	cmp	r2, r3
 8006296:	d811      	bhi.n	80062bc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	2201      	movs	r2, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	6939      	ldr	r1, [r7, #16]
 80062b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062b8:	4013      	ands	r3, r2
 80062ba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	333c      	adds	r3, #60	@ 0x3c
 80062e0:	3304      	adds	r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	799b      	ldrb	r3, [r3, #6]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d17b      	bne.n	80063f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d015      	beq.n	8006334 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4a61      	ldr	r2, [pc, #388]	@ (8006490 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	f240 80b9 	bls.w	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80b3 	beq.w	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	461a      	mov	r2, r3
 800632c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006330:	6093      	str	r3, [r2, #8]
 8006332:	e0a7      	b.n	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634a:	461a      	mov	r2, r3
 800634c:	2320      	movs	r3, #32
 800634e:	6093      	str	r3, [r2, #8]
 8006350:	e098      	b.n	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 8093 	bne.w	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4a4b      	ldr	r2, [pc, #300]	@ (8006490 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d90f      	bls.n	8006386 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	461a      	mov	r2, r3
 800637e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006382:	6093      	str	r3, [r2, #8]
 8006384:	e07e      	b.n	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	4413      	add	r3, r2
 8006398:	3304      	adds	r3, #4
 800639a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1a      	ldr	r2, [r3, #32]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	0159      	lsls	r1, r3, #5
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	440b      	add	r3, r1
 80063a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b2:	1ad2      	subs	r2, r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d114      	bne.n	80063e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063d0:	461a      	mov	r2, r3
 80063d2:	2101      	movs	r1, #1
 80063d4:	f004 f874 	bl	800a4c0 <USB_EP0_OutStart>
 80063d8:	e006      	b.n	80063e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f006 face 	bl	800c990 <HAL_PCD_DataOutStageCallback>
 80063f4:	e046      	b.n	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4a26      	ldr	r2, [pc, #152]	@ (8006494 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d124      	bne.n	8006448 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006414:	461a      	mov	r2, r3
 8006416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800641a:	6093      	str	r3, [r2, #8]
 800641c:	e032      	b.n	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006434:	461a      	mov	r2, r3
 8006436:	2320      	movs	r3, #32
 8006438:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f006 faa5 	bl	800c990 <HAL_PCD_DataOutStageCallback>
 8006446:	e01d      	b.n	8006484 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d114      	bne.n	8006478 <PCD_EP_OutXfrComplete_int+0x1b0>
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d108      	bne.n	8006478 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006470:	461a      	mov	r2, r3
 8006472:	2100      	movs	r1, #0
 8006474:	f004 f824 	bl	800a4c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f006 fa86 	bl	800c990 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	4f54300a 	.word	0x4f54300a
 8006494:	4f54310a 	.word	0x4f54310a

08006498 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	333c      	adds	r3, #60	@ 0x3c
 80064b0:	3304      	adds	r3, #4
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a15      	ldr	r2, [pc, #84]	@ (8006520 <PCD_EP_OutSetupPacket_int+0x88>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d90e      	bls.n	80064ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e4:	461a      	mov	r2, r3
 80064e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f006 fa3d 	bl	800c96c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006520 <PCD_EP_OutSetupPacket_int+0x88>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d90c      	bls.n	8006514 <PCD_EP_OutSetupPacket_int+0x7c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	799b      	ldrb	r3, [r3, #6]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d108      	bne.n	8006514 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800650c:	461a      	mov	r2, r3
 800650e:	2101      	movs	r1, #1
 8006510:	f003 ffd6 	bl	800a4c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	4f54300a 	.word	0x4f54300a

08006524 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
 8006530:	4613      	mov	r3, r2
 8006532:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d107      	bne.n	8006552 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006542:	883b      	ldrh	r3, [r7, #0]
 8006544:	0419      	lsls	r1, r3, #16
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	430a      	orrs	r2, r1
 800654e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006550:	e028      	b.n	80065a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4413      	add	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	e00d      	b.n	8006582 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	3340      	adds	r3, #64	@ 0x40
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	0c1b      	lsrs	r3, r3, #16
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4413      	add	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	3301      	adds	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	3b01      	subs	r3, #1
 8006588:	429a      	cmp	r2, r3
 800658a:	d3ec      	bcc.n	8006566 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800658c:	883b      	ldrh	r3, [r7, #0]
 800658e:	0418      	lsls	r0, r3, #16
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	3b01      	subs	r3, #1
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	4302      	orrs	r2, r0
 800659c:	3340      	adds	r3, #64	@ 0x40
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	887a      	ldrh	r2, [r7, #2]
 80065c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e267      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d075      	beq.n	80066f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800660a:	4b88      	ldr	r3, [pc, #544]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b04      	cmp	r3, #4
 8006614:	d00c      	beq.n	8006630 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006616:	4b85      	ldr	r3, [pc, #532]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800661e:	2b08      	cmp	r3, #8
 8006620:	d112      	bne.n	8006648 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006622:	4b82      	ldr	r3, [pc, #520]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800662a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800662e:	d10b      	bne.n	8006648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006630:	4b7e      	ldr	r3, [pc, #504]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d05b      	beq.n	80066f4 <HAL_RCC_OscConfig+0x108>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d157      	bne.n	80066f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e242      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006650:	d106      	bne.n	8006660 <HAL_RCC_OscConfig+0x74>
 8006652:	4b76      	ldr	r3, [pc, #472]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a75      	ldr	r2, [pc, #468]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	e01d      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x98>
 800666a:	4b70      	ldr	r3, [pc, #448]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a6f      	ldr	r2, [pc, #444]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4b6d      	ldr	r3, [pc, #436]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a6c      	ldr	r2, [pc, #432]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e00b      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006684:	4b69      	ldr	r3, [pc, #420]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a68      	ldr	r2, [pc, #416]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800668a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	4b66      	ldr	r3, [pc, #408]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a65      	ldr	r2, [pc, #404]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800669a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d013      	beq.n	80066cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a4:	f7fc ffa6 	bl	80035f4 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fc ffa2 	bl	80035f4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	@ 0x64
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e207      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066be:	4b5b      	ldr	r3, [pc, #364]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0xc0>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fc ff92 	bl	80035f4 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fc ff8e 	bl	80035f4 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	@ 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e1f3      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e6:	4b51      	ldr	r3, [pc, #324]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0xe8>
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d063      	beq.n	80067ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006702:	4b4a      	ldr	r3, [pc, #296]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 030c 	and.w	r3, r3, #12
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800670e:	4b47      	ldr	r3, [pc, #284]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006716:	2b08      	cmp	r3, #8
 8006718:	d11c      	bne.n	8006754 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800671a:	4b44      	ldr	r3, [pc, #272]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d116      	bne.n	8006754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006726:	4b41      	ldr	r3, [pc, #260]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_RCC_OscConfig+0x152>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d001      	beq.n	800673e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e1c7      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673e:	4b3b      	ldr	r3, [pc, #236]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4937      	ldr	r1, [pc, #220]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006752:	e03a      	b.n	80067ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d020      	beq.n	800679e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800675c:	4b34      	ldr	r3, [pc, #208]	@ (8006830 <HAL_RCC_OscConfig+0x244>)
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fc ff47 	bl	80035f4 <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676a:	f7fc ff43 	bl	80035f4 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e1a8      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677c:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006788:	4b28      	ldr	r3, [pc, #160]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4925      	ldr	r1, [pc, #148]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]
 800679c:	e015      	b.n	80067ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800679e:	4b24      	ldr	r3, [pc, #144]	@ (8006830 <HAL_RCC_OscConfig+0x244>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fc ff26 	bl	80035f4 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ac:	f7fc ff22 	bl	80035f4 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e187      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067be:	4b1b      	ldr	r3, [pc, #108]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d036      	beq.n	8006844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067de:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <HAL_RCC_OscConfig+0x248>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e4:	f7fc ff06 	bl	80035f4 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ec:	f7fc ff02 	bl	80035f4 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e167      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x200>
 800680a:	e01b      	b.n	8006844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800680c:	4b09      	ldr	r3, [pc, #36]	@ (8006834 <HAL_RCC_OscConfig+0x248>)
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006812:	f7fc feef 	bl	80035f4 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006818:	e00e      	b.n	8006838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800681a:	f7fc feeb 	bl	80035f4 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d907      	bls.n	8006838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e150      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
 800682c:	40023800 	.word	0x40023800
 8006830:	42470000 	.word	0x42470000
 8006834:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006838:	4b88      	ldr	r3, [pc, #544]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 800683a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1ea      	bne.n	800681a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8097 	beq.w	8006980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006856:	4b81      	ldr	r3, [pc, #516]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10f      	bne.n	8006882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006862:	2300      	movs	r3, #0
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	4b7d      	ldr	r3, [pc, #500]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 800686c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006870:	6413      	str	r3, [r2, #64]	@ 0x40
 8006872:	4b7a      	ldr	r3, [pc, #488]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687e:	2301      	movs	r3, #1
 8006880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006882:	4b77      	ldr	r3, [pc, #476]	@ (8006a60 <HAL_RCC_OscConfig+0x474>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d118      	bne.n	80068c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800688e:	4b74      	ldr	r3, [pc, #464]	@ (8006a60 <HAL_RCC_OscConfig+0x474>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a73      	ldr	r2, [pc, #460]	@ (8006a60 <HAL_RCC_OscConfig+0x474>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689a:	f7fc feab 	bl	80035f4 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a2:	f7fc fea7 	bl	80035f4 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e10c      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a60 <HAL_RCC_OscConfig+0x474>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d106      	bne.n	80068d6 <HAL_RCC_OscConfig+0x2ea>
 80068c8:	4b64      	ldr	r3, [pc, #400]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068cc:	4a63      	ldr	r2, [pc, #396]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d4:	e01c      	b.n	8006910 <HAL_RCC_OscConfig+0x324>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x30c>
 80068de:	4b5f      	ldr	r3, [pc, #380]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e2:	4a5e      	ldr	r2, [pc, #376]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068e4:	f043 0304 	orr.w	r3, r3, #4
 80068e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ea:	4b5c      	ldr	r3, [pc, #368]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ee:	4a5b      	ldr	r2, [pc, #364]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f6:	e00b      	b.n	8006910 <HAL_RCC_OscConfig+0x324>
 80068f8:	4b58      	ldr	r3, [pc, #352]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fc:	4a57      	ldr	r2, [pc, #348]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	6713      	str	r3, [r2, #112]	@ 0x70
 8006904:	4b55      	ldr	r3, [pc, #340]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006908:	4a54      	ldr	r2, [pc, #336]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 800690a:	f023 0304 	bic.w	r3, r3, #4
 800690e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fc fe6c 	bl	80035f4 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800691e:	e00a      	b.n	8006936 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006920:	f7fc fe68 	bl	80035f4 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e0cb      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006936:	4b49      	ldr	r3, [pc, #292]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ee      	beq.n	8006920 <HAL_RCC_OscConfig+0x334>
 8006942:	e014      	b.n	800696e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006944:	f7fc fe56 	bl	80035f4 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fc fe52 	bl	80035f4 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e0b5      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006962:	4b3e      	ldr	r3, [pc, #248]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1ee      	bne.n	800694c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d105      	bne.n	8006980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006974:	4b39      	ldr	r3, [pc, #228]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006978:	4a38      	ldr	r2, [pc, #224]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 800697a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800697e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80a1 	beq.w	8006acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800698a:	4b34      	ldr	r3, [pc, #208]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b08      	cmp	r3, #8
 8006994:	d05c      	beq.n	8006a50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d141      	bne.n	8006a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699e:	4b31      	ldr	r3, [pc, #196]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a4:	f7fc fe26 	bl	80035f4 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ac:	f7fc fe22 	bl	80035f4 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e087      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069be:	4b27      	ldr	r3, [pc, #156]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69da      	ldr	r2, [r3, #28]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	019b      	lsls	r3, r3, #6
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	3b01      	subs	r3, #1
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	491b      	ldr	r1, [pc, #108]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fa:	f7fc fdfb 	bl	80035f4 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a02:	f7fc fdf7 	bl	80035f4 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e05c      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a14:	4b11      	ldr	r3, [pc, #68]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x416>
 8006a20:	e054      	b.n	8006acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a22:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a28:	f7fc fde4 	bl	80035f4 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fc fde0 	bl	80035f4 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e045      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a42:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <HAL_RCC_OscConfig+0x470>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x444>
 8006a4e:	e03d      	b.n	8006acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d107      	bne.n	8006a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e038      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	40007000 	.word	0x40007000
 8006a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad8 <HAL_RCC_OscConfig+0x4ec>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d028      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d121      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d11a      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a98:	4013      	ands	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d111      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d107      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d001      	beq.n	8006acc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40023800 	.word	0x40023800

08006adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0cc      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af0:	4b68      	ldr	r3, [pc, #416]	@ (8006c94 <HAL_RCC_ClockConfig+0x1b8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d90c      	bls.n	8006b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afe:	4b65      	ldr	r3, [pc, #404]	@ (8006c94 <HAL_RCC_ClockConfig+0x1b8>)
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b06:	4b63      	ldr	r3, [pc, #396]	@ (8006c94 <HAL_RCC_ClockConfig+0x1b8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d001      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0b8      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d020      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b30:	4b59      	ldr	r3, [pc, #356]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	4a58      	ldr	r2, [pc, #352]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b48:	4b53      	ldr	r3, [pc, #332]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	4a52      	ldr	r2, [pc, #328]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b54:	4b50      	ldr	r3, [pc, #320]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	494d      	ldr	r1, [pc, #308]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d044      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d107      	bne.n	8006b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7a:	4b47      	ldr	r3, [pc, #284]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d119      	bne.n	8006bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e07f      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d003      	beq.n	8006b9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d107      	bne.n	8006baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e06f      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006baa:	4b3b      	ldr	r3, [pc, #236]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e067      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bba:	4b37      	ldr	r3, [pc, #220]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f023 0203 	bic.w	r2, r3, #3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4934      	ldr	r1, [pc, #208]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bcc:	f7fc fd12 	bl	80035f4 <HAL_GetTick>
 8006bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd2:	e00a      	b.n	8006bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd4:	f7fc fd0e 	bl	80035f4 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e04f      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bea:	4b2b      	ldr	r3, [pc, #172]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 020c 	and.w	r2, r3, #12
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d1eb      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bfc:	4b25      	ldr	r3, [pc, #148]	@ (8006c94 <HAL_RCC_ClockConfig+0x1b8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d20c      	bcs.n	8006c24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0a:	4b22      	ldr	r3, [pc, #136]	@ (8006c94 <HAL_RCC_ClockConfig+0x1b8>)
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c12:	4b20      	ldr	r3, [pc, #128]	@ (8006c94 <HAL_RCC_ClockConfig+0x1b8>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e032      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c30:	4b19      	ldr	r3, [pc, #100]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4916      	ldr	r1, [pc, #88]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c4e:	4b12      	ldr	r3, [pc, #72]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	490e      	ldr	r1, [pc, #56]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c62:	f000 f821 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	490a      	ldr	r1, [pc, #40]	@ (8006c9c <HAL_RCC_ClockConfig+0x1c0>)
 8006c74:	5ccb      	ldrb	r3, [r1, r3]
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fc fc72 	bl	800356c <HAL_InitTick>

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40023c00 	.word	0x40023c00
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	080100c8 	.word	0x080100c8
 8006ca0:	20000018 	.word	0x20000018
 8006ca4:	2000001c 	.word	0x2000001c

08006ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cac:	b094      	sub	sp, #80	@ 0x50
 8006cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc0:	4b79      	ldr	r3, [pc, #484]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 030c 	and.w	r3, r3, #12
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d00d      	beq.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	f200 80e1 	bhi.w	8006e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0x34>
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cda:	e0db      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cdc:	4b73      	ldr	r3, [pc, #460]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x204>)
 8006cde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ce0:	e0db      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ce2:	4b73      	ldr	r3, [pc, #460]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ce6:	e0d8      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d063      	beq.n	8006dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	099b      	lsrs	r3, r3, #6
 8006d04:	2200      	movs	r2, #0
 8006d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d12:	2300      	movs	r3, #0
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	f04f 0000 	mov.w	r0, #0
 8006d22:	f04f 0100 	mov.w	r1, #0
 8006d26:	0159      	lsls	r1, r3, #5
 8006d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d2c:	0150      	lsls	r0, r2, #5
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4621      	mov	r1, r4
 8006d34:	1a51      	subs	r1, r2, r1
 8006d36:	6139      	str	r1, [r7, #16]
 8006d38:	4629      	mov	r1, r5
 8006d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	018b      	lsls	r3, r1, #6
 8006d50:	4651      	mov	r1, sl
 8006d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d56:	4651      	mov	r1, sl
 8006d58:	018a      	lsls	r2, r1, #6
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8006d60:	4659      	mov	r1, fp
 8006d62:	eb63 0901 	sbc.w	r9, r3, r1
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d7a:	4690      	mov	r8, r2
 8006d7c:	4699      	mov	r9, r3
 8006d7e:	4623      	mov	r3, r4
 8006d80:	eb18 0303 	adds.w	r3, r8, r3
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	462b      	mov	r3, r5
 8006d88:	eb49 0303 	adc.w	r3, r9, r3
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	024b      	lsls	r3, r1, #9
 8006d9e:	4621      	mov	r1, r4
 8006da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006da4:	4621      	mov	r1, r4
 8006da6:	024a      	lsls	r2, r1, #9
 8006da8:	4610      	mov	r0, r2
 8006daa:	4619      	mov	r1, r3
 8006dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dae:	2200      	movs	r2, #0
 8006db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006db8:	f7f9 ff46 	bl	8000c48 <__aeabi_uldivmod>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc4:	e058      	b.n	8006e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dc6:	4b38      	ldr	r3, [pc, #224]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	099b      	lsrs	r3, r3, #6
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dd6:	623b      	str	r3, [r7, #32]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	f04f 0000 	mov.w	r0, #0
 8006de8:	f04f 0100 	mov.w	r1, #0
 8006dec:	0159      	lsls	r1, r3, #5
 8006dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df2:	0150      	lsls	r0, r2, #5
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4641      	mov	r1, r8
 8006dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dfe:	4649      	mov	r1, r9
 8006e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e18:	ebb2 040a 	subs.w	r4, r2, sl
 8006e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	00eb      	lsls	r3, r5, #3
 8006e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e2e:	00e2      	lsls	r2, r4, #3
 8006e30:	4614      	mov	r4, r2
 8006e32:	461d      	mov	r5, r3
 8006e34:	4643      	mov	r3, r8
 8006e36:	18e3      	adds	r3, r4, r3
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	eb45 0303 	adc.w	r3, r5, r3
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e4e:	4629      	mov	r1, r5
 8006e50:	028b      	lsls	r3, r1, #10
 8006e52:	4621      	mov	r1, r4
 8006e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e58:	4621      	mov	r1, r4
 8006e5a:	028a      	lsls	r2, r1, #10
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e62:	2200      	movs	r2, #0
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	61fa      	str	r2, [r7, #28]
 8006e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e6c:	f7f9 feec 	bl	8000c48 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4613      	mov	r3, r2
 8006e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	3301      	adds	r3, #1
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e92:	e002      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x204>)
 8006e96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3750      	adds	r7, #80	@ 0x50
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	007a1200 	.word	0x007a1200

08006eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	@ (8006ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000018 	.word	0x20000018

08006ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ed0:	f7ff fff0 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0a9b      	lsrs	r3, r3, #10
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4903      	ldr	r1, [pc, #12]	@ (8006ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ee2:	5ccb      	ldrb	r3, [r1, r3]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	080100d8 	.word	0x080100d8

08006ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ef8:	f7ff ffdc 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	0b5b      	lsrs	r3, r3, #13
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	4903      	ldr	r1, [pc, #12]	@ (8006f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f0a:	5ccb      	ldrb	r3, [r1, r3]
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40023800 	.word	0x40023800
 8006f18:	080100d8 	.word	0x080100d8

08006f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e041      	b.n	8006fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fc f82c 	bl	8002fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 fcdc 	bl	8007918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d001      	beq.n	8006fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e04e      	b.n	8007072 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a23      	ldr	r2, [pc, #140]	@ (8007080 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d022      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x80>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffe:	d01d      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x80>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1f      	ldr	r2, [pc, #124]	@ (8007084 <HAL_TIM_Base_Start_IT+0xc8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d018      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x80>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1e      	ldr	r2, [pc, #120]	@ (8007088 <HAL_TIM_Base_Start_IT+0xcc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x80>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1c      	ldr	r2, [pc, #112]	@ (800708c <HAL_TIM_Base_Start_IT+0xd0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00e      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x80>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1b      	ldr	r2, [pc, #108]	@ (8007090 <HAL_TIM_Base_Start_IT+0xd4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x80>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a19      	ldr	r2, [pc, #100]	@ (8007094 <HAL_TIM_Base_Start_IT+0xd8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x80>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a18      	ldr	r2, [pc, #96]	@ (8007098 <HAL_TIM_Base_Start_IT+0xdc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d111      	bne.n	8007060 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b06      	cmp	r3, #6
 800704c:	d010      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	e007      	b.n	8007070 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40010000 	.word	0x40010000
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800
 800708c:	40000c00 	.word	0x40000c00
 8007090:	40010400 	.word	0x40010400
 8007094:	40014000 	.word	0x40014000
 8007098:	40001800 	.word	0x40001800

0800709c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e041      	b.n	8007132 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f839 	bl	800713a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f000 fc1c 	bl	8007918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <HAL_TIM_PWM_Start+0x24>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	bf14      	ite	ne
 800716c:	2301      	movne	r3, #1
 800716e:	2300      	moveq	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e022      	b.n	80071ba <HAL_TIM_PWM_Start+0x6a>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b04      	cmp	r3, #4
 8007178:	d109      	bne.n	800718e <HAL_TIM_PWM_Start+0x3e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b01      	cmp	r3, #1
 8007184:	bf14      	ite	ne
 8007186:	2301      	movne	r3, #1
 8007188:	2300      	moveq	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	e015      	b.n	80071ba <HAL_TIM_PWM_Start+0x6a>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d109      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x58>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e008      	b.n	80071ba <HAL_TIM_PWM_Start+0x6a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	bf14      	ite	ne
 80071b4:	2301      	movne	r3, #1
 80071b6:	2300      	moveq	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e07c      	b.n	80072bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <HAL_TIM_PWM_Start+0x82>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d0:	e013      	b.n	80071fa <HAL_TIM_PWM_Start+0xaa>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_PWM_Start+0x92>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071e0:	e00b      	b.n	80071fa <HAL_TIM_PWM_Start+0xaa>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_PWM_Start+0xa2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071f0:	e003      	b.n	80071fa <HAL_TIM_PWM_Start+0xaa>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2201      	movs	r2, #1
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fe7e 	bl	8007f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2d      	ldr	r2, [pc, #180]	@ (80072c4 <HAL_TIM_PWM_Start+0x174>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <HAL_TIM_PWM_Start+0xcc>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2c      	ldr	r2, [pc, #176]	@ (80072c8 <HAL_TIM_PWM_Start+0x178>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d101      	bne.n	8007220 <HAL_TIM_PWM_Start+0xd0>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <HAL_TIM_PWM_Start+0xd2>
 8007220:	2300      	movs	r3, #0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007234:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a22      	ldr	r2, [pc, #136]	@ (80072c4 <HAL_TIM_PWM_Start+0x174>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d022      	beq.n	8007286 <HAL_TIM_PWM_Start+0x136>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007248:	d01d      	beq.n	8007286 <HAL_TIM_PWM_Start+0x136>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1f      	ldr	r2, [pc, #124]	@ (80072cc <HAL_TIM_PWM_Start+0x17c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d018      	beq.n	8007286 <HAL_TIM_PWM_Start+0x136>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1d      	ldr	r2, [pc, #116]	@ (80072d0 <HAL_TIM_PWM_Start+0x180>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <HAL_TIM_PWM_Start+0x136>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1c      	ldr	r2, [pc, #112]	@ (80072d4 <HAL_TIM_PWM_Start+0x184>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00e      	beq.n	8007286 <HAL_TIM_PWM_Start+0x136>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a16      	ldr	r2, [pc, #88]	@ (80072c8 <HAL_TIM_PWM_Start+0x178>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d009      	beq.n	8007286 <HAL_TIM_PWM_Start+0x136>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a18      	ldr	r2, [pc, #96]	@ (80072d8 <HAL_TIM_PWM_Start+0x188>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <HAL_TIM_PWM_Start+0x136>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a16      	ldr	r2, [pc, #88]	@ (80072dc <HAL_TIM_PWM_Start+0x18c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d111      	bne.n	80072aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b06      	cmp	r3, #6
 8007296:	d010      	beq.n	80072ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a8:	e007      	b.n	80072ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0201 	orr.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40010000 	.word	0x40010000
 80072c8:	40010400 	.word	0x40010400
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40001800 	.word	0x40001800

080072e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fe06 	bl	8007f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2e      	ldr	r2, [pc, #184]	@ (80073b8 <HAL_TIM_PWM_Stop+0xd8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d004      	beq.n	800730c <HAL_TIM_PWM_Stop+0x2c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a2d      	ldr	r2, [pc, #180]	@ (80073bc <HAL_TIM_PWM_Stop+0xdc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d101      	bne.n	8007310 <HAL_TIM_PWM_Stop+0x30>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <HAL_TIM_PWM_Stop+0x32>
 8007310:	2300      	movs	r3, #0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10f      	bne.n	8007346 <HAL_TIM_PWM_Stop+0x66>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d107      	bne.n	8007346 <HAL_TIM_PWM_Stop+0x66>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007344:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007350:	4013      	ands	r3, r2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10f      	bne.n	8007376 <HAL_TIM_PWM_Stop+0x96>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <HAL_TIM_PWM_Stop+0x96>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <HAL_TIM_PWM_Stop+0xa6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007384:	e013      	b.n	80073ae <HAL_TIM_PWM_Stop+0xce>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d104      	bne.n	8007396 <HAL_TIM_PWM_Stop+0xb6>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007394:	e00b      	b.n	80073ae <HAL_TIM_PWM_Stop+0xce>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b08      	cmp	r3, #8
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_PWM_Stop+0xc6>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073a4:	e003      	b.n	80073ae <HAL_TIM_PWM_Stop+0xce>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40010400 	.word	0x40010400

080073c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d020      	beq.n	8007424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0202 	mvn.w	r2, #2
 80073f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa65 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa57 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa68 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d020      	beq.n	8007470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01b      	beq.n	8007470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0204 	mvn.w	r2, #4
 8007440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa3f 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 800745c:	e005      	b.n	800746a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa31 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa42 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d020      	beq.n	80074bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01b      	beq.n	80074bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0208 	mvn.w	r2, #8
 800748c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2204      	movs	r2, #4
 8007492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fa19 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80074a8:	e005      	b.n	80074b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa0b 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa1c 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d020      	beq.n	8007508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01b      	beq.n	8007508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0210 	mvn.w	r2, #16
 80074d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2208      	movs	r2, #8
 80074de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9f3 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80074f4:	e005      	b.n	8007502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f9e5 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9f6 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0201 	mvn.w	r2, #1
 8007524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9c3 	bl	80078b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00c      	beq.n	8007550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fdd8 	bl	8008100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d007      	beq.n	8007574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800756c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f9c7 	bl	8007902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0220 	mvn.w	r2, #32
 8007590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fdaa 	bl	80080ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e0ae      	b.n	800771c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b0c      	cmp	r3, #12
 80075ca:	f200 809f 	bhi.w	800770c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075ce:	a201      	add	r2, pc, #4	@ (adr r2, 80075d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	08007609 	.word	0x08007609
 80075d8:	0800770d 	.word	0x0800770d
 80075dc:	0800770d 	.word	0x0800770d
 80075e0:	0800770d 	.word	0x0800770d
 80075e4:	08007649 	.word	0x08007649
 80075e8:	0800770d 	.word	0x0800770d
 80075ec:	0800770d 	.word	0x0800770d
 80075f0:	0800770d 	.word	0x0800770d
 80075f4:	0800768b 	.word	0x0800768b
 80075f8:	0800770d 	.word	0x0800770d
 80075fc:	0800770d 	.word	0x0800770d
 8007600:	0800770d 	.word	0x0800770d
 8007604:	080076cb 	.word	0x080076cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fa2e 	bl	8007a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0208 	orr.w	r2, r2, #8
 8007622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0204 	bic.w	r2, r2, #4
 8007632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6999      	ldr	r1, [r3, #24]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	619a      	str	r2, [r3, #24]
      break;
 8007646:	e064      	b.n	8007712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68b9      	ldr	r1, [r7, #8]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fa7e 	bl	8007b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6999      	ldr	r1, [r3, #24]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	021a      	lsls	r2, r3, #8
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	619a      	str	r2, [r3, #24]
      break;
 8007688:	e043      	b.n	8007712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fad3 	bl	8007c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0208 	orr.w	r2, r2, #8
 80076a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0204 	bic.w	r2, r2, #4
 80076b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69d9      	ldr	r1, [r3, #28]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	61da      	str	r2, [r3, #28]
      break;
 80076c8:	e023      	b.n	8007712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fb27 	bl	8007d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69da      	ldr	r2, [r3, #28]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69d9      	ldr	r1, [r3, #28]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	021a      	lsls	r2, r3, #8
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	61da      	str	r2, [r3, #28]
      break;
 800770a:	e002      	b.n	8007712 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
      break;
 8007710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_TIM_ConfigClockSource+0x1c>
 800773c:	2302      	movs	r3, #2
 800773e:	e0b4      	b.n	80078aa <HAL_TIM_ConfigClockSource+0x186>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800775e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007778:	d03e      	beq.n	80077f8 <HAL_TIM_ConfigClockSource+0xd4>
 800777a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800777e:	f200 8087 	bhi.w	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007786:	f000 8086 	beq.w	8007896 <HAL_TIM_ConfigClockSource+0x172>
 800778a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800778e:	d87f      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 8007790:	2b70      	cmp	r3, #112	@ 0x70
 8007792:	d01a      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0xa6>
 8007794:	2b70      	cmp	r3, #112	@ 0x70
 8007796:	d87b      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 8007798:	2b60      	cmp	r3, #96	@ 0x60
 800779a:	d050      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x11a>
 800779c:	2b60      	cmp	r3, #96	@ 0x60
 800779e:	d877      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077a0:	2b50      	cmp	r3, #80	@ 0x50
 80077a2:	d03c      	beq.n	800781e <HAL_TIM_ConfigClockSource+0xfa>
 80077a4:	2b50      	cmp	r3, #80	@ 0x50
 80077a6:	d873      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077a8:	2b40      	cmp	r3, #64	@ 0x40
 80077aa:	d058      	beq.n	800785e <HAL_TIM_ConfigClockSource+0x13a>
 80077ac:	2b40      	cmp	r3, #64	@ 0x40
 80077ae:	d86f      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077b0:	2b30      	cmp	r3, #48	@ 0x30
 80077b2:	d064      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077b4:	2b30      	cmp	r3, #48	@ 0x30
 80077b6:	d86b      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d060      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d867      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d05c      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d05a      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077c8:	e062      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077da:	f000 fb73 	bl	8007ec4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	609a      	str	r2, [r3, #8]
      break;
 80077f6:	e04f      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007808:	f000 fb5c 	bl	8007ec4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800781a:	609a      	str	r2, [r3, #8]
      break;
 800781c:	e03c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800782a:	461a      	mov	r2, r3
 800782c:	f000 fad0 	bl	8007dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2150      	movs	r1, #80	@ 0x50
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fb29 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 800783c:	e02c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800784a:	461a      	mov	r2, r3
 800784c:	f000 faef 	bl	8007e2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2160      	movs	r1, #96	@ 0x60
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fb19 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 800785c:	e01c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800786a:	461a      	mov	r2, r3
 800786c:	f000 fab0 	bl	8007dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2140      	movs	r1, #64	@ 0x40
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fb09 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 800787c:	e00c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f000 fb00 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 800788e:	e003      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
      break;
 8007894:	e000      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a46      	ldr	r2, [pc, #280]	@ (8007a44 <TIM_Base_SetConfig+0x12c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d013      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007936:	d00f      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a43      	ldr	r2, [pc, #268]	@ (8007a48 <TIM_Base_SetConfig+0x130>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00b      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a42      	ldr	r2, [pc, #264]	@ (8007a4c <TIM_Base_SetConfig+0x134>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d007      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a41      	ldr	r2, [pc, #260]	@ (8007a50 <TIM_Base_SetConfig+0x138>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a40      	ldr	r2, [pc, #256]	@ (8007a54 <TIM_Base_SetConfig+0x13c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d108      	bne.n	800796a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a35      	ldr	r2, [pc, #212]	@ (8007a44 <TIM_Base_SetConfig+0x12c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d02b      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007978:	d027      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a32      	ldr	r2, [pc, #200]	@ (8007a48 <TIM_Base_SetConfig+0x130>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d023      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a31      	ldr	r2, [pc, #196]	@ (8007a4c <TIM_Base_SetConfig+0x134>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d01f      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a30      	ldr	r2, [pc, #192]	@ (8007a50 <TIM_Base_SetConfig+0x138>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d01b      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a2f      	ldr	r2, [pc, #188]	@ (8007a54 <TIM_Base_SetConfig+0x13c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d017      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a2e      	ldr	r2, [pc, #184]	@ (8007a58 <TIM_Base_SetConfig+0x140>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d013      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a2d      	ldr	r2, [pc, #180]	@ (8007a5c <TIM_Base_SetConfig+0x144>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00f      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007a60 <TIM_Base_SetConfig+0x148>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00b      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a2b      	ldr	r2, [pc, #172]	@ (8007a64 <TIM_Base_SetConfig+0x14c>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d007      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a2a      	ldr	r2, [pc, #168]	@ (8007a68 <TIM_Base_SetConfig+0x150>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d003      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a29      	ldr	r2, [pc, #164]	@ (8007a6c <TIM_Base_SetConfig+0x154>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d108      	bne.n	80079dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a10      	ldr	r2, [pc, #64]	@ (8007a44 <TIM_Base_SetConfig+0x12c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_Base_SetConfig+0xf8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a12      	ldr	r2, [pc, #72]	@ (8007a54 <TIM_Base_SetConfig+0x13c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d103      	bne.n	8007a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d105      	bne.n	8007a36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f023 0201 	bic.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	611a      	str	r2, [r3, #16]
  }
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800
 8007a50:	40000c00 	.word	0x40000c00
 8007a54:	40010400 	.word	0x40010400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400
 8007a60:	40014800 	.word	0x40014800
 8007a64:	40001800 	.word	0x40001800
 8007a68:	40001c00 	.word	0x40001c00
 8007a6c:	40002000 	.word	0x40002000

08007a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f023 0201 	bic.w	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f023 0302 	bic.w	r3, r3, #2
 8007ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a20      	ldr	r2, [pc, #128]	@ (8007b48 <TIM_OC1_SetConfig+0xd8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC1_SetConfig+0x64>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a1f      	ldr	r2, [pc, #124]	@ (8007b4c <TIM_OC1_SetConfig+0xdc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d10c      	bne.n	8007aee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0308 	bic.w	r3, r3, #8
 8007ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 0304 	bic.w	r3, r3, #4
 8007aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <TIM_OC1_SetConfig+0xd8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC1_SetConfig+0x8e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a14      	ldr	r2, [pc, #80]	@ (8007b4c <TIM_OC1_SetConfig+0xdc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d111      	bne.n	8007b22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	621a      	str	r2, [r3, #32]
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40010000 	.word	0x40010000
 8007b4c:	40010400 	.word	0x40010400

08007b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f023 0210 	bic.w	r2, r3, #16
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f023 0320 	bic.w	r3, r3, #32
 8007b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a22      	ldr	r2, [pc, #136]	@ (8007c34 <TIM_OC2_SetConfig+0xe4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_OC2_SetConfig+0x68>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a21      	ldr	r2, [pc, #132]	@ (8007c38 <TIM_OC2_SetConfig+0xe8>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d10d      	bne.n	8007bd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a17      	ldr	r2, [pc, #92]	@ (8007c34 <TIM_OC2_SetConfig+0xe4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC2_SetConfig+0x94>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a16      	ldr	r2, [pc, #88]	@ (8007c38 <TIM_OC2_SetConfig+0xe8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d113      	bne.n	8007c0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	621a      	str	r2, [r3, #32]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40010400 	.word	0x40010400

08007c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a21      	ldr	r2, [pc, #132]	@ (8007d1c <TIM_OC3_SetConfig+0xe0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d003      	beq.n	8007ca2 <TIM_OC3_SetConfig+0x66>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	@ (8007d20 <TIM_OC3_SetConfig+0xe4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d10d      	bne.n	8007cbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a16      	ldr	r2, [pc, #88]	@ (8007d1c <TIM_OC3_SetConfig+0xe0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_OC3_SetConfig+0x92>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a15      	ldr	r2, [pc, #84]	@ (8007d20 <TIM_OC3_SetConfig+0xe4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d113      	bne.n	8007cf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	621a      	str	r2, [r3, #32]
}
 8007d10:	bf00      	nop
 8007d12:	371c      	adds	r7, #28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	40010000 	.word	0x40010000
 8007d20:	40010400 	.word	0x40010400

08007d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	031b      	lsls	r3, r3, #12
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a12      	ldr	r2, [pc, #72]	@ (8007dc8 <TIM_OC4_SetConfig+0xa4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d003      	beq.n	8007d8c <TIM_OC4_SetConfig+0x68>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a11      	ldr	r2, [pc, #68]	@ (8007dcc <TIM_OC4_SetConfig+0xa8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d109      	bne.n	8007da0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	019b      	lsls	r3, r3, #6
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	f023 0201 	bic.w	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f023 030a 	bic.w	r3, r3, #10
 8007e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f023 0210 	bic.w	r2, r3, #16
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	031b      	lsls	r3, r3, #12
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f043 0307 	orr.w	r3, r3, #7
 8007eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	609a      	str	r2, [r3, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	021a      	lsls	r2, r3, #8
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	609a      	str	r2, [r3, #8]
}
 8007ef8:	bf00      	nop
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	2201      	movs	r2, #1
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	401a      	ands	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1a      	ldr	r2, [r3, #32]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e05a      	b.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a21      	ldr	r2, [pc, #132]	@ (800802c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1d      	ldr	r2, [pc, #116]	@ (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1a      	ldr	r2, [pc, #104]	@ (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	@ (800803c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a15      	ldr	r2, [pc, #84]	@ (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10c      	bne.n	800800c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4313      	orrs	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40001800 	.word	0x40001800

08008048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008060:	2302      	movs	r3, #2
 8008062:	e03d      	b.n	80080e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e042      	b.n	80081ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fa ffe2 	bl	8003104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2224      	movs	r2, #36	@ 0x24
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fc85 	bl	8008a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800816c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695a      	ldr	r2, [r3, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800817c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800818c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b0ba      	sub	sp, #232	@ 0xe8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80081da:	2300      	movs	r3, #0
 80081dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80081f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10f      	bne.n	800821a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <HAL_UART_IRQHandler+0x66>
 8008206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fb69 	bl	80088ea <UART_Receive_IT>
      return;
 8008218:	e25b      	b.n	80086d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800821a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 80de 	beq.w	80083e0 <HAL_UART_IRQHandler+0x22c>
 8008224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008234:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80d1 	beq.w	80083e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800823e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <HAL_UART_IRQHandler+0xae>
 800824a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800824e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825a:	f043 0201 	orr.w	r2, r3, #1
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00b      	beq.n	8008286 <HAL_UART_IRQHandler+0xd2>
 800826e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d005      	beq.n	8008286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827e:	f043 0202 	orr.w	r2, r3, #2
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <HAL_UART_IRQHandler+0xf6>
 8008292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a2:	f043 0204 	orr.w	r2, r3, #4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d011      	beq.n	80082da <HAL_UART_IRQHandler+0x126>
 80082b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d105      	bne.n	80082ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d2:	f043 0208 	orr.w	r2, r3, #8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 81f2 	beq.w	80086c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <HAL_UART_IRQHandler+0x14e>
 80082f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 faf4 	bl	80088ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830c:	2b40      	cmp	r3, #64	@ 0x40
 800830e:	bf0c      	ite	eq
 8008310:	2301      	moveq	r3, #1
 8008312:	2300      	movne	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <HAL_UART_IRQHandler+0x17a>
 8008326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d04f      	beq.n	80083ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f9fc 	bl	800872c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833e:	2b40      	cmp	r3, #64	@ 0x40
 8008340:	d141      	bne.n	80083c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800835c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3314      	adds	r3, #20
 800836a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800836e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800837a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1d9      	bne.n	8008342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d013      	beq.n	80083be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839a:	4a7e      	ldr	r2, [pc, #504]	@ (8008594 <HAL_UART_IRQHandler+0x3e0>)
 800839c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fc f80f 	bl	80043c6 <HAL_DMA_Abort_IT>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d016      	beq.n	80083dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	e00e      	b.n	80083dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f99e 	bl	8008700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	e00a      	b.n	80083dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f99a 	bl	8008700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	e006      	b.n	80083dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f996 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80083da:	e175      	b.n	80086c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	bf00      	nop
    return;
 80083de:	e173      	b.n	80086c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	f040 814f 	bne.w	8008688 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ee:	f003 0310 	and.w	r3, r3, #16
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8148 	beq.w	8008688 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083fc:	f003 0310 	and.w	r3, r3, #16
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8141 	beq.w	8008688 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008406:	2300      	movs	r3, #0
 8008408:	60bb      	str	r3, [r7, #8]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	60bb      	str	r3, [r7, #8]
 800841a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008426:	2b40      	cmp	r3, #64	@ 0x40
 8008428:	f040 80b6 	bne.w	8008598 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 8145 	beq.w	80086cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800844a:	429a      	cmp	r2, r3
 800844c:	f080 813e 	bcs.w	80086cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008456:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008462:	f000 8088 	beq.w	8008576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800847c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008492:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800849e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1d9      	bne.n	8008466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3314      	adds	r3, #20
 80084b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3314      	adds	r3, #20
 80084d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e1      	bne.n	80084b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3314      	adds	r3, #20
 80084f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3314      	adds	r3, #20
 800850e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008512:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008514:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008518:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e3      	bne.n	80084ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	330c      	adds	r3, #12
 800853a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008546:	f023 0310 	bic.w	r3, r3, #16
 800854a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	330c      	adds	r3, #12
 8008554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008558:	65ba      	str	r2, [r7, #88]	@ 0x58
 800855a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800855e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e3      	bne.n	8008534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008570:	4618      	mov	r0, r3
 8008572:	f7fb feb8 	bl	80042e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008584:	b29b      	uxth	r3, r3
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	b29b      	uxth	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f8c1 	bl	8008714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008592:	e09b      	b.n	80086cc <HAL_UART_IRQHandler+0x518>
 8008594:	080087f3 	.word	0x080087f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 808e 	beq.w	80086d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80085b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8089 	beq.w	80086d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	330c      	adds	r3, #12
 80085c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	330c      	adds	r3, #12
 80085de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80085e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80085e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e3      	bne.n	80085be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3314      	adds	r3, #20
 80085fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	623b      	str	r3, [r7, #32]
   return(result);
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3314      	adds	r3, #20
 8008616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800861a:	633a      	str	r2, [r7, #48]	@ 0x30
 800861c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e3      	bne.n	80085f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	60fb      	str	r3, [r7, #12]
   return(result);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0310 	bic.w	r3, r3, #16
 8008652:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	330c      	adds	r3, #12
 800865c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008660:	61fa      	str	r2, [r7, #28]
 8008662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	69b9      	ldr	r1, [r7, #24]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	617b      	str	r3, [r7, #20]
   return(result);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e3      	bne.n	800863c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800867a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f847 	bl	8008714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008686:	e023      	b.n	80086d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <HAL_UART_IRQHandler+0x4f4>
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f8ba 	bl	800881a <UART_Transmit_IT>
    return;
 80086a6:	e014      	b.n	80086d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <HAL_UART_IRQHandler+0x51e>
 80086b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f8fa 	bl	80088ba <UART_EndTransmit_IT>
    return;
 80086c6:	e004      	b.n	80086d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80086c8:	bf00      	nop
 80086ca:	e002      	b.n	80086d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80086cc:	bf00      	nop
 80086ce:	e000      	b.n	80086d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80086d0:	bf00      	nop
  }
}
 80086d2:	37e8      	adds	r7, #232	@ 0xe8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b095      	sub	sp, #84	@ 0x54
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800874a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	330c      	adds	r3, #12
 8008752:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008754:	643a      	str	r2, [r7, #64]	@ 0x40
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800875a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e5      	bne.n	8008734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3314      	adds	r3, #20
 800876e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	61fb      	str	r3, [r7, #28]
   return(result);
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3314      	adds	r3, #20
 8008786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800878a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800878e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d119      	bne.n	80087d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087c4:	61ba      	str	r2, [r7, #24]
 80087c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	613b      	str	r3, [r7, #16]
   return(result);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e5      	bne.n	80087a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80087e6:	bf00      	nop
 80087e8:	3754      	adds	r7, #84	@ 0x54
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f7ff ff77 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b21      	cmp	r3, #33	@ 0x21
 800882c:	d13e      	bne.n	80088ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008836:	d114      	bne.n	8008862 <UART_Transmit_IT+0x48>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d110      	bne.n	8008862 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008854:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	1c9a      	adds	r2, r3, #2
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	621a      	str	r2, [r3, #32]
 8008860:	e008      	b.n	8008874 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	1c59      	adds	r1, r3, #1
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6211      	str	r1, [r2, #32]
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29b      	uxth	r3, r3
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	4619      	mov	r1, r3
 8008882:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10f      	bne.n	80088a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008896:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e000      	b.n	80088ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088ac:	2302      	movs	r3, #2
  }
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff fefc 	bl	80086d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b08c      	sub	sp, #48	@ 0x30
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b22      	cmp	r3, #34	@ 0x22
 80088fc:	f040 80ae 	bne.w	8008a5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008908:	d117      	bne.n	800893a <UART_Receive_IT+0x50>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d113      	bne.n	800893a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008928:	b29a      	uxth	r2, r3
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	1c9a      	adds	r2, r3, #2
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	629a      	str	r2, [r3, #40]	@ 0x28
 8008938:	e026      	b.n	8008988 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800894c:	d007      	beq.n	800895e <UART_Receive_IT+0x74>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <UART_Receive_IT+0x82>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	b2da      	uxtb	r2, r3
 8008966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	e008      	b.n	800897e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008978:	b2da      	uxtb	r2, r3
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800898c:	b29b      	uxth	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	b29b      	uxth	r3, r3
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	4619      	mov	r1, r3
 8008996:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008998:	2b00      	cmp	r3, #0
 800899a:	d15d      	bne.n	8008a58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0220 	bic.w	r2, r2, #32
 80089aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80089ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	695a      	ldr	r2, [r3, #20]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0201 	bic.w	r2, r2, #1
 80089ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d135      	bne.n	8008a4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	330c      	adds	r3, #12
 80089ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	613b      	str	r3, [r7, #16]
   return(result);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f023 0310 	bic.w	r3, r3, #16
 80089fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	330c      	adds	r3, #12
 8008a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a08:	623a      	str	r2, [r7, #32]
 8008a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	69f9      	ldr	r1, [r7, #28]
 8008a0e:	6a3a      	ldr	r2, [r7, #32]
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e5      	bne.n	80089e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0310 	and.w	r3, r3, #16
 8008a26:	2b10      	cmp	r3, #16
 8008a28:	d10a      	bne.n	8008a40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fe64 	bl	8008714 <HAL_UARTEx_RxEventCallback>
 8008a4c:	e002      	b.n	8008a54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff fe4c 	bl	80086ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	e002      	b.n	8008a5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e000      	b.n	8008a5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008a5c:	2302      	movs	r3, #2
  }
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3730      	adds	r7, #48	@ 0x30
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a6c:	b0c0      	sub	sp, #256	@ 0x100
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a84:	68d9      	ldr	r1, [r3, #12]
 8008a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	ea40 0301 	orr.w	r3, r0, r1
 8008a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ac0:	f021 010c 	bic.w	r1, r1, #12
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae2:	6999      	ldr	r1, [r3, #24]
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	ea40 0301 	orr.w	r3, r0, r1
 8008aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	4b8f      	ldr	r3, [pc, #572]	@ (8008d34 <UART_SetConfig+0x2cc>)
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d005      	beq.n	8008b08 <UART_SetConfig+0xa0>
 8008afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	4b8d      	ldr	r3, [pc, #564]	@ (8008d38 <UART_SetConfig+0x2d0>)
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d104      	bne.n	8008b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b08:	f7fe f9f4 	bl	8006ef4 <HAL_RCC_GetPCLK2Freq>
 8008b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b10:	e003      	b.n	8008b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b12:	f7fe f9db 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 8008b16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b24:	f040 810c 	bne.w	8008d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	462b      	mov	r3, r5
 8008b3e:	1891      	adds	r1, r2, r2
 8008b40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b42:	415b      	adcs	r3, r3
 8008b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	eb12 0801 	adds.w	r8, r2, r1
 8008b50:	4629      	mov	r1, r5
 8008b52:	eb43 0901 	adc.w	r9, r3, r1
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b6a:	4690      	mov	r8, r2
 8008b6c:	4699      	mov	r9, r3
 8008b6e:	4623      	mov	r3, r4
 8008b70:	eb18 0303 	adds.w	r3, r8, r3
 8008b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b78:	462b      	mov	r3, r5
 8008b7a:	eb49 0303 	adc.w	r3, r9, r3
 8008b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b96:	460b      	mov	r3, r1
 8008b98:	18db      	adds	r3, r3, r3
 8008b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	eb42 0303 	adc.w	r3, r2, r3
 8008ba2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008bac:	f7f8 f84c 	bl	8000c48 <__aeabi_uldivmod>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4b61      	ldr	r3, [pc, #388]	@ (8008d3c <UART_SetConfig+0x2d4>)
 8008bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bba:	095b      	lsrs	r3, r3, #5
 8008bbc:	011c      	lsls	r4, r3, #4
 8008bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	1891      	adds	r1, r2, r2
 8008bd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008bd8:	415b      	adcs	r3, r3
 8008bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008be0:	4641      	mov	r1, r8
 8008be2:	eb12 0a01 	adds.w	sl, r2, r1
 8008be6:	4649      	mov	r1, r9
 8008be8:	eb43 0b01 	adc.w	fp, r3, r1
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c00:	4692      	mov	sl, r2
 8008c02:	469b      	mov	fp, r3
 8008c04:	4643      	mov	r3, r8
 8008c06:	eb1a 0303 	adds.w	r3, sl, r3
 8008c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c0e:	464b      	mov	r3, r9
 8008c10:	eb4b 0303 	adc.w	r3, fp, r3
 8008c14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	18db      	adds	r3, r3, r3
 8008c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c32:	4613      	mov	r3, r2
 8008c34:	eb42 0303 	adc.w	r3, r2, r3
 8008c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c42:	f7f8 f801 	bl	8000c48 <__aeabi_uldivmod>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d3c <UART_SetConfig+0x2d4>)
 8008c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	2264      	movs	r2, #100	@ 0x64
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
 8008c5a:	1acb      	subs	r3, r1, r3
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c62:	4b36      	ldr	r3, [pc, #216]	@ (8008d3c <UART_SetConfig+0x2d4>)
 8008c64:	fba3 2302 	umull	r2, r3, r3, r2
 8008c68:	095b      	lsrs	r3, r3, #5
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c70:	441c      	add	r4, r3
 8008c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008c84:	4642      	mov	r2, r8
 8008c86:	464b      	mov	r3, r9
 8008c88:	1891      	adds	r1, r2, r2
 8008c8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c8c:	415b      	adcs	r3, r3
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c94:	4641      	mov	r1, r8
 8008c96:	1851      	adds	r1, r2, r1
 8008c98:	6339      	str	r1, [r7, #48]	@ 0x30
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	414b      	adcs	r3, r1
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008cac:	4659      	mov	r1, fp
 8008cae:	00cb      	lsls	r3, r1, #3
 8008cb0:	4651      	mov	r1, sl
 8008cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cb6:	4651      	mov	r1, sl
 8008cb8:	00ca      	lsls	r2, r1, #3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008cc8:	464b      	mov	r3, r9
 8008cca:	460a      	mov	r2, r1
 8008ccc:	eb42 0303 	adc.w	r3, r2, r3
 8008cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ce8:	460b      	mov	r3, r1
 8008cea:	18db      	adds	r3, r3, r3
 8008cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cee:	4613      	mov	r3, r2
 8008cf0:	eb42 0303 	adc.w	r3, r2, r3
 8008cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008cfe:	f7f7 ffa3 	bl	8000c48 <__aeabi_uldivmod>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4b0d      	ldr	r3, [pc, #52]	@ (8008d3c <UART_SetConfig+0x2d4>)
 8008d08:	fba3 1302 	umull	r1, r3, r3, r2
 8008d0c:	095b      	lsrs	r3, r3, #5
 8008d0e:	2164      	movs	r1, #100	@ 0x64
 8008d10:	fb01 f303 	mul.w	r3, r1, r3
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	3332      	adds	r3, #50	@ 0x32
 8008d1a:	4a08      	ldr	r2, [pc, #32]	@ (8008d3c <UART_SetConfig+0x2d4>)
 8008d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	f003 0207 	and.w	r2, r3, #7
 8008d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4422      	add	r2, r4
 8008d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d30:	e106      	b.n	8008f40 <UART_SetConfig+0x4d8>
 8008d32:	bf00      	nop
 8008d34:	40011000 	.word	0x40011000
 8008d38:	40011400 	.word	0x40011400
 8008d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d44:	2200      	movs	r2, #0
 8008d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d52:	4642      	mov	r2, r8
 8008d54:	464b      	mov	r3, r9
 8008d56:	1891      	adds	r1, r2, r2
 8008d58:	6239      	str	r1, [r7, #32]
 8008d5a:	415b      	adcs	r3, r3
 8008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d62:	4641      	mov	r1, r8
 8008d64:	1854      	adds	r4, r2, r1
 8008d66:	4649      	mov	r1, r9
 8008d68:	eb43 0501 	adc.w	r5, r3, r1
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	00eb      	lsls	r3, r5, #3
 8008d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d7a:	00e2      	lsls	r2, r4, #3
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	461d      	mov	r5, r3
 8008d80:	4643      	mov	r3, r8
 8008d82:	18e3      	adds	r3, r4, r3
 8008d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d88:	464b      	mov	r3, r9
 8008d8a:	eb45 0303 	adc.w	r3, r5, r3
 8008d8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008dae:	4629      	mov	r1, r5
 8008db0:	008b      	lsls	r3, r1, #2
 8008db2:	4621      	mov	r1, r4
 8008db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008db8:	4621      	mov	r1, r4
 8008dba:	008a      	lsls	r2, r1, #2
 8008dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008dc0:	f7f7 ff42 	bl	8000c48 <__aeabi_uldivmod>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4b60      	ldr	r3, [pc, #384]	@ (8008f4c <UART_SetConfig+0x4e4>)
 8008dca:	fba3 2302 	umull	r2, r3, r3, r2
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	011c      	lsls	r4, r3, #4
 8008dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ddc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008de4:	4642      	mov	r2, r8
 8008de6:	464b      	mov	r3, r9
 8008de8:	1891      	adds	r1, r2, r2
 8008dea:	61b9      	str	r1, [r7, #24]
 8008dec:	415b      	adcs	r3, r3
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008df4:	4641      	mov	r1, r8
 8008df6:	1851      	adds	r1, r2, r1
 8008df8:	6139      	str	r1, [r7, #16]
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	414b      	adcs	r3, r1
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	00cb      	lsls	r3, r1, #3
 8008e10:	4651      	mov	r1, sl
 8008e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e16:	4651      	mov	r1, sl
 8008e18:	00ca      	lsls	r2, r1, #3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4642      	mov	r2, r8
 8008e22:	189b      	adds	r3, r3, r2
 8008e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e28:	464b      	mov	r3, r9
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	eb42 0303 	adc.w	r3, r2, r3
 8008e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	008b      	lsls	r3, r1, #2
 8008e50:	4641      	mov	r1, r8
 8008e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e56:	4641      	mov	r1, r8
 8008e58:	008a      	lsls	r2, r1, #2
 8008e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e5e:	f7f7 fef3 	bl	8000c48 <__aeabi_uldivmod>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	4b38      	ldr	r3, [pc, #224]	@ (8008f4c <UART_SetConfig+0x4e4>)
 8008e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e6e:	095b      	lsrs	r3, r3, #5
 8008e70:	2264      	movs	r2, #100	@ 0x64
 8008e72:	fb02 f303 	mul.w	r3, r2, r3
 8008e76:	1acb      	subs	r3, r1, r3
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	3332      	adds	r3, #50	@ 0x32
 8008e7c:	4a33      	ldr	r2, [pc, #204]	@ (8008f4c <UART_SetConfig+0x4e4>)
 8008e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e88:	441c      	add	r4, r3
 8008e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e8e:	2200      	movs	r2, #0
 8008e90:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e92:	677a      	str	r2, [r7, #116]	@ 0x74
 8008e94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	1891      	adds	r1, r2, r2
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	415b      	adcs	r3, r3
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	1851      	adds	r1, r2, r1
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	4649      	mov	r1, r9
 8008eb0:	414b      	adcs	r3, r1
 8008eb2:	607b      	str	r3, [r7, #4]
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	00cb      	lsls	r3, r1, #3
 8008ec4:	4651      	mov	r1, sl
 8008ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eca:	4651      	mov	r1, sl
 8008ecc:	00ca      	lsls	r2, r1, #3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	189b      	adds	r3, r3, r2
 8008ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eda:	464b      	mov	r3, r9
 8008edc:	460a      	mov	r2, r1
 8008ede:	eb42 0303 	adc.w	r3, r2, r3
 8008ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eee:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	f04f 0300 	mov.w	r3, #0
 8008ef8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008efc:	4649      	mov	r1, r9
 8008efe:	008b      	lsls	r3, r1, #2
 8008f00:	4641      	mov	r1, r8
 8008f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f06:	4641      	mov	r1, r8
 8008f08:	008a      	lsls	r2, r1, #2
 8008f0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f0e:	f7f7 fe9b 	bl	8000c48 <__aeabi_uldivmod>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4b0d      	ldr	r3, [pc, #52]	@ (8008f4c <UART_SetConfig+0x4e4>)
 8008f18:	fba3 1302 	umull	r1, r3, r3, r2
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	2164      	movs	r1, #100	@ 0x64
 8008f20:	fb01 f303 	mul.w	r3, r1, r3
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	3332      	adds	r3, #50	@ 0x32
 8008f2a:	4a08      	ldr	r2, [pc, #32]	@ (8008f4c <UART_SetConfig+0x4e4>)
 8008f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f30:	095b      	lsrs	r3, r3, #5
 8008f32:	f003 020f 	and.w	r2, r3, #15
 8008f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4422      	add	r2, r4
 8008f3e:	609a      	str	r2, [r3, #8]
}
 8008f40:	bf00      	nop
 8008f42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f46:	46bd      	mov	sp, r7
 8008f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f4c:	51eb851f 	.word	0x51eb851f

08008f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f50:	b084      	sub	sp, #16
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	f107 001c 	add.w	r0, r7, #28
 8008f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d123      	bne.n	8008fb2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d105      	bne.n	8008fa6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fae8 	bl	800a57c <USB_CoreReset>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
 8008fb0:	e01b      	b.n	8008fea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 fadc 	bl	800a57c <USB_CoreReset>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	639a      	str	r2, [r3, #56]	@ 0x38
 8008fdc:	e005      	b.n	8008fea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fea:	7fbb      	ldrb	r3, [r7, #30]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d10b      	bne.n	8009008 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f043 0206 	orr.w	r2, r3, #6
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f043 0220 	orr.w	r2, r3, #32
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009014:	b004      	add	sp, #16
 8009016:	4770      	bx	lr

08009018 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d165      	bne.n	80090f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4a41      	ldr	r2, [pc, #260]	@ (8009134 <USB_SetTurnaroundTime+0x11c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d906      	bls.n	8009042 <USB_SetTurnaroundTime+0x2a>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	4a40      	ldr	r2, [pc, #256]	@ (8009138 <USB_SetTurnaroundTime+0x120>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d202      	bcs.n	8009042 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800903c:	230f      	movs	r3, #15
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	e062      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	4a3c      	ldr	r2, [pc, #240]	@ (8009138 <USB_SetTurnaroundTime+0x120>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d306      	bcc.n	8009058 <USB_SetTurnaroundTime+0x40>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4a3b      	ldr	r2, [pc, #236]	@ (800913c <USB_SetTurnaroundTime+0x124>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d202      	bcs.n	8009058 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009052:	230e      	movs	r3, #14
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	e057      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4a38      	ldr	r2, [pc, #224]	@ (800913c <USB_SetTurnaroundTime+0x124>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d306      	bcc.n	800906e <USB_SetTurnaroundTime+0x56>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4a37      	ldr	r2, [pc, #220]	@ (8009140 <USB_SetTurnaroundTime+0x128>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d202      	bcs.n	800906e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009068:	230d      	movs	r3, #13
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e04c      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	4a33      	ldr	r2, [pc, #204]	@ (8009140 <USB_SetTurnaroundTime+0x128>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d306      	bcc.n	8009084 <USB_SetTurnaroundTime+0x6c>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	4a32      	ldr	r2, [pc, #200]	@ (8009144 <USB_SetTurnaroundTime+0x12c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d802      	bhi.n	8009084 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800907e:	230c      	movs	r3, #12
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e041      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4a2f      	ldr	r2, [pc, #188]	@ (8009144 <USB_SetTurnaroundTime+0x12c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d906      	bls.n	800909a <USB_SetTurnaroundTime+0x82>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4a2e      	ldr	r2, [pc, #184]	@ (8009148 <USB_SetTurnaroundTime+0x130>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d802      	bhi.n	800909a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009094:	230b      	movs	r3, #11
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e036      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4a2a      	ldr	r2, [pc, #168]	@ (8009148 <USB_SetTurnaroundTime+0x130>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d906      	bls.n	80090b0 <USB_SetTurnaroundTime+0x98>
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4a29      	ldr	r2, [pc, #164]	@ (800914c <USB_SetTurnaroundTime+0x134>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d802      	bhi.n	80090b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090aa:	230a      	movs	r3, #10
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e02b      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	4a26      	ldr	r2, [pc, #152]	@ (800914c <USB_SetTurnaroundTime+0x134>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d906      	bls.n	80090c6 <USB_SetTurnaroundTime+0xae>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4a25      	ldr	r2, [pc, #148]	@ (8009150 <USB_SetTurnaroundTime+0x138>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d202      	bcs.n	80090c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090c0:	2309      	movs	r3, #9
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e020      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	4a21      	ldr	r2, [pc, #132]	@ (8009150 <USB_SetTurnaroundTime+0x138>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d306      	bcc.n	80090dc <USB_SetTurnaroundTime+0xc4>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	4a20      	ldr	r2, [pc, #128]	@ (8009154 <USB_SetTurnaroundTime+0x13c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d802      	bhi.n	80090dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80090d6:	2308      	movs	r3, #8
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e015      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	4a1d      	ldr	r2, [pc, #116]	@ (8009154 <USB_SetTurnaroundTime+0x13c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d906      	bls.n	80090f2 <USB_SetTurnaroundTime+0xda>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009158 <USB_SetTurnaroundTime+0x140>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d202      	bcs.n	80090f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80090ec:	2307      	movs	r3, #7
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e00a      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80090f2:	2306      	movs	r3, #6
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	e007      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d102      	bne.n	8009104 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80090fe:	2309      	movs	r3, #9
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e001      	b.n	8009108 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009104:	2309      	movs	r3, #9
 8009106:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	029b      	lsls	r3, r3, #10
 800911c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009120:	431a      	orrs	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	00d8acbf 	.word	0x00d8acbf
 8009138:	00e4e1c0 	.word	0x00e4e1c0
 800913c:	00f42400 	.word	0x00f42400
 8009140:	01067380 	.word	0x01067380
 8009144:	011a499f 	.word	0x011a499f
 8009148:	01312cff 	.word	0x01312cff
 800914c:	014ca43f 	.word	0x014ca43f
 8009150:	016e3600 	.word	0x016e3600
 8009154:	01a6ab1f 	.word	0x01a6ab1f
 8009158:	01e84800 	.word	0x01e84800

0800915c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f043 0201 	orr.w	r2, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f023 0201 	bic.w	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d115      	bne.n	80091ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091ce:	200a      	movs	r0, #10
 80091d0:	f7fa fa1c 	bl	800360c <HAL_Delay>
      ms += 10U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	330a      	adds	r3, #10
 80091d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 f93f 	bl	800a45e <USB_GetMode>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d01e      	beq.n	8009224 <USB_SetCurrentMode+0x84>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80091ea:	d9f0      	bls.n	80091ce <USB_SetCurrentMode+0x2e>
 80091ec:	e01a      	b.n	8009224 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d115      	bne.n	8009220 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009200:	200a      	movs	r0, #10
 8009202:	f7fa fa03 	bl	800360c <HAL_Delay>
      ms += 10U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	330a      	adds	r3, #10
 800920a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 f926 	bl	800a45e <USB_GetMode>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d005      	beq.n	8009224 <USB_SetCurrentMode+0x84>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2bc7      	cmp	r3, #199	@ 0xc7
 800921c:	d9f0      	bls.n	8009200 <USB_SetCurrentMode+0x60>
 800921e:	e001      	b.n	8009224 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e005      	b.n	8009230 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2bc8      	cmp	r3, #200	@ 0xc8
 8009228:	d101      	bne.n	800922e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009238:	b084      	sub	sp, #16
 800923a:	b580      	push	{r7, lr}
 800923c:	b086      	sub	sp, #24
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009252:	2300      	movs	r3, #0
 8009254:	613b      	str	r3, [r7, #16]
 8009256:	e009      	b.n	800926c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	3340      	adds	r3, #64	@ 0x40
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	2200      	movs	r2, #0
 8009264:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	3301      	adds	r3, #1
 800926a:	613b      	str	r3, [r7, #16]
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	2b0e      	cmp	r3, #14
 8009270:	d9f2      	bls.n	8009258 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009272:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009276:	2b00      	cmp	r3, #0
 8009278:	d11c      	bne.n	80092b4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009288:	f043 0302 	orr.w	r3, r3, #2
 800928c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009292:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80092b2:	e00b      	b.n	80092cc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092d2:	461a      	mov	r2, r3
 80092d4:	2300      	movs	r3, #0
 80092d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d10d      	bne.n	80092fc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d104      	bne.n	80092f2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092e8:	2100      	movs	r1, #0
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f968 	bl	80095c0 <USB_SetDevSpeed>
 80092f0:	e008      	b.n	8009304 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80092f2:	2101      	movs	r1, #1
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f963 	bl	80095c0 <USB_SetDevSpeed>
 80092fa:	e003      	b.n	8009304 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80092fc:	2103      	movs	r1, #3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f95e 	bl	80095c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009304:	2110      	movs	r1, #16
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f8fa 	bl	8009500 <USB_FlushTxFifo>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f924 	bl	8009564 <USB_FlushRxFifo>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932c:	461a      	mov	r2, r3
 800932e:	2300      	movs	r3, #0
 8009330:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009338:	461a      	mov	r2, r3
 800933a:	2300      	movs	r3, #0
 800933c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009344:	461a      	mov	r2, r3
 8009346:	2300      	movs	r3, #0
 8009348:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800934a:	2300      	movs	r3, #0
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	e043      	b.n	80093d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009366:	d118      	bne.n	800939a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800937a:	461a      	mov	r2, r3
 800937c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	e013      	b.n	80093ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009390:	461a      	mov	r2, r3
 8009392:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	e008      	b.n	80093ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093a6:	461a      	mov	r2, r3
 80093a8:	2300      	movs	r3, #0
 80093aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b8:	461a      	mov	r2, r3
 80093ba:	2300      	movs	r3, #0
 80093bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ca:	461a      	mov	r2, r3
 80093cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80093d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	3301      	adds	r3, #1
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093dc:	461a      	mov	r2, r3
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d3b5      	bcc.n	8009350 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	e043      	b.n	8009472 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009400:	d118      	bne.n	8009434 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009414:	461a      	mov	r2, r3
 8009416:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	e013      	b.n	8009446 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800942a:	461a      	mov	r2, r3
 800942c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	e008      	b.n	8009446 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009440:	461a      	mov	r2, r3
 8009442:	2300      	movs	r3, #0
 8009444:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009452:	461a      	mov	r2, r3
 8009454:	2300      	movs	r3, #0
 8009456:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009464:	461a      	mov	r2, r3
 8009466:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800946a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	3301      	adds	r3, #1
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009476:	461a      	mov	r2, r3
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	4293      	cmp	r3, r2
 800947c:	d3b5      	bcc.n	80093ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800948c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009490:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800949e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d105      	bne.n	80094b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f043 0210 	orr.w	r2, r3, #16
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <USB_DevInit+0x2c4>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	f043 0208 	orr.w	r2, r3, #8
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d107      	bne.n	80094ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094e4:	f043 0304 	orr.w	r3, r3, #4
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094f8:	b004      	add	sp, #16
 80094fa:	4770      	bx	lr
 80094fc:	803c3800 	.word	0x803c3800

08009500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800951a:	d901      	bls.n	8009520 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e01b      	b.n	8009558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	daf2      	bge.n	800950e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	019b      	lsls	r3, r3, #6
 8009530:	f043 0220 	orr.w	r2, r3, #32
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009544:	d901      	bls.n	800954a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e006      	b.n	8009558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b20      	cmp	r3, #32
 8009554:	d0f0      	beq.n	8009538 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800957c:	d901      	bls.n	8009582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e018      	b.n	80095b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	daf2      	bge.n	8009570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2210      	movs	r2, #16
 8009592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095a0:	d901      	bls.n	80095a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e006      	b.n	80095b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d0f0      	beq.n	8009594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	68f9      	ldr	r1, [r7, #12]
 80095dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095e0:	4313      	orrs	r3, r2
 80095e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b087      	sub	sp, #28
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 0306 	and.w	r3, r3, #6
 800960a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009612:	2300      	movs	r3, #0
 8009614:	75fb      	strb	r3, [r7, #23]
 8009616:	e00a      	b.n	800962e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b02      	cmp	r3, #2
 800961c:	d002      	beq.n	8009624 <USB_GetDevSpeed+0x32>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b06      	cmp	r3, #6
 8009622:	d102      	bne.n	800962a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009624:	2302      	movs	r3, #2
 8009626:	75fb      	strb	r3, [r7, #23]
 8009628:	e001      	b.n	800962e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800962a:	230f      	movs	r3, #15
 800962c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d13a      	bne.n	80096ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800965e:	69da      	ldr	r2, [r3, #28]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	2101      	movs	r1, #1
 800966a:	fa01 f303 	lsl.w	r3, r1, r3
 800966e:	b29b      	uxth	r3, r3
 8009670:	68f9      	ldr	r1, [r7, #12]
 8009672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009676:	4313      	orrs	r3, r2
 8009678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d155      	bne.n	800973c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	791b      	ldrb	r3, [r3, #4]
 80096aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	059b      	lsls	r3, r3, #22
 80096b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096b4:	4313      	orrs	r3, r2
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	0151      	lsls	r1, r2, #5
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	440a      	add	r2, r1
 80096be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	e036      	b.n	800973c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096d4:	69da      	ldr	r2, [r3, #28]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	2101      	movs	r1, #1
 80096e0:	fa01 f303 	lsl.w	r3, r1, r3
 80096e4:	041b      	lsls	r3, r3, #16
 80096e6:	68f9      	ldr	r1, [r7, #12]
 80096e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096ec:	4313      	orrs	r3, r2
 80096ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d11a      	bne.n	800973c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	791b      	ldrb	r3, [r3, #4]
 8009720:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009722:	430b      	orrs	r3, r1
 8009724:	4313      	orrs	r3, r2
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	0151      	lsls	r1, r2, #5
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	440a      	add	r2, r1
 800972e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800973a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
	...

0800974c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d161      	bne.n	800982c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800977a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800977e:	d11f      	bne.n	80097c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	440a      	add	r2, r1
 8009796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800979a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800979e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	f003 030f 	and.w	r3, r3, #15
 80097d0:	2101      	movs	r1, #1
 80097d2:	fa01 f303 	lsl.w	r3, r1, r3
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	43db      	mvns	r3, r3
 80097da:	68f9      	ldr	r1, [r7, #12]
 80097dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097e0:	4013      	ands	r3, r2
 80097e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ea:	69da      	ldr	r2, [r3, #28]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	f003 030f 	and.w	r3, r3, #15
 80097f4:	2101      	movs	r1, #1
 80097f6:	fa01 f303 	lsl.w	r3, r1, r3
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	43db      	mvns	r3, r3
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009804:	4013      	ands	r3, r2
 8009806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	0159      	lsls	r1, r3, #5
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	440b      	add	r3, r1
 800981e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009822:	4619      	mov	r1, r3
 8009824:	4b35      	ldr	r3, [pc, #212]	@ (80098fc <USB_DeactivateEndpoint+0x1b0>)
 8009826:	4013      	ands	r3, r2
 8009828:	600b      	str	r3, [r1, #0]
 800982a:	e060      	b.n	80098ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800983e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009842:	d11f      	bne.n	8009884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	440a      	add	r2, r1
 800985a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800985e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	0151      	lsls	r1, r2, #5
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	440a      	add	r2, r1
 800987a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800987e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800988a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	2101      	movs	r1, #1
 8009896:	fa01 f303 	lsl.w	r3, r1, r3
 800989a:	041b      	lsls	r3, r3, #16
 800989c:	43db      	mvns	r3, r3
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098a4:	4013      	ands	r3, r2
 80098a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ae:	69da      	ldr	r2, [r3, #28]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f003 030f 	and.w	r3, r3, #15
 80098b8:	2101      	movs	r1, #1
 80098ba:	fa01 f303 	lsl.w	r3, r1, r3
 80098be:	041b      	lsls	r3, r3, #16
 80098c0:	43db      	mvns	r3, r3
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098c8:	4013      	ands	r3, r2
 80098ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	0159      	lsls	r1, r3, #5
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	440b      	add	r3, r1
 80098e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e6:	4619      	mov	r1, r3
 80098e8:	4b05      	ldr	r3, [pc, #20]	@ (8009900 <USB_DeactivateEndpoint+0x1b4>)
 80098ea:	4013      	ands	r3, r2
 80098ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	ec337800 	.word	0xec337800
 8009900:	eff37800 	.word	0xeff37800

08009904 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08a      	sub	sp, #40	@ 0x28
 8009908:	af02      	add	r7, sp, #8
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	4613      	mov	r3, r2
 8009910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	785b      	ldrb	r3, [r3, #1]
 8009920:	2b01      	cmp	r3, #1
 8009922:	f040 817f 	bne.w	8009c24 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d132      	bne.n	8009994 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	4413      	add	r3, r2
 8009936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	69ba      	ldr	r2, [r7, #24]
 800993e:	0151      	lsls	r1, r2, #5
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	440a      	add	r2, r1
 8009944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009948:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800994c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	0151      	lsls	r1, r2, #5
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	440a      	add	r2, r1
 8009968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800996c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	0151      	lsls	r1, r2, #5
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	440a      	add	r2, r1
 8009988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800998c:	0cdb      	lsrs	r3, r3, #19
 800998e:	04db      	lsls	r3, r3, #19
 8009990:	6113      	str	r3, [r2, #16]
 8009992:	e097      	b.n	8009ac4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ae:	0cdb      	lsrs	r3, r3, #19
 80099b0:	04db      	lsls	r3, r3, #19
 80099b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80099d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80099d6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d11a      	bne.n	8009a14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	691a      	ldr	r2, [r3, #16]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d903      	bls.n	80099f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	689a      	ldr	r2, [r3, #8]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	0151      	lsls	r1, r2, #5
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	440a      	add	r2, r1
 8009a08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a10:	6113      	str	r3, [r2, #16]
 8009a12:	e044      	b.n	8009a9e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	691a      	ldr	r2, [r3, #16]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	1e5a      	subs	r2, r3, #1
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a28:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a36:	691a      	ldr	r2, [r3, #16]
 8009a38:	8afb      	ldrh	r3, [r7, #22]
 8009a3a:	04d9      	lsls	r1, r3, #19
 8009a3c:	4ba4      	ldr	r3, [pc, #656]	@ (8009cd0 <USB_EPStartXfer+0x3cc>)
 8009a3e:	400b      	ands	r3, r1
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	0148      	lsls	r0, r1, #5
 8009a44:	69f9      	ldr	r1, [r7, #28]
 8009a46:	4401      	add	r1, r0
 8009a48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	791b      	ldrb	r3, [r3, #4]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d122      	bne.n	8009a9e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	69ba      	ldr	r2, [r7, #24]
 8009a68:	0151      	lsls	r1, r2, #5
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	440a      	add	r2, r1
 8009a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a72:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009a76:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	8afb      	ldrh	r3, [r7, #22]
 8009a88:	075b      	lsls	r3, r3, #29
 8009a8a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009a8e:	69b9      	ldr	r1, [r7, #24]
 8009a90:	0148      	lsls	r0, r1, #5
 8009a92:	69f9      	ldr	r1, [r7, #28]
 8009a94:	4401      	add	r1, r0
 8009a96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aaa:	691a      	ldr	r2, [r3, #16]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ab4:	69b9      	ldr	r1, [r7, #24]
 8009ab6:	0148      	lsls	r0, r1, #5
 8009ab8:	69f9      	ldr	r1, [r7, #28]
 8009aba:	4401      	add	r1, r0
 8009abc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d14b      	bne.n	8009b62 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ade:	461a      	mov	r2, r3
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	791b      	ldrb	r3, [r3, #4]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d128      	bne.n	8009b40 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d110      	bne.n	8009b20 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	69fa      	ldr	r2, [r7, #28]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	e00f      	b.n	8009b40 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	0151      	lsls	r1, r2, #5
 8009b32:	69fa      	ldr	r2, [r7, #28]
 8009b34:	440a      	add	r2, r1
 8009b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b3e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	0151      	lsls	r1, r2, #5
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	440a      	add	r2, r1
 8009b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	e166      	b.n	8009e30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b80:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	791b      	ldrb	r3, [r3, #4]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d015      	beq.n	8009bb6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 814e 	beq.w	8009e30 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8009baa:	69f9      	ldr	r1, [r7, #28]
 8009bac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	634b      	str	r3, [r1, #52]	@ 0x34
 8009bb4:	e13c      	b.n	8009e30 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d110      	bne.n	8009be8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	0151      	lsls	r1, r2, #5
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	440a      	add	r2, r1
 8009bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009be0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	e00f      	b.n	8009c08 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	0151      	lsls	r1, r2, #5
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	440a      	add	r2, r1
 8009bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c06:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	68d9      	ldr	r1, [r3, #12]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	781a      	ldrb	r2, [r3, #0]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	b298      	uxth	r0, r3
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 f9b9 	bl	8009f94 <USB_WritePacket>
 8009c22:	e105      	b.n	8009e30 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c3e:	0cdb      	lsrs	r3, r3, #19
 8009c40:	04db      	lsls	r3, r3, #19
 8009c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c66:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d132      	bne.n	8009cd4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c92:	691a      	ldr	r2, [r3, #16]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c9c:	69b9      	ldr	r1, [r7, #24]
 8009c9e:	0148      	lsls	r0, r1, #5
 8009ca0:	69f9      	ldr	r1, [r7, #28]
 8009ca2:	4401      	add	r1, r0
 8009ca4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cca:	6113      	str	r3, [r2, #16]
 8009ccc:	e062      	b.n	8009d94 <USB_EPStartXfer+0x490>
 8009cce:	bf00      	nop
 8009cd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d123      	bne.n	8009d24 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce8:	691a      	ldr	r2, [r3, #16]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cf2:	69b9      	ldr	r1, [r7, #24]
 8009cf4:	0148      	lsls	r0, r1, #5
 8009cf6:	69f9      	ldr	r1, [r7, #28]
 8009cf8:	4401      	add	r1, r0
 8009cfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	0151      	lsls	r1, r2, #5
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	440a      	add	r2, r1
 8009d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d20:	6113      	str	r3, [r2, #16]
 8009d22:	e037      	b.n	8009d94 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	691a      	ldr	r2, [r3, #16]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	1e5a      	subs	r2, r3, #1
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	8afa      	ldrh	r2, [r7, #22]
 8009d40:	fb03 f202 	mul.w	r2, r3, r2
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d54:	691a      	ldr	r2, [r3, #16]
 8009d56:	8afb      	ldrh	r3, [r7, #22]
 8009d58:	04d9      	lsls	r1, r3, #19
 8009d5a:	4b38      	ldr	r3, [pc, #224]	@ (8009e3c <USB_EPStartXfer+0x538>)
 8009d5c:	400b      	ands	r3, r1
 8009d5e:	69b9      	ldr	r1, [r7, #24]
 8009d60:	0148      	lsls	r0, r1, #5
 8009d62:	69f9      	ldr	r1, [r7, #28]
 8009d64:	4401      	add	r1, r0
 8009d66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d7a:	691a      	ldr	r2, [r3, #16]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d84:	69b9      	ldr	r1, [r7, #24]
 8009d86:	0148      	lsls	r0, r1, #5
 8009d88:	69f9      	ldr	r1, [r7, #28]
 8009d8a:	4401      	add	r1, r0
 8009d8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d90:	4313      	orrs	r3, r2
 8009d92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d10d      	bne.n	8009db6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	68d9      	ldr	r1, [r3, #12]
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db2:	460a      	mov	r2, r1
 8009db4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	791b      	ldrb	r3, [r3, #4]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d128      	bne.n	8009e10 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d110      	bne.n	8009df0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	69ba      	ldr	r2, [r7, #24]
 8009dde:	0151      	lsls	r1, r2, #5
 8009de0:	69fa      	ldr	r2, [r7, #28]
 8009de2:	440a      	add	r2, r1
 8009de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	e00f      	b.n	8009e10 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69ba      	ldr	r2, [r7, #24]
 8009e00:	0151      	lsls	r1, r2, #5
 8009e02:	69fa      	ldr	r2, [r7, #28]
 8009e04:	440a      	add	r2, r1
 8009e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	0151      	lsls	r1, r2, #5
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	440a      	add	r2, r1
 8009e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	1ff80000 	.word	0x1ff80000

08009e40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d14a      	bne.n	8009ef4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e76:	f040 8086 	bne.w	8009f86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	7812      	ldrb	r2, [r2, #0]
 8009e8e:	0151      	lsls	r1, r2, #5
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	440a      	add	r2, r1
 8009e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	0151      	lsls	r1, r2, #5
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	440a      	add	r2, r1
 8009eb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d902      	bls.n	8009ed8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ed6:	e056      	b.n	8009f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ef0:	d0e7      	beq.n	8009ec2 <USB_EPStopXfer+0x82>
 8009ef2:	e048      	b.n	8009f86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f0c:	d13b      	bne.n	8009f86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	7812      	ldrb	r2, [r2, #0]
 8009f22:	0151      	lsls	r1, r2, #5
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	440a      	add	r2, r1
 8009f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	7812      	ldrb	r2, [r2, #0]
 8009f46:	0151      	lsls	r1, r2, #5
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	440a      	add	r2, r1
 8009f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d902      	bls.n	8009f6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	75fb      	strb	r3, [r7, #23]
          break;
 8009f6a:	e00c      	b.n	8009f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f84:	d0e7      	beq.n	8009f56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	371c      	adds	r7, #28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b089      	sub	sp, #36	@ 0x24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	71fb      	strb	r3, [r7, #7]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d123      	bne.n	800a002 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fba:	88bb      	ldrh	r3, [r7, #4]
 8009fbc:	3303      	adds	r3, #3
 8009fbe:	089b      	lsrs	r3, r3, #2
 8009fc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	61bb      	str	r3, [r7, #24]
 8009fc6:	e018      	b.n	8009ffa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	031a      	lsls	r2, r3, #12
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	3301      	adds	r3, #1
 8009fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	61bb      	str	r3, [r7, #24]
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d3e2      	bcc.n	8009fc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3724      	adds	r7, #36	@ 0x24
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a010:	b480      	push	{r7}
 800a012:	b08b      	sub	sp, #44	@ 0x2c
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a026:	88fb      	ldrh	r3, [r7, #6]
 800a028:	089b      	lsrs	r3, r3, #2
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	f003 0303 	and.w	r3, r3, #3
 800a034:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a036:	2300      	movs	r3, #0
 800a038:	623b      	str	r3, [r7, #32]
 800a03a:	e014      	b.n	800a066 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	601a      	str	r2, [r3, #0]
    pDest++;
 800a048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04a:	3301      	adds	r3, #1
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	3301      	adds	r3, #1
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a056:	3301      	adds	r3, #1
 800a058:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	3301      	adds	r3, #1
 800a05e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	3301      	adds	r3, #1
 800a064:	623b      	str	r3, [r7, #32]
 800a066:	6a3a      	ldr	r2, [r7, #32]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d3e6      	bcc.n	800a03c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a06e:	8bfb      	ldrh	r3, [r7, #30]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01e      	beq.n	800a0b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a07e:	461a      	mov	r2, r3
 800a080:	f107 0310 	add.w	r3, r7, #16
 800a084:	6812      	ldr	r2, [r2, #0]
 800a086:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	fa22 f303 	lsr.w	r3, r2, r3
 800a094:	b2da      	uxtb	r2, r3
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	701a      	strb	r2, [r3, #0]
      i++;
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	3301      	adds	r3, #1
 800a09e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a0a6:	8bfb      	ldrh	r3, [r7, #30]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0ac:	8bfb      	ldrh	r3, [r7, #30]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1ea      	bne.n	800a088 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	372c      	adds	r7, #44	@ 0x2c
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d12c      	bne.n	800a136 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	db12      	blt.n	800a114 <USB_EPSetStall+0x54>
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00f      	beq.n	800a114 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	0151      	lsls	r1, r2, #5
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	440a      	add	r2, r1
 800a10a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a10e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a112:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	0151      	lsls	r1, r2, #5
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	440a      	add	r2, r1
 800a12a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a12e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	e02b      	b.n	800a18e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	db12      	blt.n	800a16e <USB_EPSetStall+0xae>
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00f      	beq.n	800a16e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a168:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a16c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a18c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	785b      	ldrb	r3, [r3, #1]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d128      	bne.n	800a20a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	791b      	ldrb	r3, [r3, #4]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d003      	beq.n	800a1e8 <USB_EPClearStall+0x4c>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d138      	bne.n	800a25a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	0151      	lsls	r1, r2, #5
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	e027      	b.n	800a25a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	0151      	lsls	r1, r2, #5
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	440a      	add	r2, r1
 800a220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a224:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a228:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	791b      	ldrb	r3, [r3, #4]
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d003      	beq.n	800a23a <USB_EPClearStall+0x9e>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d10f      	bne.n	800a25a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a258:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a286:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a28a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a29c:	68f9      	ldr	r1, [r7, #12]
 800a29e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2ce:	f023 0303 	bic.w	r3, r3, #3
 800a2d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2e2:	f023 0302 	bic.w	r3, r3, #2
 800a2e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a310:	f023 0303 	bic.w	r3, r3, #3
 800a314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a324:	f043 0302 	orr.w	r3, r3, #2
 800a328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4013      	ands	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a350:	68fb      	ldr	r3, [r7, #12]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	4013      	ands	r3, r2
 800a380:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	0c1b      	lsrs	r3, r3, #16
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	b29b      	uxth	r3, r3
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a402:	b480      	push	{r7}
 800a404:	b087      	sub	sp, #28
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a424:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a426:	78fb      	ldrb	r3, [r7, #3]
 800a428:	f003 030f 	and.w	r3, r3, #15
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	fa22 f303 	lsr.w	r3, r2, r3
 800a432:	01db      	lsls	r3, r3, #7
 800a434:	b2db      	uxtb	r3, r3
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	4313      	orrs	r3, r2
 800a43a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4013      	ands	r3, r2
 800a44e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a450:	68bb      	ldr	r3, [r7, #8]
}
 800a452:	4618      	mov	r0, r3
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	f003 0301 	and.w	r3, r3, #1
}
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b085      	sub	sp, #20
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a494:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a498:	f023 0307 	bic.w	r3, r3, #7
 800a49c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	333c      	adds	r3, #60	@ 0x3c
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	4a26      	ldr	r2, [pc, #152]	@ (800a578 <USB_EP0_OutStart+0xb8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d90a      	bls.n	800a4fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4f4:	d101      	bne.n	800a4fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e037      	b.n	800a56a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a500:	461a      	mov	r2, r3
 800a502:	2300      	movs	r3, #0
 800a504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a528:	f043 0318 	orr.w	r3, r3, #24
 800a52c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a53c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a540:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a542:	7afb      	ldrb	r3, [r7, #11]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d10f      	bne.n	800a568 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a562:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a566:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	371c      	adds	r7, #28
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	4f54300a 	.word	0x4f54300a

0800a57c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a584:	2300      	movs	r3, #0
 800a586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a594:	d901      	bls.n	800a59a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a596:	2303      	movs	r3, #3
 800a598:	e01b      	b.n	800a5d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	daf2      	bge.n	800a588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	f043 0201 	orr.w	r2, r3, #1
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5be:	d901      	bls.n	800a5c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e006      	b.n	800a5d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d0f0      	beq.n	800a5b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a5f0:	f002 fc38 	bl	800ce64 <USBD_static_malloc>
 800a5f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32b0      	adds	r2, #176	@ 0xb0
 800a606:	2100      	movs	r1, #0
 800a608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a60c:	2302      	movs	r3, #2
 800a60e:	e0d4      	b.n	800a7ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a610:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a614:	2100      	movs	r1, #0
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f003 f9f9 	bl	800da0e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	32b0      	adds	r2, #176	@ 0xb0
 800a626:	68f9      	ldr	r1, [r7, #12]
 800a628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32b0      	adds	r2, #176	@ 0xb0
 800a636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7c1b      	ldrb	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d138      	bne.n	800a6ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a648:	4b5e      	ldr	r3, [pc, #376]	@ (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a64a:	7819      	ldrb	r1, [r3, #0]
 800a64c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a650:	2202      	movs	r2, #2
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f002 fae3 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a658:	4b5a      	ldr	r3, [pc, #360]	@ (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 020f 	and.w	r2, r3, #15
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	3324      	adds	r3, #36	@ 0x24
 800a66e:	2201      	movs	r2, #1
 800a670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a672:	4b55      	ldr	r3, [pc, #340]	@ (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a674:	7819      	ldrb	r1, [r3, #0]
 800a676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a67a:	2202      	movs	r2, #2
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f002 face 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a682:	4b51      	ldr	r3, [pc, #324]	@ (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	f003 020f 	and.w	r2, r3, #15
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	440b      	add	r3, r1
 800a696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a69a:	2201      	movs	r2, #1
 800a69c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a69e:	4b4b      	ldr	r3, [pc, #300]	@ (800a7cc <USBD_CDC_Init+0x1ec>)
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	f003 020f 	and.w	r2, r3, #15
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	3326      	adds	r3, #38	@ 0x26
 800a6b4:	2210      	movs	r2, #16
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	e035      	b.n	800a726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6ba:	4b42      	ldr	r3, [pc, #264]	@ (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a6bc:	7819      	ldrb	r1, [r3, #0]
 800a6be:	2340      	movs	r3, #64	@ 0x40
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f002 faab 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6c8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 020f 	and.w	r2, r3, #15
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	3324      	adds	r3, #36	@ 0x24
 800a6de:	2201      	movs	r2, #1
 800a6e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6e2:	4b39      	ldr	r3, [pc, #228]	@ (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a6e4:	7819      	ldrb	r1, [r3, #0]
 800a6e6:	2340      	movs	r3, #64	@ 0x40
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f002 fa97 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6f0:	4b35      	ldr	r3, [pc, #212]	@ (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	f003 020f 	and.w	r2, r3, #15
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a708:	2201      	movs	r2, #1
 800a70a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a70c:	4b2f      	ldr	r3, [pc, #188]	@ (800a7cc <USBD_CDC_Init+0x1ec>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 020f 	and.w	r2, r3, #15
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	440b      	add	r3, r1
 800a720:	3326      	adds	r3, #38	@ 0x26
 800a722:	2210      	movs	r2, #16
 800a724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a726:	4b29      	ldr	r3, [pc, #164]	@ (800a7cc <USBD_CDC_Init+0x1ec>)
 800a728:	7819      	ldrb	r1, [r3, #0]
 800a72a:	2308      	movs	r3, #8
 800a72c:	2203      	movs	r2, #3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f002 fa75 	bl	800cc1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a734:	4b25      	ldr	r3, [pc, #148]	@ (800a7cc <USBD_CDC_Init+0x1ec>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	f003 020f 	and.w	r2, r3, #15
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	440b      	add	r3, r1
 800a748:	3324      	adds	r3, #36	@ 0x24
 800a74a:	2201      	movs	r2, #1
 800a74c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	33b0      	adds	r3, #176	@ 0xb0
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a784:	2302      	movs	r3, #2
 800a786:	e018      	b.n	800a7ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7c1b      	ldrb	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a790:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a792:	7819      	ldrb	r1, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a79a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f002 fb2c 	bl	800cdfc <USBD_LL_PrepareReceive>
 800a7a4:	e008      	b.n	800a7b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7a6:	4b08      	ldr	r3, [pc, #32]	@ (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a7a8:	7819      	ldrb	r1, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7b0:	2340      	movs	r3, #64	@ 0x40
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f002 fb22 	bl	800cdfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200000ab 	.word	0x200000ab
 800a7c8:	200000ac 	.word	0x200000ac
 800a7cc:	200000ad 	.word	0x200000ad

0800a7d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a7dc:	4b3a      	ldr	r3, [pc, #232]	@ (800a8c8 <USBD_CDC_DeInit+0xf8>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f002 fa41 	bl	800cc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a7e8:	4b37      	ldr	r3, [pc, #220]	@ (800a8c8 <USBD_CDC_DeInit+0xf8>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f003 020f 	and.w	r2, r3, #15
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3324      	adds	r3, #36	@ 0x24
 800a7fe:	2200      	movs	r2, #0
 800a800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a802:	4b32      	ldr	r3, [pc, #200]	@ (800a8cc <USBD_CDC_DeInit+0xfc>)
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f002 fa2e 	bl	800cc6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a80e:	4b2f      	ldr	r3, [pc, #188]	@ (800a8cc <USBD_CDC_DeInit+0xfc>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f003 020f 	and.w	r2, r3, #15
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	440b      	add	r3, r1
 800a822:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a826:	2200      	movs	r2, #0
 800a828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a82a:	4b29      	ldr	r3, [pc, #164]	@ (800a8d0 <USBD_CDC_DeInit+0x100>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 fa1a 	bl	800cc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a836:	4b26      	ldr	r3, [pc, #152]	@ (800a8d0 <USBD_CDC_DeInit+0x100>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f003 020f 	and.w	r2, r3, #15
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4613      	mov	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	440b      	add	r3, r1
 800a84a:	3324      	adds	r3, #36	@ 0x24
 800a84c:	2200      	movs	r2, #0
 800a84e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a850:	4b1f      	ldr	r3, [pc, #124]	@ (800a8d0 <USBD_CDC_DeInit+0x100>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f003 020f 	and.w	r2, r3, #15
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	440b      	add	r3, r1
 800a864:	3326      	adds	r3, #38	@ 0x26
 800a866:	2200      	movs	r2, #0
 800a868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	32b0      	adds	r2, #176	@ 0xb0
 800a874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01f      	beq.n	800a8bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	33b0      	adds	r3, #176	@ 0xb0
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32b0      	adds	r2, #176	@ 0xb0
 800a89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f002 faee 	bl	800ce80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	32b0      	adds	r2, #176	@ 0xb0
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	200000ab 	.word	0x200000ab
 800a8cc:	200000ac 	.word	0x200000ac
 800a8d0:	200000ad 	.word	0x200000ad

0800a8d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	32b0      	adds	r2, #176	@ 0xb0
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a900:	2303      	movs	r3, #3
 800a902:	e0bf      	b.n	800aa84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d050      	beq.n	800a9b2 <USBD_CDC_Setup+0xde>
 800a910:	2b20      	cmp	r3, #32
 800a912:	f040 80af 	bne.w	800aa74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	88db      	ldrh	r3, [r3, #6]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d03a      	beq.n	800a994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	b25b      	sxtb	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	da1b      	bge.n	800a960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	33b0      	adds	r3, #176	@ 0xb0
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a93e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	88d2      	ldrh	r2, [r2, #6]
 800a944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	88db      	ldrh	r3, [r3, #6]
 800a94a:	2b07      	cmp	r3, #7
 800a94c:	bf28      	it	cs
 800a94e:	2307      	movcs	r3, #7
 800a950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	89fa      	ldrh	r2, [r7, #14]
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 fd53 	bl	800c404 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a95e:	e090      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	785a      	ldrb	r2, [r3, #1]
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	88db      	ldrh	r3, [r3, #6]
 800a96e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a970:	d803      	bhi.n	800a97a <USBD_CDC_Setup+0xa6>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	88db      	ldrh	r3, [r3, #6]
 800a976:	b2da      	uxtb	r2, r3
 800a978:	e000      	b.n	800a97c <USBD_CDC_Setup+0xa8>
 800a97a:	2240      	movs	r2, #64	@ 0x40
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a982:	6939      	ldr	r1, [r7, #16]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a98a:	461a      	mov	r2, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fd65 	bl	800c45c <USBD_CtlPrepareRx>
      break;
 800a992:	e076      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	33b0      	adds	r3, #176	@ 0xb0
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	7850      	ldrb	r0, [r2, #1]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	4798      	blx	r3
      break;
 800a9b0:	e067      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	2b0b      	cmp	r3, #11
 800a9b8:	d851      	bhi.n	800aa5e <USBD_CDC_Setup+0x18a>
 800a9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c0 <USBD_CDC_Setup+0xec>)
 800a9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c0:	0800a9f1 	.word	0x0800a9f1
 800a9c4:	0800aa6d 	.word	0x0800aa6d
 800a9c8:	0800aa5f 	.word	0x0800aa5f
 800a9cc:	0800aa5f 	.word	0x0800aa5f
 800a9d0:	0800aa5f 	.word	0x0800aa5f
 800a9d4:	0800aa5f 	.word	0x0800aa5f
 800a9d8:	0800aa5f 	.word	0x0800aa5f
 800a9dc:	0800aa5f 	.word	0x0800aa5f
 800a9e0:	0800aa5f 	.word	0x0800aa5f
 800a9e4:	0800aa5f 	.word	0x0800aa5f
 800a9e8:	0800aa1b 	.word	0x0800aa1b
 800a9ec:	0800aa45 	.word	0x0800aa45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d107      	bne.n	800aa0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9fc:	f107 030a 	add.w	r3, r7, #10
 800aa00:	2202      	movs	r2, #2
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 fcfd 	bl	800c404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa0a:	e032      	b.n	800aa72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fc7b 	bl	800c30a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	75fb      	strb	r3, [r7, #23]
          break;
 800aa18:	e02b      	b.n	800aa72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d107      	bne.n	800aa36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa26:	f107 030d 	add.w	r3, r7, #13
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 fce8 	bl	800c404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa34:	e01d      	b.n	800aa72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 fc66 	bl	800c30a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	75fb      	strb	r3, [r7, #23]
          break;
 800aa42:	e016      	b.n	800aa72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b03      	cmp	r3, #3
 800aa4e:	d00f      	beq.n	800aa70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 fc59 	bl	800c30a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa5c:	e008      	b.n	800aa70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 fc52 	bl	800c30a <USBD_CtlError>
          ret = USBD_FAIL;
 800aa66:	2303      	movs	r3, #3
 800aa68:	75fb      	strb	r3, [r7, #23]
          break;
 800aa6a:	e002      	b.n	800aa72 <USBD_CDC_Setup+0x19e>
          break;
 800aa6c:	bf00      	nop
 800aa6e:	e008      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>
          break;
 800aa70:	bf00      	nop
      }
      break;
 800aa72:	e006      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fc47 	bl	800c30a <USBD_CtlError>
      ret = USBD_FAIL;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa80:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	32b0      	adds	r2, #176	@ 0xb0
 800aaaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e065      	b.n	800ab82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	32b0      	adds	r2, #176	@ 0xb0
 800aac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	3318      	adds	r3, #24
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d02f      	beq.n	800ab40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	f003 020f 	and.w	r2, r3, #15
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	3318      	adds	r3, #24
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	78fb      	ldrb	r3, [r7, #3]
 800aaf8:	f003 010f 	and.w	r1, r3, #15
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	460b      	mov	r3, r1
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	440b      	add	r3, r1
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4403      	add	r3, r0
 800ab08:	331c      	adds	r3, #28
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab10:	fb01 f303 	mul.w	r3, r1, r3
 800ab14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d112      	bne.n	800ab40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	3318      	adds	r3, #24
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab32:	78f9      	ldrb	r1, [r7, #3]
 800ab34:	2300      	movs	r3, #0
 800ab36:	2200      	movs	r2, #0
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f002 f93e 	bl	800cdba <USBD_LL_Transmit>
 800ab3e:	e01f      	b.n	800ab80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	33b0      	adds	r3, #176	@ 0xb0
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d010      	beq.n	800ab80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	33b0      	adds	r3, #176	@ 0xb0
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ab7c:	78fa      	ldrb	r2, [r7, #3]
 800ab7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	460b      	mov	r3, r1
 800ab94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	32b0      	adds	r2, #176	@ 0xb0
 800aba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	32b0      	adds	r2, #176	@ 0xb0
 800abb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abb8:	2303      	movs	r3, #3
 800abba:	e01a      	b.n	800abf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f002 f93c 	bl	800ce3e <USBD_LL_GetRxDataSize>
 800abc6:	4602      	mov	r2, r0
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	33b0      	adds	r3, #176	@ 0xb0
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800abec:	4611      	mov	r1, r2
 800abee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	32b0      	adds	r2, #176	@ 0xb0
 800ac0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e024      	b.n	800ac66 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	33b0      	adds	r3, #176	@ 0xb0
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d019      	beq.n	800ac64 <USBD_CDC_EP0_RxReady+0x6a>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac36:	2bff      	cmp	r3, #255	@ 0xff
 800ac38:	d014      	beq.n	800ac64 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	33b0      	adds	r3, #176	@ 0xb0
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	22ff      	movs	r2, #255	@ 0xff
 800ac60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac78:	2182      	movs	r1, #130	@ 0x82
 800ac7a:	4818      	ldr	r0, [pc, #96]	@ (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac7c:	f000 fd0f 	bl	800b69e <USBD_GetEpDesc>
 800ac80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac82:	2101      	movs	r1, #1
 800ac84:	4815      	ldr	r0, [pc, #84]	@ (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac86:	f000 fd0a 	bl	800b69e <USBD_GetEpDesc>
 800ac8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac8c:	2181      	movs	r1, #129	@ 0x81
 800ac8e:	4813      	ldr	r0, [pc, #76]	@ (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac90:	f000 fd05 	bl	800b69e <USBD_GetEpDesc>
 800ac94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2210      	movs	r2, #16
 800aca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d006      	beq.n	800acb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2200      	movs	r2, #0
 800acac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acb0:	711a      	strb	r2, [r3, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d006      	beq.n	800acca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acc4:	711a      	strb	r2, [r3, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2243      	movs	r2, #67	@ 0x43
 800acce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acd0:	4b02      	ldr	r3, [pc, #8]	@ (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000068 	.word	0x20000068

0800ace0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ace8:	2182      	movs	r1, #130	@ 0x82
 800acea:	4818      	ldr	r0, [pc, #96]	@ (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acec:	f000 fcd7 	bl	800b69e <USBD_GetEpDesc>
 800acf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acf2:	2101      	movs	r1, #1
 800acf4:	4815      	ldr	r0, [pc, #84]	@ (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acf6:	f000 fcd2 	bl	800b69e <USBD_GetEpDesc>
 800acfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acfc:	2181      	movs	r1, #129	@ 0x81
 800acfe:	4813      	ldr	r0, [pc, #76]	@ (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad00:	f000 fccd 	bl	800b69e <USBD_GetEpDesc>
 800ad04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2210      	movs	r2, #16
 800ad10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d006      	beq.n	800ad26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	711a      	strb	r2, [r3, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f042 0202 	orr.w	r2, r2, #2
 800ad24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	711a      	strb	r2, [r3, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f042 0202 	orr.w	r2, r2, #2
 800ad38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2243      	movs	r2, #67	@ 0x43
 800ad3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad40:	4b02      	ldr	r3, [pc, #8]	@ (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000068 	.word	0x20000068

0800ad50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad58:	2182      	movs	r1, #130	@ 0x82
 800ad5a:	4818      	ldr	r0, [pc, #96]	@ (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad5c:	f000 fc9f 	bl	800b69e <USBD_GetEpDesc>
 800ad60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad62:	2101      	movs	r1, #1
 800ad64:	4815      	ldr	r0, [pc, #84]	@ (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad66:	f000 fc9a 	bl	800b69e <USBD_GetEpDesc>
 800ad6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad6c:	2181      	movs	r1, #129	@ 0x81
 800ad6e:	4813      	ldr	r0, [pc, #76]	@ (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad70:	f000 fc95 	bl	800b69e <USBD_GetEpDesc>
 800ad74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2210      	movs	r2, #16
 800ad80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d006      	beq.n	800ad96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad90:	711a      	strb	r2, [r3, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ada4:	711a      	strb	r2, [r3, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2243      	movs	r2, #67	@ 0x43
 800adae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adb0:	4b02      	ldr	r3, [pc, #8]	@ (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20000068 	.word	0x20000068

0800adc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	220a      	movs	r2, #10
 800adcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800adce:	4b03      	ldr	r3, [pc, #12]	@ (800addc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800add0:	4618      	mov	r0, r3
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	20000024 	.word	0x20000024

0800ade0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e009      	b.n	800ae08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	33b0      	adds	r3, #176	@ 0xb0
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	32b0      	adds	r2, #176	@ 0xb0
 800ae2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e008      	b.n	800ae4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	371c      	adds	r7, #28
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	32b0      	adds	r2, #176	@ 0xb0
 800ae6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e004      	b.n	800ae86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	32b0      	adds	r2, #176	@ 0xb0
 800aea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	32b0      	adds	r2, #176	@ 0xb0
 800aeb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e018      	b.n	800aef4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7c1b      	ldrb	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10a      	bne.n	800aee0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aeca:	4b0c      	ldr	r3, [pc, #48]	@ (800aefc <USBD_CDC_ReceivePacket+0x68>)
 800aecc:	7819      	ldrb	r1, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 ff8f 	bl	800cdfc <USBD_LL_PrepareReceive>
 800aede:	e008      	b.n	800aef2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aee0:	4b06      	ldr	r3, [pc, #24]	@ (800aefc <USBD_CDC_ReceivePacket+0x68>)
 800aee2:	7819      	ldrb	r1, [r3, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aeea:	2340      	movs	r3, #64	@ 0x40
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 ff85 	bl	800cdfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	200000ac 	.word	0x200000ac

0800af00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	e01f      	b.n	800af58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	79fa      	ldrb	r2, [r7, #7]
 800af4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f001 fdff 	bl	800cb50 <USBD_LL_Init>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af56:	7dfb      	ldrb	r3, [r7, #23]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af74:	2303      	movs	r3, #3
 800af76:	e025      	b.n	800afc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	32ae      	adds	r2, #174	@ 0xae
 800af8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00f      	beq.n	800afb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	32ae      	adds	r2, #174	@ 0xae
 800af9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa4:	f107 020e 	add.w	r2, r7, #14
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	4602      	mov	r2, r0
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fe07 	bl	800cbe8 <USBD_LL_Start>
 800afda:	4603      	mov	r3, r0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	78fa      	ldrb	r2, [r7, #3]
 800b01e:	4611      	mov	r1, r2
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	4798      	blx	r3
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	460b      	mov	r3, r1
 800b03c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	78fa      	ldrb	r2, [r7, #3]
 800b04c:	4611      	mov	r1, r2
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b058:	2303      	movs	r3, #3
 800b05a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 f90c 	bl	800c296 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b08c:	461a      	mov	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b09a:	f003 031f 	and.w	r3, r3, #31
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d01a      	beq.n	800b0d8 <USBD_LL_SetupStage+0x72>
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d822      	bhi.n	800b0ec <USBD_LL_SetupStage+0x86>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <USBD_LL_SetupStage+0x4a>
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d00a      	beq.n	800b0c4 <USBD_LL_SetupStage+0x5e>
 800b0ae:	e01d      	b.n	800b0ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fb63 	bl	800b784 <USBD_StdDevReq>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c2:	e020      	b.n	800b106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fbcb 	bl	800b868 <USBD_StdItfReq>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0d6:	e016      	b.n	800b106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fc2d 	bl	800b940 <USBD_StdEPReq>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ea:	e00c      	b.n	800b106 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b0f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 fdd4 	bl	800cca8 <USBD_LL_StallEP>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
      break;
 800b104:	bf00      	nop
  }

  return ret;
 800b106:	7bfb      	ldrb	r3, [r7, #15]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	460b      	mov	r3, r1
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b122:	7afb      	ldrb	r3, [r7, #11]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d16e      	bne.n	800b206 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b12e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b136:	2b03      	cmp	r3, #3
 800b138:	f040 8098 	bne.w	800b26c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	689a      	ldr	r2, [r3, #8]
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	429a      	cmp	r2, r3
 800b146:	d913      	bls.n	800b170 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	1ad2      	subs	r2, r2, r3
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	4293      	cmp	r3, r2
 800b160:	bf28      	it	cs
 800b162:	4613      	movcs	r3, r2
 800b164:	461a      	mov	r2, r3
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f001 f994 	bl	800c496 <USBD_CtlContinueRx>
 800b16e:	e07d      	b.n	800b26c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b176:	f003 031f 	and.w	r3, r3, #31
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d014      	beq.n	800b1a8 <USBD_LL_DataOutStage+0x98>
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d81d      	bhi.n	800b1be <USBD_LL_DataOutStage+0xae>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <USBD_LL_DataOutStage+0x7c>
 800b186:	2b01      	cmp	r3, #1
 800b188:	d003      	beq.n	800b192 <USBD_LL_DataOutStage+0x82>
 800b18a:	e018      	b.n	800b1be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	75bb      	strb	r3, [r7, #22]
            break;
 800b190:	e018      	b.n	800b1c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	4619      	mov	r1, r3
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fa64 	bl	800b66a <USBD_CoreFindIF>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75bb      	strb	r3, [r7, #22]
            break;
 800b1a6:	e00d      	b.n	800b1c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 fa66 	bl	800b684 <USBD_CoreFindEP>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b1bc:	e002      	b.n	800b1c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	75bb      	strb	r3, [r7, #22]
            break;
 800b1c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b1c4:	7dbb      	ldrb	r3, [r7, #22]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d119      	bne.n	800b1fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d113      	bne.n	800b1fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b1d6:	7dba      	ldrb	r2, [r7, #22]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	32ae      	adds	r2, #174	@ 0xae
 800b1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00b      	beq.n	800b1fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b1e6:	7dba      	ldrb	r2, [r7, #22]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b1ee:	7dba      	ldrb	r2, [r7, #22]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	32ae      	adds	r2, #174	@ 0xae
 800b1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f001 f95a 	bl	800c4b8 <USBD_CtlSendStatus>
 800b204:	e032      	b.n	800b26c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b206:	7afb      	ldrb	r3, [r7, #11]
 800b208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	4619      	mov	r1, r3
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 fa37 	bl	800b684 <USBD_CoreFindEP>
 800b216:	4603      	mov	r3, r0
 800b218:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b21a:	7dbb      	ldrb	r3, [r7, #22]
 800b21c:	2bff      	cmp	r3, #255	@ 0xff
 800b21e:	d025      	beq.n	800b26c <USBD_LL_DataOutStage+0x15c>
 800b220:	7dbb      	ldrb	r3, [r7, #22]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d122      	bne.n	800b26c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d117      	bne.n	800b262 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b232:	7dba      	ldrb	r2, [r7, #22]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	32ae      	adds	r2, #174	@ 0xae
 800b238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00f      	beq.n	800b262 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b242:	7dba      	ldrb	r2, [r7, #22]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b24a:	7dba      	ldrb	r2, [r7, #22]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	32ae      	adds	r2, #174	@ 0xae
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	7afa      	ldrb	r2, [r7, #11]
 800b258:	4611      	mov	r1, r2
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	4798      	blx	r3
 800b25e:	4603      	mov	r3, r0
 800b260:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	e000      	b.n	800b26e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b086      	sub	sp, #24
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	460b      	mov	r3, r1
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d16f      	bne.n	800b36a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3314      	adds	r3, #20
 800b28e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b296:	2b02      	cmp	r3, #2
 800b298:	d15a      	bne.n	800b350 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	689a      	ldr	r2, [r3, #8]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d914      	bls.n	800b2d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f001 f8bc 	bl	800c43a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f001 fd97 	bl	800cdfc <USBD_LL_PrepareReceive>
 800b2ce:	e03f      	b.n	800b350 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d11c      	bne.n	800b316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d316      	bcc.n	800b316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d20f      	bcs.n	800b316 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f001 f89d 	bl	800c43a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b308:	2300      	movs	r3, #0
 800b30a:	2200      	movs	r2, #0
 800b30c:	2100      	movs	r1, #0
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f001 fd74 	bl	800cdfc <USBD_LL_PrepareReceive>
 800b314:	e01c      	b.n	800b350 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d10f      	bne.n	800b342 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b342:	2180      	movs	r1, #128	@ 0x80
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f001 fcaf 	bl	800cca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f001 f8c7 	bl	800c4de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d03a      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fe42 	bl	800afe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b368:	e032      	b.n	800b3d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b370:	b2db      	uxtb	r3, r3
 800b372:	4619      	mov	r1, r3
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f985 	bl	800b684 <USBD_CoreFindEP>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2bff      	cmp	r3, #255	@ 0xff
 800b382:	d025      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
 800b384:	7dfb      	ldrb	r3, [r7, #23]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d122      	bne.n	800b3d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b03      	cmp	r3, #3
 800b394:	d11c      	bne.n	800b3d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b396:	7dfa      	ldrb	r2, [r7, #23]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	32ae      	adds	r2, #174	@ 0xae
 800b39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d014      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b3a6:	7dfa      	ldrb	r2, [r7, #23]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b3ae:	7dfa      	ldrb	r2, [r7, #23]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	32ae      	adds	r2, #174	@ 0xae
 800b3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	7afa      	ldrb	r2, [r7, #11]
 800b3bc:	4611      	mov	r1, r2
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	4798      	blx	r3
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b3c6:	7dbb      	ldrb	r3, [r7, #22]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b3cc:	7dbb      	ldrb	r3, [r7, #22]
 800b3ce:	e000      	b.n	800b3d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b412:	2b00      	cmp	r3, #0
 800b414:	d014      	beq.n	800b440 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00e      	beq.n	800b440 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	6852      	ldr	r2, [r2, #4]
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	4611      	mov	r1, r2
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b43c:	2303      	movs	r3, #3
 800b43e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b440:	2340      	movs	r3, #64	@ 0x40
 800b442:	2200      	movs	r2, #0
 800b444:	2100      	movs	r1, #0
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 fbe9 	bl	800cc1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2240      	movs	r2, #64	@ 0x40
 800b458:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b45c:	2340      	movs	r3, #64	@ 0x40
 800b45e:	2200      	movs	r2, #0
 800b460:	2180      	movs	r1, #128	@ 0x80
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 fbdb 	bl	800cc1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2240      	movs	r2, #64	@ 0x40
 800b472:	621a      	str	r2, [r3, #32]

  return ret;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	78fa      	ldrb	r2, [r7, #3]
 800b48e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d006      	beq.n	800b4c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2204      	movs	r2, #4
 800b4c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	370c      	adds	r7, #12
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b083      	sub	sp, #12
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b04      	cmp	r3, #4
 800b4e8:	d106      	bne.n	800b4f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b03      	cmp	r3, #3
 800b518:	d110      	bne.n	800b53c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d005      	beq.n	800b53c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b536:	69db      	ldr	r3, [r3, #28]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b082      	sub	sp, #8
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	32ae      	adds	r2, #174	@ 0xae
 800b55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b564:	2303      	movs	r3, #3
 800b566:	e01c      	b.n	800b5a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b03      	cmp	r3, #3
 800b572:	d115      	bne.n	800b5a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	32ae      	adds	r2, #174	@ 0xae
 800b57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00b      	beq.n	800b5a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	32ae      	adds	r2, #174	@ 0xae
 800b592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b596:	6a1b      	ldr	r3, [r3, #32]
 800b598:	78fa      	ldrb	r2, [r7, #3]
 800b59a:	4611      	mov	r1, r2
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	32ae      	adds	r2, #174	@ 0xae
 800b5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e01c      	b.n	800b606 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d115      	bne.n	800b604 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	32ae      	adds	r2, #174	@ 0xae
 800b5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00b      	beq.n	800b604 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	32ae      	adds	r2, #174	@ 0xae
 800b5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5fc:	78fa      	ldrb	r2, [r7, #3]
 800b5fe:	4611      	mov	r1, r2
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00e      	beq.n	800b660 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	6852      	ldr	r2, [r2, #4]
 800b64e:	b2d2      	uxtb	r2, r2
 800b650:	4611      	mov	r1, r2
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	4798      	blx	r3
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b65c:	2303      	movs	r3, #3
 800b65e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b660:	7bfb      	ldrb	r3, [r7, #15]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b692:	4618      	mov	r0, r3
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b086      	sub	sp, #24
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	885b      	ldrh	r3, [r3, #2]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	7812      	ldrb	r2, [r2, #0]
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d91f      	bls.n	800b704 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6ca:	e013      	b.n	800b6f4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6cc:	f107 030a 	add.w	r3, r7, #10
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6978      	ldr	r0, [r7, #20]
 800b6d4:	f000 f81b 	bl	800b70e <USBD_GetNextDesc>
 800b6d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	d108      	bne.n	800b6f4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	789b      	ldrb	r3, [r3, #2]
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d008      	beq.n	800b702 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	885b      	ldrh	r3, [r3, #2]
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	897b      	ldrh	r3, [r7, #10]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d8e5      	bhi.n	800b6cc <USBD_GetEpDesc+0x2e>
 800b700:	e000      	b.n	800b704 <USBD_GetEpDesc+0x66>
          break;
 800b702:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b704:	693b      	ldr	r3, [r7, #16]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	7812      	ldrb	r2, [r2, #0]
 800b724:	4413      	add	r3, r2
 800b726:	b29a      	uxth	r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	461a      	mov	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4413      	add	r3, r2
 800b736:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b738:	68fb      	ldr	r3, [r7, #12]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b746:	b480      	push	{r7}
 800b748:	b087      	sub	sp, #28
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	3301      	adds	r3, #1
 800b75c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b764:	8a3b      	ldrh	r3, [r7, #16]
 800b766:	021b      	lsls	r3, r3, #8
 800b768:	b21a      	sxth	r2, r3
 800b76a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b76e:	4313      	orrs	r3, r2
 800b770:	b21b      	sxth	r3, r3
 800b772:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b774:	89fb      	ldrh	r3, [r7, #14]
}
 800b776:	4618      	mov	r0, r3
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
	...

0800b784 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b79a:	2b40      	cmp	r3, #64	@ 0x40
 800b79c:	d005      	beq.n	800b7aa <USBD_StdDevReq+0x26>
 800b79e:	2b40      	cmp	r3, #64	@ 0x40
 800b7a0:	d857      	bhi.n	800b852 <USBD_StdDevReq+0xce>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00f      	beq.n	800b7c6 <USBD_StdDevReq+0x42>
 800b7a6:	2b20      	cmp	r3, #32
 800b7a8:	d153      	bne.n	800b852 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	32ae      	adds	r2, #174	@ 0xae
 800b7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	4798      	blx	r3
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c4:	e04a      	b.n	800b85c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	785b      	ldrb	r3, [r3, #1]
 800b7ca:	2b09      	cmp	r3, #9
 800b7cc:	d83b      	bhi.n	800b846 <USBD_StdDevReq+0xc2>
 800b7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d4 <USBD_StdDevReq+0x50>)
 800b7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b83d 	.word	0x0800b83d
 800b7dc:	0800b847 	.word	0x0800b847
 800b7e0:	0800b833 	.word	0x0800b833
 800b7e4:	0800b847 	.word	0x0800b847
 800b7e8:	0800b807 	.word	0x0800b807
 800b7ec:	0800b7fd 	.word	0x0800b7fd
 800b7f0:	0800b847 	.word	0x0800b847
 800b7f4:	0800b81f 	.word	0x0800b81f
 800b7f8:	0800b811 	.word	0x0800b811
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa3c 	bl	800bc7c <USBD_GetDescriptor>
          break;
 800b804:	e024      	b.n	800b850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fba1 	bl	800bf50 <USBD_SetAddress>
          break;
 800b80e:	e01f      	b.n	800b850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fbe0 	bl	800bfd8 <USBD_SetConfig>
 800b818:	4603      	mov	r3, r0
 800b81a:	73fb      	strb	r3, [r7, #15]
          break;
 800b81c:	e018      	b.n	800b850 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fc83 	bl	800c12c <USBD_GetConfig>
          break;
 800b826:	e013      	b.n	800b850 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fcb4 	bl	800c198 <USBD_GetStatus>
          break;
 800b830:	e00e      	b.n	800b850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fce3 	bl	800c200 <USBD_SetFeature>
          break;
 800b83a:	e009      	b.n	800b850 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fd07 	bl	800c252 <USBD_ClrFeature>
          break;
 800b844:	e004      	b.n	800b850 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fd5e 	bl	800c30a <USBD_CtlError>
          break;
 800b84e:	bf00      	nop
      }
      break;
 800b850:	e004      	b.n	800b85c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fd58 	bl	800c30a <USBD_CtlError>
      break;
 800b85a:	bf00      	nop
  }

  return ret;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop

0800b868 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b87e:	2b40      	cmp	r3, #64	@ 0x40
 800b880:	d005      	beq.n	800b88e <USBD_StdItfReq+0x26>
 800b882:	2b40      	cmp	r3, #64	@ 0x40
 800b884:	d852      	bhi.n	800b92c <USBD_StdItfReq+0xc4>
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <USBD_StdItfReq+0x26>
 800b88a:	2b20      	cmp	r3, #32
 800b88c:	d14e      	bne.n	800b92c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b894:	b2db      	uxtb	r3, r3
 800b896:	3b01      	subs	r3, #1
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d840      	bhi.n	800b91e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	889b      	ldrh	r3, [r3, #4]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d836      	bhi.n	800b914 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	889b      	ldrh	r3, [r3, #4]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff fedb 	bl	800b66a <USBD_CoreFindIF>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2bff      	cmp	r3, #255	@ 0xff
 800b8bc:	d01d      	beq.n	800b8fa <USBD_StdItfReq+0x92>
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d11a      	bne.n	800b8fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b8c4:	7bba      	ldrb	r2, [r7, #14]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	32ae      	adds	r2, #174	@ 0xae
 800b8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00f      	beq.n	800b8f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b8d4:	7bba      	ldrb	r2, [r7, #14]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8dc:	7bba      	ldrb	r2, [r7, #14]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	32ae      	adds	r2, #174	@ 0xae
 800b8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	4798      	blx	r3
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8f2:	e004      	b.n	800b8fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8f8:	e001      	b.n	800b8fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	88db      	ldrh	r3, [r3, #6]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d110      	bne.n	800b928 <USBD_StdItfReq+0xc0>
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10d      	bne.n	800b928 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fdd3 	bl	800c4b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b912:	e009      	b.n	800b928 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fcf7 	bl	800c30a <USBD_CtlError>
          break;
 800b91c:	e004      	b.n	800b928 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fcf2 	bl	800c30a <USBD_CtlError>
          break;
 800b926:	e000      	b.n	800b92a <USBD_StdItfReq+0xc2>
          break;
 800b928:	bf00      	nop
      }
      break;
 800b92a:	e004      	b.n	800b936 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fceb 	bl	800c30a <USBD_CtlError>
      break;
 800b934:	bf00      	nop
  }

  return ret;
 800b936:	7bfb      	ldrb	r3, [r7, #15]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	889b      	ldrh	r3, [r3, #4]
 800b952:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b95c:	2b40      	cmp	r3, #64	@ 0x40
 800b95e:	d007      	beq.n	800b970 <USBD_StdEPReq+0x30>
 800b960:	2b40      	cmp	r3, #64	@ 0x40
 800b962:	f200 817f 	bhi.w	800bc64 <USBD_StdEPReq+0x324>
 800b966:	2b00      	cmp	r3, #0
 800b968:	d02a      	beq.n	800b9c0 <USBD_StdEPReq+0x80>
 800b96a:	2b20      	cmp	r3, #32
 800b96c:	f040 817a 	bne.w	800bc64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b970:	7bbb      	ldrb	r3, [r7, #14]
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff fe85 	bl	800b684 <USBD_CoreFindEP>
 800b97a:	4603      	mov	r3, r0
 800b97c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b97e:	7b7b      	ldrb	r3, [r7, #13]
 800b980:	2bff      	cmp	r3, #255	@ 0xff
 800b982:	f000 8174 	beq.w	800bc6e <USBD_StdEPReq+0x32e>
 800b986:	7b7b      	ldrb	r3, [r7, #13]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f040 8170 	bne.w	800bc6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b98e:	7b7a      	ldrb	r2, [r7, #13]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b996:	7b7a      	ldrb	r2, [r7, #13]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	32ae      	adds	r2, #174	@ 0xae
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 8163 	beq.w	800bc6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b9a8:	7b7a      	ldrb	r2, [r7, #13]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	32ae      	adds	r2, #174	@ 0xae
 800b9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9be:	e156      	b.n	800bc6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	785b      	ldrb	r3, [r3, #1]
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d008      	beq.n	800b9da <USBD_StdEPReq+0x9a>
 800b9c8:	2b03      	cmp	r3, #3
 800b9ca:	f300 8145 	bgt.w	800bc58 <USBD_StdEPReq+0x318>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f000 809b 	beq.w	800bb0a <USBD_StdEPReq+0x1ca>
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d03c      	beq.n	800ba52 <USBD_StdEPReq+0x112>
 800b9d8:	e13e      	b.n	800bc58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d002      	beq.n	800b9ec <USBD_StdEPReq+0xac>
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d016      	beq.n	800ba18 <USBD_StdEPReq+0xd8>
 800b9ea:	e02c      	b.n	800ba46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9ec:	7bbb      	ldrb	r3, [r7, #14]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00d      	beq.n	800ba0e <USBD_StdEPReq+0xce>
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	2b80      	cmp	r3, #128	@ 0x80
 800b9f6:	d00a      	beq.n	800ba0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f001 f953 	bl	800cca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba02:	2180      	movs	r1, #128	@ 0x80
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f001 f94f 	bl	800cca8 <USBD_LL_StallEP>
 800ba0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba0c:	e020      	b.n	800ba50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fc7a 	bl	800c30a <USBD_CtlError>
              break;
 800ba16:	e01b      	b.n	800ba50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	885b      	ldrh	r3, [r3, #2]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10e      	bne.n	800ba3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00b      	beq.n	800ba3e <USBD_StdEPReq+0xfe>
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	2b80      	cmp	r3, #128	@ 0x80
 800ba2a:	d008      	beq.n	800ba3e <USBD_StdEPReq+0xfe>
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	88db      	ldrh	r3, [r3, #6]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d104      	bne.n	800ba3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f001 f935 	bl	800cca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fd3a 	bl	800c4b8 <USBD_CtlSendStatus>

              break;
 800ba44:	e004      	b.n	800ba50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba46:	6839      	ldr	r1, [r7, #0]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fc5e 	bl	800c30a <USBD_CtlError>
              break;
 800ba4e:	bf00      	nop
          }
          break;
 800ba50:	e107      	b.n	800bc62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d002      	beq.n	800ba64 <USBD_StdEPReq+0x124>
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d016      	beq.n	800ba90 <USBD_StdEPReq+0x150>
 800ba62:	e04b      	b.n	800bafc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00d      	beq.n	800ba86 <USBD_StdEPReq+0x146>
 800ba6a:	7bbb      	ldrb	r3, [r7, #14]
 800ba6c:	2b80      	cmp	r3, #128	@ 0x80
 800ba6e:	d00a      	beq.n	800ba86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 f917 	bl	800cca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba7a:	2180      	movs	r1, #128	@ 0x80
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 f913 	bl	800cca8 <USBD_LL_StallEP>
 800ba82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba84:	e040      	b.n	800bb08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fc3e 	bl	800c30a <USBD_CtlError>
              break;
 800ba8e:	e03b      	b.n	800bb08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	885b      	ldrh	r3, [r3, #2]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d136      	bne.n	800bb06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d004      	beq.n	800baac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800baa2:	7bbb      	ldrb	r3, [r7, #14]
 800baa4:	4619      	mov	r1, r3
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f001 f91d 	bl	800cce6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fd03 	bl	800c4b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff fde4 	bl	800b684 <USBD_CoreFindEP>
 800babc:	4603      	mov	r3, r0
 800babe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bac0:	7b7b      	ldrb	r3, [r7, #13]
 800bac2:	2bff      	cmp	r3, #255	@ 0xff
 800bac4:	d01f      	beq.n	800bb06 <USBD_StdEPReq+0x1c6>
 800bac6:	7b7b      	ldrb	r3, [r7, #13]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d11c      	bne.n	800bb06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bacc:	7b7a      	ldrb	r2, [r7, #13]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bad4:	7b7a      	ldrb	r2, [r7, #13]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	32ae      	adds	r2, #174	@ 0xae
 800bada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d010      	beq.n	800bb06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bae4:	7b7a      	ldrb	r2, [r7, #13]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	32ae      	adds	r2, #174	@ 0xae
 800baea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
 800baf6:	4603      	mov	r3, r0
 800baf8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bafa:	e004      	b.n	800bb06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fc03 	bl	800c30a <USBD_CtlError>
              break;
 800bb04:	e000      	b.n	800bb08 <USBD_StdEPReq+0x1c8>
              break;
 800bb06:	bf00      	nop
          }
          break;
 800bb08:	e0ab      	b.n	800bc62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d002      	beq.n	800bb1c <USBD_StdEPReq+0x1dc>
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d032      	beq.n	800bb80 <USBD_StdEPReq+0x240>
 800bb1a:	e097      	b.n	800bc4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d007      	beq.n	800bb32 <USBD_StdEPReq+0x1f2>
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
 800bb24:	2b80      	cmp	r3, #128	@ 0x80
 800bb26:	d004      	beq.n	800bb32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fbed 	bl	800c30a <USBD_CtlError>
                break;
 800bb30:	e091      	b.n	800bc56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	da0b      	bge.n	800bb52 <USBD_StdEPReq+0x212>
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
 800bb3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	3310      	adds	r3, #16
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	3304      	adds	r3, #4
 800bb50:	e00b      	b.n	800bb6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
 800bb54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb58:	4613      	mov	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	4413      	add	r3, r2
 800bb68:	3304      	adds	r3, #4
 800bb6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2202      	movs	r2, #2
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fc43 	bl	800c404 <USBD_CtlSendData>
              break;
 800bb7e:	e06a      	b.n	800bc56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	da11      	bge.n	800bbac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	f003 020f 	and.w	r2, r3, #15
 800bb8e:	6879      	ldr	r1, [r7, #4]
 800bb90:	4613      	mov	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	440b      	add	r3, r1
 800bb9a:	3324      	adds	r3, #36	@ 0x24
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d117      	bne.n	800bbd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fbb0 	bl	800c30a <USBD_CtlError>
                  break;
 800bbaa:	e054      	b.n	800bc56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
 800bbae:	f003 020f 	and.w	r2, r3, #15
 800bbb2:	6879      	ldr	r1, [r7, #4]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	440b      	add	r3, r1
 800bbbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d104      	bne.n	800bbd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fb9d 	bl	800c30a <USBD_CtlError>
                  break;
 800bbd0:	e041      	b.n	800bc56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	da0b      	bge.n	800bbf2 <USBD_StdEPReq+0x2b2>
 800bbda:	7bbb      	ldrb	r3, [r7, #14]
 800bbdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	3310      	adds	r3, #16
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	4413      	add	r3, r2
 800bbee:	3304      	adds	r3, #4
 800bbf0:	e00b      	b.n	800bc0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	4413      	add	r3, r2
 800bc08:	3304      	adds	r3, #4
 800bc0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <USBD_StdEPReq+0x2d8>
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b80      	cmp	r3, #128	@ 0x80
 800bc16:	d103      	bne.n	800bc20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e00e      	b.n	800bc3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 f87d 	bl	800cd24 <USBD_LL_IsStallEP>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2201      	movs	r2, #1
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	e002      	b.n	800bc3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2202      	movs	r2, #2
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fbdd 	bl	800c404 <USBD_CtlSendData>
              break;
 800bc4a:	e004      	b.n	800bc56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fb5b 	bl	800c30a <USBD_CtlError>
              break;
 800bc54:	bf00      	nop
          }
          break;
 800bc56:	e004      	b.n	800bc62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fb55 	bl	800c30a <USBD_CtlError>
          break;
 800bc60:	bf00      	nop
      }
      break;
 800bc62:	e005      	b.n	800bc70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fb4f 	bl	800c30a <USBD_CtlError>
      break;
 800bc6c:	e000      	b.n	800bc70 <USBD_StdEPReq+0x330>
      break;
 800bc6e:	bf00      	nop
  }

  return ret;
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
	...

0800bc7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	0a1b      	lsrs	r3, r3, #8
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	2b06      	cmp	r3, #6
 800bc9e:	f200 8128 	bhi.w	800bef2 <USBD_GetDescriptor+0x276>
 800bca2:	a201      	add	r2, pc, #4	@ (adr r2, 800bca8 <USBD_GetDescriptor+0x2c>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bcc5 	.word	0x0800bcc5
 800bcac:	0800bcdd 	.word	0x0800bcdd
 800bcb0:	0800bd1d 	.word	0x0800bd1d
 800bcb4:	0800bef3 	.word	0x0800bef3
 800bcb8:	0800bef3 	.word	0x0800bef3
 800bcbc:	0800be93 	.word	0x0800be93
 800bcc0:	0800bebf 	.word	0x0800bebf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	7c12      	ldrb	r2, [r2, #16]
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	60f8      	str	r0, [r7, #12]
      break;
 800bcda:	e112      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	7c1b      	ldrb	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10d      	bne.n	800bd00 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcec:	f107 0208 	add.w	r2, r7, #8
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	4798      	blx	r3
 800bcf4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcfe:	e100      	b.n	800bf02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd08:	f107 0208 	add.w	r2, r7, #8
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	2202      	movs	r2, #2
 800bd18:	701a      	strb	r2, [r3, #0]
      break;
 800bd1a:	e0f2      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	885b      	ldrh	r3, [r3, #2]
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b05      	cmp	r3, #5
 800bd24:	f200 80ac 	bhi.w	800be80 <USBD_GetDescriptor+0x204>
 800bd28:	a201      	add	r2, pc, #4	@ (adr r2, 800bd30 <USBD_GetDescriptor+0xb4>)
 800bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2e:	bf00      	nop
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd7d 	.word	0x0800bd7d
 800bd38:	0800bdb1 	.word	0x0800bdb1
 800bd3c:	0800bde5 	.word	0x0800bde5
 800bd40:	0800be19 	.word	0x0800be19
 800bd44:	0800be4d 	.word	0x0800be4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00b      	beq.n	800bd6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	7c12      	ldrb	r2, [r2, #16]
 800bd60:	f107 0108 	add.w	r1, r7, #8
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
 800bd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd6a:	e091      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 facb 	bl	800c30a <USBD_CtlError>
            err++;
 800bd74:	7afb      	ldrb	r3, [r7, #11]
 800bd76:	3301      	adds	r3, #1
 800bd78:	72fb      	strb	r3, [r7, #11]
          break;
 800bd7a:	e089      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00b      	beq.n	800bda0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	7c12      	ldrb	r2, [r2, #16]
 800bd94:	f107 0108 	add.w	r1, r7, #8
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
 800bd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd9e:	e077      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fab1 	bl	800c30a <USBD_CtlError>
            err++;
 800bda8:	7afb      	ldrb	r3, [r7, #11]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	72fb      	strb	r3, [r7, #11]
          break;
 800bdae:	e06f      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00b      	beq.n	800bdd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	7c12      	ldrb	r2, [r2, #16]
 800bdc8:	f107 0108 	add.w	r1, r7, #8
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdd2:	e05d      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa97 	bl	800c30a <USBD_CtlError>
            err++;
 800bddc:	7afb      	ldrb	r3, [r7, #11]
 800bdde:	3301      	adds	r3, #1
 800bde0:	72fb      	strb	r3, [r7, #11]
          break;
 800bde2:	e055      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00b      	beq.n	800be08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	7c12      	ldrb	r2, [r2, #16]
 800bdfc:	f107 0108 	add.w	r1, r7, #8
 800be00:	4610      	mov	r0, r2
 800be02:	4798      	blx	r3
 800be04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be06:	e043      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa7d 	bl	800c30a <USBD_CtlError>
            err++;
 800be10:	7afb      	ldrb	r3, [r7, #11]
 800be12:	3301      	adds	r3, #1
 800be14:	72fb      	strb	r3, [r7, #11]
          break;
 800be16:	e03b      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	7c12      	ldrb	r2, [r2, #16]
 800be30:	f107 0108 	add.w	r1, r7, #8
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
 800be38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be3a:	e029      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa63 	bl	800c30a <USBD_CtlError>
            err++;
 800be44:	7afb      	ldrb	r3, [r7, #11]
 800be46:	3301      	adds	r3, #1
 800be48:	72fb      	strb	r3, [r7, #11]
          break;
 800be4a:	e021      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	7c12      	ldrb	r2, [r2, #16]
 800be64:	f107 0108 	add.w	r1, r7, #8
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be6e:	e00f      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa49 	bl	800c30a <USBD_CtlError>
            err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
          break;
 800be7e:	e007      	b.n	800be90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa41 	bl	800c30a <USBD_CtlError>
          err++;
 800be88:	7afb      	ldrb	r3, [r7, #11]
 800be8a:	3301      	adds	r3, #1
 800be8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be8e:	bf00      	nop
      }
      break;
 800be90:	e037      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7c1b      	ldrb	r3, [r3, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d109      	bne.n	800beae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bea2:	f107 0208 	add.w	r2, r7, #8
 800bea6:	4610      	mov	r0, r2
 800bea8:	4798      	blx	r3
 800beaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beac:	e029      	b.n	800bf02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fa2a 	bl	800c30a <USBD_CtlError>
        err++;
 800beb6:	7afb      	ldrb	r3, [r7, #11]
 800beb8:	3301      	adds	r3, #1
 800beba:	72fb      	strb	r3, [r7, #11]
      break;
 800bebc:	e021      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	7c1b      	ldrb	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10d      	bne.n	800bee2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800becc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bece:	f107 0208 	add.w	r2, r7, #8
 800bed2:	4610      	mov	r0, r2
 800bed4:	4798      	blx	r3
 800bed6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	3301      	adds	r3, #1
 800bedc:	2207      	movs	r2, #7
 800bede:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bee0:	e00f      	b.n	800bf02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fa10 	bl	800c30a <USBD_CtlError>
        err++;
 800beea:	7afb      	ldrb	r3, [r7, #11]
 800beec:	3301      	adds	r3, #1
 800beee:	72fb      	strb	r3, [r7, #11]
      break;
 800bef0:	e007      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fa08 	bl	800c30a <USBD_CtlError>
      err++;
 800befa:	7afb      	ldrb	r3, [r7, #11]
 800befc:	3301      	adds	r3, #1
 800befe:	72fb      	strb	r3, [r7, #11]
      break;
 800bf00:	bf00      	nop
  }

  if (err != 0U)
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d11e      	bne.n	800bf46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	88db      	ldrh	r3, [r3, #6]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d016      	beq.n	800bf3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bf10:	893b      	ldrh	r3, [r7, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00e      	beq.n	800bf34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	88da      	ldrh	r2, [r3, #6]
 800bf1a:	893b      	ldrh	r3, [r7, #8]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	bf28      	it	cs
 800bf20:	4613      	movcs	r3, r2
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf26:	893b      	ldrh	r3, [r7, #8]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fa69 	bl	800c404 <USBD_CtlSendData>
 800bf32:	e009      	b.n	800bf48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f9e7 	bl	800c30a <USBD_CtlError>
 800bf3c:	e004      	b.n	800bf48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 faba 	bl	800c4b8 <USBD_CtlSendStatus>
 800bf44:	e000      	b.n	800bf48 <USBD_GetDescriptor+0x2cc>
    return;
 800bf46:	bf00      	nop
  }
}
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop

0800bf50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	889b      	ldrh	r3, [r3, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d131      	bne.n	800bfc6 <USBD_SetAddress+0x76>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	88db      	ldrh	r3, [r3, #6]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d12d      	bne.n	800bfc6 <USBD_SetAddress+0x76>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf70:	d829      	bhi.n	800bfc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	885b      	ldrh	r3, [r3, #2]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d104      	bne.n	800bf94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f9bc 	bl	800c30a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf92:	e01d      	b.n	800bfd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	7bfa      	ldrb	r2, [r7, #15]
 800bf98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 feeb 	bl	800cd7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fa86 	bl	800c4b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfba:	e009      	b.n	800bfd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc4:	e004      	b.n	800bfd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f99e 	bl	800c30a <USBD_CtlError>
  }
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	885b      	ldrh	r3, [r3, #2]
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	4b4e      	ldr	r3, [pc, #312]	@ (800c128 <USBD_SetConfig+0x150>)
 800bfee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bff0:	4b4d      	ldr	r3, [pc, #308]	@ (800c128 <USBD_SetConfig+0x150>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d905      	bls.n	800c004 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f985 	bl	800c30a <USBD_CtlError>
    return USBD_FAIL;
 800c000:	2303      	movs	r3, #3
 800c002:	e08c      	b.n	800c11e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	d002      	beq.n	800c016 <USBD_SetConfig+0x3e>
 800c010:	2b03      	cmp	r3, #3
 800c012:	d029      	beq.n	800c068 <USBD_SetConfig+0x90>
 800c014:	e075      	b.n	800c102 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c016:	4b44      	ldr	r3, [pc, #272]	@ (800c128 <USBD_SetConfig+0x150>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d020      	beq.n	800c060 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c01e:	4b42      	ldr	r3, [pc, #264]	@ (800c128 <USBD_SetConfig+0x150>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c028:	4b3f      	ldr	r3, [pc, #252]	@ (800c128 <USBD_SetConfig+0x150>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7fe ffe3 	bl	800affa <USBD_SetClassConfig>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d008      	beq.n	800c050 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f962 	bl	800c30a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2202      	movs	r2, #2
 800c04a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c04e:	e065      	b.n	800c11c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fa31 	bl	800c4b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2203      	movs	r2, #3
 800c05a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c05e:	e05d      	b.n	800c11c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fa29 	bl	800c4b8 <USBD_CtlSendStatus>
      break;
 800c066:	e059      	b.n	800c11c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c068:	4b2f      	ldr	r3, [pc, #188]	@ (800c128 <USBD_SetConfig+0x150>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d112      	bne.n	800c096 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c078:	4b2b      	ldr	r3, [pc, #172]	@ (800c128 <USBD_SetConfig+0x150>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c082:	4b29      	ldr	r3, [pc, #164]	@ (800c128 <USBD_SetConfig+0x150>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7fe ffd2 	bl	800b032 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fa12 	bl	800c4b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c094:	e042      	b.n	800c11c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c096:	4b24      	ldr	r3, [pc, #144]	@ (800c128 <USBD_SetConfig+0x150>)
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d02a      	beq.n	800c0fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7fe ffc0 	bl	800b032 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c128 <USBD_SetConfig+0x150>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c128 <USBD_SetConfig+0x150>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7fe ff99 	bl	800affa <USBD_SetClassConfig>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00f      	beq.n	800c0f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f918 	bl	800c30a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fe ffa5 	bl	800b032 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0f0:	e014      	b.n	800c11c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f9e0 	bl	800c4b8 <USBD_CtlSendStatus>
      break;
 800c0f8:	e010      	b.n	800c11c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f9dc 	bl	800c4b8 <USBD_CtlSendStatus>
      break;
 800c100:	e00c      	b.n	800c11c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f900 	bl	800c30a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c10a:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <USBD_SetConfig+0x150>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7fe ff8e 	bl	800b032 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c116:	2303      	movs	r3, #3
 800c118:	73fb      	strb	r3, [r7, #15]
      break;
 800c11a:	bf00      	nop
  }

  return ret;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200005a0 	.word	0x200005a0

0800c12c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	88db      	ldrh	r3, [r3, #6]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d004      	beq.n	800c148 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f8e2 	bl	800c30a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c146:	e023      	b.n	800c190 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	2b02      	cmp	r3, #2
 800c152:	dc02      	bgt.n	800c15a <USBD_GetConfig+0x2e>
 800c154:	2b00      	cmp	r3, #0
 800c156:	dc03      	bgt.n	800c160 <USBD_GetConfig+0x34>
 800c158:	e015      	b.n	800c186 <USBD_GetConfig+0x5a>
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d00b      	beq.n	800c176 <USBD_GetConfig+0x4a>
 800c15e:	e012      	b.n	800c186 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	3308      	adds	r3, #8
 800c16a:	2201      	movs	r2, #1
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f948 	bl	800c404 <USBD_CtlSendData>
        break;
 800c174:	e00c      	b.n	800c190 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3304      	adds	r3, #4
 800c17a:	2201      	movs	r2, #1
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f940 	bl	800c404 <USBD_CtlSendData>
        break;
 800c184:	e004      	b.n	800c190 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f8be 	bl	800c30a <USBD_CtlError>
        break;
 800c18e:	bf00      	nop
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d81e      	bhi.n	800c1ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	88db      	ldrh	r3, [r3, #6]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d004      	beq.n	800c1c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f8a5 	bl	800c30a <USBD_CtlError>
        break;
 800c1c0:	e01a      	b.n	800c1f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d005      	beq.n	800c1de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f043 0202 	orr.w	r2, r3, #2
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	330c      	adds	r3, #12
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f90c 	bl	800c404 <USBD_CtlSendData>
      break;
 800c1ec:	e004      	b.n	800c1f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f88a 	bl	800c30a <USBD_CtlError>
      break;
 800c1f6:	bf00      	nop
  }
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	885b      	ldrh	r3, [r3, #2]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d107      	bne.n	800c222 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2201      	movs	r2, #1
 800c216:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f94c 	bl	800c4b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c220:	e013      	b.n	800c24a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	885b      	ldrh	r3, [r3, #2]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d10b      	bne.n	800c242 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	889b      	ldrh	r3, [r3, #4]
 800c22e:	0a1b      	lsrs	r3, r3, #8
 800c230:	b29b      	uxth	r3, r3
 800c232:	b2da      	uxtb	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f93c 	bl	800c4b8 <USBD_CtlSendStatus>
}
 800c240:	e003      	b.n	800c24a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f860 	bl	800c30a <USBD_CtlError>
}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c262:	b2db      	uxtb	r3, r3
 800c264:	3b01      	subs	r3, #1
 800c266:	2b02      	cmp	r3, #2
 800c268:	d80b      	bhi.n	800c282 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10c      	bne.n	800c28c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f91c 	bl	800c4b8 <USBD_CtlSendStatus>
      }
      break;
 800c280:	e004      	b.n	800c28c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f840 	bl	800c30a <USBD_CtlError>
      break;
 800c28a:	e000      	b.n	800c28e <USBD_ClrFeature+0x3c>
      break;
 800c28c:	bf00      	nop
  }
}
 800c28e:	bf00      	nop
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	781a      	ldrb	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7ff fa40 	bl	800b746 <SWAPBYTE>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f7ff fa33 	bl	800b746 <SWAPBYTE>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff fa26 	bl	800b746 <SWAPBYTE>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	80da      	strh	r2, [r3, #6]
}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b082      	sub	sp, #8
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c314:	2180      	movs	r1, #128	@ 0x80
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fcc6 	bl	800cca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c31c:	2100      	movs	r1, #0
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fcc2 	bl	800cca8 <USBD_LL_StallEP>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d042      	beq.n	800c3c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c346:	6938      	ldr	r0, [r7, #16]
 800c348:	f000 f842 	bl	800c3d0 <USBD_GetLen>
 800c34c:	4603      	mov	r3, r0
 800c34e:	3301      	adds	r3, #1
 800c350:	005b      	lsls	r3, r3, #1
 800c352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c356:	d808      	bhi.n	800c36a <USBD_GetString+0x3e>
 800c358:	6938      	ldr	r0, [r7, #16]
 800c35a:	f000 f839 	bl	800c3d0 <USBD_GetLen>
 800c35e:	4603      	mov	r3, r0
 800c360:	3301      	adds	r3, #1
 800c362:	b29b      	uxth	r3, r3
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	b29a      	uxth	r2, r3
 800c368:	e001      	b.n	800c36e <USBD_GetString+0x42>
 800c36a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	4413      	add	r3, r2
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7812      	ldrb	r2, [r2, #0]
 800c37c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	3301      	adds	r3, #1
 800c382:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c384:	7dfb      	ldrb	r3, [r7, #23]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	4413      	add	r3, r2
 800c38a:	2203      	movs	r2, #3
 800c38c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	3301      	adds	r3, #1
 800c392:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c394:	e013      	b.n	800c3be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	4413      	add	r3, r2
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	7812      	ldrb	r2, [r2, #0]
 800c3a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	613b      	str	r3, [r7, #16]
    idx++;
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e7      	bne.n	800c396 <USBD_GetString+0x6a>
 800c3c6:	e000      	b.n	800c3ca <USBD_GetString+0x9e>
    return;
 800c3c8:	bf00      	nop
  }
}
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3e0:	e005      	b.n	800c3ee <USBD_GetLen+0x1e>
  {
    len++;
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1f5      	bne.n	800c3e2 <USBD_GetLen+0x12>
  }

  return len;
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2202      	movs	r2, #2
 800c414:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	2100      	movs	r1, #0
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f000 fcc5 	bl	800cdba <USBD_LL_Transmit>

  return USBD_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	2100      	movs	r1, #0
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f000 fcb4 	bl	800cdba <USBD_LL_Transmit>

  return USBD_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2203      	movs	r2, #3
 800c46c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	2100      	movs	r1, #0
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f000 fcb8 	bl	800cdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f000 fca7 	bl	800cdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2204      	movs	r2, #4
 800c4c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fc73 	bl	800cdba <USBD_LL_Transmit>

  return USBD_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2205      	movs	r2, #5
 800c4ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fc81 	bl	800cdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c508:	2200      	movs	r2, #0
 800c50a:	4912      	ldr	r1, [pc, #72]	@ (800c554 <MX_USB_DEVICE_Init+0x50>)
 800c50c:	4812      	ldr	r0, [pc, #72]	@ (800c558 <MX_USB_DEVICE_Init+0x54>)
 800c50e:	f7fe fcf7 	bl	800af00 <USBD_Init>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c518:	f7f6 fbf4 	bl	8002d04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c51c:	490f      	ldr	r1, [pc, #60]	@ (800c55c <MX_USB_DEVICE_Init+0x58>)
 800c51e:	480e      	ldr	r0, [pc, #56]	@ (800c558 <MX_USB_DEVICE_Init+0x54>)
 800c520:	f7fe fd1e 	bl	800af60 <USBD_RegisterClass>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d001      	beq.n	800c52e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c52a:	f7f6 fbeb 	bl	8002d04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c52e:	490c      	ldr	r1, [pc, #48]	@ (800c560 <MX_USB_DEVICE_Init+0x5c>)
 800c530:	4809      	ldr	r0, [pc, #36]	@ (800c558 <MX_USB_DEVICE_Init+0x54>)
 800c532:	f7fe fc55 	bl	800ade0 <USBD_CDC_RegisterInterface>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c53c:	f7f6 fbe2 	bl	8002d04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c540:	4805      	ldr	r0, [pc, #20]	@ (800c558 <MX_USB_DEVICE_Init+0x54>)
 800c542:	f7fe fd43 	bl	800afcc <USBD_Start>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c54c:	f7f6 fbda 	bl	8002d04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c550:	bf00      	nop
 800c552:	bd80      	pop	{r7, pc}
 800c554:	200000c4 	.word	0x200000c4
 800c558:	200005a4 	.word	0x200005a4
 800c55c:	20000030 	.word	0x20000030
 800c560:	200000b0 	.word	0x200000b0

0800c564 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c568:	2200      	movs	r2, #0
 800c56a:	4905      	ldr	r1, [pc, #20]	@ (800c580 <CDC_Init_FS+0x1c>)
 800c56c:	4805      	ldr	r0, [pc, #20]	@ (800c584 <CDC_Init_FS+0x20>)
 800c56e:	f7fe fc51 	bl	800ae14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c572:	4905      	ldr	r1, [pc, #20]	@ (800c588 <CDC_Init_FS+0x24>)
 800c574:	4803      	ldr	r0, [pc, #12]	@ (800c584 <CDC_Init_FS+0x20>)
 800c576:	f7fe fc6f 	bl	800ae58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c57a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20001080 	.word	0x20001080
 800c584:	200005a4 	.word	0x200005a4
 800c588:	20000880 	.word	0x20000880

0800c58c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c590:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c592:	4618      	mov	r0, r3
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	6039      	str	r1, [r7, #0]
 800c5a6:	71fb      	strb	r3, [r7, #7]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b23      	cmp	r3, #35	@ 0x23
 800c5b0:	d84a      	bhi.n	800c648 <CDC_Control_FS+0xac>
 800c5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b8 <CDC_Control_FS+0x1c>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c649 	.word	0x0800c649
 800c5bc:	0800c649 	.word	0x0800c649
 800c5c0:	0800c649 	.word	0x0800c649
 800c5c4:	0800c649 	.word	0x0800c649
 800c5c8:	0800c649 	.word	0x0800c649
 800c5cc:	0800c649 	.word	0x0800c649
 800c5d0:	0800c649 	.word	0x0800c649
 800c5d4:	0800c649 	.word	0x0800c649
 800c5d8:	0800c649 	.word	0x0800c649
 800c5dc:	0800c649 	.word	0x0800c649
 800c5e0:	0800c649 	.word	0x0800c649
 800c5e4:	0800c649 	.word	0x0800c649
 800c5e8:	0800c649 	.word	0x0800c649
 800c5ec:	0800c649 	.word	0x0800c649
 800c5f0:	0800c649 	.word	0x0800c649
 800c5f4:	0800c649 	.word	0x0800c649
 800c5f8:	0800c649 	.word	0x0800c649
 800c5fc:	0800c649 	.word	0x0800c649
 800c600:	0800c649 	.word	0x0800c649
 800c604:	0800c649 	.word	0x0800c649
 800c608:	0800c649 	.word	0x0800c649
 800c60c:	0800c649 	.word	0x0800c649
 800c610:	0800c649 	.word	0x0800c649
 800c614:	0800c649 	.word	0x0800c649
 800c618:	0800c649 	.word	0x0800c649
 800c61c:	0800c649 	.word	0x0800c649
 800c620:	0800c649 	.word	0x0800c649
 800c624:	0800c649 	.word	0x0800c649
 800c628:	0800c649 	.word	0x0800c649
 800c62c:	0800c649 	.word	0x0800c649
 800c630:	0800c649 	.word	0x0800c649
 800c634:	0800c649 	.word	0x0800c649
 800c638:	0800c649 	.word	0x0800c649
 800c63c:	0800c649 	.word	0x0800c649
 800c640:	0800c649 	.word	0x0800c649
 800c644:	0800c649 	.word	0x0800c649
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c648:	bf00      	nop
  }

  return (USBD_OK);
 800c64a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c662:	6879      	ldr	r1, [r7, #4]
 800c664:	4805      	ldr	r0, [pc, #20]	@ (800c67c <CDC_Receive_FS+0x24>)
 800c666:	f7fe fbf7 	bl	800ae58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c66a:	4804      	ldr	r0, [pc, #16]	@ (800c67c <CDC_Receive_FS+0x24>)
 800c66c:	f7fe fc12 	bl	800ae94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c670:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	200005a4 	.word	0x200005a4

0800c680 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c680:	b480      	push	{r7}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	4613      	mov	r3, r2
 800c68c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c696:	4618      	mov	r0, r3
 800c698:	371c      	adds	r7, #28
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	6039      	str	r1, [r7, #0]
 800c6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2212      	movs	r2, #18
 800c6b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c6b6:	4b03      	ldr	r3, [pc, #12]	@ (800c6c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	200000e0 	.word	0x200000e0

0800c6c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	6039      	str	r1, [r7, #0]
 800c6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	2204      	movs	r2, #4
 800c6d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6da:	4b03      	ldr	r3, [pc, #12]	@ (800c6e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	200000f4 	.word	0x200000f4

0800c6ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	6039      	str	r1, [r7, #0]
 800c6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6f8:	79fb      	ldrb	r3, [r7, #7]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d105      	bne.n	800c70a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	4907      	ldr	r1, [pc, #28]	@ (800c720 <USBD_FS_ProductStrDescriptor+0x34>)
 800c702:	4808      	ldr	r0, [pc, #32]	@ (800c724 <USBD_FS_ProductStrDescriptor+0x38>)
 800c704:	f7ff fe12 	bl	800c32c <USBD_GetString>
 800c708:	e004      	b.n	800c714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	4904      	ldr	r1, [pc, #16]	@ (800c720 <USBD_FS_ProductStrDescriptor+0x34>)
 800c70e:	4805      	ldr	r0, [pc, #20]	@ (800c724 <USBD_FS_ProductStrDescriptor+0x38>)
 800c710:	f7ff fe0c 	bl	800c32c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c714:	4b02      	ldr	r3, [pc, #8]	@ (800c720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20001880 	.word	0x20001880
 800c724:	08010080 	.word	0x08010080

0800c728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	6039      	str	r1, [r7, #0]
 800c732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	4904      	ldr	r1, [pc, #16]	@ (800c748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c738:	4804      	ldr	r0, [pc, #16]	@ (800c74c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c73a:	f7ff fdf7 	bl	800c32c <USBD_GetString>
  return USBD_StrDesc;
 800c73e:	4b02      	ldr	r3, [pc, #8]	@ (800c748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c740:	4618      	mov	r0, r3
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	20001880 	.word	0x20001880
 800c74c:	08010098 	.word	0x08010098

0800c750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	6039      	str	r1, [r7, #0]
 800c75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	221a      	movs	r2, #26
 800c760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c762:	f000 f843 	bl	800c7ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c766:	4b02      	ldr	r3, [pc, #8]	@ (800c770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	200000f8 	.word	0x200000f8

0800c774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c780:	79fb      	ldrb	r3, [r7, #7]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d105      	bne.n	800c792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	4907      	ldr	r1, [pc, #28]	@ (800c7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c78a:	4808      	ldr	r0, [pc, #32]	@ (800c7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c78c:	f7ff fdce 	bl	800c32c <USBD_GetString>
 800c790:	e004      	b.n	800c79c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	4904      	ldr	r1, [pc, #16]	@ (800c7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c796:	4805      	ldr	r0, [pc, #20]	@ (800c7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c798:	f7ff fdc8 	bl	800c32c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c79c:	4b02      	ldr	r3, [pc, #8]	@ (800c7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20001880 	.word	0x20001880
 800c7ac:	080100ac 	.word	0x080100ac

0800c7b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	6039      	str	r1, [r7, #0]
 800c7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7bc:	79fb      	ldrb	r3, [r7, #7]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d105      	bne.n	800c7ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	4907      	ldr	r1, [pc, #28]	@ (800c7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7c6:	4808      	ldr	r0, [pc, #32]	@ (800c7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7c8:	f7ff fdb0 	bl	800c32c <USBD_GetString>
 800c7cc:	e004      	b.n	800c7d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	4904      	ldr	r1, [pc, #16]	@ (800c7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7d2:	4805      	ldr	r0, [pc, #20]	@ (800c7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7d4:	f7ff fdaa 	bl	800c32c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7d8:	4b02      	ldr	r3, [pc, #8]	@ (800c7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	20001880 	.word	0x20001880
 800c7e8:	080100b8 	.word	0x080100b8

0800c7ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c830 <Get_SerialNum+0x44>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c834 <Get_SerialNum+0x48>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c838 <Get_SerialNum+0x4c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4413      	add	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d009      	beq.n	800c826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c812:	2208      	movs	r2, #8
 800c814:	4909      	ldr	r1, [pc, #36]	@ (800c83c <Get_SerialNum+0x50>)
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 f814 	bl	800c844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c81c:	2204      	movs	r2, #4
 800c81e:	4908      	ldr	r1, [pc, #32]	@ (800c840 <Get_SerialNum+0x54>)
 800c820:	68b8      	ldr	r0, [r7, #8]
 800c822:	f000 f80f 	bl	800c844 <IntToUnicode>
  }
}
 800c826:	bf00      	nop
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	1fff7a10 	.word	0x1fff7a10
 800c834:	1fff7a14 	.word	0x1fff7a14
 800c838:	1fff7a18 	.word	0x1fff7a18
 800c83c:	200000fa 	.word	0x200000fa
 800c840:	2000010a 	.word	0x2000010a

0800c844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c844:	b480      	push	{r7}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	4613      	mov	r3, r2
 800c850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]
 800c85a:	e027      	b.n	800c8ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	0f1b      	lsrs	r3, r3, #28
 800c860:	2b09      	cmp	r3, #9
 800c862:	d80b      	bhi.n	800c87c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	0f1b      	lsrs	r3, r3, #28
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	7dfb      	ldrb	r3, [r7, #23]
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	4619      	mov	r1, r3
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	440b      	add	r3, r1
 800c874:	3230      	adds	r2, #48	@ 0x30
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	e00a      	b.n	800c892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	0f1b      	lsrs	r3, r3, #28
 800c880:	b2da      	uxtb	r2, r3
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	4619      	mov	r1, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	440b      	add	r3, r1
 800c88c:	3237      	adds	r2, #55	@ 0x37
 800c88e:	b2d2      	uxtb	r2, r2
 800c890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	011b      	lsls	r3, r3, #4
 800c896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	3301      	adds	r3, #1
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	75fb      	strb	r3, [r7, #23]
 800c8ac:	7dfa      	ldrb	r2, [r7, #23]
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d3d3      	bcc.n	800c85c <IntToUnicode+0x18>
  }
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop
 800c8b8:	371c      	adds	r7, #28
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
	...

0800c8c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	@ 0x28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8cc:	f107 0314 	add.w	r3, r7, #20
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	605a      	str	r2, [r3, #4]
 800c8d6:	609a      	str	r2, [r3, #8]
 800c8d8:	60da      	str	r2, [r3, #12]
 800c8da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8e4:	d13a      	bne.n	800c95c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	613b      	str	r3, [r7, #16]
 800c8ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ee:	4a1d      	ldr	r2, [pc, #116]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c8f0:	f043 0301 	orr.w	r3, r3, #1
 800c8f4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c8f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	613b      	str	r3, [r7, #16]
 800c900:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c902:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c908:	2302      	movs	r3, #2
 800c90a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c90c:	2300      	movs	r3, #0
 800c90e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c910:	2303      	movs	r3, #3
 800c912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c914:	230a      	movs	r3, #10
 800c916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c918:	f107 0314 	add.w	r3, r7, #20
 800c91c:	4619      	mov	r1, r3
 800c91e:	4812      	ldr	r0, [pc, #72]	@ (800c968 <HAL_PCD_MspInit+0xa4>)
 800c920:	f7f7 fd74 	bl	800440c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c924:	4b0f      	ldr	r3, [pc, #60]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c928:	4a0e      	ldr	r2, [pc, #56]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c92a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c92e:	6353      	str	r3, [r2, #52]	@ 0x34
 800c930:	2300      	movs	r3, #0
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	4b0b      	ldr	r3, [pc, #44]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c938:	4a0a      	ldr	r2, [pc, #40]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c93a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c93e:	6453      	str	r3, [r2, #68]	@ 0x44
 800c940:	4b08      	ldr	r3, [pc, #32]	@ (800c964 <HAL_PCD_MspInit+0xa0>)
 800c942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c94c:	2200      	movs	r2, #0
 800c94e:	2100      	movs	r1, #0
 800c950:	2043      	movs	r0, #67	@ 0x43
 800c952:	f7f7 fc92 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c956:	2043      	movs	r0, #67	@ 0x43
 800c958:	f7f7 fcab 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c95c:	bf00      	nop
 800c95e:	3728      	adds	r7, #40	@ 0x28
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	40023800 	.word	0x40023800
 800c968:	40020000 	.word	0x40020000

0800c96c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c980:	4619      	mov	r1, r3
 800c982:	4610      	mov	r0, r2
 800c984:	f7fe fb6f 	bl	800b066 <USBD_LL_SetupStage>
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	460b      	mov	r3, r1
 800c99a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c9a2:	78fa      	ldrb	r2, [r7, #3]
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	4413      	add	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	440b      	add	r3, r1
 800c9b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	78fb      	ldrb	r3, [r7, #3]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	f7fe fba9 	bl	800b110 <USBD_LL_DataOutStage>
}
 800c9be:	bf00      	nop
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c9d8:	78fa      	ldrb	r2, [r7, #3]
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	4413      	add	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	440b      	add	r3, r1
 800c9e6:	3320      	adds	r3, #32
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	78fb      	ldrb	r3, [r7, #3]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	f7fe fc42 	bl	800b276 <USBD_LL_DataInStage>
}
 800c9f2:	bf00      	nop
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7fe fd7c 	bl	800b506 <USBD_LL_SOF>
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	79db      	ldrb	r3, [r3, #7]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d102      	bne.n	800ca30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]
 800ca2e:	e008      	b.n	800ca42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	79db      	ldrb	r3, [r3, #7]
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d102      	bne.n	800ca3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	73fb      	strb	r3, [r7, #15]
 800ca3c:	e001      	b.n	800ca42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ca3e:	f7f6 f961 	bl	8002d04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca48:	7bfa      	ldrb	r2, [r7, #15]
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe fd16 	bl	800b47e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe fcbe 	bl	800b3da <USBD_LL_Reset>
}
 800ca5e:	bf00      	nop
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
	...

0800ca68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe fd11 	bl	800b49e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	6812      	ldr	r2, [r2, #0]
 800ca8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca8e:	f043 0301 	orr.w	r3, r3, #1
 800ca92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	7adb      	ldrb	r3, [r3, #11]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d005      	beq.n	800caa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca9c:	4b04      	ldr	r3, [pc, #16]	@ (800cab0 <HAL_PCD_SuspendCallback+0x48>)
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	4a03      	ldr	r2, [pc, #12]	@ (800cab0 <HAL_PCD_SuspendCallback+0x48>)
 800caa2:	f043 0306 	orr.w	r3, r3, #6
 800caa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	e000ed00 	.word	0xe000ed00

0800cab4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fe fd07 	bl	800b4d6 <USBD_LL_Resume>
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cae2:	78fa      	ldrb	r2, [r7, #3]
 800cae4:	4611      	mov	r1, r2
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe fd5f 	bl	800b5aa <USBD_LL_IsoOUTIncomplete>
}
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb06:	78fa      	ldrb	r2, [r7, #3]
 800cb08:	4611      	mov	r1, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe fd1b 	bl	800b546 <USBD_LL_IsoINIncomplete>
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fe fd71 	bl	800b60e <USBD_LL_DevConnected>
}
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fd6e 	bl	800b624 <USBD_LL_DevDisconnected>
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d13c      	bne.n	800cbda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb60:	4a20      	ldr	r2, [pc, #128]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a1e      	ldr	r2, [pc, #120]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb6c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb70:	4b1c      	ldr	r3, [pc, #112]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cb76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb78:	4b1a      	ldr	r3, [pc, #104]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb7a:	2204      	movs	r2, #4
 800cb7c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb7e:	4b19      	ldr	r3, [pc, #100]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb80:	2202      	movs	r2, #2
 800cb82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb84:	4b17      	ldr	r3, [pc, #92]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb8a:	4b16      	ldr	r3, [pc, #88]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb90:	4b14      	ldr	r3, [pc, #80]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb96:	4b13      	ldr	r3, [pc, #76]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb9c:	4b11      	ldr	r3, [pc, #68]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cba2:	4b10      	ldr	r3, [pc, #64]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cba8:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cbae:	480d      	ldr	r0, [pc, #52]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cbb0:	f7f8 fac9 	bl	8005146 <HAL_PCD_Init>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cbba:	f7f6 f8a3 	bl	8002d04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cbbe:	2180      	movs	r1, #128	@ 0x80
 800cbc0:	4808      	ldr	r0, [pc, #32]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cbc2:	f7f9 fcf6 	bl	80065b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cbc6:	2240      	movs	r2, #64	@ 0x40
 800cbc8:	2100      	movs	r1, #0
 800cbca:	4806      	ldr	r0, [pc, #24]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cbcc:	f7f9 fcaa 	bl	8006524 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cbd0:	2280      	movs	r2, #128	@ 0x80
 800cbd2:	2101      	movs	r1, #1
 800cbd4:	4803      	ldr	r0, [pc, #12]	@ (800cbe4 <USBD_LL_Init+0x94>)
 800cbd6:	f7f9 fca5 	bl	8006524 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	20001a80 	.word	0x20001a80

0800cbe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7f8 fbb0 	bl	8005364 <HAL_PCD_Start>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f942 	bl	800ce94 <USBD_Get_USB_Status>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	4608      	mov	r0, r1
 800cc28:	4611      	mov	r1, r2
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	70fb      	strb	r3, [r7, #3]
 800cc30:	460b      	mov	r3, r1
 800cc32:	70bb      	strb	r3, [r7, #2]
 800cc34:	4613      	mov	r3, r2
 800cc36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cc46:	78bb      	ldrb	r3, [r7, #2]
 800cc48:	883a      	ldrh	r2, [r7, #0]
 800cc4a:	78f9      	ldrb	r1, [r7, #3]
 800cc4c:	f7f9 f884 	bl	8005d58 <HAL_PCD_EP_Open>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 f91c 	bl	800ce94 <USBD_Get_USB_Status>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	460b      	mov	r3, r1
 800cc74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc84:	78fa      	ldrb	r2, [r7, #3]
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f9 f8cf 	bl	8005e2c <HAL_PCD_EP_Close>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 f8fd 	bl	800ce94 <USBD_Get_USB_Status>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccc2:	78fa      	ldrb	r2, [r7, #3]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f9 f987 	bl	8005fda <HAL_PCD_EP_SetStall>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 f8de 	bl	800ce94 <USBD_Get_USB_Status>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	460b      	mov	r3, r1
 800ccf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd00:	78fa      	ldrb	r2, [r7, #3]
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7f9 f9cb 	bl	80060a0 <HAL_PCD_EP_ClrStall>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 f8bf 	bl	800ce94 <USBD_Get_USB_Status>
 800cd16:	4603      	mov	r3, r0
 800cd18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b085      	sub	sp, #20
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	da0b      	bge.n	800cd58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd46:	68f9      	ldr	r1, [r7, #12]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	4413      	add	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	440b      	add	r3, r1
 800cd52:	3316      	adds	r3, #22
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	e00b      	b.n	800cd70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd58:	78fb      	ldrb	r3, [r7, #3]
 800cd5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	4613      	mov	r3, r2
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	4413      	add	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	440b      	add	r3, r1
 800cd6a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cd6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd96:	78fa      	ldrb	r2, [r7, #3]
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7f8 ffb8 	bl	8005d10 <HAL_PCD_SetAddress>
 800cda0:	4603      	mov	r3, r0
 800cda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 f874 	bl	800ce94 <USBD_Get_USB_Status>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b086      	sub	sp, #24
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	60f8      	str	r0, [r7, #12]
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	603b      	str	r3, [r7, #0]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cdd8:	7af9      	ldrb	r1, [r7, #11]
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	f7f9 f8c2 	bl	8005f66 <HAL_PCD_EP_Transmit>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 f853 	bl	800ce94 <USBD_Get_USB_Status>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3718      	adds	r7, #24
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	607a      	str	r2, [r7, #4]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce1a:	7af9      	ldrb	r1, [r7, #11]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	f7f9 f84e 	bl	8005ec0 <HAL_PCD_EP_Receive>
 800ce24:	4603      	mov	r3, r0
 800ce26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 f832 	bl	800ce94 <USBD_Get_USB_Status>
 800ce30:	4603      	mov	r3, r0
 800ce32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce50:	78fa      	ldrb	r2, [r7, #3]
 800ce52:	4611      	mov	r1, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f9 f86e 	bl	8005f36 <HAL_PCD_EP_GetRxCount>
 800ce5a:	4603      	mov	r3, r0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce6c:	4b03      	ldr	r3, [pc, #12]	@ (800ce7c <USBD_static_malloc+0x18>)
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	20001f64 	.word	0x20001f64

0800ce80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]

}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d817      	bhi.n	800ced8 <USBD_Get_USB_Status+0x44>
 800cea8:	a201      	add	r2, pc, #4	@ (adr r2, 800ceb0 <USBD_Get_USB_Status+0x1c>)
 800ceaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceae:	bf00      	nop
 800ceb0:	0800cec1 	.word	0x0800cec1
 800ceb4:	0800cec7 	.word	0x0800cec7
 800ceb8:	0800cecd 	.word	0x0800cecd
 800cebc:	0800ced3 	.word	0x0800ced3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	73fb      	strb	r3, [r7, #15]
    break;
 800cec4:	e00b      	b.n	800cede <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cec6:	2303      	movs	r3, #3
 800cec8:	73fb      	strb	r3, [r7, #15]
    break;
 800ceca:	e008      	b.n	800cede <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cecc:	2301      	movs	r3, #1
 800cece:	73fb      	strb	r3, [r7, #15]
    break;
 800ced0:	e005      	b.n	800cede <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ced2:	2303      	movs	r3, #3
 800ced4:	73fb      	strb	r3, [r7, #15]
    break;
 800ced6:	e002      	b.n	800cede <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ced8:	2303      	movs	r3, #3
 800ceda:	73fb      	strb	r3, [r7, #15]
    break;
 800cedc:	bf00      	nop
  }
  return usb_status;
 800cede:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <__cvt>:
 800ceec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cef0:	ec57 6b10 	vmov	r6, r7, d0
 800cef4:	2f00      	cmp	r7, #0
 800cef6:	460c      	mov	r4, r1
 800cef8:	4619      	mov	r1, r3
 800cefa:	463b      	mov	r3, r7
 800cefc:	bfbb      	ittet	lt
 800cefe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cf02:	461f      	movlt	r7, r3
 800cf04:	2300      	movge	r3, #0
 800cf06:	232d      	movlt	r3, #45	@ 0x2d
 800cf08:	700b      	strb	r3, [r1, #0]
 800cf0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cf10:	4691      	mov	r9, r2
 800cf12:	f023 0820 	bic.w	r8, r3, #32
 800cf16:	bfbc      	itt	lt
 800cf18:	4632      	movlt	r2, r6
 800cf1a:	4616      	movlt	r6, r2
 800cf1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf20:	d005      	beq.n	800cf2e <__cvt+0x42>
 800cf22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf26:	d100      	bne.n	800cf2a <__cvt+0x3e>
 800cf28:	3401      	adds	r4, #1
 800cf2a:	2102      	movs	r1, #2
 800cf2c:	e000      	b.n	800cf30 <__cvt+0x44>
 800cf2e:	2103      	movs	r1, #3
 800cf30:	ab03      	add	r3, sp, #12
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	ab02      	add	r3, sp, #8
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	ec47 6b10 	vmov	d0, r6, r7
 800cf3c:	4653      	mov	r3, sl
 800cf3e:	4622      	mov	r2, r4
 800cf40:	f000 fe6e 	bl	800dc20 <_dtoa_r>
 800cf44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf48:	4605      	mov	r5, r0
 800cf4a:	d119      	bne.n	800cf80 <__cvt+0x94>
 800cf4c:	f019 0f01 	tst.w	r9, #1
 800cf50:	d00e      	beq.n	800cf70 <__cvt+0x84>
 800cf52:	eb00 0904 	add.w	r9, r0, r4
 800cf56:	2200      	movs	r2, #0
 800cf58:	2300      	movs	r3, #0
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	4639      	mov	r1, r7
 800cf5e:	f7f3 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf62:	b108      	cbz	r0, 800cf68 <__cvt+0x7c>
 800cf64:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf68:	2230      	movs	r2, #48	@ 0x30
 800cf6a:	9b03      	ldr	r3, [sp, #12]
 800cf6c:	454b      	cmp	r3, r9
 800cf6e:	d31e      	bcc.n	800cfae <__cvt+0xc2>
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf74:	1b5b      	subs	r3, r3, r5
 800cf76:	4628      	mov	r0, r5
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	b004      	add	sp, #16
 800cf7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf84:	eb00 0904 	add.w	r9, r0, r4
 800cf88:	d1e5      	bne.n	800cf56 <__cvt+0x6a>
 800cf8a:	7803      	ldrb	r3, [r0, #0]
 800cf8c:	2b30      	cmp	r3, #48	@ 0x30
 800cf8e:	d10a      	bne.n	800cfa6 <__cvt+0xba>
 800cf90:	2200      	movs	r2, #0
 800cf92:	2300      	movs	r3, #0
 800cf94:	4630      	mov	r0, r6
 800cf96:	4639      	mov	r1, r7
 800cf98:	f7f3 fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf9c:	b918      	cbnz	r0, 800cfa6 <__cvt+0xba>
 800cf9e:	f1c4 0401 	rsb	r4, r4, #1
 800cfa2:	f8ca 4000 	str.w	r4, [sl]
 800cfa6:	f8da 3000 	ldr.w	r3, [sl]
 800cfaa:	4499      	add	r9, r3
 800cfac:	e7d3      	b.n	800cf56 <__cvt+0x6a>
 800cfae:	1c59      	adds	r1, r3, #1
 800cfb0:	9103      	str	r1, [sp, #12]
 800cfb2:	701a      	strb	r2, [r3, #0]
 800cfb4:	e7d9      	b.n	800cf6a <__cvt+0x7e>

0800cfb6 <__exponent>:
 800cfb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	bfba      	itte	lt
 800cfbc:	4249      	neglt	r1, r1
 800cfbe:	232d      	movlt	r3, #45	@ 0x2d
 800cfc0:	232b      	movge	r3, #43	@ 0x2b
 800cfc2:	2909      	cmp	r1, #9
 800cfc4:	7002      	strb	r2, [r0, #0]
 800cfc6:	7043      	strb	r3, [r0, #1]
 800cfc8:	dd29      	ble.n	800d01e <__exponent+0x68>
 800cfca:	f10d 0307 	add.w	r3, sp, #7
 800cfce:	461d      	mov	r5, r3
 800cfd0:	270a      	movs	r7, #10
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	fbb1 f6f7 	udiv	r6, r1, r7
 800cfd8:	fb07 1416 	mls	r4, r7, r6, r1
 800cfdc:	3430      	adds	r4, #48	@ 0x30
 800cfde:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	2c63      	cmp	r4, #99	@ 0x63
 800cfe6:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfea:	4631      	mov	r1, r6
 800cfec:	dcf1      	bgt.n	800cfd2 <__exponent+0x1c>
 800cfee:	3130      	adds	r1, #48	@ 0x30
 800cff0:	1e94      	subs	r4, r2, #2
 800cff2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cff6:	1c41      	adds	r1, r0, #1
 800cff8:	4623      	mov	r3, r4
 800cffa:	42ab      	cmp	r3, r5
 800cffc:	d30a      	bcc.n	800d014 <__exponent+0x5e>
 800cffe:	f10d 0309 	add.w	r3, sp, #9
 800d002:	1a9b      	subs	r3, r3, r2
 800d004:	42ac      	cmp	r4, r5
 800d006:	bf88      	it	hi
 800d008:	2300      	movhi	r3, #0
 800d00a:	3302      	adds	r3, #2
 800d00c:	4403      	add	r3, r0
 800d00e:	1a18      	subs	r0, r3, r0
 800d010:	b003      	add	sp, #12
 800d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d014:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d018:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d01c:	e7ed      	b.n	800cffa <__exponent+0x44>
 800d01e:	2330      	movs	r3, #48	@ 0x30
 800d020:	3130      	adds	r1, #48	@ 0x30
 800d022:	7083      	strb	r3, [r0, #2]
 800d024:	70c1      	strb	r1, [r0, #3]
 800d026:	1d03      	adds	r3, r0, #4
 800d028:	e7f1      	b.n	800d00e <__exponent+0x58>
	...

0800d02c <_printf_float>:
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	b08d      	sub	sp, #52	@ 0x34
 800d032:	460c      	mov	r4, r1
 800d034:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d038:	4616      	mov	r6, r2
 800d03a:	461f      	mov	r7, r3
 800d03c:	4605      	mov	r5, r0
 800d03e:	f000 fcef 	bl	800da20 <_localeconv_r>
 800d042:	6803      	ldr	r3, [r0, #0]
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	4618      	mov	r0, r3
 800d048:	f7f3 f912 	bl	8000270 <strlen>
 800d04c:	2300      	movs	r3, #0
 800d04e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d050:	f8d8 3000 	ldr.w	r3, [r8]
 800d054:	9005      	str	r0, [sp, #20]
 800d056:	3307      	adds	r3, #7
 800d058:	f023 0307 	bic.w	r3, r3, #7
 800d05c:	f103 0208 	add.w	r2, r3, #8
 800d060:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d064:	f8d4 b000 	ldr.w	fp, [r4]
 800d068:	f8c8 2000 	str.w	r2, [r8]
 800d06c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d070:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d074:	9307      	str	r3, [sp, #28]
 800d076:	f8cd 8018 	str.w	r8, [sp, #24]
 800d07a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d07e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d082:	4b9c      	ldr	r3, [pc, #624]	@ (800d2f4 <_printf_float+0x2c8>)
 800d084:	f04f 32ff 	mov.w	r2, #4294967295
 800d088:	f7f3 fd50 	bl	8000b2c <__aeabi_dcmpun>
 800d08c:	bb70      	cbnz	r0, 800d0ec <_printf_float+0xc0>
 800d08e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d092:	4b98      	ldr	r3, [pc, #608]	@ (800d2f4 <_printf_float+0x2c8>)
 800d094:	f04f 32ff 	mov.w	r2, #4294967295
 800d098:	f7f3 fd2a 	bl	8000af0 <__aeabi_dcmple>
 800d09c:	bb30      	cbnz	r0, 800d0ec <_printf_float+0xc0>
 800d09e:	2200      	movs	r2, #0
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4640      	mov	r0, r8
 800d0a4:	4649      	mov	r1, r9
 800d0a6:	f7f3 fd19 	bl	8000adc <__aeabi_dcmplt>
 800d0aa:	b110      	cbz	r0, 800d0b2 <_printf_float+0x86>
 800d0ac:	232d      	movs	r3, #45	@ 0x2d
 800d0ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0b2:	4a91      	ldr	r2, [pc, #580]	@ (800d2f8 <_printf_float+0x2cc>)
 800d0b4:	4b91      	ldr	r3, [pc, #580]	@ (800d2fc <_printf_float+0x2d0>)
 800d0b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d0ba:	bf94      	ite	ls
 800d0bc:	4690      	movls	r8, r2
 800d0be:	4698      	movhi	r8, r3
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	6123      	str	r3, [r4, #16]
 800d0c4:	f02b 0304 	bic.w	r3, fp, #4
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	f04f 0900 	mov.w	r9, #0
 800d0ce:	9700      	str	r7, [sp, #0]
 800d0d0:	4633      	mov	r3, r6
 800d0d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f000 f9d2 	bl	800d480 <_printf_common>
 800d0dc:	3001      	adds	r0, #1
 800d0de:	f040 808d 	bne.w	800d1fc <_printf_float+0x1d0>
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	b00d      	add	sp, #52	@ 0x34
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	464b      	mov	r3, r9
 800d0f0:	4640      	mov	r0, r8
 800d0f2:	4649      	mov	r1, r9
 800d0f4:	f7f3 fd1a 	bl	8000b2c <__aeabi_dcmpun>
 800d0f8:	b140      	cbz	r0, 800d10c <_printf_float+0xe0>
 800d0fa:	464b      	mov	r3, r9
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bfbc      	itt	lt
 800d100:	232d      	movlt	r3, #45	@ 0x2d
 800d102:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d106:	4a7e      	ldr	r2, [pc, #504]	@ (800d300 <_printf_float+0x2d4>)
 800d108:	4b7e      	ldr	r3, [pc, #504]	@ (800d304 <_printf_float+0x2d8>)
 800d10a:	e7d4      	b.n	800d0b6 <_printf_float+0x8a>
 800d10c:	6863      	ldr	r3, [r4, #4]
 800d10e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d112:	9206      	str	r2, [sp, #24]
 800d114:	1c5a      	adds	r2, r3, #1
 800d116:	d13b      	bne.n	800d190 <_printf_float+0x164>
 800d118:	2306      	movs	r3, #6
 800d11a:	6063      	str	r3, [r4, #4]
 800d11c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d120:	2300      	movs	r3, #0
 800d122:	6022      	str	r2, [r4, #0]
 800d124:	9303      	str	r3, [sp, #12]
 800d126:	ab0a      	add	r3, sp, #40	@ 0x28
 800d128:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d12c:	ab09      	add	r3, sp, #36	@ 0x24
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	6861      	ldr	r1, [r4, #4]
 800d132:	ec49 8b10 	vmov	d0, r8, r9
 800d136:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d13a:	4628      	mov	r0, r5
 800d13c:	f7ff fed6 	bl	800ceec <__cvt>
 800d140:	9b06      	ldr	r3, [sp, #24]
 800d142:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d144:	2b47      	cmp	r3, #71	@ 0x47
 800d146:	4680      	mov	r8, r0
 800d148:	d129      	bne.n	800d19e <_printf_float+0x172>
 800d14a:	1cc8      	adds	r0, r1, #3
 800d14c:	db02      	blt.n	800d154 <_printf_float+0x128>
 800d14e:	6863      	ldr	r3, [r4, #4]
 800d150:	4299      	cmp	r1, r3
 800d152:	dd41      	ble.n	800d1d8 <_printf_float+0x1ac>
 800d154:	f1aa 0a02 	sub.w	sl, sl, #2
 800d158:	fa5f fa8a 	uxtb.w	sl, sl
 800d15c:	3901      	subs	r1, #1
 800d15e:	4652      	mov	r2, sl
 800d160:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d164:	9109      	str	r1, [sp, #36]	@ 0x24
 800d166:	f7ff ff26 	bl	800cfb6 <__exponent>
 800d16a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d16c:	1813      	adds	r3, r2, r0
 800d16e:	2a01      	cmp	r2, #1
 800d170:	4681      	mov	r9, r0
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	dc02      	bgt.n	800d17c <_printf_float+0x150>
 800d176:	6822      	ldr	r2, [r4, #0]
 800d178:	07d2      	lsls	r2, r2, #31
 800d17a:	d501      	bpl.n	800d180 <_printf_float+0x154>
 800d17c:	3301      	adds	r3, #1
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d184:	2b00      	cmp	r3, #0
 800d186:	d0a2      	beq.n	800d0ce <_printf_float+0xa2>
 800d188:	232d      	movs	r3, #45	@ 0x2d
 800d18a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d18e:	e79e      	b.n	800d0ce <_printf_float+0xa2>
 800d190:	9a06      	ldr	r2, [sp, #24]
 800d192:	2a47      	cmp	r2, #71	@ 0x47
 800d194:	d1c2      	bne.n	800d11c <_printf_float+0xf0>
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1c0      	bne.n	800d11c <_printf_float+0xf0>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e7bd      	b.n	800d11a <_printf_float+0xee>
 800d19e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1a2:	d9db      	bls.n	800d15c <_printf_float+0x130>
 800d1a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d1a8:	d118      	bne.n	800d1dc <_printf_float+0x1b0>
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	6863      	ldr	r3, [r4, #4]
 800d1ae:	dd0b      	ble.n	800d1c8 <_printf_float+0x19c>
 800d1b0:	6121      	str	r1, [r4, #16]
 800d1b2:	b913      	cbnz	r3, 800d1ba <_printf_float+0x18e>
 800d1b4:	6822      	ldr	r2, [r4, #0]
 800d1b6:	07d0      	lsls	r0, r2, #31
 800d1b8:	d502      	bpl.n	800d1c0 <_printf_float+0x194>
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	440b      	add	r3, r1
 800d1be:	6123      	str	r3, [r4, #16]
 800d1c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d1c2:	f04f 0900 	mov.w	r9, #0
 800d1c6:	e7db      	b.n	800d180 <_printf_float+0x154>
 800d1c8:	b913      	cbnz	r3, 800d1d0 <_printf_float+0x1a4>
 800d1ca:	6822      	ldr	r2, [r4, #0]
 800d1cc:	07d2      	lsls	r2, r2, #31
 800d1ce:	d501      	bpl.n	800d1d4 <_printf_float+0x1a8>
 800d1d0:	3302      	adds	r3, #2
 800d1d2:	e7f4      	b.n	800d1be <_printf_float+0x192>
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e7f2      	b.n	800d1be <_printf_float+0x192>
 800d1d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1de:	4299      	cmp	r1, r3
 800d1e0:	db05      	blt.n	800d1ee <_printf_float+0x1c2>
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	6121      	str	r1, [r4, #16]
 800d1e6:	07d8      	lsls	r0, r3, #31
 800d1e8:	d5ea      	bpl.n	800d1c0 <_printf_float+0x194>
 800d1ea:	1c4b      	adds	r3, r1, #1
 800d1ec:	e7e7      	b.n	800d1be <_printf_float+0x192>
 800d1ee:	2900      	cmp	r1, #0
 800d1f0:	bfd4      	ite	le
 800d1f2:	f1c1 0202 	rsble	r2, r1, #2
 800d1f6:	2201      	movgt	r2, #1
 800d1f8:	4413      	add	r3, r2
 800d1fa:	e7e0      	b.n	800d1be <_printf_float+0x192>
 800d1fc:	6823      	ldr	r3, [r4, #0]
 800d1fe:	055a      	lsls	r2, r3, #21
 800d200:	d407      	bmi.n	800d212 <_printf_float+0x1e6>
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	4642      	mov	r2, r8
 800d206:	4631      	mov	r1, r6
 800d208:	4628      	mov	r0, r5
 800d20a:	47b8      	blx	r7
 800d20c:	3001      	adds	r0, #1
 800d20e:	d12b      	bne.n	800d268 <_printf_float+0x23c>
 800d210:	e767      	b.n	800d0e2 <_printf_float+0xb6>
 800d212:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d216:	f240 80dd 	bls.w	800d3d4 <_printf_float+0x3a8>
 800d21a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d21e:	2200      	movs	r2, #0
 800d220:	2300      	movs	r3, #0
 800d222:	f7f3 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 800d226:	2800      	cmp	r0, #0
 800d228:	d033      	beq.n	800d292 <_printf_float+0x266>
 800d22a:	4a37      	ldr	r2, [pc, #220]	@ (800d308 <_printf_float+0x2dc>)
 800d22c:	2301      	movs	r3, #1
 800d22e:	4631      	mov	r1, r6
 800d230:	4628      	mov	r0, r5
 800d232:	47b8      	blx	r7
 800d234:	3001      	adds	r0, #1
 800d236:	f43f af54 	beq.w	800d0e2 <_printf_float+0xb6>
 800d23a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d23e:	4543      	cmp	r3, r8
 800d240:	db02      	blt.n	800d248 <_printf_float+0x21c>
 800d242:	6823      	ldr	r3, [r4, #0]
 800d244:	07d8      	lsls	r0, r3, #31
 800d246:	d50f      	bpl.n	800d268 <_printf_float+0x23c>
 800d248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d24c:	4631      	mov	r1, r6
 800d24e:	4628      	mov	r0, r5
 800d250:	47b8      	blx	r7
 800d252:	3001      	adds	r0, #1
 800d254:	f43f af45 	beq.w	800d0e2 <_printf_float+0xb6>
 800d258:	f04f 0900 	mov.w	r9, #0
 800d25c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d260:	f104 0a1a 	add.w	sl, r4, #26
 800d264:	45c8      	cmp	r8, r9
 800d266:	dc09      	bgt.n	800d27c <_printf_float+0x250>
 800d268:	6823      	ldr	r3, [r4, #0]
 800d26a:	079b      	lsls	r3, r3, #30
 800d26c:	f100 8103 	bmi.w	800d476 <_printf_float+0x44a>
 800d270:	68e0      	ldr	r0, [r4, #12]
 800d272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d274:	4298      	cmp	r0, r3
 800d276:	bfb8      	it	lt
 800d278:	4618      	movlt	r0, r3
 800d27a:	e734      	b.n	800d0e6 <_printf_float+0xba>
 800d27c:	2301      	movs	r3, #1
 800d27e:	4652      	mov	r2, sl
 800d280:	4631      	mov	r1, r6
 800d282:	4628      	mov	r0, r5
 800d284:	47b8      	blx	r7
 800d286:	3001      	adds	r0, #1
 800d288:	f43f af2b 	beq.w	800d0e2 <_printf_float+0xb6>
 800d28c:	f109 0901 	add.w	r9, r9, #1
 800d290:	e7e8      	b.n	800d264 <_printf_float+0x238>
 800d292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	dc39      	bgt.n	800d30c <_printf_float+0x2e0>
 800d298:	4a1b      	ldr	r2, [pc, #108]	@ (800d308 <_printf_float+0x2dc>)
 800d29a:	2301      	movs	r3, #1
 800d29c:	4631      	mov	r1, r6
 800d29e:	4628      	mov	r0, r5
 800d2a0:	47b8      	blx	r7
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	f43f af1d 	beq.w	800d0e2 <_printf_float+0xb6>
 800d2a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d2ac:	ea59 0303 	orrs.w	r3, r9, r3
 800d2b0:	d102      	bne.n	800d2b8 <_printf_float+0x28c>
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	07d9      	lsls	r1, r3, #31
 800d2b6:	d5d7      	bpl.n	800d268 <_printf_float+0x23c>
 800d2b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2bc:	4631      	mov	r1, r6
 800d2be:	4628      	mov	r0, r5
 800d2c0:	47b8      	blx	r7
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	f43f af0d 	beq.w	800d0e2 <_printf_float+0xb6>
 800d2c8:	f04f 0a00 	mov.w	sl, #0
 800d2cc:	f104 0b1a 	add.w	fp, r4, #26
 800d2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d2:	425b      	negs	r3, r3
 800d2d4:	4553      	cmp	r3, sl
 800d2d6:	dc01      	bgt.n	800d2dc <_printf_float+0x2b0>
 800d2d8:	464b      	mov	r3, r9
 800d2da:	e793      	b.n	800d204 <_printf_float+0x1d8>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	465a      	mov	r2, fp
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	47b8      	blx	r7
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	f43f aefb 	beq.w	800d0e2 <_printf_float+0xb6>
 800d2ec:	f10a 0a01 	add.w	sl, sl, #1
 800d2f0:	e7ee      	b.n	800d2d0 <_printf_float+0x2a4>
 800d2f2:	bf00      	nop
 800d2f4:	7fefffff 	.word	0x7fefffff
 800d2f8:	080100e0 	.word	0x080100e0
 800d2fc:	080100e4 	.word	0x080100e4
 800d300:	080100e8 	.word	0x080100e8
 800d304:	080100ec 	.word	0x080100ec
 800d308:	080100f0 	.word	0x080100f0
 800d30c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d30e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d312:	4553      	cmp	r3, sl
 800d314:	bfa8      	it	ge
 800d316:	4653      	movge	r3, sl
 800d318:	2b00      	cmp	r3, #0
 800d31a:	4699      	mov	r9, r3
 800d31c:	dc36      	bgt.n	800d38c <_printf_float+0x360>
 800d31e:	f04f 0b00 	mov.w	fp, #0
 800d322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d326:	f104 021a 	add.w	r2, r4, #26
 800d32a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d32c:	9306      	str	r3, [sp, #24]
 800d32e:	eba3 0309 	sub.w	r3, r3, r9
 800d332:	455b      	cmp	r3, fp
 800d334:	dc31      	bgt.n	800d39a <_printf_float+0x36e>
 800d336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d338:	459a      	cmp	sl, r3
 800d33a:	dc3a      	bgt.n	800d3b2 <_printf_float+0x386>
 800d33c:	6823      	ldr	r3, [r4, #0]
 800d33e:	07da      	lsls	r2, r3, #31
 800d340:	d437      	bmi.n	800d3b2 <_printf_float+0x386>
 800d342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d344:	ebaa 0903 	sub.w	r9, sl, r3
 800d348:	9b06      	ldr	r3, [sp, #24]
 800d34a:	ebaa 0303 	sub.w	r3, sl, r3
 800d34e:	4599      	cmp	r9, r3
 800d350:	bfa8      	it	ge
 800d352:	4699      	movge	r9, r3
 800d354:	f1b9 0f00 	cmp.w	r9, #0
 800d358:	dc33      	bgt.n	800d3c2 <_printf_float+0x396>
 800d35a:	f04f 0800 	mov.w	r8, #0
 800d35e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d362:	f104 0b1a 	add.w	fp, r4, #26
 800d366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d368:	ebaa 0303 	sub.w	r3, sl, r3
 800d36c:	eba3 0309 	sub.w	r3, r3, r9
 800d370:	4543      	cmp	r3, r8
 800d372:	f77f af79 	ble.w	800d268 <_printf_float+0x23c>
 800d376:	2301      	movs	r3, #1
 800d378:	465a      	mov	r2, fp
 800d37a:	4631      	mov	r1, r6
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b8      	blx	r7
 800d380:	3001      	adds	r0, #1
 800d382:	f43f aeae 	beq.w	800d0e2 <_printf_float+0xb6>
 800d386:	f108 0801 	add.w	r8, r8, #1
 800d38a:	e7ec      	b.n	800d366 <_printf_float+0x33a>
 800d38c:	4642      	mov	r2, r8
 800d38e:	4631      	mov	r1, r6
 800d390:	4628      	mov	r0, r5
 800d392:	47b8      	blx	r7
 800d394:	3001      	adds	r0, #1
 800d396:	d1c2      	bne.n	800d31e <_printf_float+0x2f2>
 800d398:	e6a3      	b.n	800d0e2 <_printf_float+0xb6>
 800d39a:	2301      	movs	r3, #1
 800d39c:	4631      	mov	r1, r6
 800d39e:	4628      	mov	r0, r5
 800d3a0:	9206      	str	r2, [sp, #24]
 800d3a2:	47b8      	blx	r7
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	f43f ae9c 	beq.w	800d0e2 <_printf_float+0xb6>
 800d3aa:	9a06      	ldr	r2, [sp, #24]
 800d3ac:	f10b 0b01 	add.w	fp, fp, #1
 800d3b0:	e7bb      	b.n	800d32a <_printf_float+0x2fe>
 800d3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	47b8      	blx	r7
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d1c0      	bne.n	800d342 <_printf_float+0x316>
 800d3c0:	e68f      	b.n	800d0e2 <_printf_float+0xb6>
 800d3c2:	9a06      	ldr	r2, [sp, #24]
 800d3c4:	464b      	mov	r3, r9
 800d3c6:	4442      	add	r2, r8
 800d3c8:	4631      	mov	r1, r6
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	47b8      	blx	r7
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	d1c3      	bne.n	800d35a <_printf_float+0x32e>
 800d3d2:	e686      	b.n	800d0e2 <_printf_float+0xb6>
 800d3d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3d8:	f1ba 0f01 	cmp.w	sl, #1
 800d3dc:	dc01      	bgt.n	800d3e2 <_printf_float+0x3b6>
 800d3de:	07db      	lsls	r3, r3, #31
 800d3e0:	d536      	bpl.n	800d450 <_printf_float+0x424>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	4642      	mov	r2, r8
 800d3e6:	4631      	mov	r1, r6
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	47b8      	blx	r7
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	f43f ae78 	beq.w	800d0e2 <_printf_float+0xb6>
 800d3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	47b8      	blx	r7
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	f43f ae70 	beq.w	800d0e2 <_printf_float+0xb6>
 800d402:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d406:	2200      	movs	r2, #0
 800d408:	2300      	movs	r3, #0
 800d40a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d40e:	f7f3 fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d412:	b9c0      	cbnz	r0, 800d446 <_printf_float+0x41a>
 800d414:	4653      	mov	r3, sl
 800d416:	f108 0201 	add.w	r2, r8, #1
 800d41a:	4631      	mov	r1, r6
 800d41c:	4628      	mov	r0, r5
 800d41e:	47b8      	blx	r7
 800d420:	3001      	adds	r0, #1
 800d422:	d10c      	bne.n	800d43e <_printf_float+0x412>
 800d424:	e65d      	b.n	800d0e2 <_printf_float+0xb6>
 800d426:	2301      	movs	r3, #1
 800d428:	465a      	mov	r2, fp
 800d42a:	4631      	mov	r1, r6
 800d42c:	4628      	mov	r0, r5
 800d42e:	47b8      	blx	r7
 800d430:	3001      	adds	r0, #1
 800d432:	f43f ae56 	beq.w	800d0e2 <_printf_float+0xb6>
 800d436:	f108 0801 	add.w	r8, r8, #1
 800d43a:	45d0      	cmp	r8, sl
 800d43c:	dbf3      	blt.n	800d426 <_printf_float+0x3fa>
 800d43e:	464b      	mov	r3, r9
 800d440:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d444:	e6df      	b.n	800d206 <_printf_float+0x1da>
 800d446:	f04f 0800 	mov.w	r8, #0
 800d44a:	f104 0b1a 	add.w	fp, r4, #26
 800d44e:	e7f4      	b.n	800d43a <_printf_float+0x40e>
 800d450:	2301      	movs	r3, #1
 800d452:	4642      	mov	r2, r8
 800d454:	e7e1      	b.n	800d41a <_printf_float+0x3ee>
 800d456:	2301      	movs	r3, #1
 800d458:	464a      	mov	r2, r9
 800d45a:	4631      	mov	r1, r6
 800d45c:	4628      	mov	r0, r5
 800d45e:	47b8      	blx	r7
 800d460:	3001      	adds	r0, #1
 800d462:	f43f ae3e 	beq.w	800d0e2 <_printf_float+0xb6>
 800d466:	f108 0801 	add.w	r8, r8, #1
 800d46a:	68e3      	ldr	r3, [r4, #12]
 800d46c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d46e:	1a5b      	subs	r3, r3, r1
 800d470:	4543      	cmp	r3, r8
 800d472:	dcf0      	bgt.n	800d456 <_printf_float+0x42a>
 800d474:	e6fc      	b.n	800d270 <_printf_float+0x244>
 800d476:	f04f 0800 	mov.w	r8, #0
 800d47a:	f104 0919 	add.w	r9, r4, #25
 800d47e:	e7f4      	b.n	800d46a <_printf_float+0x43e>

0800d480 <_printf_common>:
 800d480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d484:	4616      	mov	r6, r2
 800d486:	4698      	mov	r8, r3
 800d488:	688a      	ldr	r2, [r1, #8]
 800d48a:	690b      	ldr	r3, [r1, #16]
 800d48c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d490:	4293      	cmp	r3, r2
 800d492:	bfb8      	it	lt
 800d494:	4613      	movlt	r3, r2
 800d496:	6033      	str	r3, [r6, #0]
 800d498:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d49c:	4607      	mov	r7, r0
 800d49e:	460c      	mov	r4, r1
 800d4a0:	b10a      	cbz	r2, 800d4a6 <_printf_common+0x26>
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	6033      	str	r3, [r6, #0]
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	0699      	lsls	r1, r3, #26
 800d4aa:	bf42      	ittt	mi
 800d4ac:	6833      	ldrmi	r3, [r6, #0]
 800d4ae:	3302      	addmi	r3, #2
 800d4b0:	6033      	strmi	r3, [r6, #0]
 800d4b2:	6825      	ldr	r5, [r4, #0]
 800d4b4:	f015 0506 	ands.w	r5, r5, #6
 800d4b8:	d106      	bne.n	800d4c8 <_printf_common+0x48>
 800d4ba:	f104 0a19 	add.w	sl, r4, #25
 800d4be:	68e3      	ldr	r3, [r4, #12]
 800d4c0:	6832      	ldr	r2, [r6, #0]
 800d4c2:	1a9b      	subs	r3, r3, r2
 800d4c4:	42ab      	cmp	r3, r5
 800d4c6:	dc26      	bgt.n	800d516 <_printf_common+0x96>
 800d4c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4cc:	6822      	ldr	r2, [r4, #0]
 800d4ce:	3b00      	subs	r3, #0
 800d4d0:	bf18      	it	ne
 800d4d2:	2301      	movne	r3, #1
 800d4d4:	0692      	lsls	r2, r2, #26
 800d4d6:	d42b      	bmi.n	800d530 <_printf_common+0xb0>
 800d4d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4dc:	4641      	mov	r1, r8
 800d4de:	4638      	mov	r0, r7
 800d4e0:	47c8      	blx	r9
 800d4e2:	3001      	adds	r0, #1
 800d4e4:	d01e      	beq.n	800d524 <_printf_common+0xa4>
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	6922      	ldr	r2, [r4, #16]
 800d4ea:	f003 0306 	and.w	r3, r3, #6
 800d4ee:	2b04      	cmp	r3, #4
 800d4f0:	bf02      	ittt	eq
 800d4f2:	68e5      	ldreq	r5, [r4, #12]
 800d4f4:	6833      	ldreq	r3, [r6, #0]
 800d4f6:	1aed      	subeq	r5, r5, r3
 800d4f8:	68a3      	ldr	r3, [r4, #8]
 800d4fa:	bf0c      	ite	eq
 800d4fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d500:	2500      	movne	r5, #0
 800d502:	4293      	cmp	r3, r2
 800d504:	bfc4      	itt	gt
 800d506:	1a9b      	subgt	r3, r3, r2
 800d508:	18ed      	addgt	r5, r5, r3
 800d50a:	2600      	movs	r6, #0
 800d50c:	341a      	adds	r4, #26
 800d50e:	42b5      	cmp	r5, r6
 800d510:	d11a      	bne.n	800d548 <_printf_common+0xc8>
 800d512:	2000      	movs	r0, #0
 800d514:	e008      	b.n	800d528 <_printf_common+0xa8>
 800d516:	2301      	movs	r3, #1
 800d518:	4652      	mov	r2, sl
 800d51a:	4641      	mov	r1, r8
 800d51c:	4638      	mov	r0, r7
 800d51e:	47c8      	blx	r9
 800d520:	3001      	adds	r0, #1
 800d522:	d103      	bne.n	800d52c <_printf_common+0xac>
 800d524:	f04f 30ff 	mov.w	r0, #4294967295
 800d528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52c:	3501      	adds	r5, #1
 800d52e:	e7c6      	b.n	800d4be <_printf_common+0x3e>
 800d530:	18e1      	adds	r1, r4, r3
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	2030      	movs	r0, #48	@ 0x30
 800d536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d53a:	4422      	add	r2, r4
 800d53c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d544:	3302      	adds	r3, #2
 800d546:	e7c7      	b.n	800d4d8 <_printf_common+0x58>
 800d548:	2301      	movs	r3, #1
 800d54a:	4622      	mov	r2, r4
 800d54c:	4641      	mov	r1, r8
 800d54e:	4638      	mov	r0, r7
 800d550:	47c8      	blx	r9
 800d552:	3001      	adds	r0, #1
 800d554:	d0e6      	beq.n	800d524 <_printf_common+0xa4>
 800d556:	3601      	adds	r6, #1
 800d558:	e7d9      	b.n	800d50e <_printf_common+0x8e>
	...

0800d55c <_printf_i>:
 800d55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d560:	7e0f      	ldrb	r7, [r1, #24]
 800d562:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d564:	2f78      	cmp	r7, #120	@ 0x78
 800d566:	4691      	mov	r9, r2
 800d568:	4680      	mov	r8, r0
 800d56a:	460c      	mov	r4, r1
 800d56c:	469a      	mov	sl, r3
 800d56e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d572:	d807      	bhi.n	800d584 <_printf_i+0x28>
 800d574:	2f62      	cmp	r7, #98	@ 0x62
 800d576:	d80a      	bhi.n	800d58e <_printf_i+0x32>
 800d578:	2f00      	cmp	r7, #0
 800d57a:	f000 80d2 	beq.w	800d722 <_printf_i+0x1c6>
 800d57e:	2f58      	cmp	r7, #88	@ 0x58
 800d580:	f000 80b9 	beq.w	800d6f6 <_printf_i+0x19a>
 800d584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d58c:	e03a      	b.n	800d604 <_printf_i+0xa8>
 800d58e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d592:	2b15      	cmp	r3, #21
 800d594:	d8f6      	bhi.n	800d584 <_printf_i+0x28>
 800d596:	a101      	add	r1, pc, #4	@ (adr r1, 800d59c <_printf_i+0x40>)
 800d598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d59c:	0800d5f5 	.word	0x0800d5f5
 800d5a0:	0800d609 	.word	0x0800d609
 800d5a4:	0800d585 	.word	0x0800d585
 800d5a8:	0800d585 	.word	0x0800d585
 800d5ac:	0800d585 	.word	0x0800d585
 800d5b0:	0800d585 	.word	0x0800d585
 800d5b4:	0800d609 	.word	0x0800d609
 800d5b8:	0800d585 	.word	0x0800d585
 800d5bc:	0800d585 	.word	0x0800d585
 800d5c0:	0800d585 	.word	0x0800d585
 800d5c4:	0800d585 	.word	0x0800d585
 800d5c8:	0800d709 	.word	0x0800d709
 800d5cc:	0800d633 	.word	0x0800d633
 800d5d0:	0800d6c3 	.word	0x0800d6c3
 800d5d4:	0800d585 	.word	0x0800d585
 800d5d8:	0800d585 	.word	0x0800d585
 800d5dc:	0800d72b 	.word	0x0800d72b
 800d5e0:	0800d585 	.word	0x0800d585
 800d5e4:	0800d633 	.word	0x0800d633
 800d5e8:	0800d585 	.word	0x0800d585
 800d5ec:	0800d585 	.word	0x0800d585
 800d5f0:	0800d6cb 	.word	0x0800d6cb
 800d5f4:	6833      	ldr	r3, [r6, #0]
 800d5f6:	1d1a      	adds	r2, r3, #4
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	6032      	str	r2, [r6, #0]
 800d5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d604:	2301      	movs	r3, #1
 800d606:	e09d      	b.n	800d744 <_printf_i+0x1e8>
 800d608:	6833      	ldr	r3, [r6, #0]
 800d60a:	6820      	ldr	r0, [r4, #0]
 800d60c:	1d19      	adds	r1, r3, #4
 800d60e:	6031      	str	r1, [r6, #0]
 800d610:	0606      	lsls	r6, r0, #24
 800d612:	d501      	bpl.n	800d618 <_printf_i+0xbc>
 800d614:	681d      	ldr	r5, [r3, #0]
 800d616:	e003      	b.n	800d620 <_printf_i+0xc4>
 800d618:	0645      	lsls	r5, r0, #25
 800d61a:	d5fb      	bpl.n	800d614 <_printf_i+0xb8>
 800d61c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d620:	2d00      	cmp	r5, #0
 800d622:	da03      	bge.n	800d62c <_printf_i+0xd0>
 800d624:	232d      	movs	r3, #45	@ 0x2d
 800d626:	426d      	negs	r5, r5
 800d628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d62c:	4859      	ldr	r0, [pc, #356]	@ (800d794 <_printf_i+0x238>)
 800d62e:	230a      	movs	r3, #10
 800d630:	e011      	b.n	800d656 <_printf_i+0xfa>
 800d632:	6821      	ldr	r1, [r4, #0]
 800d634:	6833      	ldr	r3, [r6, #0]
 800d636:	0608      	lsls	r0, r1, #24
 800d638:	f853 5b04 	ldr.w	r5, [r3], #4
 800d63c:	d402      	bmi.n	800d644 <_printf_i+0xe8>
 800d63e:	0649      	lsls	r1, r1, #25
 800d640:	bf48      	it	mi
 800d642:	b2ad      	uxthmi	r5, r5
 800d644:	2f6f      	cmp	r7, #111	@ 0x6f
 800d646:	4853      	ldr	r0, [pc, #332]	@ (800d794 <_printf_i+0x238>)
 800d648:	6033      	str	r3, [r6, #0]
 800d64a:	bf14      	ite	ne
 800d64c:	230a      	movne	r3, #10
 800d64e:	2308      	moveq	r3, #8
 800d650:	2100      	movs	r1, #0
 800d652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d656:	6866      	ldr	r6, [r4, #4]
 800d658:	60a6      	str	r6, [r4, #8]
 800d65a:	2e00      	cmp	r6, #0
 800d65c:	bfa2      	ittt	ge
 800d65e:	6821      	ldrge	r1, [r4, #0]
 800d660:	f021 0104 	bicge.w	r1, r1, #4
 800d664:	6021      	strge	r1, [r4, #0]
 800d666:	b90d      	cbnz	r5, 800d66c <_printf_i+0x110>
 800d668:	2e00      	cmp	r6, #0
 800d66a:	d04b      	beq.n	800d704 <_printf_i+0x1a8>
 800d66c:	4616      	mov	r6, r2
 800d66e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d672:	fb03 5711 	mls	r7, r3, r1, r5
 800d676:	5dc7      	ldrb	r7, [r0, r7]
 800d678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d67c:	462f      	mov	r7, r5
 800d67e:	42bb      	cmp	r3, r7
 800d680:	460d      	mov	r5, r1
 800d682:	d9f4      	bls.n	800d66e <_printf_i+0x112>
 800d684:	2b08      	cmp	r3, #8
 800d686:	d10b      	bne.n	800d6a0 <_printf_i+0x144>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	07df      	lsls	r7, r3, #31
 800d68c:	d508      	bpl.n	800d6a0 <_printf_i+0x144>
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	6861      	ldr	r1, [r4, #4]
 800d692:	4299      	cmp	r1, r3
 800d694:	bfde      	ittt	le
 800d696:	2330      	movle	r3, #48	@ 0x30
 800d698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d69c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6a0:	1b92      	subs	r2, r2, r6
 800d6a2:	6122      	str	r2, [r4, #16]
 800d6a4:	f8cd a000 	str.w	sl, [sp]
 800d6a8:	464b      	mov	r3, r9
 800d6aa:	aa03      	add	r2, sp, #12
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	4640      	mov	r0, r8
 800d6b0:	f7ff fee6 	bl	800d480 <_printf_common>
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	d14a      	bne.n	800d74e <_printf_i+0x1f2>
 800d6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6bc:	b004      	add	sp, #16
 800d6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	f043 0320 	orr.w	r3, r3, #32
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	4833      	ldr	r0, [pc, #204]	@ (800d798 <_printf_i+0x23c>)
 800d6cc:	2778      	movs	r7, #120	@ 0x78
 800d6ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	6831      	ldr	r1, [r6, #0]
 800d6d6:	061f      	lsls	r7, r3, #24
 800d6d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6dc:	d402      	bmi.n	800d6e4 <_printf_i+0x188>
 800d6de:	065f      	lsls	r7, r3, #25
 800d6e0:	bf48      	it	mi
 800d6e2:	b2ad      	uxthmi	r5, r5
 800d6e4:	6031      	str	r1, [r6, #0]
 800d6e6:	07d9      	lsls	r1, r3, #31
 800d6e8:	bf44      	itt	mi
 800d6ea:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ee:	6023      	strmi	r3, [r4, #0]
 800d6f0:	b11d      	cbz	r5, 800d6fa <_printf_i+0x19e>
 800d6f2:	2310      	movs	r3, #16
 800d6f4:	e7ac      	b.n	800d650 <_printf_i+0xf4>
 800d6f6:	4827      	ldr	r0, [pc, #156]	@ (800d794 <_printf_i+0x238>)
 800d6f8:	e7e9      	b.n	800d6ce <_printf_i+0x172>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	f023 0320 	bic.w	r3, r3, #32
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	e7f6      	b.n	800d6f2 <_printf_i+0x196>
 800d704:	4616      	mov	r6, r2
 800d706:	e7bd      	b.n	800d684 <_printf_i+0x128>
 800d708:	6833      	ldr	r3, [r6, #0]
 800d70a:	6825      	ldr	r5, [r4, #0]
 800d70c:	6961      	ldr	r1, [r4, #20]
 800d70e:	1d18      	adds	r0, r3, #4
 800d710:	6030      	str	r0, [r6, #0]
 800d712:	062e      	lsls	r6, r5, #24
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	d501      	bpl.n	800d71c <_printf_i+0x1c0>
 800d718:	6019      	str	r1, [r3, #0]
 800d71a:	e002      	b.n	800d722 <_printf_i+0x1c6>
 800d71c:	0668      	lsls	r0, r5, #25
 800d71e:	d5fb      	bpl.n	800d718 <_printf_i+0x1bc>
 800d720:	8019      	strh	r1, [r3, #0]
 800d722:	2300      	movs	r3, #0
 800d724:	6123      	str	r3, [r4, #16]
 800d726:	4616      	mov	r6, r2
 800d728:	e7bc      	b.n	800d6a4 <_printf_i+0x148>
 800d72a:	6833      	ldr	r3, [r6, #0]
 800d72c:	1d1a      	adds	r2, r3, #4
 800d72e:	6032      	str	r2, [r6, #0]
 800d730:	681e      	ldr	r6, [r3, #0]
 800d732:	6862      	ldr	r2, [r4, #4]
 800d734:	2100      	movs	r1, #0
 800d736:	4630      	mov	r0, r6
 800d738:	f7f2 fd4a 	bl	80001d0 <memchr>
 800d73c:	b108      	cbz	r0, 800d742 <_printf_i+0x1e6>
 800d73e:	1b80      	subs	r0, r0, r6
 800d740:	6060      	str	r0, [r4, #4]
 800d742:	6863      	ldr	r3, [r4, #4]
 800d744:	6123      	str	r3, [r4, #16]
 800d746:	2300      	movs	r3, #0
 800d748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d74c:	e7aa      	b.n	800d6a4 <_printf_i+0x148>
 800d74e:	6923      	ldr	r3, [r4, #16]
 800d750:	4632      	mov	r2, r6
 800d752:	4649      	mov	r1, r9
 800d754:	4640      	mov	r0, r8
 800d756:	47d0      	blx	sl
 800d758:	3001      	adds	r0, #1
 800d75a:	d0ad      	beq.n	800d6b8 <_printf_i+0x15c>
 800d75c:	6823      	ldr	r3, [r4, #0]
 800d75e:	079b      	lsls	r3, r3, #30
 800d760:	d413      	bmi.n	800d78a <_printf_i+0x22e>
 800d762:	68e0      	ldr	r0, [r4, #12]
 800d764:	9b03      	ldr	r3, [sp, #12]
 800d766:	4298      	cmp	r0, r3
 800d768:	bfb8      	it	lt
 800d76a:	4618      	movlt	r0, r3
 800d76c:	e7a6      	b.n	800d6bc <_printf_i+0x160>
 800d76e:	2301      	movs	r3, #1
 800d770:	4632      	mov	r2, r6
 800d772:	4649      	mov	r1, r9
 800d774:	4640      	mov	r0, r8
 800d776:	47d0      	blx	sl
 800d778:	3001      	adds	r0, #1
 800d77a:	d09d      	beq.n	800d6b8 <_printf_i+0x15c>
 800d77c:	3501      	adds	r5, #1
 800d77e:	68e3      	ldr	r3, [r4, #12]
 800d780:	9903      	ldr	r1, [sp, #12]
 800d782:	1a5b      	subs	r3, r3, r1
 800d784:	42ab      	cmp	r3, r5
 800d786:	dcf2      	bgt.n	800d76e <_printf_i+0x212>
 800d788:	e7eb      	b.n	800d762 <_printf_i+0x206>
 800d78a:	2500      	movs	r5, #0
 800d78c:	f104 0619 	add.w	r6, r4, #25
 800d790:	e7f5      	b.n	800d77e <_printf_i+0x222>
 800d792:	bf00      	nop
 800d794:	080100f2 	.word	0x080100f2
 800d798:	08010103 	.word	0x08010103

0800d79c <std>:
 800d79c:	2300      	movs	r3, #0
 800d79e:	b510      	push	{r4, lr}
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d7a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7aa:	6083      	str	r3, [r0, #8]
 800d7ac:	8181      	strh	r1, [r0, #12]
 800d7ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7b0:	81c2      	strh	r2, [r0, #14]
 800d7b2:	6183      	str	r3, [r0, #24]
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	2208      	movs	r2, #8
 800d7b8:	305c      	adds	r0, #92	@ 0x5c
 800d7ba:	f000 f928 	bl	800da0e <memset>
 800d7be:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f4 <std+0x58>)
 800d7c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f8 <std+0x5c>)
 800d7c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7fc <std+0x60>)
 800d7c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d800 <std+0x64>)
 800d7cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d804 <std+0x68>)
 800d7d0:	6224      	str	r4, [r4, #32]
 800d7d2:	429c      	cmp	r4, r3
 800d7d4:	d006      	beq.n	800d7e4 <std+0x48>
 800d7d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d7da:	4294      	cmp	r4, r2
 800d7dc:	d002      	beq.n	800d7e4 <std+0x48>
 800d7de:	33d0      	adds	r3, #208	@ 0xd0
 800d7e0:	429c      	cmp	r4, r3
 800d7e2:	d105      	bne.n	800d7f0 <std+0x54>
 800d7e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ec:	f000 b98c 	b.w	800db08 <__retarget_lock_init_recursive>
 800d7f0:	bd10      	pop	{r4, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0800d989 	.word	0x0800d989
 800d7f8:	0800d9ab 	.word	0x0800d9ab
 800d7fc:	0800d9e3 	.word	0x0800d9e3
 800d800:	0800da07 	.word	0x0800da07
 800d804:	20002184 	.word	0x20002184

0800d808 <stdio_exit_handler>:
 800d808:	4a02      	ldr	r2, [pc, #8]	@ (800d814 <stdio_exit_handler+0xc>)
 800d80a:	4903      	ldr	r1, [pc, #12]	@ (800d818 <stdio_exit_handler+0x10>)
 800d80c:	4803      	ldr	r0, [pc, #12]	@ (800d81c <stdio_exit_handler+0x14>)
 800d80e:	f000 b869 	b.w	800d8e4 <_fwalk_sglue>
 800d812:	bf00      	nop
 800d814:	20000114 	.word	0x20000114
 800d818:	0800f465 	.word	0x0800f465
 800d81c:	20000124 	.word	0x20000124

0800d820 <cleanup_stdio>:
 800d820:	6841      	ldr	r1, [r0, #4]
 800d822:	4b0c      	ldr	r3, [pc, #48]	@ (800d854 <cleanup_stdio+0x34>)
 800d824:	4299      	cmp	r1, r3
 800d826:	b510      	push	{r4, lr}
 800d828:	4604      	mov	r4, r0
 800d82a:	d001      	beq.n	800d830 <cleanup_stdio+0x10>
 800d82c:	f001 fe1a 	bl	800f464 <_fflush_r>
 800d830:	68a1      	ldr	r1, [r4, #8]
 800d832:	4b09      	ldr	r3, [pc, #36]	@ (800d858 <cleanup_stdio+0x38>)
 800d834:	4299      	cmp	r1, r3
 800d836:	d002      	beq.n	800d83e <cleanup_stdio+0x1e>
 800d838:	4620      	mov	r0, r4
 800d83a:	f001 fe13 	bl	800f464 <_fflush_r>
 800d83e:	68e1      	ldr	r1, [r4, #12]
 800d840:	4b06      	ldr	r3, [pc, #24]	@ (800d85c <cleanup_stdio+0x3c>)
 800d842:	4299      	cmp	r1, r3
 800d844:	d004      	beq.n	800d850 <cleanup_stdio+0x30>
 800d846:	4620      	mov	r0, r4
 800d848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d84c:	f001 be0a 	b.w	800f464 <_fflush_r>
 800d850:	bd10      	pop	{r4, pc}
 800d852:	bf00      	nop
 800d854:	20002184 	.word	0x20002184
 800d858:	200021ec 	.word	0x200021ec
 800d85c:	20002254 	.word	0x20002254

0800d860 <global_stdio_init.part.0>:
 800d860:	b510      	push	{r4, lr}
 800d862:	4b0b      	ldr	r3, [pc, #44]	@ (800d890 <global_stdio_init.part.0+0x30>)
 800d864:	4c0b      	ldr	r4, [pc, #44]	@ (800d894 <global_stdio_init.part.0+0x34>)
 800d866:	4a0c      	ldr	r2, [pc, #48]	@ (800d898 <global_stdio_init.part.0+0x38>)
 800d868:	601a      	str	r2, [r3, #0]
 800d86a:	4620      	mov	r0, r4
 800d86c:	2200      	movs	r2, #0
 800d86e:	2104      	movs	r1, #4
 800d870:	f7ff ff94 	bl	800d79c <std>
 800d874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d878:	2201      	movs	r2, #1
 800d87a:	2109      	movs	r1, #9
 800d87c:	f7ff ff8e 	bl	800d79c <std>
 800d880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d884:	2202      	movs	r2, #2
 800d886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d88a:	2112      	movs	r1, #18
 800d88c:	f7ff bf86 	b.w	800d79c <std>
 800d890:	200022bc 	.word	0x200022bc
 800d894:	20002184 	.word	0x20002184
 800d898:	0800d809 	.word	0x0800d809

0800d89c <__sfp_lock_acquire>:
 800d89c:	4801      	ldr	r0, [pc, #4]	@ (800d8a4 <__sfp_lock_acquire+0x8>)
 800d89e:	f000 b934 	b.w	800db0a <__retarget_lock_acquire_recursive>
 800d8a2:	bf00      	nop
 800d8a4:	200022c5 	.word	0x200022c5

0800d8a8 <__sfp_lock_release>:
 800d8a8:	4801      	ldr	r0, [pc, #4]	@ (800d8b0 <__sfp_lock_release+0x8>)
 800d8aa:	f000 b92f 	b.w	800db0c <__retarget_lock_release_recursive>
 800d8ae:	bf00      	nop
 800d8b0:	200022c5 	.word	0x200022c5

0800d8b4 <__sinit>:
 800d8b4:	b510      	push	{r4, lr}
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	f7ff fff0 	bl	800d89c <__sfp_lock_acquire>
 800d8bc:	6a23      	ldr	r3, [r4, #32]
 800d8be:	b11b      	cbz	r3, 800d8c8 <__sinit+0x14>
 800d8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8c4:	f7ff bff0 	b.w	800d8a8 <__sfp_lock_release>
 800d8c8:	4b04      	ldr	r3, [pc, #16]	@ (800d8dc <__sinit+0x28>)
 800d8ca:	6223      	str	r3, [r4, #32]
 800d8cc:	4b04      	ldr	r3, [pc, #16]	@ (800d8e0 <__sinit+0x2c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1f5      	bne.n	800d8c0 <__sinit+0xc>
 800d8d4:	f7ff ffc4 	bl	800d860 <global_stdio_init.part.0>
 800d8d8:	e7f2      	b.n	800d8c0 <__sinit+0xc>
 800d8da:	bf00      	nop
 800d8dc:	0800d821 	.word	0x0800d821
 800d8e0:	200022bc 	.word	0x200022bc

0800d8e4 <_fwalk_sglue>:
 800d8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8e8:	4607      	mov	r7, r0
 800d8ea:	4688      	mov	r8, r1
 800d8ec:	4614      	mov	r4, r2
 800d8ee:	2600      	movs	r6, #0
 800d8f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8f4:	f1b9 0901 	subs.w	r9, r9, #1
 800d8f8:	d505      	bpl.n	800d906 <_fwalk_sglue+0x22>
 800d8fa:	6824      	ldr	r4, [r4, #0]
 800d8fc:	2c00      	cmp	r4, #0
 800d8fe:	d1f7      	bne.n	800d8f0 <_fwalk_sglue+0xc>
 800d900:	4630      	mov	r0, r6
 800d902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d906:	89ab      	ldrh	r3, [r5, #12]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d907      	bls.n	800d91c <_fwalk_sglue+0x38>
 800d90c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d910:	3301      	adds	r3, #1
 800d912:	d003      	beq.n	800d91c <_fwalk_sglue+0x38>
 800d914:	4629      	mov	r1, r5
 800d916:	4638      	mov	r0, r7
 800d918:	47c0      	blx	r8
 800d91a:	4306      	orrs	r6, r0
 800d91c:	3568      	adds	r5, #104	@ 0x68
 800d91e:	e7e9      	b.n	800d8f4 <_fwalk_sglue+0x10>

0800d920 <sniprintf>:
 800d920:	b40c      	push	{r2, r3}
 800d922:	b530      	push	{r4, r5, lr}
 800d924:	4b17      	ldr	r3, [pc, #92]	@ (800d984 <sniprintf+0x64>)
 800d926:	1e0c      	subs	r4, r1, #0
 800d928:	681d      	ldr	r5, [r3, #0]
 800d92a:	b09d      	sub	sp, #116	@ 0x74
 800d92c:	da08      	bge.n	800d940 <sniprintf+0x20>
 800d92e:	238b      	movs	r3, #139	@ 0x8b
 800d930:	602b      	str	r3, [r5, #0]
 800d932:	f04f 30ff 	mov.w	r0, #4294967295
 800d936:	b01d      	add	sp, #116	@ 0x74
 800d938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d93c:	b002      	add	sp, #8
 800d93e:	4770      	bx	lr
 800d940:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d944:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d948:	bf14      	ite	ne
 800d94a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d94e:	4623      	moveq	r3, r4
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	9307      	str	r3, [sp, #28]
 800d954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d958:	9002      	str	r0, [sp, #8]
 800d95a:	9006      	str	r0, [sp, #24]
 800d95c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d960:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d962:	ab21      	add	r3, sp, #132	@ 0x84
 800d964:	a902      	add	r1, sp, #8
 800d966:	4628      	mov	r0, r5
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	f001 fbfb 	bl	800f164 <_svfiprintf_r>
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	bfbc      	itt	lt
 800d972:	238b      	movlt	r3, #139	@ 0x8b
 800d974:	602b      	strlt	r3, [r5, #0]
 800d976:	2c00      	cmp	r4, #0
 800d978:	d0dd      	beq.n	800d936 <sniprintf+0x16>
 800d97a:	9b02      	ldr	r3, [sp, #8]
 800d97c:	2200      	movs	r2, #0
 800d97e:	701a      	strb	r2, [r3, #0]
 800d980:	e7d9      	b.n	800d936 <sniprintf+0x16>
 800d982:	bf00      	nop
 800d984:	20000120 	.word	0x20000120

0800d988 <__sread>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	460c      	mov	r4, r1
 800d98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d990:	f000 f86c 	bl	800da6c <_read_r>
 800d994:	2800      	cmp	r0, #0
 800d996:	bfab      	itete	ge
 800d998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d99a:	89a3      	ldrhlt	r3, [r4, #12]
 800d99c:	181b      	addge	r3, r3, r0
 800d99e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d9a2:	bfac      	ite	ge
 800d9a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d9a6:	81a3      	strhlt	r3, [r4, #12]
 800d9a8:	bd10      	pop	{r4, pc}

0800d9aa <__swrite>:
 800d9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ae:	461f      	mov	r7, r3
 800d9b0:	898b      	ldrh	r3, [r1, #12]
 800d9b2:	05db      	lsls	r3, r3, #23
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	4616      	mov	r6, r2
 800d9ba:	d505      	bpl.n	800d9c8 <__swrite+0x1e>
 800d9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f000 f840 	bl	800da48 <_lseek_r>
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9d2:	81a3      	strh	r3, [r4, #12]
 800d9d4:	4632      	mov	r2, r6
 800d9d6:	463b      	mov	r3, r7
 800d9d8:	4628      	mov	r0, r5
 800d9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9de:	f000 b857 	b.w	800da90 <_write_r>

0800d9e2 <__sseek>:
 800d9e2:	b510      	push	{r4, lr}
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ea:	f000 f82d 	bl	800da48 <_lseek_r>
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	bf15      	itete	ne
 800d9f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9fe:	81a3      	strheq	r3, [r4, #12]
 800da00:	bf18      	it	ne
 800da02:	81a3      	strhne	r3, [r4, #12]
 800da04:	bd10      	pop	{r4, pc}

0800da06 <__sclose>:
 800da06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da0a:	f000 b80d 	b.w	800da28 <_close_r>

0800da0e <memset>:
 800da0e:	4402      	add	r2, r0
 800da10:	4603      	mov	r3, r0
 800da12:	4293      	cmp	r3, r2
 800da14:	d100      	bne.n	800da18 <memset+0xa>
 800da16:	4770      	bx	lr
 800da18:	f803 1b01 	strb.w	r1, [r3], #1
 800da1c:	e7f9      	b.n	800da12 <memset+0x4>
	...

0800da20 <_localeconv_r>:
 800da20:	4800      	ldr	r0, [pc, #0]	@ (800da24 <_localeconv_r+0x4>)
 800da22:	4770      	bx	lr
 800da24:	20000260 	.word	0x20000260

0800da28 <_close_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d06      	ldr	r5, [pc, #24]	@ (800da44 <_close_r+0x1c>)
 800da2c:	2300      	movs	r3, #0
 800da2e:	4604      	mov	r4, r0
 800da30:	4608      	mov	r0, r1
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	f7f5 fcd2 	bl	80033dc <_close>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_close_r+0x1a>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_close_r+0x1a>
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	200022c0 	.word	0x200022c0

0800da48 <_lseek_r>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4d07      	ldr	r5, [pc, #28]	@ (800da68 <_lseek_r+0x20>)
 800da4c:	4604      	mov	r4, r0
 800da4e:	4608      	mov	r0, r1
 800da50:	4611      	mov	r1, r2
 800da52:	2200      	movs	r2, #0
 800da54:	602a      	str	r2, [r5, #0]
 800da56:	461a      	mov	r2, r3
 800da58:	f7f5 fce7 	bl	800342a <_lseek>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d102      	bne.n	800da66 <_lseek_r+0x1e>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	b103      	cbz	r3, 800da66 <_lseek_r+0x1e>
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	200022c0 	.word	0x200022c0

0800da6c <_read_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4d07      	ldr	r5, [pc, #28]	@ (800da8c <_read_r+0x20>)
 800da70:	4604      	mov	r4, r0
 800da72:	4608      	mov	r0, r1
 800da74:	4611      	mov	r1, r2
 800da76:	2200      	movs	r2, #0
 800da78:	602a      	str	r2, [r5, #0]
 800da7a:	461a      	mov	r2, r3
 800da7c:	f7f5 fc75 	bl	800336a <_read>
 800da80:	1c43      	adds	r3, r0, #1
 800da82:	d102      	bne.n	800da8a <_read_r+0x1e>
 800da84:	682b      	ldr	r3, [r5, #0]
 800da86:	b103      	cbz	r3, 800da8a <_read_r+0x1e>
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	200022c0 	.word	0x200022c0

0800da90 <_write_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d07      	ldr	r5, [pc, #28]	@ (800dab0 <_write_r+0x20>)
 800da94:	4604      	mov	r4, r0
 800da96:	4608      	mov	r0, r1
 800da98:	4611      	mov	r1, r2
 800da9a:	2200      	movs	r2, #0
 800da9c:	602a      	str	r2, [r5, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	f7f5 fc80 	bl	80033a4 <_write>
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	d102      	bne.n	800daae <_write_r+0x1e>
 800daa8:	682b      	ldr	r3, [r5, #0]
 800daaa:	b103      	cbz	r3, 800daae <_write_r+0x1e>
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	bd38      	pop	{r3, r4, r5, pc}
 800dab0:	200022c0 	.word	0x200022c0

0800dab4 <__errno>:
 800dab4:	4b01      	ldr	r3, [pc, #4]	@ (800dabc <__errno+0x8>)
 800dab6:	6818      	ldr	r0, [r3, #0]
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	20000120 	.word	0x20000120

0800dac0 <__libc_init_array>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	4d0d      	ldr	r5, [pc, #52]	@ (800daf8 <__libc_init_array+0x38>)
 800dac4:	4c0d      	ldr	r4, [pc, #52]	@ (800dafc <__libc_init_array+0x3c>)
 800dac6:	1b64      	subs	r4, r4, r5
 800dac8:	10a4      	asrs	r4, r4, #2
 800daca:	2600      	movs	r6, #0
 800dacc:	42a6      	cmp	r6, r4
 800dace:	d109      	bne.n	800dae4 <__libc_init_array+0x24>
 800dad0:	4d0b      	ldr	r5, [pc, #44]	@ (800db00 <__libc_init_array+0x40>)
 800dad2:	4c0c      	ldr	r4, [pc, #48]	@ (800db04 <__libc_init_array+0x44>)
 800dad4:	f002 fa62 	bl	800ff9c <_init>
 800dad8:	1b64      	subs	r4, r4, r5
 800dada:	10a4      	asrs	r4, r4, #2
 800dadc:	2600      	movs	r6, #0
 800dade:	42a6      	cmp	r6, r4
 800dae0:	d105      	bne.n	800daee <__libc_init_array+0x2e>
 800dae2:	bd70      	pop	{r4, r5, r6, pc}
 800dae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dae8:	4798      	blx	r3
 800daea:	3601      	adds	r6, #1
 800daec:	e7ee      	b.n	800dacc <__libc_init_array+0xc>
 800daee:	f855 3b04 	ldr.w	r3, [r5], #4
 800daf2:	4798      	blx	r3
 800daf4:	3601      	adds	r6, #1
 800daf6:	e7f2      	b.n	800dade <__libc_init_array+0x1e>
 800daf8:	08010458 	.word	0x08010458
 800dafc:	08010458 	.word	0x08010458
 800db00:	08010458 	.word	0x08010458
 800db04:	0801045c 	.word	0x0801045c

0800db08 <__retarget_lock_init_recursive>:
 800db08:	4770      	bx	lr

0800db0a <__retarget_lock_acquire_recursive>:
 800db0a:	4770      	bx	lr

0800db0c <__retarget_lock_release_recursive>:
 800db0c:	4770      	bx	lr

0800db0e <quorem>:
 800db0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db12:	6903      	ldr	r3, [r0, #16]
 800db14:	690c      	ldr	r4, [r1, #16]
 800db16:	42a3      	cmp	r3, r4
 800db18:	4607      	mov	r7, r0
 800db1a:	db7e      	blt.n	800dc1a <quorem+0x10c>
 800db1c:	3c01      	subs	r4, #1
 800db1e:	f101 0814 	add.w	r8, r1, #20
 800db22:	00a3      	lsls	r3, r4, #2
 800db24:	f100 0514 	add.w	r5, r0, #20
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db2e:	9301      	str	r3, [sp, #4]
 800db30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db38:	3301      	adds	r3, #1
 800db3a:	429a      	cmp	r2, r3
 800db3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db40:	fbb2 f6f3 	udiv	r6, r2, r3
 800db44:	d32e      	bcc.n	800dba4 <quorem+0x96>
 800db46:	f04f 0a00 	mov.w	sl, #0
 800db4a:	46c4      	mov	ip, r8
 800db4c:	46ae      	mov	lr, r5
 800db4e:	46d3      	mov	fp, sl
 800db50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db54:	b298      	uxth	r0, r3
 800db56:	fb06 a000 	mla	r0, r6, r0, sl
 800db5a:	0c02      	lsrs	r2, r0, #16
 800db5c:	0c1b      	lsrs	r3, r3, #16
 800db5e:	fb06 2303 	mla	r3, r6, r3, r2
 800db62:	f8de 2000 	ldr.w	r2, [lr]
 800db66:	b280      	uxth	r0, r0
 800db68:	b292      	uxth	r2, r2
 800db6a:	1a12      	subs	r2, r2, r0
 800db6c:	445a      	add	r2, fp
 800db6e:	f8de 0000 	ldr.w	r0, [lr]
 800db72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db76:	b29b      	uxth	r3, r3
 800db78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db80:	b292      	uxth	r2, r2
 800db82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db86:	45e1      	cmp	r9, ip
 800db88:	f84e 2b04 	str.w	r2, [lr], #4
 800db8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db90:	d2de      	bcs.n	800db50 <quorem+0x42>
 800db92:	9b00      	ldr	r3, [sp, #0]
 800db94:	58eb      	ldr	r3, [r5, r3]
 800db96:	b92b      	cbnz	r3, 800dba4 <quorem+0x96>
 800db98:	9b01      	ldr	r3, [sp, #4]
 800db9a:	3b04      	subs	r3, #4
 800db9c:	429d      	cmp	r5, r3
 800db9e:	461a      	mov	r2, r3
 800dba0:	d32f      	bcc.n	800dc02 <quorem+0xf4>
 800dba2:	613c      	str	r4, [r7, #16]
 800dba4:	4638      	mov	r0, r7
 800dba6:	f001 f979 	bl	800ee9c <__mcmp>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	db25      	blt.n	800dbfa <quorem+0xec>
 800dbae:	4629      	mov	r1, r5
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbb6:	f8d1 c000 	ldr.w	ip, [r1]
 800dbba:	fa1f fe82 	uxth.w	lr, r2
 800dbbe:	fa1f f38c 	uxth.w	r3, ip
 800dbc2:	eba3 030e 	sub.w	r3, r3, lr
 800dbc6:	4403      	add	r3, r0
 800dbc8:	0c12      	lsrs	r2, r2, #16
 800dbca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dbce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbd8:	45c1      	cmp	r9, r8
 800dbda:	f841 3b04 	str.w	r3, [r1], #4
 800dbde:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dbe2:	d2e6      	bcs.n	800dbb2 <quorem+0xa4>
 800dbe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbe8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbec:	b922      	cbnz	r2, 800dbf8 <quorem+0xea>
 800dbee:	3b04      	subs	r3, #4
 800dbf0:	429d      	cmp	r5, r3
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	d30b      	bcc.n	800dc0e <quorem+0x100>
 800dbf6:	613c      	str	r4, [r7, #16]
 800dbf8:	3601      	adds	r6, #1
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	b003      	add	sp, #12
 800dbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc02:	6812      	ldr	r2, [r2, #0]
 800dc04:	3b04      	subs	r3, #4
 800dc06:	2a00      	cmp	r2, #0
 800dc08:	d1cb      	bne.n	800dba2 <quorem+0x94>
 800dc0a:	3c01      	subs	r4, #1
 800dc0c:	e7c6      	b.n	800db9c <quorem+0x8e>
 800dc0e:	6812      	ldr	r2, [r2, #0]
 800dc10:	3b04      	subs	r3, #4
 800dc12:	2a00      	cmp	r2, #0
 800dc14:	d1ef      	bne.n	800dbf6 <quorem+0xe8>
 800dc16:	3c01      	subs	r4, #1
 800dc18:	e7ea      	b.n	800dbf0 <quorem+0xe2>
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	e7ee      	b.n	800dbfc <quorem+0xee>
	...

0800dc20 <_dtoa_r>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	69c7      	ldr	r7, [r0, #28]
 800dc26:	b099      	sub	sp, #100	@ 0x64
 800dc28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc2c:	ec55 4b10 	vmov	r4, r5, d0
 800dc30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dc32:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc34:	4683      	mov	fp, r0
 800dc36:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc3a:	b97f      	cbnz	r7, 800dc5c <_dtoa_r+0x3c>
 800dc3c:	2010      	movs	r0, #16
 800dc3e:	f000 fdfd 	bl	800e83c <malloc>
 800dc42:	4602      	mov	r2, r0
 800dc44:	f8cb 001c 	str.w	r0, [fp, #28]
 800dc48:	b920      	cbnz	r0, 800dc54 <_dtoa_r+0x34>
 800dc4a:	4ba7      	ldr	r3, [pc, #668]	@ (800dee8 <_dtoa_r+0x2c8>)
 800dc4c:	21ef      	movs	r1, #239	@ 0xef
 800dc4e:	48a7      	ldr	r0, [pc, #668]	@ (800deec <_dtoa_r+0x2cc>)
 800dc50:	f001 fc68 	bl	800f524 <__assert_func>
 800dc54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc58:	6007      	str	r7, [r0, #0]
 800dc5a:	60c7      	str	r7, [r0, #12]
 800dc5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc60:	6819      	ldr	r1, [r3, #0]
 800dc62:	b159      	cbz	r1, 800dc7c <_dtoa_r+0x5c>
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	604a      	str	r2, [r1, #4]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	4093      	lsls	r3, r2
 800dc6c:	608b      	str	r3, [r1, #8]
 800dc6e:	4658      	mov	r0, fp
 800dc70:	f000 feda 	bl	800ea28 <_Bfree>
 800dc74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	1e2b      	subs	r3, r5, #0
 800dc7e:	bfb9      	ittee	lt
 800dc80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dc84:	9303      	strlt	r3, [sp, #12]
 800dc86:	2300      	movge	r3, #0
 800dc88:	6033      	strge	r3, [r6, #0]
 800dc8a:	9f03      	ldr	r7, [sp, #12]
 800dc8c:	4b98      	ldr	r3, [pc, #608]	@ (800def0 <_dtoa_r+0x2d0>)
 800dc8e:	bfbc      	itt	lt
 800dc90:	2201      	movlt	r2, #1
 800dc92:	6032      	strlt	r2, [r6, #0]
 800dc94:	43bb      	bics	r3, r7
 800dc96:	d112      	bne.n	800dcbe <_dtoa_r+0x9e>
 800dc98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dc9e:	6013      	str	r3, [r2, #0]
 800dca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dca4:	4323      	orrs	r3, r4
 800dca6:	f000 854d 	beq.w	800e744 <_dtoa_r+0xb24>
 800dcaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800df04 <_dtoa_r+0x2e4>
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f000 854f 	beq.w	800e754 <_dtoa_r+0xb34>
 800dcb6:	f10a 0303 	add.w	r3, sl, #3
 800dcba:	f000 bd49 	b.w	800e750 <_dtoa_r+0xb30>
 800dcbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	ec51 0b17 	vmov	r0, r1, d7
 800dcc8:	2300      	movs	r3, #0
 800dcca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dcce:	f7f2 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcd2:	4680      	mov	r8, r0
 800dcd4:	b158      	cbz	r0, 800dcee <_dtoa_r+0xce>
 800dcd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dcd8:	2301      	movs	r3, #1
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcde:	b113      	cbz	r3, 800dce6 <_dtoa_r+0xc6>
 800dce0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dce2:	4b84      	ldr	r3, [pc, #528]	@ (800def4 <_dtoa_r+0x2d4>)
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800df08 <_dtoa_r+0x2e8>
 800dcea:	f000 bd33 	b.w	800e754 <_dtoa_r+0xb34>
 800dcee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dcf2:	aa16      	add	r2, sp, #88	@ 0x58
 800dcf4:	a917      	add	r1, sp, #92	@ 0x5c
 800dcf6:	4658      	mov	r0, fp
 800dcf8:	f001 f980 	bl	800effc <__d2b>
 800dcfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dd00:	4681      	mov	r9, r0
 800dd02:	2e00      	cmp	r6, #0
 800dd04:	d077      	beq.n	800ddf6 <_dtoa_r+0x1d6>
 800dd06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dd0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd20:	4619      	mov	r1, r3
 800dd22:	2200      	movs	r2, #0
 800dd24:	4b74      	ldr	r3, [pc, #464]	@ (800def8 <_dtoa_r+0x2d8>)
 800dd26:	f7f2 faaf 	bl	8000288 <__aeabi_dsub>
 800dd2a:	a369      	add	r3, pc, #420	@ (adr r3, 800ded0 <_dtoa_r+0x2b0>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f7f2 fc62 	bl	80005f8 <__aeabi_dmul>
 800dd34:	a368      	add	r3, pc, #416	@ (adr r3, 800ded8 <_dtoa_r+0x2b8>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	f7f2 faa7 	bl	800028c <__adddf3>
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4630      	mov	r0, r6
 800dd42:	460d      	mov	r5, r1
 800dd44:	f7f2 fbee 	bl	8000524 <__aeabi_i2d>
 800dd48:	a365      	add	r3, pc, #404	@ (adr r3, 800dee0 <_dtoa_r+0x2c0>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fc53 	bl	80005f8 <__aeabi_dmul>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4620      	mov	r0, r4
 800dd58:	4629      	mov	r1, r5
 800dd5a:	f7f2 fa97 	bl	800028c <__adddf3>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
 800dd62:	f7f2 fef9 	bl	8000b58 <__aeabi_d2iz>
 800dd66:	2200      	movs	r2, #0
 800dd68:	4607      	mov	r7, r0
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	4629      	mov	r1, r5
 800dd70:	f7f2 feb4 	bl	8000adc <__aeabi_dcmplt>
 800dd74:	b140      	cbz	r0, 800dd88 <_dtoa_r+0x168>
 800dd76:	4638      	mov	r0, r7
 800dd78:	f7f2 fbd4 	bl	8000524 <__aeabi_i2d>
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	462b      	mov	r3, r5
 800dd80:	f7f2 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd84:	b900      	cbnz	r0, 800dd88 <_dtoa_r+0x168>
 800dd86:	3f01      	subs	r7, #1
 800dd88:	2f16      	cmp	r7, #22
 800dd8a:	d851      	bhi.n	800de30 <_dtoa_r+0x210>
 800dd8c:	4b5b      	ldr	r3, [pc, #364]	@ (800defc <_dtoa_r+0x2dc>)
 800dd8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd9a:	f7f2 fe9f 	bl	8000adc <__aeabi_dcmplt>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d048      	beq.n	800de34 <_dtoa_r+0x214>
 800dda2:	3f01      	subs	r7, #1
 800dda4:	2300      	movs	r3, #0
 800dda6:	9312      	str	r3, [sp, #72]	@ 0x48
 800dda8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ddaa:	1b9b      	subs	r3, r3, r6
 800ddac:	1e5a      	subs	r2, r3, #1
 800ddae:	bf44      	itt	mi
 800ddb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ddb4:	2300      	movmi	r3, #0
 800ddb6:	9208      	str	r2, [sp, #32]
 800ddb8:	bf54      	ite	pl
 800ddba:	f04f 0800 	movpl.w	r8, #0
 800ddbe:	9308      	strmi	r3, [sp, #32]
 800ddc0:	2f00      	cmp	r7, #0
 800ddc2:	db39      	blt.n	800de38 <_dtoa_r+0x218>
 800ddc4:	9b08      	ldr	r3, [sp, #32]
 800ddc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ddc8:	443b      	add	r3, r7
 800ddca:	9308      	str	r3, [sp, #32]
 800ddcc:	2300      	movs	r3, #0
 800ddce:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddd2:	2b09      	cmp	r3, #9
 800ddd4:	d864      	bhi.n	800dea0 <_dtoa_r+0x280>
 800ddd6:	2b05      	cmp	r3, #5
 800ddd8:	bfc4      	itt	gt
 800ddda:	3b04      	subgt	r3, #4
 800dddc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	f1a3 0302 	sub.w	r3, r3, #2
 800dde4:	bfcc      	ite	gt
 800dde6:	2400      	movgt	r4, #0
 800dde8:	2401      	movle	r4, #1
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d863      	bhi.n	800deb6 <_dtoa_r+0x296>
 800ddee:	e8df f003 	tbb	[pc, r3]
 800ddf2:	372a      	.short	0x372a
 800ddf4:	5535      	.short	0x5535
 800ddf6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ddfa:	441e      	add	r6, r3
 800ddfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800de00:	2b20      	cmp	r3, #32
 800de02:	bfc1      	itttt	gt
 800de04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800de08:	409f      	lslgt	r7, r3
 800de0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800de0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800de12:	bfd6      	itet	le
 800de14:	f1c3 0320 	rsble	r3, r3, #32
 800de18:	ea47 0003 	orrgt.w	r0, r7, r3
 800de1c:	fa04 f003 	lslle.w	r0, r4, r3
 800de20:	f7f2 fb70 	bl	8000504 <__aeabi_ui2d>
 800de24:	2201      	movs	r2, #1
 800de26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de2a:	3e01      	subs	r6, #1
 800de2c:	9214      	str	r2, [sp, #80]	@ 0x50
 800de2e:	e777      	b.n	800dd20 <_dtoa_r+0x100>
 800de30:	2301      	movs	r3, #1
 800de32:	e7b8      	b.n	800dda6 <_dtoa_r+0x186>
 800de34:	9012      	str	r0, [sp, #72]	@ 0x48
 800de36:	e7b7      	b.n	800dda8 <_dtoa_r+0x188>
 800de38:	427b      	negs	r3, r7
 800de3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800de3c:	2300      	movs	r3, #0
 800de3e:	eba8 0807 	sub.w	r8, r8, r7
 800de42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de44:	e7c4      	b.n	800ddd0 <_dtoa_r+0x1b0>
 800de46:	2300      	movs	r3, #0
 800de48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dc35      	bgt.n	800debc <_dtoa_r+0x29c>
 800de50:	2301      	movs	r3, #1
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	9307      	str	r3, [sp, #28]
 800de56:	461a      	mov	r2, r3
 800de58:	920e      	str	r2, [sp, #56]	@ 0x38
 800de5a:	e00b      	b.n	800de74 <_dtoa_r+0x254>
 800de5c:	2301      	movs	r3, #1
 800de5e:	e7f3      	b.n	800de48 <_dtoa_r+0x228>
 800de60:	2300      	movs	r3, #0
 800de62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de66:	18fb      	adds	r3, r7, r3
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	3301      	adds	r3, #1
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	9307      	str	r3, [sp, #28]
 800de70:	bfb8      	it	lt
 800de72:	2301      	movlt	r3, #1
 800de74:	f8db 001c 	ldr.w	r0, [fp, #28]
 800de78:	2100      	movs	r1, #0
 800de7a:	2204      	movs	r2, #4
 800de7c:	f102 0514 	add.w	r5, r2, #20
 800de80:	429d      	cmp	r5, r3
 800de82:	d91f      	bls.n	800dec4 <_dtoa_r+0x2a4>
 800de84:	6041      	str	r1, [r0, #4]
 800de86:	4658      	mov	r0, fp
 800de88:	f000 fd8e 	bl	800e9a8 <_Balloc>
 800de8c:	4682      	mov	sl, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	d13c      	bne.n	800df0c <_dtoa_r+0x2ec>
 800de92:	4b1b      	ldr	r3, [pc, #108]	@ (800df00 <_dtoa_r+0x2e0>)
 800de94:	4602      	mov	r2, r0
 800de96:	f240 11af 	movw	r1, #431	@ 0x1af
 800de9a:	e6d8      	b.n	800dc4e <_dtoa_r+0x2e>
 800de9c:	2301      	movs	r3, #1
 800de9e:	e7e0      	b.n	800de62 <_dtoa_r+0x242>
 800dea0:	2401      	movs	r4, #1
 800dea2:	2300      	movs	r3, #0
 800dea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dea8:	f04f 33ff 	mov.w	r3, #4294967295
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	9307      	str	r3, [sp, #28]
 800deb0:	2200      	movs	r2, #0
 800deb2:	2312      	movs	r3, #18
 800deb4:	e7d0      	b.n	800de58 <_dtoa_r+0x238>
 800deb6:	2301      	movs	r3, #1
 800deb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deba:	e7f5      	b.n	800dea8 <_dtoa_r+0x288>
 800debc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	9307      	str	r3, [sp, #28]
 800dec2:	e7d7      	b.n	800de74 <_dtoa_r+0x254>
 800dec4:	3101      	adds	r1, #1
 800dec6:	0052      	lsls	r2, r2, #1
 800dec8:	e7d8      	b.n	800de7c <_dtoa_r+0x25c>
 800deca:	bf00      	nop
 800decc:	f3af 8000 	nop.w
 800ded0:	636f4361 	.word	0x636f4361
 800ded4:	3fd287a7 	.word	0x3fd287a7
 800ded8:	8b60c8b3 	.word	0x8b60c8b3
 800dedc:	3fc68a28 	.word	0x3fc68a28
 800dee0:	509f79fb 	.word	0x509f79fb
 800dee4:	3fd34413 	.word	0x3fd34413
 800dee8:	08010121 	.word	0x08010121
 800deec:	08010138 	.word	0x08010138
 800def0:	7ff00000 	.word	0x7ff00000
 800def4:	080100f1 	.word	0x080100f1
 800def8:	3ff80000 	.word	0x3ff80000
 800defc:	08010230 	.word	0x08010230
 800df00:	08010190 	.word	0x08010190
 800df04:	0801011d 	.word	0x0801011d
 800df08:	080100f0 	.word	0x080100f0
 800df0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df10:	6018      	str	r0, [r3, #0]
 800df12:	9b07      	ldr	r3, [sp, #28]
 800df14:	2b0e      	cmp	r3, #14
 800df16:	f200 80a4 	bhi.w	800e062 <_dtoa_r+0x442>
 800df1a:	2c00      	cmp	r4, #0
 800df1c:	f000 80a1 	beq.w	800e062 <_dtoa_r+0x442>
 800df20:	2f00      	cmp	r7, #0
 800df22:	dd33      	ble.n	800df8c <_dtoa_r+0x36c>
 800df24:	4bad      	ldr	r3, [pc, #692]	@ (800e1dc <_dtoa_r+0x5bc>)
 800df26:	f007 020f 	and.w	r2, r7, #15
 800df2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df2e:	ed93 7b00 	vldr	d7, [r3]
 800df32:	05f8      	lsls	r0, r7, #23
 800df34:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df3c:	d516      	bpl.n	800df6c <_dtoa_r+0x34c>
 800df3e:	4ba8      	ldr	r3, [pc, #672]	@ (800e1e0 <_dtoa_r+0x5c0>)
 800df40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df48:	f7f2 fc80 	bl	800084c <__aeabi_ddiv>
 800df4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df50:	f004 040f 	and.w	r4, r4, #15
 800df54:	2603      	movs	r6, #3
 800df56:	4da2      	ldr	r5, [pc, #648]	@ (800e1e0 <_dtoa_r+0x5c0>)
 800df58:	b954      	cbnz	r4, 800df70 <_dtoa_r+0x350>
 800df5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df62:	f7f2 fc73 	bl	800084c <__aeabi_ddiv>
 800df66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df6a:	e028      	b.n	800dfbe <_dtoa_r+0x39e>
 800df6c:	2602      	movs	r6, #2
 800df6e:	e7f2      	b.n	800df56 <_dtoa_r+0x336>
 800df70:	07e1      	lsls	r1, r4, #31
 800df72:	d508      	bpl.n	800df86 <_dtoa_r+0x366>
 800df74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df7c:	f7f2 fb3c 	bl	80005f8 <__aeabi_dmul>
 800df80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df84:	3601      	adds	r6, #1
 800df86:	1064      	asrs	r4, r4, #1
 800df88:	3508      	adds	r5, #8
 800df8a:	e7e5      	b.n	800df58 <_dtoa_r+0x338>
 800df8c:	f000 80d2 	beq.w	800e134 <_dtoa_r+0x514>
 800df90:	427c      	negs	r4, r7
 800df92:	4b92      	ldr	r3, [pc, #584]	@ (800e1dc <_dtoa_r+0x5bc>)
 800df94:	4d92      	ldr	r5, [pc, #584]	@ (800e1e0 <_dtoa_r+0x5c0>)
 800df96:	f004 020f 	and.w	r2, r4, #15
 800df9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfa6:	f7f2 fb27 	bl	80005f8 <__aeabi_dmul>
 800dfaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfae:	1124      	asrs	r4, r4, #4
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	2602      	movs	r6, #2
 800dfb4:	2c00      	cmp	r4, #0
 800dfb6:	f040 80b2 	bne.w	800e11e <_dtoa_r+0x4fe>
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1d3      	bne.n	800df66 <_dtoa_r+0x346>
 800dfbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f000 80b7 	beq.w	800e138 <_dtoa_r+0x518>
 800dfca:	4b86      	ldr	r3, [pc, #536]	@ (800e1e4 <_dtoa_r+0x5c4>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 fd83 	bl	8000adc <__aeabi_dcmplt>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f000 80ae 	beq.w	800e138 <_dtoa_r+0x518>
 800dfdc:	9b07      	ldr	r3, [sp, #28]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 80aa 	beq.w	800e138 <_dtoa_r+0x518>
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	dd37      	ble.n	800e05a <_dtoa_r+0x43a>
 800dfea:	1e7b      	subs	r3, r7, #1
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	4620      	mov	r0, r4
 800dff0:	4b7d      	ldr	r3, [pc, #500]	@ (800e1e8 <_dtoa_r+0x5c8>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	4629      	mov	r1, r5
 800dff6:	f7f2 faff 	bl	80005f8 <__aeabi_dmul>
 800dffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dffe:	9c00      	ldr	r4, [sp, #0]
 800e000:	3601      	adds	r6, #1
 800e002:	4630      	mov	r0, r6
 800e004:	f7f2 fa8e 	bl	8000524 <__aeabi_i2d>
 800e008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e00c:	f7f2 faf4 	bl	80005f8 <__aeabi_dmul>
 800e010:	4b76      	ldr	r3, [pc, #472]	@ (800e1ec <_dtoa_r+0x5cc>)
 800e012:	2200      	movs	r2, #0
 800e014:	f7f2 f93a 	bl	800028c <__adddf3>
 800e018:	4605      	mov	r5, r0
 800e01a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e01e:	2c00      	cmp	r4, #0
 800e020:	f040 808d 	bne.w	800e13e <_dtoa_r+0x51e>
 800e024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e028:	4b71      	ldr	r3, [pc, #452]	@ (800e1f0 <_dtoa_r+0x5d0>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	f7f2 f92c 	bl	8000288 <__aeabi_dsub>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e038:	462a      	mov	r2, r5
 800e03a:	4633      	mov	r3, r6
 800e03c:	f7f2 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 800e040:	2800      	cmp	r0, #0
 800e042:	f040 828b 	bne.w	800e55c <_dtoa_r+0x93c>
 800e046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e04a:	462a      	mov	r2, r5
 800e04c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e050:	f7f2 fd44 	bl	8000adc <__aeabi_dcmplt>
 800e054:	2800      	cmp	r0, #0
 800e056:	f040 8128 	bne.w	800e2aa <_dtoa_r+0x68a>
 800e05a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e05e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e062:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e064:	2b00      	cmp	r3, #0
 800e066:	f2c0 815a 	blt.w	800e31e <_dtoa_r+0x6fe>
 800e06a:	2f0e      	cmp	r7, #14
 800e06c:	f300 8157 	bgt.w	800e31e <_dtoa_r+0x6fe>
 800e070:	4b5a      	ldr	r3, [pc, #360]	@ (800e1dc <_dtoa_r+0x5bc>)
 800e072:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e076:	ed93 7b00 	vldr	d7, [r3]
 800e07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	ed8d 7b00 	vstr	d7, [sp]
 800e082:	da03      	bge.n	800e08c <_dtoa_r+0x46c>
 800e084:	9b07      	ldr	r3, [sp, #28]
 800e086:	2b00      	cmp	r3, #0
 800e088:	f340 8101 	ble.w	800e28e <_dtoa_r+0x66e>
 800e08c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e090:	4656      	mov	r6, sl
 800e092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e096:	4620      	mov	r0, r4
 800e098:	4629      	mov	r1, r5
 800e09a:	f7f2 fbd7 	bl	800084c <__aeabi_ddiv>
 800e09e:	f7f2 fd5b 	bl	8000b58 <__aeabi_d2iz>
 800e0a2:	4680      	mov	r8, r0
 800e0a4:	f7f2 fa3e 	bl	8000524 <__aeabi_i2d>
 800e0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ac:	f7f2 faa4 	bl	80005f8 <__aeabi_dmul>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e0bc:	f7f2 f8e4 	bl	8000288 <__aeabi_dsub>
 800e0c0:	f806 4b01 	strb.w	r4, [r6], #1
 800e0c4:	9d07      	ldr	r5, [sp, #28]
 800e0c6:	eba6 040a 	sub.w	r4, r6, sl
 800e0ca:	42a5      	cmp	r5, r4
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	f040 8117 	bne.w	800e302 <_dtoa_r+0x6e2>
 800e0d4:	f7f2 f8da 	bl	800028c <__adddf3>
 800e0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0dc:	4604      	mov	r4, r0
 800e0de:	460d      	mov	r5, r1
 800e0e0:	f7f2 fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	f040 80f9 	bne.w	800e2dc <_dtoa_r+0x6bc>
 800e0ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7f2 fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0f6:	b118      	cbz	r0, 800e100 <_dtoa_r+0x4e0>
 800e0f8:	f018 0f01 	tst.w	r8, #1
 800e0fc:	f040 80ee 	bne.w	800e2dc <_dtoa_r+0x6bc>
 800e100:	4649      	mov	r1, r9
 800e102:	4658      	mov	r0, fp
 800e104:	f000 fc90 	bl	800ea28 <_Bfree>
 800e108:	2300      	movs	r3, #0
 800e10a:	7033      	strb	r3, [r6, #0]
 800e10c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e10e:	3701      	adds	r7, #1
 800e110:	601f      	str	r7, [r3, #0]
 800e112:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e114:	2b00      	cmp	r3, #0
 800e116:	f000 831d 	beq.w	800e754 <_dtoa_r+0xb34>
 800e11a:	601e      	str	r6, [r3, #0]
 800e11c:	e31a      	b.n	800e754 <_dtoa_r+0xb34>
 800e11e:	07e2      	lsls	r2, r4, #31
 800e120:	d505      	bpl.n	800e12e <_dtoa_r+0x50e>
 800e122:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e126:	f7f2 fa67 	bl	80005f8 <__aeabi_dmul>
 800e12a:	3601      	adds	r6, #1
 800e12c:	2301      	movs	r3, #1
 800e12e:	1064      	asrs	r4, r4, #1
 800e130:	3508      	adds	r5, #8
 800e132:	e73f      	b.n	800dfb4 <_dtoa_r+0x394>
 800e134:	2602      	movs	r6, #2
 800e136:	e742      	b.n	800dfbe <_dtoa_r+0x39e>
 800e138:	9c07      	ldr	r4, [sp, #28]
 800e13a:	9704      	str	r7, [sp, #16]
 800e13c:	e761      	b.n	800e002 <_dtoa_r+0x3e2>
 800e13e:	4b27      	ldr	r3, [pc, #156]	@ (800e1dc <_dtoa_r+0x5bc>)
 800e140:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e146:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e14a:	4454      	add	r4, sl
 800e14c:	2900      	cmp	r1, #0
 800e14e:	d053      	beq.n	800e1f8 <_dtoa_r+0x5d8>
 800e150:	4928      	ldr	r1, [pc, #160]	@ (800e1f4 <_dtoa_r+0x5d4>)
 800e152:	2000      	movs	r0, #0
 800e154:	f7f2 fb7a 	bl	800084c <__aeabi_ddiv>
 800e158:	4633      	mov	r3, r6
 800e15a:	462a      	mov	r2, r5
 800e15c:	f7f2 f894 	bl	8000288 <__aeabi_dsub>
 800e160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e164:	4656      	mov	r6, sl
 800e166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e16a:	f7f2 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800e16e:	4605      	mov	r5, r0
 800e170:	f7f2 f9d8 	bl	8000524 <__aeabi_i2d>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e17c:	f7f2 f884 	bl	8000288 <__aeabi_dsub>
 800e180:	3530      	adds	r5, #48	@ 0x30
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e18a:	f806 5b01 	strb.w	r5, [r6], #1
 800e18e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e192:	f7f2 fca3 	bl	8000adc <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d171      	bne.n	800e27e <_dtoa_r+0x65e>
 800e19a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e19e:	4911      	ldr	r1, [pc, #68]	@ (800e1e4 <_dtoa_r+0x5c4>)
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	f7f2 f871 	bl	8000288 <__aeabi_dsub>
 800e1a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e1aa:	f7f2 fc97 	bl	8000adc <__aeabi_dcmplt>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	f040 8095 	bne.w	800e2de <_dtoa_r+0x6be>
 800e1b4:	42a6      	cmp	r6, r4
 800e1b6:	f43f af50 	beq.w	800e05a <_dtoa_r+0x43a>
 800e1ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e1be:	4b0a      	ldr	r3, [pc, #40]	@ (800e1e8 <_dtoa_r+0x5c8>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f7f2 fa19 	bl	80005f8 <__aeabi_dmul>
 800e1c6:	4b08      	ldr	r3, [pc, #32]	@ (800e1e8 <_dtoa_r+0x5c8>)
 800e1c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1d2:	f7f2 fa11 	bl	80005f8 <__aeabi_dmul>
 800e1d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1da:	e7c4      	b.n	800e166 <_dtoa_r+0x546>
 800e1dc:	08010230 	.word	0x08010230
 800e1e0:	08010208 	.word	0x08010208
 800e1e4:	3ff00000 	.word	0x3ff00000
 800e1e8:	40240000 	.word	0x40240000
 800e1ec:	401c0000 	.word	0x401c0000
 800e1f0:	40140000 	.word	0x40140000
 800e1f4:	3fe00000 	.word	0x3fe00000
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f7f2 f9fc 	bl	80005f8 <__aeabi_dmul>
 800e200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e204:	9415      	str	r4, [sp, #84]	@ 0x54
 800e206:	4656      	mov	r6, sl
 800e208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e20c:	f7f2 fca4 	bl	8000b58 <__aeabi_d2iz>
 800e210:	4605      	mov	r5, r0
 800e212:	f7f2 f987 	bl	8000524 <__aeabi_i2d>
 800e216:	4602      	mov	r2, r0
 800e218:	460b      	mov	r3, r1
 800e21a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e21e:	f7f2 f833 	bl	8000288 <__aeabi_dsub>
 800e222:	3530      	adds	r5, #48	@ 0x30
 800e224:	f806 5b01 	strb.w	r5, [r6], #1
 800e228:	4602      	mov	r2, r0
 800e22a:	460b      	mov	r3, r1
 800e22c:	42a6      	cmp	r6, r4
 800e22e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e232:	f04f 0200 	mov.w	r2, #0
 800e236:	d124      	bne.n	800e282 <_dtoa_r+0x662>
 800e238:	4bac      	ldr	r3, [pc, #688]	@ (800e4ec <_dtoa_r+0x8cc>)
 800e23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e23e:	f7f2 f825 	bl	800028c <__adddf3>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e24a:	f7f2 fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d145      	bne.n	800e2de <_dtoa_r+0x6be>
 800e252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e256:	49a5      	ldr	r1, [pc, #660]	@ (800e4ec <_dtoa_r+0x8cc>)
 800e258:	2000      	movs	r0, #0
 800e25a:	f7f2 f815 	bl	8000288 <__aeabi_dsub>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e266:	f7f2 fc39 	bl	8000adc <__aeabi_dcmplt>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	f43f aef5 	beq.w	800e05a <_dtoa_r+0x43a>
 800e270:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e272:	1e73      	subs	r3, r6, #1
 800e274:	9315      	str	r3, [sp, #84]	@ 0x54
 800e276:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e27a:	2b30      	cmp	r3, #48	@ 0x30
 800e27c:	d0f8      	beq.n	800e270 <_dtoa_r+0x650>
 800e27e:	9f04      	ldr	r7, [sp, #16]
 800e280:	e73e      	b.n	800e100 <_dtoa_r+0x4e0>
 800e282:	4b9b      	ldr	r3, [pc, #620]	@ (800e4f0 <_dtoa_r+0x8d0>)
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e28c:	e7bc      	b.n	800e208 <_dtoa_r+0x5e8>
 800e28e:	d10c      	bne.n	800e2aa <_dtoa_r+0x68a>
 800e290:	4b98      	ldr	r3, [pc, #608]	@ (800e4f4 <_dtoa_r+0x8d4>)
 800e292:	2200      	movs	r2, #0
 800e294:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e298:	f7f2 f9ae 	bl	80005f8 <__aeabi_dmul>
 800e29c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2a0:	f7f2 fc30 	bl	8000b04 <__aeabi_dcmpge>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	f000 8157 	beq.w	800e558 <_dtoa_r+0x938>
 800e2aa:	2400      	movs	r4, #0
 800e2ac:	4625      	mov	r5, r4
 800e2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2b0:	43db      	mvns	r3, r3
 800e2b2:	9304      	str	r3, [sp, #16]
 800e2b4:	4656      	mov	r6, sl
 800e2b6:	2700      	movs	r7, #0
 800e2b8:	4621      	mov	r1, r4
 800e2ba:	4658      	mov	r0, fp
 800e2bc:	f000 fbb4 	bl	800ea28 <_Bfree>
 800e2c0:	2d00      	cmp	r5, #0
 800e2c2:	d0dc      	beq.n	800e27e <_dtoa_r+0x65e>
 800e2c4:	b12f      	cbz	r7, 800e2d2 <_dtoa_r+0x6b2>
 800e2c6:	42af      	cmp	r7, r5
 800e2c8:	d003      	beq.n	800e2d2 <_dtoa_r+0x6b2>
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	4658      	mov	r0, fp
 800e2ce:	f000 fbab 	bl	800ea28 <_Bfree>
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	4658      	mov	r0, fp
 800e2d6:	f000 fba7 	bl	800ea28 <_Bfree>
 800e2da:	e7d0      	b.n	800e27e <_dtoa_r+0x65e>
 800e2dc:	9704      	str	r7, [sp, #16]
 800e2de:	4633      	mov	r3, r6
 800e2e0:	461e      	mov	r6, r3
 800e2e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2e6:	2a39      	cmp	r2, #57	@ 0x39
 800e2e8:	d107      	bne.n	800e2fa <_dtoa_r+0x6da>
 800e2ea:	459a      	cmp	sl, r3
 800e2ec:	d1f8      	bne.n	800e2e0 <_dtoa_r+0x6c0>
 800e2ee:	9a04      	ldr	r2, [sp, #16]
 800e2f0:	3201      	adds	r2, #1
 800e2f2:	9204      	str	r2, [sp, #16]
 800e2f4:	2230      	movs	r2, #48	@ 0x30
 800e2f6:	f88a 2000 	strb.w	r2, [sl]
 800e2fa:	781a      	ldrb	r2, [r3, #0]
 800e2fc:	3201      	adds	r2, #1
 800e2fe:	701a      	strb	r2, [r3, #0]
 800e300:	e7bd      	b.n	800e27e <_dtoa_r+0x65e>
 800e302:	4b7b      	ldr	r3, [pc, #492]	@ (800e4f0 <_dtoa_r+0x8d0>)
 800e304:	2200      	movs	r2, #0
 800e306:	f7f2 f977 	bl	80005f8 <__aeabi_dmul>
 800e30a:	2200      	movs	r2, #0
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	460d      	mov	r5, r1
 800e312:	f7f2 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e316:	2800      	cmp	r0, #0
 800e318:	f43f aebb 	beq.w	800e092 <_dtoa_r+0x472>
 800e31c:	e6f0      	b.n	800e100 <_dtoa_r+0x4e0>
 800e31e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e320:	2a00      	cmp	r2, #0
 800e322:	f000 80db 	beq.w	800e4dc <_dtoa_r+0x8bc>
 800e326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e328:	2a01      	cmp	r2, #1
 800e32a:	f300 80bf 	bgt.w	800e4ac <_dtoa_r+0x88c>
 800e32e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e330:	2a00      	cmp	r2, #0
 800e332:	f000 80b7 	beq.w	800e4a4 <_dtoa_r+0x884>
 800e336:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e33a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e33c:	4646      	mov	r6, r8
 800e33e:	9a08      	ldr	r2, [sp, #32]
 800e340:	2101      	movs	r1, #1
 800e342:	441a      	add	r2, r3
 800e344:	4658      	mov	r0, fp
 800e346:	4498      	add	r8, r3
 800e348:	9208      	str	r2, [sp, #32]
 800e34a:	f000 fc21 	bl	800eb90 <__i2b>
 800e34e:	4605      	mov	r5, r0
 800e350:	b15e      	cbz	r6, 800e36a <_dtoa_r+0x74a>
 800e352:	9b08      	ldr	r3, [sp, #32]
 800e354:	2b00      	cmp	r3, #0
 800e356:	dd08      	ble.n	800e36a <_dtoa_r+0x74a>
 800e358:	42b3      	cmp	r3, r6
 800e35a:	9a08      	ldr	r2, [sp, #32]
 800e35c:	bfa8      	it	ge
 800e35e:	4633      	movge	r3, r6
 800e360:	eba8 0803 	sub.w	r8, r8, r3
 800e364:	1af6      	subs	r6, r6, r3
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	9308      	str	r3, [sp, #32]
 800e36a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e36c:	b1f3      	cbz	r3, 800e3ac <_dtoa_r+0x78c>
 800e36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 80b7 	beq.w	800e4e4 <_dtoa_r+0x8c4>
 800e376:	b18c      	cbz	r4, 800e39c <_dtoa_r+0x77c>
 800e378:	4629      	mov	r1, r5
 800e37a:	4622      	mov	r2, r4
 800e37c:	4658      	mov	r0, fp
 800e37e:	f000 fcc7 	bl	800ed10 <__pow5mult>
 800e382:	464a      	mov	r2, r9
 800e384:	4601      	mov	r1, r0
 800e386:	4605      	mov	r5, r0
 800e388:	4658      	mov	r0, fp
 800e38a:	f000 fc17 	bl	800ebbc <__multiply>
 800e38e:	4649      	mov	r1, r9
 800e390:	9004      	str	r0, [sp, #16]
 800e392:	4658      	mov	r0, fp
 800e394:	f000 fb48 	bl	800ea28 <_Bfree>
 800e398:	9b04      	ldr	r3, [sp, #16]
 800e39a:	4699      	mov	r9, r3
 800e39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e39e:	1b1a      	subs	r2, r3, r4
 800e3a0:	d004      	beq.n	800e3ac <_dtoa_r+0x78c>
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	4658      	mov	r0, fp
 800e3a6:	f000 fcb3 	bl	800ed10 <__pow5mult>
 800e3aa:	4681      	mov	r9, r0
 800e3ac:	2101      	movs	r1, #1
 800e3ae:	4658      	mov	r0, fp
 800e3b0:	f000 fbee 	bl	800eb90 <__i2b>
 800e3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 81cf 	beq.w	800e75c <_dtoa_r+0xb3c>
 800e3be:	461a      	mov	r2, r3
 800e3c0:	4601      	mov	r1, r0
 800e3c2:	4658      	mov	r0, fp
 800e3c4:	f000 fca4 	bl	800ed10 <__pow5mult>
 800e3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	f300 8095 	bgt.w	800e4fc <_dtoa_r+0x8dc>
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f040 8087 	bne.w	800e4e8 <_dtoa_r+0x8c8>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f040 8089 	bne.w	800e4f8 <_dtoa_r+0x8d8>
 800e3e6:	9b03      	ldr	r3, [sp, #12]
 800e3e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3ec:	0d1b      	lsrs	r3, r3, #20
 800e3ee:	051b      	lsls	r3, r3, #20
 800e3f0:	b12b      	cbz	r3, 800e3fe <_dtoa_r+0x7de>
 800e3f2:	9b08      	ldr	r3, [sp, #32]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	9308      	str	r3, [sp, #32]
 800e3f8:	f108 0801 	add.w	r8, r8, #1
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 81b0 	beq.w	800e768 <_dtoa_r+0xb48>
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e40e:	6918      	ldr	r0, [r3, #16]
 800e410:	f000 fb72 	bl	800eaf8 <__hi0bits>
 800e414:	f1c0 0020 	rsb	r0, r0, #32
 800e418:	9b08      	ldr	r3, [sp, #32]
 800e41a:	4418      	add	r0, r3
 800e41c:	f010 001f 	ands.w	r0, r0, #31
 800e420:	d077      	beq.n	800e512 <_dtoa_r+0x8f2>
 800e422:	f1c0 0320 	rsb	r3, r0, #32
 800e426:	2b04      	cmp	r3, #4
 800e428:	dd6b      	ble.n	800e502 <_dtoa_r+0x8e2>
 800e42a:	9b08      	ldr	r3, [sp, #32]
 800e42c:	f1c0 001c 	rsb	r0, r0, #28
 800e430:	4403      	add	r3, r0
 800e432:	4480      	add	r8, r0
 800e434:	4406      	add	r6, r0
 800e436:	9308      	str	r3, [sp, #32]
 800e438:	f1b8 0f00 	cmp.w	r8, #0
 800e43c:	dd05      	ble.n	800e44a <_dtoa_r+0x82a>
 800e43e:	4649      	mov	r1, r9
 800e440:	4642      	mov	r2, r8
 800e442:	4658      	mov	r0, fp
 800e444:	f000 fcbe 	bl	800edc4 <__lshift>
 800e448:	4681      	mov	r9, r0
 800e44a:	9b08      	ldr	r3, [sp, #32]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	dd05      	ble.n	800e45c <_dtoa_r+0x83c>
 800e450:	4621      	mov	r1, r4
 800e452:	461a      	mov	r2, r3
 800e454:	4658      	mov	r0, fp
 800e456:	f000 fcb5 	bl	800edc4 <__lshift>
 800e45a:	4604      	mov	r4, r0
 800e45c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d059      	beq.n	800e516 <_dtoa_r+0x8f6>
 800e462:	4621      	mov	r1, r4
 800e464:	4648      	mov	r0, r9
 800e466:	f000 fd19 	bl	800ee9c <__mcmp>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	da53      	bge.n	800e516 <_dtoa_r+0x8f6>
 800e46e:	1e7b      	subs	r3, r7, #1
 800e470:	9304      	str	r3, [sp, #16]
 800e472:	4649      	mov	r1, r9
 800e474:	2300      	movs	r3, #0
 800e476:	220a      	movs	r2, #10
 800e478:	4658      	mov	r0, fp
 800e47a:	f000 faf7 	bl	800ea6c <__multadd>
 800e47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e480:	4681      	mov	r9, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 8172 	beq.w	800e76c <_dtoa_r+0xb4c>
 800e488:	2300      	movs	r3, #0
 800e48a:	4629      	mov	r1, r5
 800e48c:	220a      	movs	r2, #10
 800e48e:	4658      	mov	r0, fp
 800e490:	f000 faec 	bl	800ea6c <__multadd>
 800e494:	9b00      	ldr	r3, [sp, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	4605      	mov	r5, r0
 800e49a:	dc67      	bgt.n	800e56c <_dtoa_r+0x94c>
 800e49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	dc41      	bgt.n	800e526 <_dtoa_r+0x906>
 800e4a2:	e063      	b.n	800e56c <_dtoa_r+0x94c>
 800e4a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e4a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e4aa:	e746      	b.n	800e33a <_dtoa_r+0x71a>
 800e4ac:	9b07      	ldr	r3, [sp, #28]
 800e4ae:	1e5c      	subs	r4, r3, #1
 800e4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4b2:	42a3      	cmp	r3, r4
 800e4b4:	bfbf      	itttt	lt
 800e4b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e4b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e4ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e4bc:	1ae3      	sublt	r3, r4, r3
 800e4be:	bfb4      	ite	lt
 800e4c0:	18d2      	addlt	r2, r2, r3
 800e4c2:	1b1c      	subge	r4, r3, r4
 800e4c4:	9b07      	ldr	r3, [sp, #28]
 800e4c6:	bfbc      	itt	lt
 800e4c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e4ca:	2400      	movlt	r4, #0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	bfb5      	itete	lt
 800e4d0:	eba8 0603 	sublt.w	r6, r8, r3
 800e4d4:	9b07      	ldrge	r3, [sp, #28]
 800e4d6:	2300      	movlt	r3, #0
 800e4d8:	4646      	movge	r6, r8
 800e4da:	e730      	b.n	800e33e <_dtoa_r+0x71e>
 800e4dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e4de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e4e0:	4646      	mov	r6, r8
 800e4e2:	e735      	b.n	800e350 <_dtoa_r+0x730>
 800e4e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4e6:	e75c      	b.n	800e3a2 <_dtoa_r+0x782>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	e788      	b.n	800e3fe <_dtoa_r+0x7de>
 800e4ec:	3fe00000 	.word	0x3fe00000
 800e4f0:	40240000 	.word	0x40240000
 800e4f4:	40140000 	.word	0x40140000
 800e4f8:	9b02      	ldr	r3, [sp, #8]
 800e4fa:	e780      	b.n	800e3fe <_dtoa_r+0x7de>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e500:	e782      	b.n	800e408 <_dtoa_r+0x7e8>
 800e502:	d099      	beq.n	800e438 <_dtoa_r+0x818>
 800e504:	9a08      	ldr	r2, [sp, #32]
 800e506:	331c      	adds	r3, #28
 800e508:	441a      	add	r2, r3
 800e50a:	4498      	add	r8, r3
 800e50c:	441e      	add	r6, r3
 800e50e:	9208      	str	r2, [sp, #32]
 800e510:	e792      	b.n	800e438 <_dtoa_r+0x818>
 800e512:	4603      	mov	r3, r0
 800e514:	e7f6      	b.n	800e504 <_dtoa_r+0x8e4>
 800e516:	9b07      	ldr	r3, [sp, #28]
 800e518:	9704      	str	r7, [sp, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	dc20      	bgt.n	800e560 <_dtoa_r+0x940>
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e522:	2b02      	cmp	r3, #2
 800e524:	dd1e      	ble.n	800e564 <_dtoa_r+0x944>
 800e526:	9b00      	ldr	r3, [sp, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f47f aec0 	bne.w	800e2ae <_dtoa_r+0x68e>
 800e52e:	4621      	mov	r1, r4
 800e530:	2205      	movs	r2, #5
 800e532:	4658      	mov	r0, fp
 800e534:	f000 fa9a 	bl	800ea6c <__multadd>
 800e538:	4601      	mov	r1, r0
 800e53a:	4604      	mov	r4, r0
 800e53c:	4648      	mov	r0, r9
 800e53e:	f000 fcad 	bl	800ee9c <__mcmp>
 800e542:	2800      	cmp	r0, #0
 800e544:	f77f aeb3 	ble.w	800e2ae <_dtoa_r+0x68e>
 800e548:	4656      	mov	r6, sl
 800e54a:	2331      	movs	r3, #49	@ 0x31
 800e54c:	f806 3b01 	strb.w	r3, [r6], #1
 800e550:	9b04      	ldr	r3, [sp, #16]
 800e552:	3301      	adds	r3, #1
 800e554:	9304      	str	r3, [sp, #16]
 800e556:	e6ae      	b.n	800e2b6 <_dtoa_r+0x696>
 800e558:	9c07      	ldr	r4, [sp, #28]
 800e55a:	9704      	str	r7, [sp, #16]
 800e55c:	4625      	mov	r5, r4
 800e55e:	e7f3      	b.n	800e548 <_dtoa_r+0x928>
 800e560:	9b07      	ldr	r3, [sp, #28]
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8104 	beq.w	800e774 <_dtoa_r+0xb54>
 800e56c:	2e00      	cmp	r6, #0
 800e56e:	dd05      	ble.n	800e57c <_dtoa_r+0x95c>
 800e570:	4629      	mov	r1, r5
 800e572:	4632      	mov	r2, r6
 800e574:	4658      	mov	r0, fp
 800e576:	f000 fc25 	bl	800edc4 <__lshift>
 800e57a:	4605      	mov	r5, r0
 800e57c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d05a      	beq.n	800e638 <_dtoa_r+0xa18>
 800e582:	6869      	ldr	r1, [r5, #4]
 800e584:	4658      	mov	r0, fp
 800e586:	f000 fa0f 	bl	800e9a8 <_Balloc>
 800e58a:	4606      	mov	r6, r0
 800e58c:	b928      	cbnz	r0, 800e59a <_dtoa_r+0x97a>
 800e58e:	4b84      	ldr	r3, [pc, #528]	@ (800e7a0 <_dtoa_r+0xb80>)
 800e590:	4602      	mov	r2, r0
 800e592:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e596:	f7ff bb5a 	b.w	800dc4e <_dtoa_r+0x2e>
 800e59a:	692a      	ldr	r2, [r5, #16]
 800e59c:	3202      	adds	r2, #2
 800e59e:	0092      	lsls	r2, r2, #2
 800e5a0:	f105 010c 	add.w	r1, r5, #12
 800e5a4:	300c      	adds	r0, #12
 800e5a6:	f000 ffaf 	bl	800f508 <memcpy>
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	4658      	mov	r0, fp
 800e5b0:	f000 fc08 	bl	800edc4 <__lshift>
 800e5b4:	f10a 0301 	add.w	r3, sl, #1
 800e5b8:	9307      	str	r3, [sp, #28]
 800e5ba:	9b00      	ldr	r3, [sp, #0]
 800e5bc:	4453      	add	r3, sl
 800e5be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5c0:	9b02      	ldr	r3, [sp, #8]
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	462f      	mov	r7, r5
 800e5c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	9b07      	ldr	r3, [sp, #28]
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	4648      	mov	r0, r9
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	f7ff fa9a 	bl	800db0e <quorem>
 800e5da:	4639      	mov	r1, r7
 800e5dc:	9002      	str	r0, [sp, #8]
 800e5de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e5e2:	4648      	mov	r0, r9
 800e5e4:	f000 fc5a 	bl	800ee9c <__mcmp>
 800e5e8:	462a      	mov	r2, r5
 800e5ea:	9008      	str	r0, [sp, #32]
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4658      	mov	r0, fp
 800e5f0:	f000 fc70 	bl	800eed4 <__mdiff>
 800e5f4:	68c2      	ldr	r2, [r0, #12]
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	bb02      	cbnz	r2, 800e63c <_dtoa_r+0xa1c>
 800e5fa:	4601      	mov	r1, r0
 800e5fc:	4648      	mov	r0, r9
 800e5fe:	f000 fc4d 	bl	800ee9c <__mcmp>
 800e602:	4602      	mov	r2, r0
 800e604:	4631      	mov	r1, r6
 800e606:	4658      	mov	r0, fp
 800e608:	920e      	str	r2, [sp, #56]	@ 0x38
 800e60a:	f000 fa0d 	bl	800ea28 <_Bfree>
 800e60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e612:	9e07      	ldr	r6, [sp, #28]
 800e614:	ea43 0102 	orr.w	r1, r3, r2
 800e618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e61a:	4319      	orrs	r1, r3
 800e61c:	d110      	bne.n	800e640 <_dtoa_r+0xa20>
 800e61e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e622:	d029      	beq.n	800e678 <_dtoa_r+0xa58>
 800e624:	9b08      	ldr	r3, [sp, #32]
 800e626:	2b00      	cmp	r3, #0
 800e628:	dd02      	ble.n	800e630 <_dtoa_r+0xa10>
 800e62a:	9b02      	ldr	r3, [sp, #8]
 800e62c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e630:	9b00      	ldr	r3, [sp, #0]
 800e632:	f883 8000 	strb.w	r8, [r3]
 800e636:	e63f      	b.n	800e2b8 <_dtoa_r+0x698>
 800e638:	4628      	mov	r0, r5
 800e63a:	e7bb      	b.n	800e5b4 <_dtoa_r+0x994>
 800e63c:	2201      	movs	r2, #1
 800e63e:	e7e1      	b.n	800e604 <_dtoa_r+0x9e4>
 800e640:	9b08      	ldr	r3, [sp, #32]
 800e642:	2b00      	cmp	r3, #0
 800e644:	db04      	blt.n	800e650 <_dtoa_r+0xa30>
 800e646:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e648:	430b      	orrs	r3, r1
 800e64a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e64c:	430b      	orrs	r3, r1
 800e64e:	d120      	bne.n	800e692 <_dtoa_r+0xa72>
 800e650:	2a00      	cmp	r2, #0
 800e652:	dded      	ble.n	800e630 <_dtoa_r+0xa10>
 800e654:	4649      	mov	r1, r9
 800e656:	2201      	movs	r2, #1
 800e658:	4658      	mov	r0, fp
 800e65a:	f000 fbb3 	bl	800edc4 <__lshift>
 800e65e:	4621      	mov	r1, r4
 800e660:	4681      	mov	r9, r0
 800e662:	f000 fc1b 	bl	800ee9c <__mcmp>
 800e666:	2800      	cmp	r0, #0
 800e668:	dc03      	bgt.n	800e672 <_dtoa_r+0xa52>
 800e66a:	d1e1      	bne.n	800e630 <_dtoa_r+0xa10>
 800e66c:	f018 0f01 	tst.w	r8, #1
 800e670:	d0de      	beq.n	800e630 <_dtoa_r+0xa10>
 800e672:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e676:	d1d8      	bne.n	800e62a <_dtoa_r+0xa0a>
 800e678:	9a00      	ldr	r2, [sp, #0]
 800e67a:	2339      	movs	r3, #57	@ 0x39
 800e67c:	7013      	strb	r3, [r2, #0]
 800e67e:	4633      	mov	r3, r6
 800e680:	461e      	mov	r6, r3
 800e682:	3b01      	subs	r3, #1
 800e684:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e688:	2a39      	cmp	r2, #57	@ 0x39
 800e68a:	d052      	beq.n	800e732 <_dtoa_r+0xb12>
 800e68c:	3201      	adds	r2, #1
 800e68e:	701a      	strb	r2, [r3, #0]
 800e690:	e612      	b.n	800e2b8 <_dtoa_r+0x698>
 800e692:	2a00      	cmp	r2, #0
 800e694:	dd07      	ble.n	800e6a6 <_dtoa_r+0xa86>
 800e696:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e69a:	d0ed      	beq.n	800e678 <_dtoa_r+0xa58>
 800e69c:	9a00      	ldr	r2, [sp, #0]
 800e69e:	f108 0301 	add.w	r3, r8, #1
 800e6a2:	7013      	strb	r3, [r2, #0]
 800e6a4:	e608      	b.n	800e2b8 <_dtoa_r+0x698>
 800e6a6:	9b07      	ldr	r3, [sp, #28]
 800e6a8:	9a07      	ldr	r2, [sp, #28]
 800e6aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e6ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d028      	beq.n	800e706 <_dtoa_r+0xae6>
 800e6b4:	4649      	mov	r1, r9
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	220a      	movs	r2, #10
 800e6ba:	4658      	mov	r0, fp
 800e6bc:	f000 f9d6 	bl	800ea6c <__multadd>
 800e6c0:	42af      	cmp	r7, r5
 800e6c2:	4681      	mov	r9, r0
 800e6c4:	f04f 0300 	mov.w	r3, #0
 800e6c8:	f04f 020a 	mov.w	r2, #10
 800e6cc:	4639      	mov	r1, r7
 800e6ce:	4658      	mov	r0, fp
 800e6d0:	d107      	bne.n	800e6e2 <_dtoa_r+0xac2>
 800e6d2:	f000 f9cb 	bl	800ea6c <__multadd>
 800e6d6:	4607      	mov	r7, r0
 800e6d8:	4605      	mov	r5, r0
 800e6da:	9b07      	ldr	r3, [sp, #28]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	9307      	str	r3, [sp, #28]
 800e6e0:	e774      	b.n	800e5cc <_dtoa_r+0x9ac>
 800e6e2:	f000 f9c3 	bl	800ea6c <__multadd>
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	220a      	movs	r2, #10
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	f000 f9bc 	bl	800ea6c <__multadd>
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	e7f0      	b.n	800e6da <_dtoa_r+0xaba>
 800e6f8:	9b00      	ldr	r3, [sp, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	bfcc      	ite	gt
 800e6fe:	461e      	movgt	r6, r3
 800e700:	2601      	movle	r6, #1
 800e702:	4456      	add	r6, sl
 800e704:	2700      	movs	r7, #0
 800e706:	4649      	mov	r1, r9
 800e708:	2201      	movs	r2, #1
 800e70a:	4658      	mov	r0, fp
 800e70c:	f000 fb5a 	bl	800edc4 <__lshift>
 800e710:	4621      	mov	r1, r4
 800e712:	4681      	mov	r9, r0
 800e714:	f000 fbc2 	bl	800ee9c <__mcmp>
 800e718:	2800      	cmp	r0, #0
 800e71a:	dcb0      	bgt.n	800e67e <_dtoa_r+0xa5e>
 800e71c:	d102      	bne.n	800e724 <_dtoa_r+0xb04>
 800e71e:	f018 0f01 	tst.w	r8, #1
 800e722:	d1ac      	bne.n	800e67e <_dtoa_r+0xa5e>
 800e724:	4633      	mov	r3, r6
 800e726:	461e      	mov	r6, r3
 800e728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e72c:	2a30      	cmp	r2, #48	@ 0x30
 800e72e:	d0fa      	beq.n	800e726 <_dtoa_r+0xb06>
 800e730:	e5c2      	b.n	800e2b8 <_dtoa_r+0x698>
 800e732:	459a      	cmp	sl, r3
 800e734:	d1a4      	bne.n	800e680 <_dtoa_r+0xa60>
 800e736:	9b04      	ldr	r3, [sp, #16]
 800e738:	3301      	adds	r3, #1
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	2331      	movs	r3, #49	@ 0x31
 800e73e:	f88a 3000 	strb.w	r3, [sl]
 800e742:	e5b9      	b.n	800e2b8 <_dtoa_r+0x698>
 800e744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e746:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e7a4 <_dtoa_r+0xb84>
 800e74a:	b11b      	cbz	r3, 800e754 <_dtoa_r+0xb34>
 800e74c:	f10a 0308 	add.w	r3, sl, #8
 800e750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	4650      	mov	r0, sl
 800e756:	b019      	add	sp, #100	@ 0x64
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e75e:	2b01      	cmp	r3, #1
 800e760:	f77f ae37 	ble.w	800e3d2 <_dtoa_r+0x7b2>
 800e764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e766:	930a      	str	r3, [sp, #40]	@ 0x28
 800e768:	2001      	movs	r0, #1
 800e76a:	e655      	b.n	800e418 <_dtoa_r+0x7f8>
 800e76c:	9b00      	ldr	r3, [sp, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f77f aed6 	ble.w	800e520 <_dtoa_r+0x900>
 800e774:	4656      	mov	r6, sl
 800e776:	4621      	mov	r1, r4
 800e778:	4648      	mov	r0, r9
 800e77a:	f7ff f9c8 	bl	800db0e <quorem>
 800e77e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e782:	f806 8b01 	strb.w	r8, [r6], #1
 800e786:	9b00      	ldr	r3, [sp, #0]
 800e788:	eba6 020a 	sub.w	r2, r6, sl
 800e78c:	4293      	cmp	r3, r2
 800e78e:	ddb3      	ble.n	800e6f8 <_dtoa_r+0xad8>
 800e790:	4649      	mov	r1, r9
 800e792:	2300      	movs	r3, #0
 800e794:	220a      	movs	r2, #10
 800e796:	4658      	mov	r0, fp
 800e798:	f000 f968 	bl	800ea6c <__multadd>
 800e79c:	4681      	mov	r9, r0
 800e79e:	e7ea      	b.n	800e776 <_dtoa_r+0xb56>
 800e7a0:	08010190 	.word	0x08010190
 800e7a4:	08010114 	.word	0x08010114

0800e7a8 <_free_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	2900      	cmp	r1, #0
 800e7ae:	d041      	beq.n	800e834 <_free_r+0x8c>
 800e7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7b4:	1f0c      	subs	r4, r1, #4
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	bfb8      	it	lt
 800e7ba:	18e4      	addlt	r4, r4, r3
 800e7bc:	f000 f8e8 	bl	800e990 <__malloc_lock>
 800e7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e838 <_free_r+0x90>)
 800e7c2:	6813      	ldr	r3, [r2, #0]
 800e7c4:	b933      	cbnz	r3, 800e7d4 <_free_r+0x2c>
 800e7c6:	6063      	str	r3, [r4, #4]
 800e7c8:	6014      	str	r4, [r2, #0]
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7d0:	f000 b8e4 	b.w	800e99c <__malloc_unlock>
 800e7d4:	42a3      	cmp	r3, r4
 800e7d6:	d908      	bls.n	800e7ea <_free_r+0x42>
 800e7d8:	6820      	ldr	r0, [r4, #0]
 800e7da:	1821      	adds	r1, r4, r0
 800e7dc:	428b      	cmp	r3, r1
 800e7de:	bf01      	itttt	eq
 800e7e0:	6819      	ldreq	r1, [r3, #0]
 800e7e2:	685b      	ldreq	r3, [r3, #4]
 800e7e4:	1809      	addeq	r1, r1, r0
 800e7e6:	6021      	streq	r1, [r4, #0]
 800e7e8:	e7ed      	b.n	800e7c6 <_free_r+0x1e>
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	b10b      	cbz	r3, 800e7f4 <_free_r+0x4c>
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	d9fa      	bls.n	800e7ea <_free_r+0x42>
 800e7f4:	6811      	ldr	r1, [r2, #0]
 800e7f6:	1850      	adds	r0, r2, r1
 800e7f8:	42a0      	cmp	r0, r4
 800e7fa:	d10b      	bne.n	800e814 <_free_r+0x6c>
 800e7fc:	6820      	ldr	r0, [r4, #0]
 800e7fe:	4401      	add	r1, r0
 800e800:	1850      	adds	r0, r2, r1
 800e802:	4283      	cmp	r3, r0
 800e804:	6011      	str	r1, [r2, #0]
 800e806:	d1e0      	bne.n	800e7ca <_free_r+0x22>
 800e808:	6818      	ldr	r0, [r3, #0]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	6053      	str	r3, [r2, #4]
 800e80e:	4408      	add	r0, r1
 800e810:	6010      	str	r0, [r2, #0]
 800e812:	e7da      	b.n	800e7ca <_free_r+0x22>
 800e814:	d902      	bls.n	800e81c <_free_r+0x74>
 800e816:	230c      	movs	r3, #12
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	e7d6      	b.n	800e7ca <_free_r+0x22>
 800e81c:	6820      	ldr	r0, [r4, #0]
 800e81e:	1821      	adds	r1, r4, r0
 800e820:	428b      	cmp	r3, r1
 800e822:	bf04      	itt	eq
 800e824:	6819      	ldreq	r1, [r3, #0]
 800e826:	685b      	ldreq	r3, [r3, #4]
 800e828:	6063      	str	r3, [r4, #4]
 800e82a:	bf04      	itt	eq
 800e82c:	1809      	addeq	r1, r1, r0
 800e82e:	6021      	streq	r1, [r4, #0]
 800e830:	6054      	str	r4, [r2, #4]
 800e832:	e7ca      	b.n	800e7ca <_free_r+0x22>
 800e834:	bd38      	pop	{r3, r4, r5, pc}
 800e836:	bf00      	nop
 800e838:	200022cc 	.word	0x200022cc

0800e83c <malloc>:
 800e83c:	4b02      	ldr	r3, [pc, #8]	@ (800e848 <malloc+0xc>)
 800e83e:	4601      	mov	r1, r0
 800e840:	6818      	ldr	r0, [r3, #0]
 800e842:	f000 b825 	b.w	800e890 <_malloc_r>
 800e846:	bf00      	nop
 800e848:	20000120 	.word	0x20000120

0800e84c <sbrk_aligned>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	4e0f      	ldr	r6, [pc, #60]	@ (800e88c <sbrk_aligned+0x40>)
 800e850:	460c      	mov	r4, r1
 800e852:	6831      	ldr	r1, [r6, #0]
 800e854:	4605      	mov	r5, r0
 800e856:	b911      	cbnz	r1, 800e85e <sbrk_aligned+0x12>
 800e858:	f000 fe46 	bl	800f4e8 <_sbrk_r>
 800e85c:	6030      	str	r0, [r6, #0]
 800e85e:	4621      	mov	r1, r4
 800e860:	4628      	mov	r0, r5
 800e862:	f000 fe41 	bl	800f4e8 <_sbrk_r>
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	d103      	bne.n	800e872 <sbrk_aligned+0x26>
 800e86a:	f04f 34ff 	mov.w	r4, #4294967295
 800e86e:	4620      	mov	r0, r4
 800e870:	bd70      	pop	{r4, r5, r6, pc}
 800e872:	1cc4      	adds	r4, r0, #3
 800e874:	f024 0403 	bic.w	r4, r4, #3
 800e878:	42a0      	cmp	r0, r4
 800e87a:	d0f8      	beq.n	800e86e <sbrk_aligned+0x22>
 800e87c:	1a21      	subs	r1, r4, r0
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 fe32 	bl	800f4e8 <_sbrk_r>
 800e884:	3001      	adds	r0, #1
 800e886:	d1f2      	bne.n	800e86e <sbrk_aligned+0x22>
 800e888:	e7ef      	b.n	800e86a <sbrk_aligned+0x1e>
 800e88a:	bf00      	nop
 800e88c:	200022c8 	.word	0x200022c8

0800e890 <_malloc_r>:
 800e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e894:	1ccd      	adds	r5, r1, #3
 800e896:	f025 0503 	bic.w	r5, r5, #3
 800e89a:	3508      	adds	r5, #8
 800e89c:	2d0c      	cmp	r5, #12
 800e89e:	bf38      	it	cc
 800e8a0:	250c      	movcc	r5, #12
 800e8a2:	2d00      	cmp	r5, #0
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	db01      	blt.n	800e8ac <_malloc_r+0x1c>
 800e8a8:	42a9      	cmp	r1, r5
 800e8aa:	d904      	bls.n	800e8b6 <_malloc_r+0x26>
 800e8ac:	230c      	movs	r3, #12
 800e8ae:	6033      	str	r3, [r6, #0]
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e98c <_malloc_r+0xfc>
 800e8ba:	f000 f869 	bl	800e990 <__malloc_lock>
 800e8be:	f8d8 3000 	ldr.w	r3, [r8]
 800e8c2:	461c      	mov	r4, r3
 800e8c4:	bb44      	cbnz	r4, 800e918 <_malloc_r+0x88>
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7ff ffbf 	bl	800e84c <sbrk_aligned>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	d158      	bne.n	800e986 <_malloc_r+0xf6>
 800e8d4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8d8:	4627      	mov	r7, r4
 800e8da:	2f00      	cmp	r7, #0
 800e8dc:	d143      	bne.n	800e966 <_malloc_r+0xd6>
 800e8de:	2c00      	cmp	r4, #0
 800e8e0:	d04b      	beq.n	800e97a <_malloc_r+0xea>
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	eb04 0903 	add.w	r9, r4, r3
 800e8ec:	f000 fdfc 	bl	800f4e8 <_sbrk_r>
 800e8f0:	4581      	cmp	r9, r0
 800e8f2:	d142      	bne.n	800e97a <_malloc_r+0xea>
 800e8f4:	6821      	ldr	r1, [r4, #0]
 800e8f6:	1a6d      	subs	r5, r5, r1
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	f7ff ffa6 	bl	800e84c <sbrk_aligned>
 800e900:	3001      	adds	r0, #1
 800e902:	d03a      	beq.n	800e97a <_malloc_r+0xea>
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	442b      	add	r3, r5
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	f8d8 3000 	ldr.w	r3, [r8]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	bb62      	cbnz	r2, 800e96c <_malloc_r+0xdc>
 800e912:	f8c8 7000 	str.w	r7, [r8]
 800e916:	e00f      	b.n	800e938 <_malloc_r+0xa8>
 800e918:	6822      	ldr	r2, [r4, #0]
 800e91a:	1b52      	subs	r2, r2, r5
 800e91c:	d420      	bmi.n	800e960 <_malloc_r+0xd0>
 800e91e:	2a0b      	cmp	r2, #11
 800e920:	d917      	bls.n	800e952 <_malloc_r+0xc2>
 800e922:	1961      	adds	r1, r4, r5
 800e924:	42a3      	cmp	r3, r4
 800e926:	6025      	str	r5, [r4, #0]
 800e928:	bf18      	it	ne
 800e92a:	6059      	strne	r1, [r3, #4]
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	bf08      	it	eq
 800e930:	f8c8 1000 	streq.w	r1, [r8]
 800e934:	5162      	str	r2, [r4, r5]
 800e936:	604b      	str	r3, [r1, #4]
 800e938:	4630      	mov	r0, r6
 800e93a:	f000 f82f 	bl	800e99c <__malloc_unlock>
 800e93e:	f104 000b 	add.w	r0, r4, #11
 800e942:	1d23      	adds	r3, r4, #4
 800e944:	f020 0007 	bic.w	r0, r0, #7
 800e948:	1ac2      	subs	r2, r0, r3
 800e94a:	bf1c      	itt	ne
 800e94c:	1a1b      	subne	r3, r3, r0
 800e94e:	50a3      	strne	r3, [r4, r2]
 800e950:	e7af      	b.n	800e8b2 <_malloc_r+0x22>
 800e952:	6862      	ldr	r2, [r4, #4]
 800e954:	42a3      	cmp	r3, r4
 800e956:	bf0c      	ite	eq
 800e958:	f8c8 2000 	streq.w	r2, [r8]
 800e95c:	605a      	strne	r2, [r3, #4]
 800e95e:	e7eb      	b.n	800e938 <_malloc_r+0xa8>
 800e960:	4623      	mov	r3, r4
 800e962:	6864      	ldr	r4, [r4, #4]
 800e964:	e7ae      	b.n	800e8c4 <_malloc_r+0x34>
 800e966:	463c      	mov	r4, r7
 800e968:	687f      	ldr	r7, [r7, #4]
 800e96a:	e7b6      	b.n	800e8da <_malloc_r+0x4a>
 800e96c:	461a      	mov	r2, r3
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	42a3      	cmp	r3, r4
 800e972:	d1fb      	bne.n	800e96c <_malloc_r+0xdc>
 800e974:	2300      	movs	r3, #0
 800e976:	6053      	str	r3, [r2, #4]
 800e978:	e7de      	b.n	800e938 <_malloc_r+0xa8>
 800e97a:	230c      	movs	r3, #12
 800e97c:	6033      	str	r3, [r6, #0]
 800e97e:	4630      	mov	r0, r6
 800e980:	f000 f80c 	bl	800e99c <__malloc_unlock>
 800e984:	e794      	b.n	800e8b0 <_malloc_r+0x20>
 800e986:	6005      	str	r5, [r0, #0]
 800e988:	e7d6      	b.n	800e938 <_malloc_r+0xa8>
 800e98a:	bf00      	nop
 800e98c:	200022cc 	.word	0x200022cc

0800e990 <__malloc_lock>:
 800e990:	4801      	ldr	r0, [pc, #4]	@ (800e998 <__malloc_lock+0x8>)
 800e992:	f7ff b8ba 	b.w	800db0a <__retarget_lock_acquire_recursive>
 800e996:	bf00      	nop
 800e998:	200022c4 	.word	0x200022c4

0800e99c <__malloc_unlock>:
 800e99c:	4801      	ldr	r0, [pc, #4]	@ (800e9a4 <__malloc_unlock+0x8>)
 800e99e:	f7ff b8b5 	b.w	800db0c <__retarget_lock_release_recursive>
 800e9a2:	bf00      	nop
 800e9a4:	200022c4 	.word	0x200022c4

0800e9a8 <_Balloc>:
 800e9a8:	b570      	push	{r4, r5, r6, lr}
 800e9aa:	69c6      	ldr	r6, [r0, #28]
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	460d      	mov	r5, r1
 800e9b0:	b976      	cbnz	r6, 800e9d0 <_Balloc+0x28>
 800e9b2:	2010      	movs	r0, #16
 800e9b4:	f7ff ff42 	bl	800e83c <malloc>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	61e0      	str	r0, [r4, #28]
 800e9bc:	b920      	cbnz	r0, 800e9c8 <_Balloc+0x20>
 800e9be:	4b18      	ldr	r3, [pc, #96]	@ (800ea20 <_Balloc+0x78>)
 800e9c0:	4818      	ldr	r0, [pc, #96]	@ (800ea24 <_Balloc+0x7c>)
 800e9c2:	216b      	movs	r1, #107	@ 0x6b
 800e9c4:	f000 fdae 	bl	800f524 <__assert_func>
 800e9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9cc:	6006      	str	r6, [r0, #0]
 800e9ce:	60c6      	str	r6, [r0, #12]
 800e9d0:	69e6      	ldr	r6, [r4, #28]
 800e9d2:	68f3      	ldr	r3, [r6, #12]
 800e9d4:	b183      	cbz	r3, 800e9f8 <_Balloc+0x50>
 800e9d6:	69e3      	ldr	r3, [r4, #28]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9de:	b9b8      	cbnz	r0, 800ea10 <_Balloc+0x68>
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	fa01 f605 	lsl.w	r6, r1, r5
 800e9e6:	1d72      	adds	r2, r6, #5
 800e9e8:	0092      	lsls	r2, r2, #2
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f000 fdb8 	bl	800f560 <_calloc_r>
 800e9f0:	b160      	cbz	r0, 800ea0c <_Balloc+0x64>
 800e9f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9f6:	e00e      	b.n	800ea16 <_Balloc+0x6e>
 800e9f8:	2221      	movs	r2, #33	@ 0x21
 800e9fa:	2104      	movs	r1, #4
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f000 fdaf 	bl	800f560 <_calloc_r>
 800ea02:	69e3      	ldr	r3, [r4, #28]
 800ea04:	60f0      	str	r0, [r6, #12]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1e4      	bne.n	800e9d6 <_Balloc+0x2e>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	bd70      	pop	{r4, r5, r6, pc}
 800ea10:	6802      	ldr	r2, [r0, #0]
 800ea12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea16:	2300      	movs	r3, #0
 800ea18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea1c:	e7f7      	b.n	800ea0e <_Balloc+0x66>
 800ea1e:	bf00      	nop
 800ea20:	08010121 	.word	0x08010121
 800ea24:	080101a1 	.word	0x080101a1

0800ea28 <_Bfree>:
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	69c6      	ldr	r6, [r0, #28]
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	460c      	mov	r4, r1
 800ea30:	b976      	cbnz	r6, 800ea50 <_Bfree+0x28>
 800ea32:	2010      	movs	r0, #16
 800ea34:	f7ff ff02 	bl	800e83c <malloc>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	61e8      	str	r0, [r5, #28]
 800ea3c:	b920      	cbnz	r0, 800ea48 <_Bfree+0x20>
 800ea3e:	4b09      	ldr	r3, [pc, #36]	@ (800ea64 <_Bfree+0x3c>)
 800ea40:	4809      	ldr	r0, [pc, #36]	@ (800ea68 <_Bfree+0x40>)
 800ea42:	218f      	movs	r1, #143	@ 0x8f
 800ea44:	f000 fd6e 	bl	800f524 <__assert_func>
 800ea48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea4c:	6006      	str	r6, [r0, #0]
 800ea4e:	60c6      	str	r6, [r0, #12]
 800ea50:	b13c      	cbz	r4, 800ea62 <_Bfree+0x3a>
 800ea52:	69eb      	ldr	r3, [r5, #28]
 800ea54:	6862      	ldr	r2, [r4, #4]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea5c:	6021      	str	r1, [r4, #0]
 800ea5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	08010121 	.word	0x08010121
 800ea68:	080101a1 	.word	0x080101a1

0800ea6c <__multadd>:
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	690d      	ldr	r5, [r1, #16]
 800ea72:	4607      	mov	r7, r0
 800ea74:	460c      	mov	r4, r1
 800ea76:	461e      	mov	r6, r3
 800ea78:	f101 0c14 	add.w	ip, r1, #20
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea82:	b299      	uxth	r1, r3
 800ea84:	fb02 6101 	mla	r1, r2, r1, r6
 800ea88:	0c1e      	lsrs	r6, r3, #16
 800ea8a:	0c0b      	lsrs	r3, r1, #16
 800ea8c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea90:	b289      	uxth	r1, r1
 800ea92:	3001      	adds	r0, #1
 800ea94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea98:	4285      	cmp	r5, r0
 800ea9a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaa2:	dcec      	bgt.n	800ea7e <__multadd+0x12>
 800eaa4:	b30e      	cbz	r6, 800eaea <__multadd+0x7e>
 800eaa6:	68a3      	ldr	r3, [r4, #8]
 800eaa8:	42ab      	cmp	r3, r5
 800eaaa:	dc19      	bgt.n	800eae0 <__multadd+0x74>
 800eaac:	6861      	ldr	r1, [r4, #4]
 800eaae:	4638      	mov	r0, r7
 800eab0:	3101      	adds	r1, #1
 800eab2:	f7ff ff79 	bl	800e9a8 <_Balloc>
 800eab6:	4680      	mov	r8, r0
 800eab8:	b928      	cbnz	r0, 800eac6 <__multadd+0x5a>
 800eaba:	4602      	mov	r2, r0
 800eabc:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf0 <__multadd+0x84>)
 800eabe:	480d      	ldr	r0, [pc, #52]	@ (800eaf4 <__multadd+0x88>)
 800eac0:	21ba      	movs	r1, #186	@ 0xba
 800eac2:	f000 fd2f 	bl	800f524 <__assert_func>
 800eac6:	6922      	ldr	r2, [r4, #16]
 800eac8:	3202      	adds	r2, #2
 800eaca:	f104 010c 	add.w	r1, r4, #12
 800eace:	0092      	lsls	r2, r2, #2
 800ead0:	300c      	adds	r0, #12
 800ead2:	f000 fd19 	bl	800f508 <memcpy>
 800ead6:	4621      	mov	r1, r4
 800ead8:	4638      	mov	r0, r7
 800eada:	f7ff ffa5 	bl	800ea28 <_Bfree>
 800eade:	4644      	mov	r4, r8
 800eae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eae4:	3501      	adds	r5, #1
 800eae6:	615e      	str	r6, [r3, #20]
 800eae8:	6125      	str	r5, [r4, #16]
 800eaea:	4620      	mov	r0, r4
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	08010190 	.word	0x08010190
 800eaf4:	080101a1 	.word	0x080101a1

0800eaf8 <__hi0bits>:
 800eaf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eafc:	4603      	mov	r3, r0
 800eafe:	bf36      	itet	cc
 800eb00:	0403      	lslcc	r3, r0, #16
 800eb02:	2000      	movcs	r0, #0
 800eb04:	2010      	movcc	r0, #16
 800eb06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eb0a:	bf3c      	itt	cc
 800eb0c:	021b      	lslcc	r3, r3, #8
 800eb0e:	3008      	addcc	r0, #8
 800eb10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb14:	bf3c      	itt	cc
 800eb16:	011b      	lslcc	r3, r3, #4
 800eb18:	3004      	addcc	r0, #4
 800eb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb1e:	bf3c      	itt	cc
 800eb20:	009b      	lslcc	r3, r3, #2
 800eb22:	3002      	addcc	r0, #2
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	db05      	blt.n	800eb34 <__hi0bits+0x3c>
 800eb28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb2c:	f100 0001 	add.w	r0, r0, #1
 800eb30:	bf08      	it	eq
 800eb32:	2020      	moveq	r0, #32
 800eb34:	4770      	bx	lr

0800eb36 <__lo0bits>:
 800eb36:	6803      	ldr	r3, [r0, #0]
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f013 0007 	ands.w	r0, r3, #7
 800eb3e:	d00b      	beq.n	800eb58 <__lo0bits+0x22>
 800eb40:	07d9      	lsls	r1, r3, #31
 800eb42:	d421      	bmi.n	800eb88 <__lo0bits+0x52>
 800eb44:	0798      	lsls	r0, r3, #30
 800eb46:	bf49      	itett	mi
 800eb48:	085b      	lsrmi	r3, r3, #1
 800eb4a:	089b      	lsrpl	r3, r3, #2
 800eb4c:	2001      	movmi	r0, #1
 800eb4e:	6013      	strmi	r3, [r2, #0]
 800eb50:	bf5c      	itt	pl
 800eb52:	6013      	strpl	r3, [r2, #0]
 800eb54:	2002      	movpl	r0, #2
 800eb56:	4770      	bx	lr
 800eb58:	b299      	uxth	r1, r3
 800eb5a:	b909      	cbnz	r1, 800eb60 <__lo0bits+0x2a>
 800eb5c:	0c1b      	lsrs	r3, r3, #16
 800eb5e:	2010      	movs	r0, #16
 800eb60:	b2d9      	uxtb	r1, r3
 800eb62:	b909      	cbnz	r1, 800eb68 <__lo0bits+0x32>
 800eb64:	3008      	adds	r0, #8
 800eb66:	0a1b      	lsrs	r3, r3, #8
 800eb68:	0719      	lsls	r1, r3, #28
 800eb6a:	bf04      	itt	eq
 800eb6c:	091b      	lsreq	r3, r3, #4
 800eb6e:	3004      	addeq	r0, #4
 800eb70:	0799      	lsls	r1, r3, #30
 800eb72:	bf04      	itt	eq
 800eb74:	089b      	lsreq	r3, r3, #2
 800eb76:	3002      	addeq	r0, #2
 800eb78:	07d9      	lsls	r1, r3, #31
 800eb7a:	d403      	bmi.n	800eb84 <__lo0bits+0x4e>
 800eb7c:	085b      	lsrs	r3, r3, #1
 800eb7e:	f100 0001 	add.w	r0, r0, #1
 800eb82:	d003      	beq.n	800eb8c <__lo0bits+0x56>
 800eb84:	6013      	str	r3, [r2, #0]
 800eb86:	4770      	bx	lr
 800eb88:	2000      	movs	r0, #0
 800eb8a:	4770      	bx	lr
 800eb8c:	2020      	movs	r0, #32
 800eb8e:	4770      	bx	lr

0800eb90 <__i2b>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	460c      	mov	r4, r1
 800eb94:	2101      	movs	r1, #1
 800eb96:	f7ff ff07 	bl	800e9a8 <_Balloc>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	b928      	cbnz	r0, 800ebaa <__i2b+0x1a>
 800eb9e:	4b05      	ldr	r3, [pc, #20]	@ (800ebb4 <__i2b+0x24>)
 800eba0:	4805      	ldr	r0, [pc, #20]	@ (800ebb8 <__i2b+0x28>)
 800eba2:	f240 1145 	movw	r1, #325	@ 0x145
 800eba6:	f000 fcbd 	bl	800f524 <__assert_func>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	6144      	str	r4, [r0, #20]
 800ebae:	6103      	str	r3, [r0, #16]
 800ebb0:	bd10      	pop	{r4, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08010190 	.word	0x08010190
 800ebb8:	080101a1 	.word	0x080101a1

0800ebbc <__multiply>:
 800ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc0:	4614      	mov	r4, r2
 800ebc2:	690a      	ldr	r2, [r1, #16]
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	bfa8      	it	ge
 800ebca:	4623      	movge	r3, r4
 800ebcc:	460f      	mov	r7, r1
 800ebce:	bfa4      	itt	ge
 800ebd0:	460c      	movge	r4, r1
 800ebd2:	461f      	movge	r7, r3
 800ebd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ebd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ebdc:	68a3      	ldr	r3, [r4, #8]
 800ebde:	6861      	ldr	r1, [r4, #4]
 800ebe0:	eb0a 0609 	add.w	r6, sl, r9
 800ebe4:	42b3      	cmp	r3, r6
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	bfb8      	it	lt
 800ebea:	3101      	addlt	r1, #1
 800ebec:	f7ff fedc 	bl	800e9a8 <_Balloc>
 800ebf0:	b930      	cbnz	r0, 800ec00 <__multiply+0x44>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	4b44      	ldr	r3, [pc, #272]	@ (800ed08 <__multiply+0x14c>)
 800ebf6:	4845      	ldr	r0, [pc, #276]	@ (800ed0c <__multiply+0x150>)
 800ebf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebfc:	f000 fc92 	bl	800f524 <__assert_func>
 800ec00:	f100 0514 	add.w	r5, r0, #20
 800ec04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec08:	462b      	mov	r3, r5
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	4543      	cmp	r3, r8
 800ec0e:	d321      	bcc.n	800ec54 <__multiply+0x98>
 800ec10:	f107 0114 	add.w	r1, r7, #20
 800ec14:	f104 0214 	add.w	r2, r4, #20
 800ec18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ec1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ec20:	9302      	str	r3, [sp, #8]
 800ec22:	1b13      	subs	r3, r2, r4
 800ec24:	3b15      	subs	r3, #21
 800ec26:	f023 0303 	bic.w	r3, r3, #3
 800ec2a:	3304      	adds	r3, #4
 800ec2c:	f104 0715 	add.w	r7, r4, #21
 800ec30:	42ba      	cmp	r2, r7
 800ec32:	bf38      	it	cc
 800ec34:	2304      	movcc	r3, #4
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	9b02      	ldr	r3, [sp, #8]
 800ec3a:	9103      	str	r1, [sp, #12]
 800ec3c:	428b      	cmp	r3, r1
 800ec3e:	d80c      	bhi.n	800ec5a <__multiply+0x9e>
 800ec40:	2e00      	cmp	r6, #0
 800ec42:	dd03      	ble.n	800ec4c <__multiply+0x90>
 800ec44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d05b      	beq.n	800ed04 <__multiply+0x148>
 800ec4c:	6106      	str	r6, [r0, #16]
 800ec4e:	b005      	add	sp, #20
 800ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec54:	f843 2b04 	str.w	r2, [r3], #4
 800ec58:	e7d8      	b.n	800ec0c <__multiply+0x50>
 800ec5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec5e:	f1ba 0f00 	cmp.w	sl, #0
 800ec62:	d024      	beq.n	800ecae <__multiply+0xf2>
 800ec64:	f104 0e14 	add.w	lr, r4, #20
 800ec68:	46a9      	mov	r9, r5
 800ec6a:	f04f 0c00 	mov.w	ip, #0
 800ec6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec72:	f8d9 3000 	ldr.w	r3, [r9]
 800ec76:	fa1f fb87 	uxth.w	fp, r7
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ec84:	f8d9 7000 	ldr.w	r7, [r9]
 800ec88:	4463      	add	r3, ip
 800ec8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec8e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ec92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec9c:	4572      	cmp	r2, lr
 800ec9e:	f849 3b04 	str.w	r3, [r9], #4
 800eca2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eca6:	d8e2      	bhi.n	800ec6e <__multiply+0xb2>
 800eca8:	9b01      	ldr	r3, [sp, #4]
 800ecaa:	f845 c003 	str.w	ip, [r5, r3]
 800ecae:	9b03      	ldr	r3, [sp, #12]
 800ecb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ecb4:	3104      	adds	r1, #4
 800ecb6:	f1b9 0f00 	cmp.w	r9, #0
 800ecba:	d021      	beq.n	800ed00 <__multiply+0x144>
 800ecbc:	682b      	ldr	r3, [r5, #0]
 800ecbe:	f104 0c14 	add.w	ip, r4, #20
 800ecc2:	46ae      	mov	lr, r5
 800ecc4:	f04f 0a00 	mov.w	sl, #0
 800ecc8:	f8bc b000 	ldrh.w	fp, [ip]
 800eccc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ecd0:	fb09 770b 	mla	r7, r9, fp, r7
 800ecd4:	4457      	add	r7, sl
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ecdc:	f84e 3b04 	str.w	r3, [lr], #4
 800ece0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ece4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ece8:	f8be 3000 	ldrh.w	r3, [lr]
 800ecec:	fb09 330a 	mla	r3, r9, sl, r3
 800ecf0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ecf4:	4562      	cmp	r2, ip
 800ecf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecfa:	d8e5      	bhi.n	800ecc8 <__multiply+0x10c>
 800ecfc:	9f01      	ldr	r7, [sp, #4]
 800ecfe:	51eb      	str	r3, [r5, r7]
 800ed00:	3504      	adds	r5, #4
 800ed02:	e799      	b.n	800ec38 <__multiply+0x7c>
 800ed04:	3e01      	subs	r6, #1
 800ed06:	e79b      	b.n	800ec40 <__multiply+0x84>
 800ed08:	08010190 	.word	0x08010190
 800ed0c:	080101a1 	.word	0x080101a1

0800ed10 <__pow5mult>:
 800ed10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed14:	4615      	mov	r5, r2
 800ed16:	f012 0203 	ands.w	r2, r2, #3
 800ed1a:	4607      	mov	r7, r0
 800ed1c:	460e      	mov	r6, r1
 800ed1e:	d007      	beq.n	800ed30 <__pow5mult+0x20>
 800ed20:	4c25      	ldr	r4, [pc, #148]	@ (800edb8 <__pow5mult+0xa8>)
 800ed22:	3a01      	subs	r2, #1
 800ed24:	2300      	movs	r3, #0
 800ed26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed2a:	f7ff fe9f 	bl	800ea6c <__multadd>
 800ed2e:	4606      	mov	r6, r0
 800ed30:	10ad      	asrs	r5, r5, #2
 800ed32:	d03d      	beq.n	800edb0 <__pow5mult+0xa0>
 800ed34:	69fc      	ldr	r4, [r7, #28]
 800ed36:	b97c      	cbnz	r4, 800ed58 <__pow5mult+0x48>
 800ed38:	2010      	movs	r0, #16
 800ed3a:	f7ff fd7f 	bl	800e83c <malloc>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	61f8      	str	r0, [r7, #28]
 800ed42:	b928      	cbnz	r0, 800ed50 <__pow5mult+0x40>
 800ed44:	4b1d      	ldr	r3, [pc, #116]	@ (800edbc <__pow5mult+0xac>)
 800ed46:	481e      	ldr	r0, [pc, #120]	@ (800edc0 <__pow5mult+0xb0>)
 800ed48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed4c:	f000 fbea 	bl	800f524 <__assert_func>
 800ed50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed54:	6004      	str	r4, [r0, #0]
 800ed56:	60c4      	str	r4, [r0, #12]
 800ed58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed60:	b94c      	cbnz	r4, 800ed76 <__pow5mult+0x66>
 800ed62:	f240 2171 	movw	r1, #625	@ 0x271
 800ed66:	4638      	mov	r0, r7
 800ed68:	f7ff ff12 	bl	800eb90 <__i2b>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed72:	4604      	mov	r4, r0
 800ed74:	6003      	str	r3, [r0, #0]
 800ed76:	f04f 0900 	mov.w	r9, #0
 800ed7a:	07eb      	lsls	r3, r5, #31
 800ed7c:	d50a      	bpl.n	800ed94 <__pow5mult+0x84>
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4622      	mov	r2, r4
 800ed82:	4638      	mov	r0, r7
 800ed84:	f7ff ff1a 	bl	800ebbc <__multiply>
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4680      	mov	r8, r0
 800ed8c:	4638      	mov	r0, r7
 800ed8e:	f7ff fe4b 	bl	800ea28 <_Bfree>
 800ed92:	4646      	mov	r6, r8
 800ed94:	106d      	asrs	r5, r5, #1
 800ed96:	d00b      	beq.n	800edb0 <__pow5mult+0xa0>
 800ed98:	6820      	ldr	r0, [r4, #0]
 800ed9a:	b938      	cbnz	r0, 800edac <__pow5mult+0x9c>
 800ed9c:	4622      	mov	r2, r4
 800ed9e:	4621      	mov	r1, r4
 800eda0:	4638      	mov	r0, r7
 800eda2:	f7ff ff0b 	bl	800ebbc <__multiply>
 800eda6:	6020      	str	r0, [r4, #0]
 800eda8:	f8c0 9000 	str.w	r9, [r0]
 800edac:	4604      	mov	r4, r0
 800edae:	e7e4      	b.n	800ed7a <__pow5mult+0x6a>
 800edb0:	4630      	mov	r0, r6
 800edb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb6:	bf00      	nop
 800edb8:	080101fc 	.word	0x080101fc
 800edbc:	08010121 	.word	0x08010121
 800edc0:	080101a1 	.word	0x080101a1

0800edc4 <__lshift>:
 800edc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edc8:	460c      	mov	r4, r1
 800edca:	6849      	ldr	r1, [r1, #4]
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edd2:	68a3      	ldr	r3, [r4, #8]
 800edd4:	4607      	mov	r7, r0
 800edd6:	4691      	mov	r9, r2
 800edd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eddc:	f108 0601 	add.w	r6, r8, #1
 800ede0:	42b3      	cmp	r3, r6
 800ede2:	db0b      	blt.n	800edfc <__lshift+0x38>
 800ede4:	4638      	mov	r0, r7
 800ede6:	f7ff fddf 	bl	800e9a8 <_Balloc>
 800edea:	4605      	mov	r5, r0
 800edec:	b948      	cbnz	r0, 800ee02 <__lshift+0x3e>
 800edee:	4602      	mov	r2, r0
 800edf0:	4b28      	ldr	r3, [pc, #160]	@ (800ee94 <__lshift+0xd0>)
 800edf2:	4829      	ldr	r0, [pc, #164]	@ (800ee98 <__lshift+0xd4>)
 800edf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800edf8:	f000 fb94 	bl	800f524 <__assert_func>
 800edfc:	3101      	adds	r1, #1
 800edfe:	005b      	lsls	r3, r3, #1
 800ee00:	e7ee      	b.n	800ede0 <__lshift+0x1c>
 800ee02:	2300      	movs	r3, #0
 800ee04:	f100 0114 	add.w	r1, r0, #20
 800ee08:	f100 0210 	add.w	r2, r0, #16
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	4553      	cmp	r3, sl
 800ee10:	db33      	blt.n	800ee7a <__lshift+0xb6>
 800ee12:	6920      	ldr	r0, [r4, #16]
 800ee14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee18:	f104 0314 	add.w	r3, r4, #20
 800ee1c:	f019 091f 	ands.w	r9, r9, #31
 800ee20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee28:	d02b      	beq.n	800ee82 <__lshift+0xbe>
 800ee2a:	f1c9 0e20 	rsb	lr, r9, #32
 800ee2e:	468a      	mov	sl, r1
 800ee30:	2200      	movs	r2, #0
 800ee32:	6818      	ldr	r0, [r3, #0]
 800ee34:	fa00 f009 	lsl.w	r0, r0, r9
 800ee38:	4310      	orrs	r0, r2
 800ee3a:	f84a 0b04 	str.w	r0, [sl], #4
 800ee3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee42:	459c      	cmp	ip, r3
 800ee44:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee48:	d8f3      	bhi.n	800ee32 <__lshift+0x6e>
 800ee4a:	ebac 0304 	sub.w	r3, ip, r4
 800ee4e:	3b15      	subs	r3, #21
 800ee50:	f023 0303 	bic.w	r3, r3, #3
 800ee54:	3304      	adds	r3, #4
 800ee56:	f104 0015 	add.w	r0, r4, #21
 800ee5a:	4584      	cmp	ip, r0
 800ee5c:	bf38      	it	cc
 800ee5e:	2304      	movcc	r3, #4
 800ee60:	50ca      	str	r2, [r1, r3]
 800ee62:	b10a      	cbz	r2, 800ee68 <__lshift+0xa4>
 800ee64:	f108 0602 	add.w	r6, r8, #2
 800ee68:	3e01      	subs	r6, #1
 800ee6a:	4638      	mov	r0, r7
 800ee6c:	612e      	str	r6, [r5, #16]
 800ee6e:	4621      	mov	r1, r4
 800ee70:	f7ff fdda 	bl	800ea28 <_Bfree>
 800ee74:	4628      	mov	r0, r5
 800ee76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee7e:	3301      	adds	r3, #1
 800ee80:	e7c5      	b.n	800ee0e <__lshift+0x4a>
 800ee82:	3904      	subs	r1, #4
 800ee84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee88:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee8c:	459c      	cmp	ip, r3
 800ee8e:	d8f9      	bhi.n	800ee84 <__lshift+0xc0>
 800ee90:	e7ea      	b.n	800ee68 <__lshift+0xa4>
 800ee92:	bf00      	nop
 800ee94:	08010190 	.word	0x08010190
 800ee98:	080101a1 	.word	0x080101a1

0800ee9c <__mcmp>:
 800ee9c:	690a      	ldr	r2, [r1, #16]
 800ee9e:	4603      	mov	r3, r0
 800eea0:	6900      	ldr	r0, [r0, #16]
 800eea2:	1a80      	subs	r0, r0, r2
 800eea4:	b530      	push	{r4, r5, lr}
 800eea6:	d10e      	bne.n	800eec6 <__mcmp+0x2a>
 800eea8:	3314      	adds	r3, #20
 800eeaa:	3114      	adds	r1, #20
 800eeac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eeb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eeb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eeb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eebc:	4295      	cmp	r5, r2
 800eebe:	d003      	beq.n	800eec8 <__mcmp+0x2c>
 800eec0:	d205      	bcs.n	800eece <__mcmp+0x32>
 800eec2:	f04f 30ff 	mov.w	r0, #4294967295
 800eec6:	bd30      	pop	{r4, r5, pc}
 800eec8:	42a3      	cmp	r3, r4
 800eeca:	d3f3      	bcc.n	800eeb4 <__mcmp+0x18>
 800eecc:	e7fb      	b.n	800eec6 <__mcmp+0x2a>
 800eece:	2001      	movs	r0, #1
 800eed0:	e7f9      	b.n	800eec6 <__mcmp+0x2a>
	...

0800eed4 <__mdiff>:
 800eed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed8:	4689      	mov	r9, r1
 800eeda:	4606      	mov	r6, r0
 800eedc:	4611      	mov	r1, r2
 800eede:	4648      	mov	r0, r9
 800eee0:	4614      	mov	r4, r2
 800eee2:	f7ff ffdb 	bl	800ee9c <__mcmp>
 800eee6:	1e05      	subs	r5, r0, #0
 800eee8:	d112      	bne.n	800ef10 <__mdiff+0x3c>
 800eeea:	4629      	mov	r1, r5
 800eeec:	4630      	mov	r0, r6
 800eeee:	f7ff fd5b 	bl	800e9a8 <_Balloc>
 800eef2:	4602      	mov	r2, r0
 800eef4:	b928      	cbnz	r0, 800ef02 <__mdiff+0x2e>
 800eef6:	4b3f      	ldr	r3, [pc, #252]	@ (800eff4 <__mdiff+0x120>)
 800eef8:	f240 2137 	movw	r1, #567	@ 0x237
 800eefc:	483e      	ldr	r0, [pc, #248]	@ (800eff8 <__mdiff+0x124>)
 800eefe:	f000 fb11 	bl	800f524 <__assert_func>
 800ef02:	2301      	movs	r3, #1
 800ef04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef08:	4610      	mov	r0, r2
 800ef0a:	b003      	add	sp, #12
 800ef0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef10:	bfbc      	itt	lt
 800ef12:	464b      	movlt	r3, r9
 800ef14:	46a1      	movlt	r9, r4
 800ef16:	4630      	mov	r0, r6
 800ef18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ef1c:	bfba      	itte	lt
 800ef1e:	461c      	movlt	r4, r3
 800ef20:	2501      	movlt	r5, #1
 800ef22:	2500      	movge	r5, #0
 800ef24:	f7ff fd40 	bl	800e9a8 <_Balloc>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	b918      	cbnz	r0, 800ef34 <__mdiff+0x60>
 800ef2c:	4b31      	ldr	r3, [pc, #196]	@ (800eff4 <__mdiff+0x120>)
 800ef2e:	f240 2145 	movw	r1, #581	@ 0x245
 800ef32:	e7e3      	b.n	800eefc <__mdiff+0x28>
 800ef34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef38:	6926      	ldr	r6, [r4, #16]
 800ef3a:	60c5      	str	r5, [r0, #12]
 800ef3c:	f109 0310 	add.w	r3, r9, #16
 800ef40:	f109 0514 	add.w	r5, r9, #20
 800ef44:	f104 0e14 	add.w	lr, r4, #20
 800ef48:	f100 0b14 	add.w	fp, r0, #20
 800ef4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef54:	9301      	str	r3, [sp, #4]
 800ef56:	46d9      	mov	r9, fp
 800ef58:	f04f 0c00 	mov.w	ip, #0
 800ef5c:	9b01      	ldr	r3, [sp, #4]
 800ef5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef66:	9301      	str	r3, [sp, #4]
 800ef68:	fa1f f38a 	uxth.w	r3, sl
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	b283      	uxth	r3, r0
 800ef70:	1acb      	subs	r3, r1, r3
 800ef72:	0c00      	lsrs	r0, r0, #16
 800ef74:	4463      	add	r3, ip
 800ef76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef84:	4576      	cmp	r6, lr
 800ef86:	f849 3b04 	str.w	r3, [r9], #4
 800ef8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef8e:	d8e5      	bhi.n	800ef5c <__mdiff+0x88>
 800ef90:	1b33      	subs	r3, r6, r4
 800ef92:	3b15      	subs	r3, #21
 800ef94:	f023 0303 	bic.w	r3, r3, #3
 800ef98:	3415      	adds	r4, #21
 800ef9a:	3304      	adds	r3, #4
 800ef9c:	42a6      	cmp	r6, r4
 800ef9e:	bf38      	it	cc
 800efa0:	2304      	movcc	r3, #4
 800efa2:	441d      	add	r5, r3
 800efa4:	445b      	add	r3, fp
 800efa6:	461e      	mov	r6, r3
 800efa8:	462c      	mov	r4, r5
 800efaa:	4544      	cmp	r4, r8
 800efac:	d30e      	bcc.n	800efcc <__mdiff+0xf8>
 800efae:	f108 0103 	add.w	r1, r8, #3
 800efb2:	1b49      	subs	r1, r1, r5
 800efb4:	f021 0103 	bic.w	r1, r1, #3
 800efb8:	3d03      	subs	r5, #3
 800efba:	45a8      	cmp	r8, r5
 800efbc:	bf38      	it	cc
 800efbe:	2100      	movcc	r1, #0
 800efc0:	440b      	add	r3, r1
 800efc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efc6:	b191      	cbz	r1, 800efee <__mdiff+0x11a>
 800efc8:	6117      	str	r7, [r2, #16]
 800efca:	e79d      	b.n	800ef08 <__mdiff+0x34>
 800efcc:	f854 1b04 	ldr.w	r1, [r4], #4
 800efd0:	46e6      	mov	lr, ip
 800efd2:	0c08      	lsrs	r0, r1, #16
 800efd4:	fa1c fc81 	uxtah	ip, ip, r1
 800efd8:	4471      	add	r1, lr
 800efda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efde:	b289      	uxth	r1, r1
 800efe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efe4:	f846 1b04 	str.w	r1, [r6], #4
 800efe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efec:	e7dd      	b.n	800efaa <__mdiff+0xd6>
 800efee:	3f01      	subs	r7, #1
 800eff0:	e7e7      	b.n	800efc2 <__mdiff+0xee>
 800eff2:	bf00      	nop
 800eff4:	08010190 	.word	0x08010190
 800eff8:	080101a1 	.word	0x080101a1

0800effc <__d2b>:
 800effc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f000:	460f      	mov	r7, r1
 800f002:	2101      	movs	r1, #1
 800f004:	ec59 8b10 	vmov	r8, r9, d0
 800f008:	4616      	mov	r6, r2
 800f00a:	f7ff fccd 	bl	800e9a8 <_Balloc>
 800f00e:	4604      	mov	r4, r0
 800f010:	b930      	cbnz	r0, 800f020 <__d2b+0x24>
 800f012:	4602      	mov	r2, r0
 800f014:	4b23      	ldr	r3, [pc, #140]	@ (800f0a4 <__d2b+0xa8>)
 800f016:	4824      	ldr	r0, [pc, #144]	@ (800f0a8 <__d2b+0xac>)
 800f018:	f240 310f 	movw	r1, #783	@ 0x30f
 800f01c:	f000 fa82 	bl	800f524 <__assert_func>
 800f020:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f028:	b10d      	cbz	r5, 800f02e <__d2b+0x32>
 800f02a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	f1b8 0300 	subs.w	r3, r8, #0
 800f034:	d023      	beq.n	800f07e <__d2b+0x82>
 800f036:	4668      	mov	r0, sp
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	f7ff fd7c 	bl	800eb36 <__lo0bits>
 800f03e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f042:	b1d0      	cbz	r0, 800f07a <__d2b+0x7e>
 800f044:	f1c0 0320 	rsb	r3, r0, #32
 800f048:	fa02 f303 	lsl.w	r3, r2, r3
 800f04c:	430b      	orrs	r3, r1
 800f04e:	40c2      	lsrs	r2, r0
 800f050:	6163      	str	r3, [r4, #20]
 800f052:	9201      	str	r2, [sp, #4]
 800f054:	9b01      	ldr	r3, [sp, #4]
 800f056:	61a3      	str	r3, [r4, #24]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	bf0c      	ite	eq
 800f05c:	2201      	moveq	r2, #1
 800f05e:	2202      	movne	r2, #2
 800f060:	6122      	str	r2, [r4, #16]
 800f062:	b1a5      	cbz	r5, 800f08e <__d2b+0x92>
 800f064:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f068:	4405      	add	r5, r0
 800f06a:	603d      	str	r5, [r7, #0]
 800f06c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f070:	6030      	str	r0, [r6, #0]
 800f072:	4620      	mov	r0, r4
 800f074:	b003      	add	sp, #12
 800f076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f07a:	6161      	str	r1, [r4, #20]
 800f07c:	e7ea      	b.n	800f054 <__d2b+0x58>
 800f07e:	a801      	add	r0, sp, #4
 800f080:	f7ff fd59 	bl	800eb36 <__lo0bits>
 800f084:	9b01      	ldr	r3, [sp, #4]
 800f086:	6163      	str	r3, [r4, #20]
 800f088:	3020      	adds	r0, #32
 800f08a:	2201      	movs	r2, #1
 800f08c:	e7e8      	b.n	800f060 <__d2b+0x64>
 800f08e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f092:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f096:	6038      	str	r0, [r7, #0]
 800f098:	6918      	ldr	r0, [r3, #16]
 800f09a:	f7ff fd2d 	bl	800eaf8 <__hi0bits>
 800f09e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0a2:	e7e5      	b.n	800f070 <__d2b+0x74>
 800f0a4:	08010190 	.word	0x08010190
 800f0a8:	080101a1 	.word	0x080101a1

0800f0ac <__ssputs_r>:
 800f0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0b0:	688e      	ldr	r6, [r1, #8]
 800f0b2:	461f      	mov	r7, r3
 800f0b4:	42be      	cmp	r6, r7
 800f0b6:	680b      	ldr	r3, [r1, #0]
 800f0b8:	4682      	mov	sl, r0
 800f0ba:	460c      	mov	r4, r1
 800f0bc:	4690      	mov	r8, r2
 800f0be:	d82d      	bhi.n	800f11c <__ssputs_r+0x70>
 800f0c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f0c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f0c8:	d026      	beq.n	800f118 <__ssputs_r+0x6c>
 800f0ca:	6965      	ldr	r5, [r4, #20]
 800f0cc:	6909      	ldr	r1, [r1, #16]
 800f0ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0d2:	eba3 0901 	sub.w	r9, r3, r1
 800f0d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0da:	1c7b      	adds	r3, r7, #1
 800f0dc:	444b      	add	r3, r9
 800f0de:	106d      	asrs	r5, r5, #1
 800f0e0:	429d      	cmp	r5, r3
 800f0e2:	bf38      	it	cc
 800f0e4:	461d      	movcc	r5, r3
 800f0e6:	0553      	lsls	r3, r2, #21
 800f0e8:	d527      	bpl.n	800f13a <__ssputs_r+0x8e>
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7ff fbd0 	bl	800e890 <_malloc_r>
 800f0f0:	4606      	mov	r6, r0
 800f0f2:	b360      	cbz	r0, 800f14e <__ssputs_r+0xa2>
 800f0f4:	6921      	ldr	r1, [r4, #16]
 800f0f6:	464a      	mov	r2, r9
 800f0f8:	f000 fa06 	bl	800f508 <memcpy>
 800f0fc:	89a3      	ldrh	r3, [r4, #12]
 800f0fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f106:	81a3      	strh	r3, [r4, #12]
 800f108:	6126      	str	r6, [r4, #16]
 800f10a:	6165      	str	r5, [r4, #20]
 800f10c:	444e      	add	r6, r9
 800f10e:	eba5 0509 	sub.w	r5, r5, r9
 800f112:	6026      	str	r6, [r4, #0]
 800f114:	60a5      	str	r5, [r4, #8]
 800f116:	463e      	mov	r6, r7
 800f118:	42be      	cmp	r6, r7
 800f11a:	d900      	bls.n	800f11e <__ssputs_r+0x72>
 800f11c:	463e      	mov	r6, r7
 800f11e:	6820      	ldr	r0, [r4, #0]
 800f120:	4632      	mov	r2, r6
 800f122:	4641      	mov	r1, r8
 800f124:	f000 f9c6 	bl	800f4b4 <memmove>
 800f128:	68a3      	ldr	r3, [r4, #8]
 800f12a:	1b9b      	subs	r3, r3, r6
 800f12c:	60a3      	str	r3, [r4, #8]
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	4433      	add	r3, r6
 800f132:	6023      	str	r3, [r4, #0]
 800f134:	2000      	movs	r0, #0
 800f136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f13a:	462a      	mov	r2, r5
 800f13c:	f000 fa36 	bl	800f5ac <_realloc_r>
 800f140:	4606      	mov	r6, r0
 800f142:	2800      	cmp	r0, #0
 800f144:	d1e0      	bne.n	800f108 <__ssputs_r+0x5c>
 800f146:	6921      	ldr	r1, [r4, #16]
 800f148:	4650      	mov	r0, sl
 800f14a:	f7ff fb2d 	bl	800e7a8 <_free_r>
 800f14e:	230c      	movs	r3, #12
 800f150:	f8ca 3000 	str.w	r3, [sl]
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	f04f 30ff 	mov.w	r0, #4294967295
 800f160:	e7e9      	b.n	800f136 <__ssputs_r+0x8a>
	...

0800f164 <_svfiprintf_r>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	4698      	mov	r8, r3
 800f16a:	898b      	ldrh	r3, [r1, #12]
 800f16c:	061b      	lsls	r3, r3, #24
 800f16e:	b09d      	sub	sp, #116	@ 0x74
 800f170:	4607      	mov	r7, r0
 800f172:	460d      	mov	r5, r1
 800f174:	4614      	mov	r4, r2
 800f176:	d510      	bpl.n	800f19a <_svfiprintf_r+0x36>
 800f178:	690b      	ldr	r3, [r1, #16]
 800f17a:	b973      	cbnz	r3, 800f19a <_svfiprintf_r+0x36>
 800f17c:	2140      	movs	r1, #64	@ 0x40
 800f17e:	f7ff fb87 	bl	800e890 <_malloc_r>
 800f182:	6028      	str	r0, [r5, #0]
 800f184:	6128      	str	r0, [r5, #16]
 800f186:	b930      	cbnz	r0, 800f196 <_svfiprintf_r+0x32>
 800f188:	230c      	movs	r3, #12
 800f18a:	603b      	str	r3, [r7, #0]
 800f18c:	f04f 30ff 	mov.w	r0, #4294967295
 800f190:	b01d      	add	sp, #116	@ 0x74
 800f192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f196:	2340      	movs	r3, #64	@ 0x40
 800f198:	616b      	str	r3, [r5, #20]
 800f19a:	2300      	movs	r3, #0
 800f19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f19e:	2320      	movs	r3, #32
 800f1a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1a8:	2330      	movs	r3, #48	@ 0x30
 800f1aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f348 <_svfiprintf_r+0x1e4>
 800f1ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1b2:	f04f 0901 	mov.w	r9, #1
 800f1b6:	4623      	mov	r3, r4
 800f1b8:	469a      	mov	sl, r3
 800f1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1be:	b10a      	cbz	r2, 800f1c4 <_svfiprintf_r+0x60>
 800f1c0:	2a25      	cmp	r2, #37	@ 0x25
 800f1c2:	d1f9      	bne.n	800f1b8 <_svfiprintf_r+0x54>
 800f1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f1c8:	d00b      	beq.n	800f1e2 <_svfiprintf_r+0x7e>
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	4622      	mov	r2, r4
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	4638      	mov	r0, r7
 800f1d2:	f7ff ff6b 	bl	800f0ac <__ssputs_r>
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	f000 80a7 	beq.w	800f32a <_svfiprintf_r+0x1c6>
 800f1dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1de:	445a      	add	r2, fp
 800f1e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f000 809f 	beq.w	800f32a <_svfiprintf_r+0x1c6>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1f6:	f10a 0a01 	add.w	sl, sl, #1
 800f1fa:	9304      	str	r3, [sp, #16]
 800f1fc:	9307      	str	r3, [sp, #28]
 800f1fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f202:	931a      	str	r3, [sp, #104]	@ 0x68
 800f204:	4654      	mov	r4, sl
 800f206:	2205      	movs	r2, #5
 800f208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f20c:	484e      	ldr	r0, [pc, #312]	@ (800f348 <_svfiprintf_r+0x1e4>)
 800f20e:	f7f0 ffdf 	bl	80001d0 <memchr>
 800f212:	9a04      	ldr	r2, [sp, #16]
 800f214:	b9d8      	cbnz	r0, 800f24e <_svfiprintf_r+0xea>
 800f216:	06d0      	lsls	r0, r2, #27
 800f218:	bf44      	itt	mi
 800f21a:	2320      	movmi	r3, #32
 800f21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f220:	0711      	lsls	r1, r2, #28
 800f222:	bf44      	itt	mi
 800f224:	232b      	movmi	r3, #43	@ 0x2b
 800f226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f22a:	f89a 3000 	ldrb.w	r3, [sl]
 800f22e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f230:	d015      	beq.n	800f25e <_svfiprintf_r+0xfa>
 800f232:	9a07      	ldr	r2, [sp, #28]
 800f234:	4654      	mov	r4, sl
 800f236:	2000      	movs	r0, #0
 800f238:	f04f 0c0a 	mov.w	ip, #10
 800f23c:	4621      	mov	r1, r4
 800f23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f242:	3b30      	subs	r3, #48	@ 0x30
 800f244:	2b09      	cmp	r3, #9
 800f246:	d94b      	bls.n	800f2e0 <_svfiprintf_r+0x17c>
 800f248:	b1b0      	cbz	r0, 800f278 <_svfiprintf_r+0x114>
 800f24a:	9207      	str	r2, [sp, #28]
 800f24c:	e014      	b.n	800f278 <_svfiprintf_r+0x114>
 800f24e:	eba0 0308 	sub.w	r3, r0, r8
 800f252:	fa09 f303 	lsl.w	r3, r9, r3
 800f256:	4313      	orrs	r3, r2
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	46a2      	mov	sl, r4
 800f25c:	e7d2      	b.n	800f204 <_svfiprintf_r+0xa0>
 800f25e:	9b03      	ldr	r3, [sp, #12]
 800f260:	1d19      	adds	r1, r3, #4
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	9103      	str	r1, [sp, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	bfbb      	ittet	lt
 800f26a:	425b      	neglt	r3, r3
 800f26c:	f042 0202 	orrlt.w	r2, r2, #2
 800f270:	9307      	strge	r3, [sp, #28]
 800f272:	9307      	strlt	r3, [sp, #28]
 800f274:	bfb8      	it	lt
 800f276:	9204      	strlt	r2, [sp, #16]
 800f278:	7823      	ldrb	r3, [r4, #0]
 800f27a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f27c:	d10a      	bne.n	800f294 <_svfiprintf_r+0x130>
 800f27e:	7863      	ldrb	r3, [r4, #1]
 800f280:	2b2a      	cmp	r3, #42	@ 0x2a
 800f282:	d132      	bne.n	800f2ea <_svfiprintf_r+0x186>
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	1d1a      	adds	r2, r3, #4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	9203      	str	r2, [sp, #12]
 800f28c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f290:	3402      	adds	r4, #2
 800f292:	9305      	str	r3, [sp, #20]
 800f294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f358 <_svfiprintf_r+0x1f4>
 800f298:	7821      	ldrb	r1, [r4, #0]
 800f29a:	2203      	movs	r2, #3
 800f29c:	4650      	mov	r0, sl
 800f29e:	f7f0 ff97 	bl	80001d0 <memchr>
 800f2a2:	b138      	cbz	r0, 800f2b4 <_svfiprintf_r+0x150>
 800f2a4:	9b04      	ldr	r3, [sp, #16]
 800f2a6:	eba0 000a 	sub.w	r0, r0, sl
 800f2aa:	2240      	movs	r2, #64	@ 0x40
 800f2ac:	4082      	lsls	r2, r0
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	3401      	adds	r4, #1
 800f2b2:	9304      	str	r3, [sp, #16]
 800f2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b8:	4824      	ldr	r0, [pc, #144]	@ (800f34c <_svfiprintf_r+0x1e8>)
 800f2ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2be:	2206      	movs	r2, #6
 800f2c0:	f7f0 ff86 	bl	80001d0 <memchr>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d036      	beq.n	800f336 <_svfiprintf_r+0x1d2>
 800f2c8:	4b21      	ldr	r3, [pc, #132]	@ (800f350 <_svfiprintf_r+0x1ec>)
 800f2ca:	bb1b      	cbnz	r3, 800f314 <_svfiprintf_r+0x1b0>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	3307      	adds	r3, #7
 800f2d0:	f023 0307 	bic.w	r3, r3, #7
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	9303      	str	r3, [sp, #12]
 800f2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2da:	4433      	add	r3, r6
 800f2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2de:	e76a      	b.n	800f1b6 <_svfiprintf_r+0x52>
 800f2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	2001      	movs	r0, #1
 800f2e8:	e7a8      	b.n	800f23c <_svfiprintf_r+0xd8>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	3401      	adds	r4, #1
 800f2ee:	9305      	str	r3, [sp, #20]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	f04f 0c0a 	mov.w	ip, #10
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2fc:	3a30      	subs	r2, #48	@ 0x30
 800f2fe:	2a09      	cmp	r2, #9
 800f300:	d903      	bls.n	800f30a <_svfiprintf_r+0x1a6>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0c6      	beq.n	800f294 <_svfiprintf_r+0x130>
 800f306:	9105      	str	r1, [sp, #20]
 800f308:	e7c4      	b.n	800f294 <_svfiprintf_r+0x130>
 800f30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f30e:	4604      	mov	r4, r0
 800f310:	2301      	movs	r3, #1
 800f312:	e7f0      	b.n	800f2f6 <_svfiprintf_r+0x192>
 800f314:	ab03      	add	r3, sp, #12
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	462a      	mov	r2, r5
 800f31a:	4b0e      	ldr	r3, [pc, #56]	@ (800f354 <_svfiprintf_r+0x1f0>)
 800f31c:	a904      	add	r1, sp, #16
 800f31e:	4638      	mov	r0, r7
 800f320:	f7fd fe84 	bl	800d02c <_printf_float>
 800f324:	1c42      	adds	r2, r0, #1
 800f326:	4606      	mov	r6, r0
 800f328:	d1d6      	bne.n	800f2d8 <_svfiprintf_r+0x174>
 800f32a:	89ab      	ldrh	r3, [r5, #12]
 800f32c:	065b      	lsls	r3, r3, #25
 800f32e:	f53f af2d 	bmi.w	800f18c <_svfiprintf_r+0x28>
 800f332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f334:	e72c      	b.n	800f190 <_svfiprintf_r+0x2c>
 800f336:	ab03      	add	r3, sp, #12
 800f338:	9300      	str	r3, [sp, #0]
 800f33a:	462a      	mov	r2, r5
 800f33c:	4b05      	ldr	r3, [pc, #20]	@ (800f354 <_svfiprintf_r+0x1f0>)
 800f33e:	a904      	add	r1, sp, #16
 800f340:	4638      	mov	r0, r7
 800f342:	f7fe f90b 	bl	800d55c <_printf_i>
 800f346:	e7ed      	b.n	800f324 <_svfiprintf_r+0x1c0>
 800f348:	080102f8 	.word	0x080102f8
 800f34c:	08010302 	.word	0x08010302
 800f350:	0800d02d 	.word	0x0800d02d
 800f354:	0800f0ad 	.word	0x0800f0ad
 800f358:	080102fe 	.word	0x080102fe

0800f35c <__sflush_r>:
 800f35c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f364:	0716      	lsls	r6, r2, #28
 800f366:	4605      	mov	r5, r0
 800f368:	460c      	mov	r4, r1
 800f36a:	d454      	bmi.n	800f416 <__sflush_r+0xba>
 800f36c:	684b      	ldr	r3, [r1, #4]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	dc02      	bgt.n	800f378 <__sflush_r+0x1c>
 800f372:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f374:	2b00      	cmp	r3, #0
 800f376:	dd48      	ble.n	800f40a <__sflush_r+0xae>
 800f378:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f37a:	2e00      	cmp	r6, #0
 800f37c:	d045      	beq.n	800f40a <__sflush_r+0xae>
 800f37e:	2300      	movs	r3, #0
 800f380:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f384:	682f      	ldr	r7, [r5, #0]
 800f386:	6a21      	ldr	r1, [r4, #32]
 800f388:	602b      	str	r3, [r5, #0]
 800f38a:	d030      	beq.n	800f3ee <__sflush_r+0x92>
 800f38c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f38e:	89a3      	ldrh	r3, [r4, #12]
 800f390:	0759      	lsls	r1, r3, #29
 800f392:	d505      	bpl.n	800f3a0 <__sflush_r+0x44>
 800f394:	6863      	ldr	r3, [r4, #4]
 800f396:	1ad2      	subs	r2, r2, r3
 800f398:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f39a:	b10b      	cbz	r3, 800f3a0 <__sflush_r+0x44>
 800f39c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f39e:	1ad2      	subs	r2, r2, r3
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3a4:	6a21      	ldr	r1, [r4, #32]
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	47b0      	blx	r6
 800f3aa:	1c43      	adds	r3, r0, #1
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	d106      	bne.n	800f3be <__sflush_r+0x62>
 800f3b0:	6829      	ldr	r1, [r5, #0]
 800f3b2:	291d      	cmp	r1, #29
 800f3b4:	d82b      	bhi.n	800f40e <__sflush_r+0xb2>
 800f3b6:	4a2a      	ldr	r2, [pc, #168]	@ (800f460 <__sflush_r+0x104>)
 800f3b8:	410a      	asrs	r2, r1
 800f3ba:	07d6      	lsls	r6, r2, #31
 800f3bc:	d427      	bmi.n	800f40e <__sflush_r+0xb2>
 800f3be:	2200      	movs	r2, #0
 800f3c0:	6062      	str	r2, [r4, #4]
 800f3c2:	04d9      	lsls	r1, r3, #19
 800f3c4:	6922      	ldr	r2, [r4, #16]
 800f3c6:	6022      	str	r2, [r4, #0]
 800f3c8:	d504      	bpl.n	800f3d4 <__sflush_r+0x78>
 800f3ca:	1c42      	adds	r2, r0, #1
 800f3cc:	d101      	bne.n	800f3d2 <__sflush_r+0x76>
 800f3ce:	682b      	ldr	r3, [r5, #0]
 800f3d0:	b903      	cbnz	r3, 800f3d4 <__sflush_r+0x78>
 800f3d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3d6:	602f      	str	r7, [r5, #0]
 800f3d8:	b1b9      	cbz	r1, 800f40a <__sflush_r+0xae>
 800f3da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3de:	4299      	cmp	r1, r3
 800f3e0:	d002      	beq.n	800f3e8 <__sflush_r+0x8c>
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	f7ff f9e0 	bl	800e7a8 <_free_r>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3ec:	e00d      	b.n	800f40a <__sflush_r+0xae>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	47b0      	blx	r6
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	1c50      	adds	r0, r2, #1
 800f3f8:	d1c9      	bne.n	800f38e <__sflush_r+0x32>
 800f3fa:	682b      	ldr	r3, [r5, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d0c6      	beq.n	800f38e <__sflush_r+0x32>
 800f400:	2b1d      	cmp	r3, #29
 800f402:	d001      	beq.n	800f408 <__sflush_r+0xac>
 800f404:	2b16      	cmp	r3, #22
 800f406:	d11e      	bne.n	800f446 <__sflush_r+0xea>
 800f408:	602f      	str	r7, [r5, #0]
 800f40a:	2000      	movs	r0, #0
 800f40c:	e022      	b.n	800f454 <__sflush_r+0xf8>
 800f40e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f412:	b21b      	sxth	r3, r3
 800f414:	e01b      	b.n	800f44e <__sflush_r+0xf2>
 800f416:	690f      	ldr	r7, [r1, #16]
 800f418:	2f00      	cmp	r7, #0
 800f41a:	d0f6      	beq.n	800f40a <__sflush_r+0xae>
 800f41c:	0793      	lsls	r3, r2, #30
 800f41e:	680e      	ldr	r6, [r1, #0]
 800f420:	bf08      	it	eq
 800f422:	694b      	ldreq	r3, [r1, #20]
 800f424:	600f      	str	r7, [r1, #0]
 800f426:	bf18      	it	ne
 800f428:	2300      	movne	r3, #0
 800f42a:	eba6 0807 	sub.w	r8, r6, r7
 800f42e:	608b      	str	r3, [r1, #8]
 800f430:	f1b8 0f00 	cmp.w	r8, #0
 800f434:	dde9      	ble.n	800f40a <__sflush_r+0xae>
 800f436:	6a21      	ldr	r1, [r4, #32]
 800f438:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f43a:	4643      	mov	r3, r8
 800f43c:	463a      	mov	r2, r7
 800f43e:	4628      	mov	r0, r5
 800f440:	47b0      	blx	r6
 800f442:	2800      	cmp	r0, #0
 800f444:	dc08      	bgt.n	800f458 <__sflush_r+0xfc>
 800f446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f44a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f44e:	81a3      	strh	r3, [r4, #12]
 800f450:	f04f 30ff 	mov.w	r0, #4294967295
 800f454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f458:	4407      	add	r7, r0
 800f45a:	eba8 0800 	sub.w	r8, r8, r0
 800f45e:	e7e7      	b.n	800f430 <__sflush_r+0xd4>
 800f460:	dfbffffe 	.word	0xdfbffffe

0800f464 <_fflush_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	690b      	ldr	r3, [r1, #16]
 800f468:	4605      	mov	r5, r0
 800f46a:	460c      	mov	r4, r1
 800f46c:	b913      	cbnz	r3, 800f474 <_fflush_r+0x10>
 800f46e:	2500      	movs	r5, #0
 800f470:	4628      	mov	r0, r5
 800f472:	bd38      	pop	{r3, r4, r5, pc}
 800f474:	b118      	cbz	r0, 800f47e <_fflush_r+0x1a>
 800f476:	6a03      	ldr	r3, [r0, #32]
 800f478:	b90b      	cbnz	r3, 800f47e <_fflush_r+0x1a>
 800f47a:	f7fe fa1b 	bl	800d8b4 <__sinit>
 800f47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d0f3      	beq.n	800f46e <_fflush_r+0xa>
 800f486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f488:	07d0      	lsls	r0, r2, #31
 800f48a:	d404      	bmi.n	800f496 <_fflush_r+0x32>
 800f48c:	0599      	lsls	r1, r3, #22
 800f48e:	d402      	bmi.n	800f496 <_fflush_r+0x32>
 800f490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f492:	f7fe fb3a 	bl	800db0a <__retarget_lock_acquire_recursive>
 800f496:	4628      	mov	r0, r5
 800f498:	4621      	mov	r1, r4
 800f49a:	f7ff ff5f 	bl	800f35c <__sflush_r>
 800f49e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4a0:	07da      	lsls	r2, r3, #31
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	d4e4      	bmi.n	800f470 <_fflush_r+0xc>
 800f4a6:	89a3      	ldrh	r3, [r4, #12]
 800f4a8:	059b      	lsls	r3, r3, #22
 800f4aa:	d4e1      	bmi.n	800f470 <_fflush_r+0xc>
 800f4ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4ae:	f7fe fb2d 	bl	800db0c <__retarget_lock_release_recursive>
 800f4b2:	e7dd      	b.n	800f470 <_fflush_r+0xc>

0800f4b4 <memmove>:
 800f4b4:	4288      	cmp	r0, r1
 800f4b6:	b510      	push	{r4, lr}
 800f4b8:	eb01 0402 	add.w	r4, r1, r2
 800f4bc:	d902      	bls.n	800f4c4 <memmove+0x10>
 800f4be:	4284      	cmp	r4, r0
 800f4c0:	4623      	mov	r3, r4
 800f4c2:	d807      	bhi.n	800f4d4 <memmove+0x20>
 800f4c4:	1e43      	subs	r3, r0, #1
 800f4c6:	42a1      	cmp	r1, r4
 800f4c8:	d008      	beq.n	800f4dc <memmove+0x28>
 800f4ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4d2:	e7f8      	b.n	800f4c6 <memmove+0x12>
 800f4d4:	4402      	add	r2, r0
 800f4d6:	4601      	mov	r1, r0
 800f4d8:	428a      	cmp	r2, r1
 800f4da:	d100      	bne.n	800f4de <memmove+0x2a>
 800f4dc:	bd10      	pop	{r4, pc}
 800f4de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4e6:	e7f7      	b.n	800f4d8 <memmove+0x24>

0800f4e8 <_sbrk_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4d06      	ldr	r5, [pc, #24]	@ (800f504 <_sbrk_r+0x1c>)
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	f7f3 ffa6 	bl	8003444 <_sbrk>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_sbrk_r+0x1a>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_sbrk_r+0x1a>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	200022c0 	.word	0x200022c0

0800f508 <memcpy>:
 800f508:	440a      	add	r2, r1
 800f50a:	4291      	cmp	r1, r2
 800f50c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f510:	d100      	bne.n	800f514 <memcpy+0xc>
 800f512:	4770      	bx	lr
 800f514:	b510      	push	{r4, lr}
 800f516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f51a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f51e:	4291      	cmp	r1, r2
 800f520:	d1f9      	bne.n	800f516 <memcpy+0xe>
 800f522:	bd10      	pop	{r4, pc}

0800f524 <__assert_func>:
 800f524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f526:	4614      	mov	r4, r2
 800f528:	461a      	mov	r2, r3
 800f52a:	4b09      	ldr	r3, [pc, #36]	@ (800f550 <__assert_func+0x2c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4605      	mov	r5, r0
 800f530:	68d8      	ldr	r0, [r3, #12]
 800f532:	b954      	cbnz	r4, 800f54a <__assert_func+0x26>
 800f534:	4b07      	ldr	r3, [pc, #28]	@ (800f554 <__assert_func+0x30>)
 800f536:	461c      	mov	r4, r3
 800f538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f53c:	9100      	str	r1, [sp, #0]
 800f53e:	462b      	mov	r3, r5
 800f540:	4905      	ldr	r1, [pc, #20]	@ (800f558 <__assert_func+0x34>)
 800f542:	f000 f86f 	bl	800f624 <fiprintf>
 800f546:	f000 f87f 	bl	800f648 <abort>
 800f54a:	4b04      	ldr	r3, [pc, #16]	@ (800f55c <__assert_func+0x38>)
 800f54c:	e7f4      	b.n	800f538 <__assert_func+0x14>
 800f54e:	bf00      	nop
 800f550:	20000120 	.word	0x20000120
 800f554:	0801034e 	.word	0x0801034e
 800f558:	08010320 	.word	0x08010320
 800f55c:	08010313 	.word	0x08010313

0800f560 <_calloc_r>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	fba1 5402 	umull	r5, r4, r1, r2
 800f566:	b93c      	cbnz	r4, 800f578 <_calloc_r+0x18>
 800f568:	4629      	mov	r1, r5
 800f56a:	f7ff f991 	bl	800e890 <_malloc_r>
 800f56e:	4606      	mov	r6, r0
 800f570:	b928      	cbnz	r0, 800f57e <_calloc_r+0x1e>
 800f572:	2600      	movs	r6, #0
 800f574:	4630      	mov	r0, r6
 800f576:	bd70      	pop	{r4, r5, r6, pc}
 800f578:	220c      	movs	r2, #12
 800f57a:	6002      	str	r2, [r0, #0]
 800f57c:	e7f9      	b.n	800f572 <_calloc_r+0x12>
 800f57e:	462a      	mov	r2, r5
 800f580:	4621      	mov	r1, r4
 800f582:	f7fe fa44 	bl	800da0e <memset>
 800f586:	e7f5      	b.n	800f574 <_calloc_r+0x14>

0800f588 <__ascii_mbtowc>:
 800f588:	b082      	sub	sp, #8
 800f58a:	b901      	cbnz	r1, 800f58e <__ascii_mbtowc+0x6>
 800f58c:	a901      	add	r1, sp, #4
 800f58e:	b142      	cbz	r2, 800f5a2 <__ascii_mbtowc+0x1a>
 800f590:	b14b      	cbz	r3, 800f5a6 <__ascii_mbtowc+0x1e>
 800f592:	7813      	ldrb	r3, [r2, #0]
 800f594:	600b      	str	r3, [r1, #0]
 800f596:	7812      	ldrb	r2, [r2, #0]
 800f598:	1e10      	subs	r0, r2, #0
 800f59a:	bf18      	it	ne
 800f59c:	2001      	movne	r0, #1
 800f59e:	b002      	add	sp, #8
 800f5a0:	4770      	bx	lr
 800f5a2:	4610      	mov	r0, r2
 800f5a4:	e7fb      	b.n	800f59e <__ascii_mbtowc+0x16>
 800f5a6:	f06f 0001 	mvn.w	r0, #1
 800f5aa:	e7f8      	b.n	800f59e <__ascii_mbtowc+0x16>

0800f5ac <_realloc_r>:
 800f5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b0:	4680      	mov	r8, r0
 800f5b2:	4615      	mov	r5, r2
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	b921      	cbnz	r1, 800f5c2 <_realloc_r+0x16>
 800f5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5bc:	4611      	mov	r1, r2
 800f5be:	f7ff b967 	b.w	800e890 <_malloc_r>
 800f5c2:	b92a      	cbnz	r2, 800f5d0 <_realloc_r+0x24>
 800f5c4:	f7ff f8f0 	bl	800e7a8 <_free_r>
 800f5c8:	2400      	movs	r4, #0
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d0:	f000 f841 	bl	800f656 <_malloc_usable_size_r>
 800f5d4:	4285      	cmp	r5, r0
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	d802      	bhi.n	800f5e0 <_realloc_r+0x34>
 800f5da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f5de:	d8f4      	bhi.n	800f5ca <_realloc_r+0x1e>
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f7ff f954 	bl	800e890 <_malloc_r>
 800f5e8:	4607      	mov	r7, r0
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d0ec      	beq.n	800f5c8 <_realloc_r+0x1c>
 800f5ee:	42b5      	cmp	r5, r6
 800f5f0:	462a      	mov	r2, r5
 800f5f2:	4621      	mov	r1, r4
 800f5f4:	bf28      	it	cs
 800f5f6:	4632      	movcs	r2, r6
 800f5f8:	f7ff ff86 	bl	800f508 <memcpy>
 800f5fc:	4621      	mov	r1, r4
 800f5fe:	4640      	mov	r0, r8
 800f600:	f7ff f8d2 	bl	800e7a8 <_free_r>
 800f604:	463c      	mov	r4, r7
 800f606:	e7e0      	b.n	800f5ca <_realloc_r+0x1e>

0800f608 <__ascii_wctomb>:
 800f608:	4603      	mov	r3, r0
 800f60a:	4608      	mov	r0, r1
 800f60c:	b141      	cbz	r1, 800f620 <__ascii_wctomb+0x18>
 800f60e:	2aff      	cmp	r2, #255	@ 0xff
 800f610:	d904      	bls.n	800f61c <__ascii_wctomb+0x14>
 800f612:	228a      	movs	r2, #138	@ 0x8a
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	f04f 30ff 	mov.w	r0, #4294967295
 800f61a:	4770      	bx	lr
 800f61c:	700a      	strb	r2, [r1, #0]
 800f61e:	2001      	movs	r0, #1
 800f620:	4770      	bx	lr
	...

0800f624 <fiprintf>:
 800f624:	b40e      	push	{r1, r2, r3}
 800f626:	b503      	push	{r0, r1, lr}
 800f628:	4601      	mov	r1, r0
 800f62a:	ab03      	add	r3, sp, #12
 800f62c:	4805      	ldr	r0, [pc, #20]	@ (800f644 <fiprintf+0x20>)
 800f62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f632:	6800      	ldr	r0, [r0, #0]
 800f634:	9301      	str	r3, [sp, #4]
 800f636:	f000 f83f 	bl	800f6b8 <_vfiprintf_r>
 800f63a:	b002      	add	sp, #8
 800f63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f640:	b003      	add	sp, #12
 800f642:	4770      	bx	lr
 800f644:	20000120 	.word	0x20000120

0800f648 <abort>:
 800f648:	b508      	push	{r3, lr}
 800f64a:	2006      	movs	r0, #6
 800f64c:	f000 fa08 	bl	800fa60 <raise>
 800f650:	2001      	movs	r0, #1
 800f652:	f7f3 fe7f 	bl	8003354 <_exit>

0800f656 <_malloc_usable_size_r>:
 800f656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f65a:	1f18      	subs	r0, r3, #4
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	bfbc      	itt	lt
 800f660:	580b      	ldrlt	r3, [r1, r0]
 800f662:	18c0      	addlt	r0, r0, r3
 800f664:	4770      	bx	lr

0800f666 <__sfputc_r>:
 800f666:	6893      	ldr	r3, [r2, #8]
 800f668:	3b01      	subs	r3, #1
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	b410      	push	{r4}
 800f66e:	6093      	str	r3, [r2, #8]
 800f670:	da08      	bge.n	800f684 <__sfputc_r+0x1e>
 800f672:	6994      	ldr	r4, [r2, #24]
 800f674:	42a3      	cmp	r3, r4
 800f676:	db01      	blt.n	800f67c <__sfputc_r+0x16>
 800f678:	290a      	cmp	r1, #10
 800f67a:	d103      	bne.n	800f684 <__sfputc_r+0x1e>
 800f67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f680:	f000 b932 	b.w	800f8e8 <__swbuf_r>
 800f684:	6813      	ldr	r3, [r2, #0]
 800f686:	1c58      	adds	r0, r3, #1
 800f688:	6010      	str	r0, [r2, #0]
 800f68a:	7019      	strb	r1, [r3, #0]
 800f68c:	4608      	mov	r0, r1
 800f68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <__sfputs_r>:
 800f694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f696:	4606      	mov	r6, r0
 800f698:	460f      	mov	r7, r1
 800f69a:	4614      	mov	r4, r2
 800f69c:	18d5      	adds	r5, r2, r3
 800f69e:	42ac      	cmp	r4, r5
 800f6a0:	d101      	bne.n	800f6a6 <__sfputs_r+0x12>
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	e007      	b.n	800f6b6 <__sfputs_r+0x22>
 800f6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6aa:	463a      	mov	r2, r7
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	f7ff ffda 	bl	800f666 <__sfputc_r>
 800f6b2:	1c43      	adds	r3, r0, #1
 800f6b4:	d1f3      	bne.n	800f69e <__sfputs_r+0xa>
 800f6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6b8 <_vfiprintf_r>:
 800f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6bc:	460d      	mov	r5, r1
 800f6be:	b09d      	sub	sp, #116	@ 0x74
 800f6c0:	4614      	mov	r4, r2
 800f6c2:	4698      	mov	r8, r3
 800f6c4:	4606      	mov	r6, r0
 800f6c6:	b118      	cbz	r0, 800f6d0 <_vfiprintf_r+0x18>
 800f6c8:	6a03      	ldr	r3, [r0, #32]
 800f6ca:	b90b      	cbnz	r3, 800f6d0 <_vfiprintf_r+0x18>
 800f6cc:	f7fe f8f2 	bl	800d8b4 <__sinit>
 800f6d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6d2:	07d9      	lsls	r1, r3, #31
 800f6d4:	d405      	bmi.n	800f6e2 <_vfiprintf_r+0x2a>
 800f6d6:	89ab      	ldrh	r3, [r5, #12]
 800f6d8:	059a      	lsls	r2, r3, #22
 800f6da:	d402      	bmi.n	800f6e2 <_vfiprintf_r+0x2a>
 800f6dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6de:	f7fe fa14 	bl	800db0a <__retarget_lock_acquire_recursive>
 800f6e2:	89ab      	ldrh	r3, [r5, #12]
 800f6e4:	071b      	lsls	r3, r3, #28
 800f6e6:	d501      	bpl.n	800f6ec <_vfiprintf_r+0x34>
 800f6e8:	692b      	ldr	r3, [r5, #16]
 800f6ea:	b99b      	cbnz	r3, 800f714 <_vfiprintf_r+0x5c>
 800f6ec:	4629      	mov	r1, r5
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f000 f938 	bl	800f964 <__swsetup_r>
 800f6f4:	b170      	cbz	r0, 800f714 <_vfiprintf_r+0x5c>
 800f6f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6f8:	07dc      	lsls	r4, r3, #31
 800f6fa:	d504      	bpl.n	800f706 <_vfiprintf_r+0x4e>
 800f6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f700:	b01d      	add	sp, #116	@ 0x74
 800f702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f706:	89ab      	ldrh	r3, [r5, #12]
 800f708:	0598      	lsls	r0, r3, #22
 800f70a:	d4f7      	bmi.n	800f6fc <_vfiprintf_r+0x44>
 800f70c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f70e:	f7fe f9fd 	bl	800db0c <__retarget_lock_release_recursive>
 800f712:	e7f3      	b.n	800f6fc <_vfiprintf_r+0x44>
 800f714:	2300      	movs	r3, #0
 800f716:	9309      	str	r3, [sp, #36]	@ 0x24
 800f718:	2320      	movs	r3, #32
 800f71a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f71e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f722:	2330      	movs	r3, #48	@ 0x30
 800f724:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f8d4 <_vfiprintf_r+0x21c>
 800f728:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f72c:	f04f 0901 	mov.w	r9, #1
 800f730:	4623      	mov	r3, r4
 800f732:	469a      	mov	sl, r3
 800f734:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f738:	b10a      	cbz	r2, 800f73e <_vfiprintf_r+0x86>
 800f73a:	2a25      	cmp	r2, #37	@ 0x25
 800f73c:	d1f9      	bne.n	800f732 <_vfiprintf_r+0x7a>
 800f73e:	ebba 0b04 	subs.w	fp, sl, r4
 800f742:	d00b      	beq.n	800f75c <_vfiprintf_r+0xa4>
 800f744:	465b      	mov	r3, fp
 800f746:	4622      	mov	r2, r4
 800f748:	4629      	mov	r1, r5
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7ff ffa2 	bl	800f694 <__sfputs_r>
 800f750:	3001      	adds	r0, #1
 800f752:	f000 80a7 	beq.w	800f8a4 <_vfiprintf_r+0x1ec>
 800f756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f758:	445a      	add	r2, fp
 800f75a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f75c:	f89a 3000 	ldrb.w	r3, [sl]
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 809f 	beq.w	800f8a4 <_vfiprintf_r+0x1ec>
 800f766:	2300      	movs	r3, #0
 800f768:	f04f 32ff 	mov.w	r2, #4294967295
 800f76c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f770:	f10a 0a01 	add.w	sl, sl, #1
 800f774:	9304      	str	r3, [sp, #16]
 800f776:	9307      	str	r3, [sp, #28]
 800f778:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f77c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f77e:	4654      	mov	r4, sl
 800f780:	2205      	movs	r2, #5
 800f782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f786:	4853      	ldr	r0, [pc, #332]	@ (800f8d4 <_vfiprintf_r+0x21c>)
 800f788:	f7f0 fd22 	bl	80001d0 <memchr>
 800f78c:	9a04      	ldr	r2, [sp, #16]
 800f78e:	b9d8      	cbnz	r0, 800f7c8 <_vfiprintf_r+0x110>
 800f790:	06d1      	lsls	r1, r2, #27
 800f792:	bf44      	itt	mi
 800f794:	2320      	movmi	r3, #32
 800f796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f79a:	0713      	lsls	r3, r2, #28
 800f79c:	bf44      	itt	mi
 800f79e:	232b      	movmi	r3, #43	@ 0x2b
 800f7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7aa:	d015      	beq.n	800f7d8 <_vfiprintf_r+0x120>
 800f7ac:	9a07      	ldr	r2, [sp, #28]
 800f7ae:	4654      	mov	r4, sl
 800f7b0:	2000      	movs	r0, #0
 800f7b2:	f04f 0c0a 	mov.w	ip, #10
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7bc:	3b30      	subs	r3, #48	@ 0x30
 800f7be:	2b09      	cmp	r3, #9
 800f7c0:	d94b      	bls.n	800f85a <_vfiprintf_r+0x1a2>
 800f7c2:	b1b0      	cbz	r0, 800f7f2 <_vfiprintf_r+0x13a>
 800f7c4:	9207      	str	r2, [sp, #28]
 800f7c6:	e014      	b.n	800f7f2 <_vfiprintf_r+0x13a>
 800f7c8:	eba0 0308 	sub.w	r3, r0, r8
 800f7cc:	fa09 f303 	lsl.w	r3, r9, r3
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	9304      	str	r3, [sp, #16]
 800f7d4:	46a2      	mov	sl, r4
 800f7d6:	e7d2      	b.n	800f77e <_vfiprintf_r+0xc6>
 800f7d8:	9b03      	ldr	r3, [sp, #12]
 800f7da:	1d19      	adds	r1, r3, #4
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	9103      	str	r1, [sp, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	bfbb      	ittet	lt
 800f7e4:	425b      	neglt	r3, r3
 800f7e6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7ea:	9307      	strge	r3, [sp, #28]
 800f7ec:	9307      	strlt	r3, [sp, #28]
 800f7ee:	bfb8      	it	lt
 800f7f0:	9204      	strlt	r2, [sp, #16]
 800f7f2:	7823      	ldrb	r3, [r4, #0]
 800f7f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7f6:	d10a      	bne.n	800f80e <_vfiprintf_r+0x156>
 800f7f8:	7863      	ldrb	r3, [r4, #1]
 800f7fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7fc:	d132      	bne.n	800f864 <_vfiprintf_r+0x1ac>
 800f7fe:	9b03      	ldr	r3, [sp, #12]
 800f800:	1d1a      	adds	r2, r3, #4
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	9203      	str	r2, [sp, #12]
 800f806:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f80a:	3402      	adds	r4, #2
 800f80c:	9305      	str	r3, [sp, #20]
 800f80e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f8e4 <_vfiprintf_r+0x22c>
 800f812:	7821      	ldrb	r1, [r4, #0]
 800f814:	2203      	movs	r2, #3
 800f816:	4650      	mov	r0, sl
 800f818:	f7f0 fcda 	bl	80001d0 <memchr>
 800f81c:	b138      	cbz	r0, 800f82e <_vfiprintf_r+0x176>
 800f81e:	9b04      	ldr	r3, [sp, #16]
 800f820:	eba0 000a 	sub.w	r0, r0, sl
 800f824:	2240      	movs	r2, #64	@ 0x40
 800f826:	4082      	lsls	r2, r0
 800f828:	4313      	orrs	r3, r2
 800f82a:	3401      	adds	r4, #1
 800f82c:	9304      	str	r3, [sp, #16]
 800f82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f832:	4829      	ldr	r0, [pc, #164]	@ (800f8d8 <_vfiprintf_r+0x220>)
 800f834:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f838:	2206      	movs	r2, #6
 800f83a:	f7f0 fcc9 	bl	80001d0 <memchr>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d03f      	beq.n	800f8c2 <_vfiprintf_r+0x20a>
 800f842:	4b26      	ldr	r3, [pc, #152]	@ (800f8dc <_vfiprintf_r+0x224>)
 800f844:	bb1b      	cbnz	r3, 800f88e <_vfiprintf_r+0x1d6>
 800f846:	9b03      	ldr	r3, [sp, #12]
 800f848:	3307      	adds	r3, #7
 800f84a:	f023 0307 	bic.w	r3, r3, #7
 800f84e:	3308      	adds	r3, #8
 800f850:	9303      	str	r3, [sp, #12]
 800f852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f854:	443b      	add	r3, r7
 800f856:	9309      	str	r3, [sp, #36]	@ 0x24
 800f858:	e76a      	b.n	800f730 <_vfiprintf_r+0x78>
 800f85a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f85e:	460c      	mov	r4, r1
 800f860:	2001      	movs	r0, #1
 800f862:	e7a8      	b.n	800f7b6 <_vfiprintf_r+0xfe>
 800f864:	2300      	movs	r3, #0
 800f866:	3401      	adds	r4, #1
 800f868:	9305      	str	r3, [sp, #20]
 800f86a:	4619      	mov	r1, r3
 800f86c:	f04f 0c0a 	mov.w	ip, #10
 800f870:	4620      	mov	r0, r4
 800f872:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f876:	3a30      	subs	r2, #48	@ 0x30
 800f878:	2a09      	cmp	r2, #9
 800f87a:	d903      	bls.n	800f884 <_vfiprintf_r+0x1cc>
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d0c6      	beq.n	800f80e <_vfiprintf_r+0x156>
 800f880:	9105      	str	r1, [sp, #20]
 800f882:	e7c4      	b.n	800f80e <_vfiprintf_r+0x156>
 800f884:	fb0c 2101 	mla	r1, ip, r1, r2
 800f888:	4604      	mov	r4, r0
 800f88a:	2301      	movs	r3, #1
 800f88c:	e7f0      	b.n	800f870 <_vfiprintf_r+0x1b8>
 800f88e:	ab03      	add	r3, sp, #12
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	462a      	mov	r2, r5
 800f894:	4b12      	ldr	r3, [pc, #72]	@ (800f8e0 <_vfiprintf_r+0x228>)
 800f896:	a904      	add	r1, sp, #16
 800f898:	4630      	mov	r0, r6
 800f89a:	f7fd fbc7 	bl	800d02c <_printf_float>
 800f89e:	4607      	mov	r7, r0
 800f8a0:	1c78      	adds	r0, r7, #1
 800f8a2:	d1d6      	bne.n	800f852 <_vfiprintf_r+0x19a>
 800f8a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8a6:	07d9      	lsls	r1, r3, #31
 800f8a8:	d405      	bmi.n	800f8b6 <_vfiprintf_r+0x1fe>
 800f8aa:	89ab      	ldrh	r3, [r5, #12]
 800f8ac:	059a      	lsls	r2, r3, #22
 800f8ae:	d402      	bmi.n	800f8b6 <_vfiprintf_r+0x1fe>
 800f8b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8b2:	f7fe f92b 	bl	800db0c <__retarget_lock_release_recursive>
 800f8b6:	89ab      	ldrh	r3, [r5, #12]
 800f8b8:	065b      	lsls	r3, r3, #25
 800f8ba:	f53f af1f 	bmi.w	800f6fc <_vfiprintf_r+0x44>
 800f8be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8c0:	e71e      	b.n	800f700 <_vfiprintf_r+0x48>
 800f8c2:	ab03      	add	r3, sp, #12
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	462a      	mov	r2, r5
 800f8c8:	4b05      	ldr	r3, [pc, #20]	@ (800f8e0 <_vfiprintf_r+0x228>)
 800f8ca:	a904      	add	r1, sp, #16
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f7fd fe45 	bl	800d55c <_printf_i>
 800f8d2:	e7e4      	b.n	800f89e <_vfiprintf_r+0x1e6>
 800f8d4:	080102f8 	.word	0x080102f8
 800f8d8:	08010302 	.word	0x08010302
 800f8dc:	0800d02d 	.word	0x0800d02d
 800f8e0:	0800f695 	.word	0x0800f695
 800f8e4:	080102fe 	.word	0x080102fe

0800f8e8 <__swbuf_r>:
 800f8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ea:	460e      	mov	r6, r1
 800f8ec:	4614      	mov	r4, r2
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	b118      	cbz	r0, 800f8fa <__swbuf_r+0x12>
 800f8f2:	6a03      	ldr	r3, [r0, #32]
 800f8f4:	b90b      	cbnz	r3, 800f8fa <__swbuf_r+0x12>
 800f8f6:	f7fd ffdd 	bl	800d8b4 <__sinit>
 800f8fa:	69a3      	ldr	r3, [r4, #24]
 800f8fc:	60a3      	str	r3, [r4, #8]
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	071a      	lsls	r2, r3, #28
 800f902:	d501      	bpl.n	800f908 <__swbuf_r+0x20>
 800f904:	6923      	ldr	r3, [r4, #16]
 800f906:	b943      	cbnz	r3, 800f91a <__swbuf_r+0x32>
 800f908:	4621      	mov	r1, r4
 800f90a:	4628      	mov	r0, r5
 800f90c:	f000 f82a 	bl	800f964 <__swsetup_r>
 800f910:	b118      	cbz	r0, 800f91a <__swbuf_r+0x32>
 800f912:	f04f 37ff 	mov.w	r7, #4294967295
 800f916:	4638      	mov	r0, r7
 800f918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	6922      	ldr	r2, [r4, #16]
 800f91e:	1a98      	subs	r0, r3, r2
 800f920:	6963      	ldr	r3, [r4, #20]
 800f922:	b2f6      	uxtb	r6, r6
 800f924:	4283      	cmp	r3, r0
 800f926:	4637      	mov	r7, r6
 800f928:	dc05      	bgt.n	800f936 <__swbuf_r+0x4e>
 800f92a:	4621      	mov	r1, r4
 800f92c:	4628      	mov	r0, r5
 800f92e:	f7ff fd99 	bl	800f464 <_fflush_r>
 800f932:	2800      	cmp	r0, #0
 800f934:	d1ed      	bne.n	800f912 <__swbuf_r+0x2a>
 800f936:	68a3      	ldr	r3, [r4, #8]
 800f938:	3b01      	subs	r3, #1
 800f93a:	60a3      	str	r3, [r4, #8]
 800f93c:	6823      	ldr	r3, [r4, #0]
 800f93e:	1c5a      	adds	r2, r3, #1
 800f940:	6022      	str	r2, [r4, #0]
 800f942:	701e      	strb	r6, [r3, #0]
 800f944:	6962      	ldr	r2, [r4, #20]
 800f946:	1c43      	adds	r3, r0, #1
 800f948:	429a      	cmp	r2, r3
 800f94a:	d004      	beq.n	800f956 <__swbuf_r+0x6e>
 800f94c:	89a3      	ldrh	r3, [r4, #12]
 800f94e:	07db      	lsls	r3, r3, #31
 800f950:	d5e1      	bpl.n	800f916 <__swbuf_r+0x2e>
 800f952:	2e0a      	cmp	r6, #10
 800f954:	d1df      	bne.n	800f916 <__swbuf_r+0x2e>
 800f956:	4621      	mov	r1, r4
 800f958:	4628      	mov	r0, r5
 800f95a:	f7ff fd83 	bl	800f464 <_fflush_r>
 800f95e:	2800      	cmp	r0, #0
 800f960:	d0d9      	beq.n	800f916 <__swbuf_r+0x2e>
 800f962:	e7d6      	b.n	800f912 <__swbuf_r+0x2a>

0800f964 <__swsetup_r>:
 800f964:	b538      	push	{r3, r4, r5, lr}
 800f966:	4b29      	ldr	r3, [pc, #164]	@ (800fa0c <__swsetup_r+0xa8>)
 800f968:	4605      	mov	r5, r0
 800f96a:	6818      	ldr	r0, [r3, #0]
 800f96c:	460c      	mov	r4, r1
 800f96e:	b118      	cbz	r0, 800f978 <__swsetup_r+0x14>
 800f970:	6a03      	ldr	r3, [r0, #32]
 800f972:	b90b      	cbnz	r3, 800f978 <__swsetup_r+0x14>
 800f974:	f7fd ff9e 	bl	800d8b4 <__sinit>
 800f978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f97c:	0719      	lsls	r1, r3, #28
 800f97e:	d422      	bmi.n	800f9c6 <__swsetup_r+0x62>
 800f980:	06da      	lsls	r2, r3, #27
 800f982:	d407      	bmi.n	800f994 <__swsetup_r+0x30>
 800f984:	2209      	movs	r2, #9
 800f986:	602a      	str	r2, [r5, #0]
 800f988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f98c:	81a3      	strh	r3, [r4, #12]
 800f98e:	f04f 30ff 	mov.w	r0, #4294967295
 800f992:	e033      	b.n	800f9fc <__swsetup_r+0x98>
 800f994:	0758      	lsls	r0, r3, #29
 800f996:	d512      	bpl.n	800f9be <__swsetup_r+0x5a>
 800f998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f99a:	b141      	cbz	r1, 800f9ae <__swsetup_r+0x4a>
 800f99c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f9a0:	4299      	cmp	r1, r3
 800f9a2:	d002      	beq.n	800f9aa <__swsetup_r+0x46>
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f7fe feff 	bl	800e7a8 <_free_r>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9b4:	81a3      	strh	r3, [r4, #12]
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	6063      	str	r3, [r4, #4]
 800f9ba:	6923      	ldr	r3, [r4, #16]
 800f9bc:	6023      	str	r3, [r4, #0]
 800f9be:	89a3      	ldrh	r3, [r4, #12]
 800f9c0:	f043 0308 	orr.w	r3, r3, #8
 800f9c4:	81a3      	strh	r3, [r4, #12]
 800f9c6:	6923      	ldr	r3, [r4, #16]
 800f9c8:	b94b      	cbnz	r3, 800f9de <__swsetup_r+0x7a>
 800f9ca:	89a3      	ldrh	r3, [r4, #12]
 800f9cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9d4:	d003      	beq.n	800f9de <__swsetup_r+0x7a>
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f000 f883 	bl	800fae4 <__smakebuf_r>
 800f9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9e2:	f013 0201 	ands.w	r2, r3, #1
 800f9e6:	d00a      	beq.n	800f9fe <__swsetup_r+0x9a>
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	60a2      	str	r2, [r4, #8]
 800f9ec:	6962      	ldr	r2, [r4, #20]
 800f9ee:	4252      	negs	r2, r2
 800f9f0:	61a2      	str	r2, [r4, #24]
 800f9f2:	6922      	ldr	r2, [r4, #16]
 800f9f4:	b942      	cbnz	r2, 800fa08 <__swsetup_r+0xa4>
 800f9f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9fa:	d1c5      	bne.n	800f988 <__swsetup_r+0x24>
 800f9fc:	bd38      	pop	{r3, r4, r5, pc}
 800f9fe:	0799      	lsls	r1, r3, #30
 800fa00:	bf58      	it	pl
 800fa02:	6962      	ldrpl	r2, [r4, #20]
 800fa04:	60a2      	str	r2, [r4, #8]
 800fa06:	e7f4      	b.n	800f9f2 <__swsetup_r+0x8e>
 800fa08:	2000      	movs	r0, #0
 800fa0a:	e7f7      	b.n	800f9fc <__swsetup_r+0x98>
 800fa0c:	20000120 	.word	0x20000120

0800fa10 <_raise_r>:
 800fa10:	291f      	cmp	r1, #31
 800fa12:	b538      	push	{r3, r4, r5, lr}
 800fa14:	4605      	mov	r5, r0
 800fa16:	460c      	mov	r4, r1
 800fa18:	d904      	bls.n	800fa24 <_raise_r+0x14>
 800fa1a:	2316      	movs	r3, #22
 800fa1c:	6003      	str	r3, [r0, #0]
 800fa1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa26:	b112      	cbz	r2, 800fa2e <_raise_r+0x1e>
 800fa28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa2c:	b94b      	cbnz	r3, 800fa42 <_raise_r+0x32>
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f000 f830 	bl	800fa94 <_getpid_r>
 800fa34:	4622      	mov	r2, r4
 800fa36:	4601      	mov	r1, r0
 800fa38:	4628      	mov	r0, r5
 800fa3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa3e:	f000 b817 	b.w	800fa70 <_kill_r>
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d00a      	beq.n	800fa5c <_raise_r+0x4c>
 800fa46:	1c59      	adds	r1, r3, #1
 800fa48:	d103      	bne.n	800fa52 <_raise_r+0x42>
 800fa4a:	2316      	movs	r3, #22
 800fa4c:	6003      	str	r3, [r0, #0]
 800fa4e:	2001      	movs	r0, #1
 800fa50:	e7e7      	b.n	800fa22 <_raise_r+0x12>
 800fa52:	2100      	movs	r1, #0
 800fa54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa58:	4620      	mov	r0, r4
 800fa5a:	4798      	blx	r3
 800fa5c:	2000      	movs	r0, #0
 800fa5e:	e7e0      	b.n	800fa22 <_raise_r+0x12>

0800fa60 <raise>:
 800fa60:	4b02      	ldr	r3, [pc, #8]	@ (800fa6c <raise+0xc>)
 800fa62:	4601      	mov	r1, r0
 800fa64:	6818      	ldr	r0, [r3, #0]
 800fa66:	f7ff bfd3 	b.w	800fa10 <_raise_r>
 800fa6a:	bf00      	nop
 800fa6c:	20000120 	.word	0x20000120

0800fa70 <_kill_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4d07      	ldr	r5, [pc, #28]	@ (800fa90 <_kill_r+0x20>)
 800fa74:	2300      	movs	r3, #0
 800fa76:	4604      	mov	r4, r0
 800fa78:	4608      	mov	r0, r1
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	602b      	str	r3, [r5, #0]
 800fa7e:	f7f3 fc59 	bl	8003334 <_kill>
 800fa82:	1c43      	adds	r3, r0, #1
 800fa84:	d102      	bne.n	800fa8c <_kill_r+0x1c>
 800fa86:	682b      	ldr	r3, [r5, #0]
 800fa88:	b103      	cbz	r3, 800fa8c <_kill_r+0x1c>
 800fa8a:	6023      	str	r3, [r4, #0]
 800fa8c:	bd38      	pop	{r3, r4, r5, pc}
 800fa8e:	bf00      	nop
 800fa90:	200022c0 	.word	0x200022c0

0800fa94 <_getpid_r>:
 800fa94:	f7f3 bc46 	b.w	8003324 <_getpid>

0800fa98 <__swhatbuf_r>:
 800fa98:	b570      	push	{r4, r5, r6, lr}
 800fa9a:	460c      	mov	r4, r1
 800fa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa0:	2900      	cmp	r1, #0
 800faa2:	b096      	sub	sp, #88	@ 0x58
 800faa4:	4615      	mov	r5, r2
 800faa6:	461e      	mov	r6, r3
 800faa8:	da0d      	bge.n	800fac6 <__swhatbuf_r+0x2e>
 800faaa:	89a3      	ldrh	r3, [r4, #12]
 800faac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fab0:	f04f 0100 	mov.w	r1, #0
 800fab4:	bf14      	ite	ne
 800fab6:	2340      	movne	r3, #64	@ 0x40
 800fab8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fabc:	2000      	movs	r0, #0
 800fabe:	6031      	str	r1, [r6, #0]
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	b016      	add	sp, #88	@ 0x58
 800fac4:	bd70      	pop	{r4, r5, r6, pc}
 800fac6:	466a      	mov	r2, sp
 800fac8:	f000 f848 	bl	800fb5c <_fstat_r>
 800facc:	2800      	cmp	r0, #0
 800face:	dbec      	blt.n	800faaa <__swhatbuf_r+0x12>
 800fad0:	9901      	ldr	r1, [sp, #4]
 800fad2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fad6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fada:	4259      	negs	r1, r3
 800fadc:	4159      	adcs	r1, r3
 800fade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fae2:	e7eb      	b.n	800fabc <__swhatbuf_r+0x24>

0800fae4 <__smakebuf_r>:
 800fae4:	898b      	ldrh	r3, [r1, #12]
 800fae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fae8:	079d      	lsls	r5, r3, #30
 800faea:	4606      	mov	r6, r0
 800faec:	460c      	mov	r4, r1
 800faee:	d507      	bpl.n	800fb00 <__smakebuf_r+0x1c>
 800faf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800faf4:	6023      	str	r3, [r4, #0]
 800faf6:	6123      	str	r3, [r4, #16]
 800faf8:	2301      	movs	r3, #1
 800fafa:	6163      	str	r3, [r4, #20]
 800fafc:	b003      	add	sp, #12
 800fafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb00:	ab01      	add	r3, sp, #4
 800fb02:	466a      	mov	r2, sp
 800fb04:	f7ff ffc8 	bl	800fa98 <__swhatbuf_r>
 800fb08:	9f00      	ldr	r7, [sp, #0]
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	4639      	mov	r1, r7
 800fb0e:	4630      	mov	r0, r6
 800fb10:	f7fe febe 	bl	800e890 <_malloc_r>
 800fb14:	b948      	cbnz	r0, 800fb2a <__smakebuf_r+0x46>
 800fb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb1a:	059a      	lsls	r2, r3, #22
 800fb1c:	d4ee      	bmi.n	800fafc <__smakebuf_r+0x18>
 800fb1e:	f023 0303 	bic.w	r3, r3, #3
 800fb22:	f043 0302 	orr.w	r3, r3, #2
 800fb26:	81a3      	strh	r3, [r4, #12]
 800fb28:	e7e2      	b.n	800faf0 <__smakebuf_r+0xc>
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	6020      	str	r0, [r4, #0]
 800fb2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb32:	81a3      	strh	r3, [r4, #12]
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb3a:	b15b      	cbz	r3, 800fb54 <__smakebuf_r+0x70>
 800fb3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb40:	4630      	mov	r0, r6
 800fb42:	f000 f81d 	bl	800fb80 <_isatty_r>
 800fb46:	b128      	cbz	r0, 800fb54 <__smakebuf_r+0x70>
 800fb48:	89a3      	ldrh	r3, [r4, #12]
 800fb4a:	f023 0303 	bic.w	r3, r3, #3
 800fb4e:	f043 0301 	orr.w	r3, r3, #1
 800fb52:	81a3      	strh	r3, [r4, #12]
 800fb54:	89a3      	ldrh	r3, [r4, #12]
 800fb56:	431d      	orrs	r5, r3
 800fb58:	81a5      	strh	r5, [r4, #12]
 800fb5a:	e7cf      	b.n	800fafc <__smakebuf_r+0x18>

0800fb5c <_fstat_r>:
 800fb5c:	b538      	push	{r3, r4, r5, lr}
 800fb5e:	4d07      	ldr	r5, [pc, #28]	@ (800fb7c <_fstat_r+0x20>)
 800fb60:	2300      	movs	r3, #0
 800fb62:	4604      	mov	r4, r0
 800fb64:	4608      	mov	r0, r1
 800fb66:	4611      	mov	r1, r2
 800fb68:	602b      	str	r3, [r5, #0]
 800fb6a:	f7f3 fc43 	bl	80033f4 <_fstat>
 800fb6e:	1c43      	adds	r3, r0, #1
 800fb70:	d102      	bne.n	800fb78 <_fstat_r+0x1c>
 800fb72:	682b      	ldr	r3, [r5, #0]
 800fb74:	b103      	cbz	r3, 800fb78 <_fstat_r+0x1c>
 800fb76:	6023      	str	r3, [r4, #0]
 800fb78:	bd38      	pop	{r3, r4, r5, pc}
 800fb7a:	bf00      	nop
 800fb7c:	200022c0 	.word	0x200022c0

0800fb80 <_isatty_r>:
 800fb80:	b538      	push	{r3, r4, r5, lr}
 800fb82:	4d06      	ldr	r5, [pc, #24]	@ (800fb9c <_isatty_r+0x1c>)
 800fb84:	2300      	movs	r3, #0
 800fb86:	4604      	mov	r4, r0
 800fb88:	4608      	mov	r0, r1
 800fb8a:	602b      	str	r3, [r5, #0]
 800fb8c:	f7f3 fc42 	bl	8003414 <_isatty>
 800fb90:	1c43      	adds	r3, r0, #1
 800fb92:	d102      	bne.n	800fb9a <_isatty_r+0x1a>
 800fb94:	682b      	ldr	r3, [r5, #0]
 800fb96:	b103      	cbz	r3, 800fb9a <_isatty_r+0x1a>
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	200022c0 	.word	0x200022c0

0800fba0 <log>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	ed2d 8b02 	vpush	{d8}
 800fba6:	ec55 4b10 	vmov	r4, r5, d0
 800fbaa:	f000 f841 	bl	800fc30 <__ieee754_log>
 800fbae:	4622      	mov	r2, r4
 800fbb0:	462b      	mov	r3, r5
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	eeb0 8a40 	vmov.f32	s16, s0
 800fbba:	eef0 8a60 	vmov.f32	s17, s1
 800fbbe:	f7f0 ffb5 	bl	8000b2c <__aeabi_dcmpun>
 800fbc2:	b998      	cbnz	r0, 800fbec <log+0x4c>
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	4620      	mov	r0, r4
 800fbca:	4629      	mov	r1, r5
 800fbcc:	f7f0 ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 800fbd0:	b960      	cbnz	r0, 800fbec <log+0x4c>
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	4629      	mov	r1, r5
 800fbda:	f7f0 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbde:	b160      	cbz	r0, 800fbfa <log+0x5a>
 800fbe0:	f7fd ff68 	bl	800dab4 <__errno>
 800fbe4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fc10 <log+0x70>
 800fbe8:	2322      	movs	r3, #34	@ 0x22
 800fbea:	6003      	str	r3, [r0, #0]
 800fbec:	eeb0 0a48 	vmov.f32	s0, s16
 800fbf0:	eef0 0a68 	vmov.f32	s1, s17
 800fbf4:	ecbd 8b02 	vpop	{d8}
 800fbf8:	bd38      	pop	{r3, r4, r5, pc}
 800fbfa:	f7fd ff5b 	bl	800dab4 <__errno>
 800fbfe:	ecbd 8b02 	vpop	{d8}
 800fc02:	2321      	movs	r3, #33	@ 0x21
 800fc04:	6003      	str	r3, [r0, #0]
 800fc06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc0a:	4803      	ldr	r0, [pc, #12]	@ (800fc18 <log+0x78>)
 800fc0c:	f000 b808 	b.w	800fc20 <nan>
 800fc10:	00000000 	.word	0x00000000
 800fc14:	fff00000 	.word	0xfff00000
 800fc18:	0801034e 	.word	0x0801034e
 800fc1c:	00000000 	.word	0x00000000

0800fc20 <nan>:
 800fc20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fc28 <nan+0x8>
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	00000000 	.word	0x00000000
 800fc2c:	7ff80000 	.word	0x7ff80000

0800fc30 <__ieee754_log>:
 800fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	ec51 0b10 	vmov	r0, r1, d0
 800fc38:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800fc3c:	b087      	sub	sp, #28
 800fc3e:	460d      	mov	r5, r1
 800fc40:	da26      	bge.n	800fc90 <__ieee754_log+0x60>
 800fc42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fc46:	4303      	orrs	r3, r0
 800fc48:	4602      	mov	r2, r0
 800fc4a:	d10a      	bne.n	800fc62 <__ieee754_log+0x32>
 800fc4c:	49ce      	ldr	r1, [pc, #824]	@ (800ff88 <__ieee754_log+0x358>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2300      	movs	r3, #0
 800fc52:	2000      	movs	r0, #0
 800fc54:	f7f0 fdfa 	bl	800084c <__aeabi_ddiv>
 800fc58:	ec41 0b10 	vmov	d0, r0, r1
 800fc5c:	b007      	add	sp, #28
 800fc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc62:	2900      	cmp	r1, #0
 800fc64:	da05      	bge.n	800fc72 <__ieee754_log+0x42>
 800fc66:	460b      	mov	r3, r1
 800fc68:	f7f0 fb0e 	bl	8000288 <__aeabi_dsub>
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	2300      	movs	r3, #0
 800fc70:	e7f0      	b.n	800fc54 <__ieee754_log+0x24>
 800fc72:	4bc6      	ldr	r3, [pc, #792]	@ (800ff8c <__ieee754_log+0x35c>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	f7f0 fcbf 	bl	80005f8 <__aeabi_dmul>
 800fc7a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800fc7e:	460d      	mov	r5, r1
 800fc80:	4ac3      	ldr	r2, [pc, #780]	@ (800ff90 <__ieee754_log+0x360>)
 800fc82:	4295      	cmp	r5, r2
 800fc84:	dd06      	ble.n	800fc94 <__ieee754_log+0x64>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	f7f0 faff 	bl	800028c <__adddf3>
 800fc8e:	e7e3      	b.n	800fc58 <__ieee754_log+0x28>
 800fc90:	2300      	movs	r3, #0
 800fc92:	e7f5      	b.n	800fc80 <__ieee754_log+0x50>
 800fc94:	152c      	asrs	r4, r5, #20
 800fc96:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800fc9a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fc9e:	441c      	add	r4, r3
 800fca0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800fca4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800fca8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fcac:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800fcb0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800fcb4:	ea42 0105 	orr.w	r1, r2, r5
 800fcb8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	4bb5      	ldr	r3, [pc, #724]	@ (800ff94 <__ieee754_log+0x364>)
 800fcc0:	f7f0 fae2 	bl	8000288 <__aeabi_dsub>
 800fcc4:	1cab      	adds	r3, r5, #2
 800fcc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcca:	2b02      	cmp	r3, #2
 800fccc:	4682      	mov	sl, r0
 800fcce:	468b      	mov	fp, r1
 800fcd0:	f04f 0200 	mov.w	r2, #0
 800fcd4:	dc53      	bgt.n	800fd7e <__ieee754_log+0x14e>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	f7f0 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcdc:	b1d0      	cbz	r0, 800fd14 <__ieee754_log+0xe4>
 800fcde:	2c00      	cmp	r4, #0
 800fce0:	f000 8120 	beq.w	800ff24 <__ieee754_log+0x2f4>
 800fce4:	4620      	mov	r0, r4
 800fce6:	f7f0 fc1d 	bl	8000524 <__aeabi_i2d>
 800fcea:	a391      	add	r3, pc, #580	@ (adr r3, 800ff30 <__ieee754_log+0x300>)
 800fcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	460f      	mov	r7, r1
 800fcf4:	f7f0 fc80 	bl	80005f8 <__aeabi_dmul>
 800fcf8:	a38f      	add	r3, pc, #572	@ (adr r3, 800ff38 <__ieee754_log+0x308>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	4604      	mov	r4, r0
 800fd00:	460d      	mov	r5, r1
 800fd02:	4630      	mov	r0, r6
 800fd04:	4639      	mov	r1, r7
 800fd06:	f7f0 fc77 	bl	80005f8 <__aeabi_dmul>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4620      	mov	r0, r4
 800fd10:	4629      	mov	r1, r5
 800fd12:	e7ba      	b.n	800fc8a <__ieee754_log+0x5a>
 800fd14:	a38a      	add	r3, pc, #552	@ (adr r3, 800ff40 <__ieee754_log+0x310>)
 800fd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1a:	4650      	mov	r0, sl
 800fd1c:	4659      	mov	r1, fp
 800fd1e:	f7f0 fc6b 	bl	80005f8 <__aeabi_dmul>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	2000      	movs	r0, #0
 800fd28:	499b      	ldr	r1, [pc, #620]	@ (800ff98 <__ieee754_log+0x368>)
 800fd2a:	f7f0 faad 	bl	8000288 <__aeabi_dsub>
 800fd2e:	4652      	mov	r2, sl
 800fd30:	4606      	mov	r6, r0
 800fd32:	460f      	mov	r7, r1
 800fd34:	465b      	mov	r3, fp
 800fd36:	4650      	mov	r0, sl
 800fd38:	4659      	mov	r1, fp
 800fd3a:	f7f0 fc5d 	bl	80005f8 <__aeabi_dmul>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	460b      	mov	r3, r1
 800fd42:	4630      	mov	r0, r6
 800fd44:	4639      	mov	r1, r7
 800fd46:	f7f0 fc57 	bl	80005f8 <__aeabi_dmul>
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	460f      	mov	r7, r1
 800fd4e:	b914      	cbnz	r4, 800fd56 <__ieee754_log+0x126>
 800fd50:	4632      	mov	r2, r6
 800fd52:	463b      	mov	r3, r7
 800fd54:	e0a0      	b.n	800fe98 <__ieee754_log+0x268>
 800fd56:	4620      	mov	r0, r4
 800fd58:	f7f0 fbe4 	bl	8000524 <__aeabi_i2d>
 800fd5c:	a374      	add	r3, pc, #464	@ (adr r3, 800ff30 <__ieee754_log+0x300>)
 800fd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd62:	4680      	mov	r8, r0
 800fd64:	4689      	mov	r9, r1
 800fd66:	f7f0 fc47 	bl	80005f8 <__aeabi_dmul>
 800fd6a:	a373      	add	r3, pc, #460	@ (adr r3, 800ff38 <__ieee754_log+0x308>)
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	4604      	mov	r4, r0
 800fd72:	460d      	mov	r5, r1
 800fd74:	4640      	mov	r0, r8
 800fd76:	4649      	mov	r1, r9
 800fd78:	f7f0 fc3e 	bl	80005f8 <__aeabi_dmul>
 800fd7c:	e0a5      	b.n	800feca <__ieee754_log+0x29a>
 800fd7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fd82:	f7f0 fa83 	bl	800028c <__adddf3>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4650      	mov	r0, sl
 800fd8c:	4659      	mov	r1, fp
 800fd8e:	f7f0 fd5d 	bl	800084c <__aeabi_ddiv>
 800fd92:	e9cd 0100 	strd	r0, r1, [sp]
 800fd96:	4620      	mov	r0, r4
 800fd98:	f7f0 fbc4 	bl	8000524 <__aeabi_i2d>
 800fd9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fda0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fda4:	4610      	mov	r0, r2
 800fda6:	4619      	mov	r1, r3
 800fda8:	f7f0 fc26 	bl	80005f8 <__aeabi_dmul>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fdb4:	f7f0 fc20 	bl	80005f8 <__aeabi_dmul>
 800fdb8:	a363      	add	r3, pc, #396	@ (adr r3, 800ff48 <__ieee754_log+0x318>)
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	4680      	mov	r8, r0
 800fdc0:	4689      	mov	r9, r1
 800fdc2:	f7f0 fc19 	bl	80005f8 <__aeabi_dmul>
 800fdc6:	a362      	add	r3, pc, #392	@ (adr r3, 800ff50 <__ieee754_log+0x320>)
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f7f0 fa5e 	bl	800028c <__adddf3>
 800fdd0:	4642      	mov	r2, r8
 800fdd2:	464b      	mov	r3, r9
 800fdd4:	f7f0 fc10 	bl	80005f8 <__aeabi_dmul>
 800fdd8:	a35f      	add	r3, pc, #380	@ (adr r3, 800ff58 <__ieee754_log+0x328>)
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	f7f0 fa55 	bl	800028c <__adddf3>
 800fde2:	4642      	mov	r2, r8
 800fde4:	464b      	mov	r3, r9
 800fde6:	f7f0 fc07 	bl	80005f8 <__aeabi_dmul>
 800fdea:	a35d      	add	r3, pc, #372	@ (adr r3, 800ff60 <__ieee754_log+0x330>)
 800fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf0:	f7f0 fa4c 	bl	800028c <__adddf3>
 800fdf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdf8:	f7f0 fbfe 	bl	80005f8 <__aeabi_dmul>
 800fdfc:	a35a      	add	r3, pc, #360	@ (adr r3, 800ff68 <__ieee754_log+0x338>)
 800fdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe06:	4640      	mov	r0, r8
 800fe08:	4649      	mov	r1, r9
 800fe0a:	f7f0 fbf5 	bl	80005f8 <__aeabi_dmul>
 800fe0e:	a358      	add	r3, pc, #352	@ (adr r3, 800ff70 <__ieee754_log+0x340>)
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	f7f0 fa3a 	bl	800028c <__adddf3>
 800fe18:	4642      	mov	r2, r8
 800fe1a:	464b      	mov	r3, r9
 800fe1c:	f7f0 fbec 	bl	80005f8 <__aeabi_dmul>
 800fe20:	a355      	add	r3, pc, #340	@ (adr r3, 800ff78 <__ieee754_log+0x348>)
 800fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe26:	f7f0 fa31 	bl	800028c <__adddf3>
 800fe2a:	4642      	mov	r2, r8
 800fe2c:	464b      	mov	r3, r9
 800fe2e:	f7f0 fbe3 	bl	80005f8 <__aeabi_dmul>
 800fe32:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800fe36:	4602      	mov	r2, r0
 800fe38:	460b      	mov	r3, r1
 800fe3a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800fe3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe42:	f7f0 fa23 	bl	800028c <__adddf3>
 800fe46:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800fe4a:	3551      	adds	r5, #81	@ 0x51
 800fe4c:	4335      	orrs	r5, r6
 800fe4e:	2d00      	cmp	r5, #0
 800fe50:	4680      	mov	r8, r0
 800fe52:	4689      	mov	r9, r1
 800fe54:	dd48      	ble.n	800fee8 <__ieee754_log+0x2b8>
 800fe56:	4b50      	ldr	r3, [pc, #320]	@ (800ff98 <__ieee754_log+0x368>)
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4650      	mov	r0, sl
 800fe5c:	4659      	mov	r1, fp
 800fe5e:	f7f0 fbcb 	bl	80005f8 <__aeabi_dmul>
 800fe62:	4652      	mov	r2, sl
 800fe64:	465b      	mov	r3, fp
 800fe66:	f7f0 fbc7 	bl	80005f8 <__aeabi_dmul>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	4606      	mov	r6, r0
 800fe70:	460f      	mov	r7, r1
 800fe72:	4640      	mov	r0, r8
 800fe74:	4649      	mov	r1, r9
 800fe76:	f7f0 fa09 	bl	800028c <__adddf3>
 800fe7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe7e:	f7f0 fbbb 	bl	80005f8 <__aeabi_dmul>
 800fe82:	4680      	mov	r8, r0
 800fe84:	4689      	mov	r9, r1
 800fe86:	b964      	cbnz	r4, 800fea2 <__ieee754_log+0x272>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	4639      	mov	r1, r7
 800fe90:	f7f0 f9fa 	bl	8000288 <__aeabi_dsub>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	4650      	mov	r0, sl
 800fe9a:	4659      	mov	r1, fp
 800fe9c:	f7f0 f9f4 	bl	8000288 <__aeabi_dsub>
 800fea0:	e6da      	b.n	800fc58 <__ieee754_log+0x28>
 800fea2:	a323      	add	r3, pc, #140	@ (adr r3, 800ff30 <__ieee754_log+0x300>)
 800fea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feac:	f7f0 fba4 	bl	80005f8 <__aeabi_dmul>
 800feb0:	a321      	add	r3, pc, #132	@ (adr r3, 800ff38 <__ieee754_log+0x308>)
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	4604      	mov	r4, r0
 800feb8:	460d      	mov	r5, r1
 800feba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800febe:	f7f0 fb9b 	bl	80005f8 <__aeabi_dmul>
 800fec2:	4642      	mov	r2, r8
 800fec4:	464b      	mov	r3, r9
 800fec6:	f7f0 f9e1 	bl	800028c <__adddf3>
 800feca:	4602      	mov	r2, r0
 800fecc:	460b      	mov	r3, r1
 800fece:	4630      	mov	r0, r6
 800fed0:	4639      	mov	r1, r7
 800fed2:	f7f0 f9d9 	bl	8000288 <__aeabi_dsub>
 800fed6:	4652      	mov	r2, sl
 800fed8:	465b      	mov	r3, fp
 800feda:	f7f0 f9d5 	bl	8000288 <__aeabi_dsub>
 800fede:	4602      	mov	r2, r0
 800fee0:	460b      	mov	r3, r1
 800fee2:	4620      	mov	r0, r4
 800fee4:	4629      	mov	r1, r5
 800fee6:	e7d9      	b.n	800fe9c <__ieee754_log+0x26c>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	4650      	mov	r0, sl
 800feee:	4659      	mov	r1, fp
 800fef0:	f7f0 f9ca 	bl	8000288 <__aeabi_dsub>
 800fef4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fef8:	f7f0 fb7e 	bl	80005f8 <__aeabi_dmul>
 800fefc:	4606      	mov	r6, r0
 800fefe:	460f      	mov	r7, r1
 800ff00:	2c00      	cmp	r4, #0
 800ff02:	f43f af25 	beq.w	800fd50 <__ieee754_log+0x120>
 800ff06:	a30a      	add	r3, pc, #40	@ (adr r3, 800ff30 <__ieee754_log+0x300>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff10:	f7f0 fb72 	bl	80005f8 <__aeabi_dmul>
 800ff14:	a308      	add	r3, pc, #32	@ (adr r3, 800ff38 <__ieee754_log+0x308>)
 800ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	460d      	mov	r5, r1
 800ff1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff22:	e729      	b.n	800fd78 <__ieee754_log+0x148>
 800ff24:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800ff80 <__ieee754_log+0x350>
 800ff28:	e698      	b.n	800fc5c <__ieee754_log+0x2c>
 800ff2a:	bf00      	nop
 800ff2c:	f3af 8000 	nop.w
 800ff30:	fee00000 	.word	0xfee00000
 800ff34:	3fe62e42 	.word	0x3fe62e42
 800ff38:	35793c76 	.word	0x35793c76
 800ff3c:	3dea39ef 	.word	0x3dea39ef
 800ff40:	55555555 	.word	0x55555555
 800ff44:	3fd55555 	.word	0x3fd55555
 800ff48:	df3e5244 	.word	0xdf3e5244
 800ff4c:	3fc2f112 	.word	0x3fc2f112
 800ff50:	96cb03de 	.word	0x96cb03de
 800ff54:	3fc74664 	.word	0x3fc74664
 800ff58:	94229359 	.word	0x94229359
 800ff5c:	3fd24924 	.word	0x3fd24924
 800ff60:	55555593 	.word	0x55555593
 800ff64:	3fe55555 	.word	0x3fe55555
 800ff68:	d078c69f 	.word	0xd078c69f
 800ff6c:	3fc39a09 	.word	0x3fc39a09
 800ff70:	1d8e78af 	.word	0x1d8e78af
 800ff74:	3fcc71c5 	.word	0x3fcc71c5
 800ff78:	9997fa04 	.word	0x9997fa04
 800ff7c:	3fd99999 	.word	0x3fd99999
	...
 800ff88:	c3500000 	.word	0xc3500000
 800ff8c:	43500000 	.word	0x43500000
 800ff90:	7fefffff 	.word	0x7fefffff
 800ff94:	3ff00000 	.word	0x3ff00000
 800ff98:	3fe00000 	.word	0x3fe00000

0800ff9c <_init>:
 800ff9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff9e:	bf00      	nop
 800ffa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffa2:	bc08      	pop	{r3}
 800ffa4:	469e      	mov	lr, r3
 800ffa6:	4770      	bx	lr

0800ffa8 <_fini>:
 800ffa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffaa:	bf00      	nop
 800ffac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffae:	bc08      	pop	{r3}
 800ffb0:	469e      	mov	lr, r3
 800ffb2:	4770      	bx	lr
