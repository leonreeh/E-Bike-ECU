
BLDC-ESC-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  080100d8  080100d8  000110d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105a8  080105a8  000122dc  2**0
                  CONTENTS
  4 .ARM          00000008  080105a8  080105a8  000115a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105b0  080105b0  000122dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105b0  080105b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105b4  080105b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  080105b8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122dc  2**0
                  CONTENTS
 10 .bss          00001ff8  200002dc  200002dc  000122dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022d4  200022d4  000122dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df79  00000000  00000000  0001230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004764  00000000  00000000  00030285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000349f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014e5  00000000  00000000  000364d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002609c  00000000  00000000  000379bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000235f7  00000000  00000000  0005da59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7065  00000000  00000000  00081050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001580b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000837c  00000000  00000000  001580f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00160474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080100bc 	.word	0x080100bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	080100bc 	.word	0x080100bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <hallState>:
  *				110		180° - 240°		4320° - 5760°
  *				010		240° - 300°		5760° - 7200°
  *				011		300° - 360°		7200° - 8640°
  *
  */
uint16_t hallState(uint16_t hall[]){
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	uint16_t commutatorState = -1;
 8000f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f44:	81fb      	strh	r3, [r7, #14]
	  if ((hall[0] == 1) && (hall[1] == 0) && (hall[2] == 1)) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10c      	bne.n	8000f68 <hallState+0x30>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3302      	adds	r3, #2
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d107      	bne.n	8000f68 <hallState+0x30>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <hallState+0x30>
		//Mechanical Angle 0°-60°
		  commutatorState = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	81fb      	strh	r3, [r7, #14]
 8000f66:	e053      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 0) && (hall[2] == 1)) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10c      	bne.n	8000f8a <hallState+0x52>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3302      	adds	r3, #2
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d107      	bne.n	8000f8a <hallState+0x52>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <hallState+0x52>
		//Mechanical Angle 60°-120°
		  commutatorState = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	e042      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 1) && (hall[2] == 1)) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <hallState+0x74>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3302      	adds	r3, #2
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d107      	bne.n	8000fac <hallState+0x74>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <hallState+0x74>
		//Mechanical Angle 120°-180°
		  commutatorState = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	81fb      	strh	r3, [r7, #14]
 8000faa:	e031      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 1) && (hall[2] == 0)) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10c      	bne.n	8000fce <hallState+0x96>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <hallState+0x96>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <hallState+0x96>
		//Mechanical Angle 180°-240°
		  commutatorState = 3;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	81fb      	strh	r3, [r7, #14]
 8000fcc:	e020      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 1) && (hall[1] == 1) && (hall[2] == 0)) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10c      	bne.n	8000ff0 <hallState+0xb8>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <hallState+0xb8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <hallState+0xb8>
		//Mechanical Angle 240°-300°
		  commutatorState = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	81fb      	strh	r3, [r7, #14]
 8000fee:	e00f      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 1) && (hall[1] == 0) && (hall[2] == 0)) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10b      	bne.n	8001010 <hallState+0xd8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <hallState+0xd8>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3304      	adds	r3, #4
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <hallState+0xd8>
		//Mechanical Angle 300°-360°
		  commutatorState = 5;
 800100c:	2305      	movs	r3, #5
 800100e:	81fb      	strh	r3, [r7, #14]
	  }
	  return commutatorState;
 8001010:	89fb      	ldrh	r3, [r7, #14]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <commutator>:
  * @param commutatorStep 		= 0-5 determined by FOC hall sensor position
  * @param duty					= PWM duty cycle 0-100
  * @param dir					= motor direction: 1 = fwr; -1= rws
  * @retval			= void
  */
void commutator(int commutatorStep, int duty, int dir){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]

	if(dir ==1){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	f040 80d8 	bne.w	80011e4 <commutator+0x1c4>
		switch(commutatorStep){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b05      	cmp	r3, #5
 8001038:	f200 80b8 	bhi.w	80011ac <commutator+0x18c>
 800103c:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <commutator+0x24>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001095 	.word	0x08001095
 800104c:	080010cd 	.word	0x080010cd
 8001050:	08001105 	.word	0x08001105
 8001054:	0800113d 	.word	0x0800113d
 8001058:	08001175 	.word	0x08001175
		//Phase Current:	U = I		V =	-I		W = 0
		//High Side			U = PWM		V = OFF		W = OFF
		//Low Side			U = OFF		V = ON		W = OFF
		case 0:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001062:	4871      	ldr	r0, [pc, #452]	@ (8001228 <commutator+0x208>)
 8001064:	f003 fc16 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106e:	486e      	ldr	r0, [pc, #440]	@ (8001228 <commutator+0x208>)
 8001070:	f003 fc10 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107a:	486b      	ldr	r0, [pc, #428]	@ (8001228 <commutator+0x208>)
 800107c:	f003 fc0a 	bl	8004894 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = duty;
 8001080:	4a6a      	ldr	r2, [pc, #424]	@ (800122c <commutator+0x20c>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = 0;
 8001086:	4b69      	ldr	r3, [pc, #420]	@ (800122c <commutator+0x20c>)
 8001088:	2200      	movs	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 800108c:	4b67      	ldr	r3, [pc, #412]	@ (800122c <commutator+0x20c>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 8001092:	e0a7      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = 0		V =	-I		W = I
		//High Side			U = OFF		V = OFF		W = PWM
		//Low Side			U = OFF		V = ON		W = OFF
		case 1:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109a:	4863      	ldr	r0, [pc, #396]	@ (8001228 <commutator+0x208>)
 800109c:	f003 fbfa 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a6:	4860      	ldr	r0, [pc, #384]	@ (8001228 <commutator+0x208>)
 80010a8:	f003 fbf4 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b2:	485d      	ldr	r0, [pc, #372]	@ (8001228 <commutator+0x208>)
 80010b4:	f003 fbee 	bl	8004894 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 80010b8:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <commutator+0x20c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80010be:	4b5b      	ldr	r3, [pc, #364]	@ (800122c <commutator+0x20c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = duty;
 80010c4:	4a59      	ldr	r2, [pc, #356]	@ (800122c <commutator+0x20c>)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	63d3      	str	r3, [r2, #60]	@ 0x3c

			break;
 80010ca:	e08b      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = -I		V =	0		W = I
		//High Side			U = OFF		V = OFF		W = PWM
		//Low Side			U = ON		V = OFF		W = OFF
		case 2:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d2:	4855      	ldr	r0, [pc, #340]	@ (8001228 <commutator+0x208>)
 80010d4:	f003 fbde 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010de:	4852      	ldr	r0, [pc, #328]	@ (8001228 <commutator+0x208>)
 80010e0:	f003 fbd8 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ea:	484f      	ldr	r0, [pc, #316]	@ (8001228 <commutator+0x208>)
 80010ec:	f003 fbd2 	bl	8004894 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 80010f0:	4b4e      	ldr	r3, [pc, #312]	@ (800122c <commutator+0x20c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <commutator+0x20c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = duty;
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <commutator+0x20c>)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	63d3      	str	r3, [r2, #60]	@ 0x3c

			break;
 8001102:	e06f      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = -I		V =	I		W = 0
		//High Side			U = OFF		V = PWM		W = OFF
		//Low Side			U = ON		V = OFF		W = OFF
		case 3:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	4847      	ldr	r0, [pc, #284]	@ (8001228 <commutator+0x208>)
 800110c:	f003 fbc2 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001116:	4844      	ldr	r0, [pc, #272]	@ (8001228 <commutator+0x208>)
 8001118:	f003 fbbc 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001122:	4841      	ldr	r0, [pc, #260]	@ (8001228 <commutator+0x208>)
 8001124:	f003 fbb6 	bl	8004894 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 8001128:	4b40      	ldr	r3, [pc, #256]	@ (800122c <commutator+0x20c>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = duty;
 800112e:	4a3f      	ldr	r2, [pc, #252]	@ (800122c <commutator+0x20c>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM1->CCR3 = 0;
 8001134:	4b3d      	ldr	r3, [pc, #244]	@ (800122c <commutator+0x20c>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 800113a:	e053      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = 0		V =	I		W = -I
		//High Side			U = OFF		V = PWM		W = OFF
		//Low Side			U = OFF		V = OFF		W = ON
		case 4:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	4839      	ldr	r0, [pc, #228]	@ (8001228 <commutator+0x208>)
 8001144:	f003 fba6 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800114e:	4836      	ldr	r0, [pc, #216]	@ (8001228 <commutator+0x208>)
 8001150:	f003 fba0 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800115a:	4833      	ldr	r0, [pc, #204]	@ (8001228 <commutator+0x208>)
 800115c:	f003 fb9a 	bl	8004894 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <commutator+0x20c>)
 8001162:	2200      	movs	r2, #0
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = duty;
 8001166:	4a31      	ldr	r2, [pc, #196]	@ (800122c <commutator+0x20c>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM1->CCR3 = 0;
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <commutator+0x20c>)
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 8001172:	e037      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = I		V =	0		W = -I
		//High Side			U = PWM		V = OFF		W = OFF
		//Low Side			U = OFF		V = OFF		W = ON
		case 5:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117a:	482b      	ldr	r0, [pc, #172]	@ (8001228 <commutator+0x208>)
 800117c:	f003 fb8a 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001186:	4828      	ldr	r0, [pc, #160]	@ (8001228 <commutator+0x208>)
 8001188:	f003 fb84 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001192:	4825      	ldr	r0, [pc, #148]	@ (8001228 <commutator+0x208>)
 8001194:	f003 fb7e 	bl	8004894 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = duty;
 8001198:	4a24      	ldr	r2, [pc, #144]	@ (800122c <commutator+0x20c>)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = 0;
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <commutator+0x20c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <commutator+0x20c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 80011aa:	e01b      	b.n	80011e4 <commutator+0x1c4>

		//i have no idea how you ended up here pls stop motor
		//High Side			U = OFF		V = OFF		W = OFF
		//Low Side			U = HIGH	V = HIGH	W = HIGH
		default:
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	481d      	ldr	r0, [pc, #116]	@ (8001228 <commutator+0x208>)
 80011b4:	f003 fb6e 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011be:	481a      	ldr	r0, [pc, #104]	@ (8001228 <commutator+0x208>)
 80011c0:	f003 fb68 	bl	8004894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ca:	4817      	ldr	r0, [pc, #92]	@ (8001228 <commutator+0x208>)
 80011cc:	f003 fb62 	bl	8004894 <HAL_GPIO_WritePin>

			TIM1->CCR1 = 0;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <commutator+0x20c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <commutator+0x20c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <commutator+0x20c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80011e2:	bf00      	nop
		}
	}
	if(dir !=1){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d01a      	beq.n	8001220 <commutator+0x200>
		//not implimented yet just break
		HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <commutator+0x208>)
 80011f2:	f003 fb4f 	bl	8004894 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011fc:	480a      	ldr	r0, [pc, #40]	@ (8001228 <commutator+0x208>)
 80011fe:	f003 fb49 	bl	8004894 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001208:	4807      	ldr	r0, [pc, #28]	@ (8001228 <commutator+0x208>)
 800120a:	f003 fb43 	bl	8004894 <HAL_GPIO_WritePin>

		TIM1->CCR1 = 0;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <commutator+0x20c>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <commutator+0x20c>)
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <commutator+0x20c>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020400 	.word	0x40020400
 800122c:	40010000 	.word	0x40010000

08001230 <initBLDC>:
/**
  * @brief Initializes the BLDC motor by reading hall sensor values and setting the commutator step
  * @param None
  * @retval void
  */
void initBLDC(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
	uint16_t hall[3];
	hall[0]= (GPIOC->IDR & GPIO_IDR_ID6)? 0x0001 : 0x0000; // Sensor A
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <initBLDC+0x60>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	80bb      	strh	r3, [r7, #4]
	hall[1]= (GPIOC->IDR & GPIO_IDR_ID7)? 0x0001 : 0x0000; // Sensor B
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <initBLDC+0x60>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	80fb      	strh	r3, [r7, #6]
	hall[2]= (GPIOC->IDR & GPIO_IDR_ID8)? 0x0001 : 0x0000; // Sensor C
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <initBLDC+0x60>)
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	813b      	strh	r3, [r7, #8]

	int step= hallState(hall);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe5f 	bl	8000f38 <hallState>
 800127a:	4603      	mov	r3, r0
 800127c:	60fb      	str	r3, [r7, #12]
	commutator(step, 15,1);
 800127e:	2201      	movs	r2, #1
 8001280:	210f      	movs	r1, #15
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fecc 	bl	8001020 <commutator>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020800 	.word	0x40020800

08001294 <map>:
  * @param in_max	= The upper bound of the value’s current range.
  * @param out_min	= The lower bound of the value’s target range.
  * @param out_max	= The upper bound of the value’s target range.
  * @retval			= The mapped value
  */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001294:	b490      	push	{r4, r7}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	4603      	mov	r3, r0
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
 80012ae:	4613      	mov	r3, r2
 80012b0:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	8a39      	ldrh	r1, [r7, #16]
 80012ba:	883a      	ldrh	r2, [r7, #0]
 80012bc:	1a8a      	subs	r2, r1, r2
 80012be:	fb03 f202 	mul.w	r2, r3, r2
 80012c2:	8879      	ldrh	r1, [r7, #2]
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	1acb      	subs	r3, r1, r3
 80012c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b29b      	uxth	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <adc_volt>:
/**
  * @brief Converts a raw ADC value to the corresponding input voltage
  * @param val    = Raw 12-bit ADC value (0-4095)
  * @retval float = Calculated input voltage
  */
float adc_volt(uint16_t val){
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	//((val/(39000+2200))*2200) /12bitADC
    float Vcc = 3.3;
 80012ea:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <adc_volt+0x90>)
 80012ec:	61fb      	str	r3, [r7, #28]
    float R1 = 37000.0;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <adc_volt+0x94>)
 80012f0:	61bb      	str	r3, [r7, #24]
    float R2 = 2200.0;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <adc_volt+0x98>)
 80012f4:	617b      	str	r3, [r7, #20]
    // Convert ADC value to voltage across R2
    float Vout = (val / 4095.0) * Vcc;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f913 	bl	8000524 <__aeabi_i2d>
 80012fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8001368 <adc_volt+0x88>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff faa2 	bl	800084c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4614      	mov	r4, r2
 800130e:	461d      	mov	r5, r3
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f7ff f919 	bl	8000548 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff f96b 	bl	80005f8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc3d 	bl	8000ba8 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	613b      	str	r3, [r7, #16]

    // Calculate the total voltage across R1 and R2
    float Vin = Vout * (R1 + R2) / R2;
 8001332:	ed97 7a06 	vldr	s14, [r7, #24]
 8001336:	edd7 7a05 	vldr	s15, [r7, #20]
 800133a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001342:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001346:	ed97 7a05 	vldr	s14, [r7, #20]
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	edc7 7a03 	vstr	s15, [r7, #12]

    return Vin;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	ee07 3a90 	vmov	s15, r3
}
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40affe00 	.word	0x40affe00
 8001370:	40533333 	.word	0x40533333
 8001374:	47108800 	.word	0x47108800
 8001378:	45098000 	.word	0x45098000
 800137c:	00000000 	.word	0x00000000

08001380 <adc_cur>:
/**
  * @brief Converts a raw ADC value to the corresponding current based on shunt resistor and amplification factor
  * @param val    = Raw 12-bit ADC value (0-4095)
  * @retval float = Calculated current in amperes
  */
float adc_cur(uint16_t val){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
    float Vcc = 3.3;
 800138a:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <adc_cur+0xb0>)
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    float amplification_factor = 20.0;
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <adc_cur+0xb4>)
 8001390:	623b      	str	r3, [r7, #32]
    float R_shunt = 0.004;
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <adc_cur+0xb8>)
 8001394:	61fb      	str	r3, [r7, #28]
    float offset_voltage = Vcc / 2.0;
 8001396:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800139a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800139e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Convert ADC value to the amplified voltage
    float Vadc = (val / 4095.0) * Vcc;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8bb 	bl	8000524 <__aeabi_i2d>
 80013ae:	a31e      	add	r3, pc, #120	@ (adr r3, 8001428 <adc_cur+0xa8>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa4a 	bl	800084c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4614      	mov	r4, r2
 80013be:	461d      	mov	r5, r3
 80013c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7ff f913 	bl	80005f8 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fbe5 	bl	8000ba8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	617b      	str	r3, [r7, #20]

    // Adjust for the offset voltage
    float Vadc_adjusted = Vadc - offset_voltage;
 80013e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80013e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a04 	vstr	s15, [r7, #16]

    // Determine the actual voltage drop across the shunt
    float Vshunt = Vadc_adjusted / amplification_factor;
 80013f2:	edd7 6a04 	vldr	s13, [r7, #16]
 80013f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80013fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fe:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate the current through the shunt
    float current = Vshunt / R_shunt;
 8001402:	edd7 6a03 	vldr	s13, [r7, #12]
 8001406:	ed97 7a07 	vldr	s14, [r7, #28]
 800140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140e:	edc7 7a02 	vstr	s15, [r7, #8]

    return current;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	ee07 3a90 	vmov	s15, r3
}
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	3728      	adds	r7, #40	@ 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bdb0      	pop	{r4, r5, r7, pc}
 8001422:	bf00      	nop
 8001424:	f3af 8000 	nop.w
 8001428:	00000000 	.word	0x00000000
 800142c:	40affe00 	.word	0x40affe00
 8001430:	40533333 	.word	0x40533333
 8001434:	41a00000 	.word	0x41a00000
 8001438:	3b83126f 	.word	0x3b83126f
 800143c:	00000000 	.word	0x00000000

08001440 <adc_temp>:
/**
  * @brief Converts a raw ADC value to the corresponding temperature in Celsius using an NTC thermistor
  * @param val    = Raw 12-bit ADC value (0-4095)
  * @retval float = Calculated temperature in Celsius
  */
float adc_temp(uint16_t val){
 8001440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001444:	b08c      	sub	sp, #48	@ 0x30
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	80fb      	strh	r3, [r7, #6]
    float Vcc = 3.3;
 800144c:	4b58      	ldr	r3, [pc, #352]	@ (80015b0 <adc_temp+0x170>)
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float R2 = 10000.0;
 8001450:	4b58      	ldr	r3, [pc, #352]	@ (80015b4 <adc_temp+0x174>)
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
    float T0 = 298.15; // 25°C in Kelvin
 8001454:	4b58      	ldr	r3, [pc, #352]	@ (80015b8 <adc_temp+0x178>)
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
    float R0 = 10000.0; // Resistance at 25°C
 8001458:	4b56      	ldr	r3, [pc, #344]	@ (80015b4 <adc_temp+0x174>)
 800145a:	623b      	str	r3, [r7, #32]
    float B = 2904.0; // Beta parameter
 800145c:	4b57      	ldr	r3, [pc, #348]	@ (80015bc <adc_temp+0x17c>)
 800145e:	61fb      	str	r3, [r7, #28]

    // Convert ADC value to voltage
    float Vadc = (val / 4095.0) * Vcc;
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f85e 	bl	8000524 <__aeabi_i2d>
 8001468:	a34d      	add	r3, pc, #308	@ (adr r3, 80015a0 <adc_temp+0x160>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f9ed 	bl	800084c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4614      	mov	r4, r2
 8001478:	461d      	mov	r5, r3
 800147a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800147c:	f7ff f864 	bl	8000548 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7ff f8b6 	bl	80005f8 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb88 	bl	8000ba8 <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]

    // Calculate the resistance of the NTC thermistor
    float R1 = R2 * (Vcc / Vadc - 1.0);
 800149c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014b2:	ee16 0a90 	vmov	r0, s13
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b40      	ldr	r3, [pc, #256]	@ (80015c0 <adc_temp+0x180>)
 80014c0:	f7fe fee2 	bl	8000288 <__aeabi_dsub>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f894 	bl	80005f8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb66 	bl	8000ba8 <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	617b      	str	r3, [r7, #20]

    // Calculate temperature in Kelvin using B-parameter equation
    float T = 1.0 / ((1.0 / T0) + (1.0 / B) * log(R1 / R0));
 80014e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e2:	f7ff f831 	bl	8000548 <__aeabi_f2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	4934      	ldr	r1, [pc, #208]	@ (80015c0 <adc_temp+0x180>)
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4614      	mov	r4, r2
 80014fa:	461d      	mov	r5, r3
 80014fc:	69f8      	ldr	r0, [r7, #28]
 80014fe:	f7ff f823 	bl	8000548 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	492d      	ldr	r1, [pc, #180]	@ (80015c0 <adc_temp+0x180>)
 800150c:	f7ff f99e 	bl	800084c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4690      	mov	r8, r2
 8001516:	4699      	mov	r9, r3
 8001518:	ed97 7a05 	vldr	s14, [r7, #20]
 800151c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001520:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001524:	ee16 0a90 	vmov	r0, s13
 8001528:	f7ff f80e 	bl	8000548 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	ec43 2b10 	vmov	d0, r2, r3
 8001534:	f00e fbc4 	bl	800fcc0 <log>
 8001538:	ec53 2b10 	vmov	r2, r3, d0
 800153c:	4640      	mov	r0, r8
 800153e:	4649      	mov	r1, r9
 8001540:	f7ff f85a 	bl	80005f8 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fe9e 	bl	800028c <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	f04f 0000 	mov.w	r0, #0
 8001558:	4919      	ldr	r1, [pc, #100]	@ (80015c0 <adc_temp+0x180>)
 800155a:	f7ff f977 	bl	800084c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb1f 	bl	8000ba8 <__aeabi_d2f>
 800156a:	4603      	mov	r3, r0
 800156c:	613b      	str	r3, [r7, #16]

    // Convert Kelvin to Celsius
    float T_Celsius = T - 273.15;
 800156e:	6938      	ldr	r0, [r7, #16]
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	a30c      	add	r3, pc, #48	@ (adr r3, 80015a8 <adc_temp+0x168>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe fe85 	bl	8000288 <__aeabi_dsub>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fb0f 	bl	8000ba8 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	60fb      	str	r3, [r7, #12]

    return T_Celsius;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	ee07 3a90 	vmov	s15, r3
}
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	3730      	adds	r7, #48	@ 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40affe00 	.word	0x40affe00
 80015a8:	66666666 	.word	0x66666666
 80015ac:	40711266 	.word	0x40711266
 80015b0:	40533333 	.word	0x40533333
 80015b4:	461c4000 	.word	0x461c4000
 80015b8:	43951333 	.word	0x43951333
 80015bc:	45358000 	.word	0x45358000
 80015c0:	3ff00000 	.word	0x3ff00000

080015c4 <rpm_tokmh>:
/**
  * @brief Converts motor RPM to speed in kilometers per hour (km/h) based on wheel circumference
  * @param rpm    = Motor RPM (revolutions per minute)
  * @retval float = Calculated speed in kilometers per hour (km/h)
  */
float rpm_tokmh(float rpm){
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	ed87 0a01 	vstr	s0, [r7, #4]
	//36inch wheel
	//91,44 cm wheel
	//U = 2·π·r
	//U = 287,267cm
	//U = 2,87267m
	float circumference = 2.87267;
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <rpm_tokmh+0x4c>)
 80015d0:	617b      	str	r3, [r7, #20]
    // distance traveled per minute in meters
    float distance_per_minute = rpm * circumference;
 80015d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015de:	edc7 7a04 	vstr	s15, [r7, #16]
    // Convert distance to kilometers per hour
    float speed_kmh = distance_per_minute * 60 / 1000;
 80015e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001614 <rpm_tokmh+0x50>
 80015ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ee:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001618 <rpm_tokmh+0x54>
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	edc7 7a03 	vstr	s15, [r7, #12]
    return speed_kmh;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ee07 3a90 	vmov	s15, r3
}
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	4037d9d3 	.word	0x4037d9d3
 8001614:	42700000 	.word	0x42700000
 8001618:	447a0000 	.word	0x447a0000

0800161c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001626:	4a38      	ldr	r2, [pc, #224]	@ (8001708 <HD44780_Init+0xec>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800162c:	4b37      	ldr	r3, [pc, #220]	@ (800170c <HD44780_Init+0xf0>)
 800162e:	2208      	movs	r2, #8
 8001630:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001632:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <HD44780_Init+0xf4>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <HD44780_Init+0xec>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d907      	bls.n	8001650 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001640:	4b33      	ldr	r3, [pc, #204]	@ (8001710 <HD44780_Init+0xf4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <HD44780_Init+0xf4>)
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	e006      	b.n	800165e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001650:	4b2f      	ldr	r3, [pc, #188]	@ (8001710 <HD44780_Init+0xf4>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HD44780_Init+0xf4>)
 800165c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800165e:	f000 f985 	bl	800196c <DelayInit>
  HAL_Delay(50);
 8001662:	2032      	movs	r0, #50	@ 0x32
 8001664:	f002 f87a 	bl	800375c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HD44780_Init+0xf0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f943 	bl	80018f8 <ExpanderWrite>
  HAL_Delay(1000);
 8001672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001676:	f002 f871 	bl	800375c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800167a:	2030      	movs	r0, #48	@ 0x30
 800167c:	f000 f92b 	bl	80018d6 <Write4Bits>
  DelayUS(4500);
 8001680:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001684:	f000 f99c 	bl	80019c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001688:	2030      	movs	r0, #48	@ 0x30
 800168a:	f000 f924 	bl	80018d6 <Write4Bits>
  DelayUS(4500);
 800168e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001692:	f000 f995 	bl	80019c0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001696:	2030      	movs	r0, #48	@ 0x30
 8001698:	f000 f91d 	bl	80018d6 <Write4Bits>
  DelayUS(4500);
 800169c:	f241 1094 	movw	r0, #4500	@ 0x1194
 80016a0:	f000 f98e 	bl	80019c0 <DelayUS>

  Write4Bits(0x02 << 4);
 80016a4:	2020      	movs	r0, #32
 80016a6:	f000 f916 	bl	80018d6 <Write4Bits>
  DelayUS(100);
 80016aa:	2064      	movs	r0, #100	@ 0x64
 80016ac:	f000 f988 	bl	80019c0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <HD44780_Init+0xf4>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f8ce 	bl	800185c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HD44780_Init+0xf8>)
 80016c2:	2204      	movs	r2, #4
 80016c4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80016c6:	f000 f875 	bl	80017b4 <HD44780_Display>
  HD44780_Clear();
 80016ca:	f000 f82b 	bl	8001724 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HD44780_Init+0xfc>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HD44780_Init+0xfc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f8bc 	bl	800185c <SendCommand>
  DelayUS(4500);
 80016e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80016e8:	f000 f96a 	bl	80019c0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80016ec:	490b      	ldr	r1, [pc, #44]	@ (800171c <HD44780_Init+0x100>)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f876 	bl	80017e0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80016f4:	490a      	ldr	r1, [pc, #40]	@ (8001720 <HD44780_Init+0x104>)
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 f872 	bl	80017e0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80016fc:	f000 f81d 	bl	800173a <HD44780_Home>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002fb 	.word	0x200002fb
 800170c:	200002fc 	.word	0x200002fc
 8001710:	200002f8 	.word	0x200002f8
 8001714:	200002f9 	.word	0x200002f9
 8001718:	200002fa 	.word	0x200002fa
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008

08001724 <HD44780_Clear>:

void HD44780_Clear()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001728:	2001      	movs	r0, #1
 800172a:	f000 f897 	bl	800185c <SendCommand>
  DelayUS(2000);
 800172e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001732:	f000 f945 	bl	80019c0 <DelayUS>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}

0800173a <HD44780_Home>:

void HD44780_Home()
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800173e:	2002      	movs	r0, #2
 8001740:	f000 f88c 	bl	800185c <SendCommand>
  DelayUS(2000);
 8001744:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001748:	f000 f93a 	bl	80019c0 <DelayUS>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <HD44780_SetCursor>:
  * @param col    = Column position (0-based)
  * @param row    = Row position (0-based)
  * @retval void
  */
void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	4613      	mov	r3, r2
 800175e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HD44780_SetCursor+0x5c>)
 8001762:	f107 0408 	add.w	r4, r7, #8
 8001766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800176c:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HD44780_SetCursor+0x60>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	79ba      	ldrb	r2, [r7, #6]
 8001772:	429a      	cmp	r2, r3
 8001774:	d303      	bcc.n	800177e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HD44780_SetCursor+0x60>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3b01      	subs	r3, #1
 800177c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	3318      	adds	r3, #24
 8001784:	443b      	add	r3, r7
 8001786:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4413      	add	r3, r2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	b25b      	sxtb	r3, r3
 8001794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f85d 	bl	800185c <SendCommand>
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	080100d8 	.word	0x080100d8
 80017b0:	200002fb 	.word	0x200002fb

080017b4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HD44780_Display+0x28>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HD44780_Display+0x28>)
 80017c4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HD44780_Display+0x28>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f843 	bl	800185c <SendCommand>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002f9 	.word	0x200002f9

080017e0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f82a 	bl	800185c <SendCommand>
  for (int i=0; i<8; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e009      	b.n	8001822 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f82e 	bl	8001878 <SendChar>
  for (int i=0; i<8; i++)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b07      	cmp	r3, #7
 8001826:	ddf2      	ble.n	800180e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HD44780_PrintStr>:
  * @brief Prints a string to the HD44780 LCD display
  * @param c    = Pointer to a null-terminated string to display
  * @retval void
  */
void HD44780_PrintStr(const char c[])
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800183a:	e006      	b.n	800184a <HD44780_PrintStr+0x18>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f817 	bl	8001878 <SendChar>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f4      	bne.n	800183c <HD44780_PrintStr+0xa>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f812 	bl	8001894 <Send>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2101      	movs	r1, #1
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f804 	bl	8001894 <Send>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	460a      	mov	r2, r1
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	4613      	mov	r3, r2
 80018a2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f023 030f 	bic.w	r3, r3, #15
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f80b 	bl	80018d6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80018c0:	7bba      	ldrb	r2, [r7, #14]
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f804 	bl	80018d6 <Write4Bits>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f808 	bl	80018f8 <ExpanderWrite>
  PulseEnable(value);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f820 	bl	8001930 <PulseEnable>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <ExpanderWrite+0x30>)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4313      	orrs	r3, r2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800190e:	f107 020f 	add.w	r2, r7, #15
 8001912:	230a      	movs	r3, #10
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	214e      	movs	r1, #78	@ 0x4e
 800191a:	4804      	ldr	r0, [pc, #16]	@ (800192c <ExpanderWrite+0x34>)
 800191c:	f003 f94a 	bl	8004bb4 <HAL_I2C_Master_Transmit>
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002fc 	.word	0x200002fc
 800192c:	200003d8 	.word	0x200003d8

08001930 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ffd8 	bl	80018f8 <ExpanderWrite>
  DelayUS(20);
 8001948:	2014      	movs	r0, #20
 800194a:	f000 f839 	bl	80019c0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ffce 	bl	80018f8 <ExpanderWrite>
  DelayUS(20);
 800195c:	2014      	movs	r0, #20
 800195e:	f000 f82f 	bl	80019c0 <DelayUS>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <DelayInit>:

static void DelayInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <DelayInit+0x4c>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a10      	ldr	r2, [pc, #64]	@ (80019b8 <DelayInit+0x4c>)
 8001976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800197a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800197c:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <DelayInit+0x4c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <DelayInit+0x4c>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <DelayInit+0x50>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <DelayInit+0x50>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <DelayInit+0x50>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <DelayInit+0x50>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <DelayInit+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80019a6:	bf00      	nop
  __ASM volatile ("NOP");
 80019a8:	bf00      	nop
  __ASM volatile ("NOP");
 80019aa:	bf00      	nop
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000edf0 	.word	0xe000edf0
 80019bc:	e0001000 	.word	0xe0001000

080019c0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <DelayUS+0x44>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <DelayUS+0x48>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9a      	lsrs	r2, r3, #18
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <DelayUS+0x4c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <DelayUS+0x4c>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f6      	bhi.n	80019e2 <DelayUS+0x22>
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000018 	.word	0x20000018
 8001a08:	431bde83 	.word	0x431bde83
 8001a0c:	e0001000 	.word	0xe0001000

08001a10 <Init_lcd_ar>:
/**
  * @brief Initializes the lcd_ar struct with default cursor positions and display values
  * @param lcd    = Pointer to an lcd_ar struct to initialize
  * @retval void
  */
void Init_lcd_ar(lcd_ar* lcd){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	//Load cursor positions
	lcd ->cur_volt[0] =15;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	74da      	strb	r2, [r3, #19]
	lcd ->cur_volt[1] =0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	751a      	strb	r2, [r3, #20]

	lcd ->cur_temp[0]=0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	755a      	strb	r2, [r3, #21]
	lcd ->cur_temp[1]=0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	759a      	strb	r2, [r3, #22]

	lcd ->cur_amp[0] =15;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	220f      	movs	r2, #15
 8001a34:	75da      	strb	r2, [r3, #23]
	lcd ->cur_amp[1] =1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	761a      	strb	r2, [r3, #24]

	lcd ->cur_speed[0]=9;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2209      	movs	r2, #9
 8001a40:	765a      	strb	r2, [r3, #25]
	lcd ->cur_speed[1]=3;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2203      	movs	r2, #3
 8001a46:	769a      	strb	r2, [r3, #26]

	lcd ->cur_erpm[0]=0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	76da      	strb	r2, [r3, #27]
	lcd ->cur_erpm[1]=3;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2203      	movs	r2, #3
 8001a52:	771a      	strb	r2, [r3, #28]

	lcd ->cur_pwm[0]=1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	775a      	strb	r2, [r3, #29]
	lcd ->cur_pwm[1]=2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	779a      	strb	r2, [r3, #30]

	//Set up Display for array mode
	//Init Volt
	HD44780_SetCursor(15,0);
 8001a60:	2100      	movs	r1, #0
 8001a62:	200f      	movs	r0, #15
 8001a64:	f7ff fe74 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("42.0V");
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <Init_lcd_ar+0xa0>)
 8001a6a:	f7ff fee2 	bl	8001832 <HD44780_PrintStr>
	//Init Temp
	HD44780_SetCursor(0,0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fe6d 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("069C");
 8001a76:	480f      	ldr	r0, [pc, #60]	@ (8001ab4 <Init_lcd_ar+0xa4>)
 8001a78:	f7ff fedb 	bl	8001832 <HD44780_PrintStr>
	//Init Current
	HD44780_SetCursor(15,1);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f7ff fe66 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("02.5A");
 8001a84:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <Init_lcd_ar+0xa8>)
 8001a86:	f7ff fed4 	bl	8001832 <HD44780_PrintStr>
	//Init Speed
	HD44780_SetCursor(9,3);
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	2009      	movs	r0, #9
 8001a8e:	f7ff fe5f 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("10KM/H");
 8001a92:	480a      	ldr	r0, [pc, #40]	@ (8001abc <Init_lcd_ar+0xac>)
 8001a94:	f7ff fecd 	bl	8001832 <HD44780_PrintStr>
	//Init ERPM
	HD44780_SetCursor(0,3);
 8001a98:	2103      	movs	r1, #3
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fe58 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("4000");
 8001aa0:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <Init_lcd_ar+0xb0>)
 8001aa2:	f7ff fec6 	bl	8001832 <HD44780_PrintStr>
	//Iinit PWM
	//HD44780_SetCursor(1,2);
	//HD44780_PrintStr("00%");
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	080100e8 	.word	0x080100e8
 8001ab4:	080100f0 	.word	0x080100f0
 8001ab8:	080100f8 	.word	0x080100f8
 8001abc:	08010100 	.word	0x08010100
 8001ac0:	08010108 	.word	0x08010108

08001ac4 <update_lcd_val>:
  * @brief Updates the lcd_ar struct and LCD display with new sensor values
  * @param ar     = Pointer to an lcd_ar struct containing cursor positions
  * @param val    = Array of float values to update [Voltage, Current, Temperature, Speed, (optional: PWM)]
  * @retval void
  */
void update_lcd_val(lcd_ar* ar, float val[]){
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	//Set Voltage
	snprintf(ar->volt, 5, "%04.1f", val[0]);
 8001ace:	687c      	ldr	r4, [r7, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd37 	bl	8000548 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	e9cd 2300 	strd	r2, r3, [sp]
 8001ae2:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <update_lcd_val+0x13c>)
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f00b ffaa 	bl	800da40 <sniprintf>
	HD44780_SetCursor(ar->cur_volt[0],ar->cur_volt[1]);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7cda      	ldrb	r2, [r3, #19]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7d1b      	ldrb	r3, [r3, #20]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff fe2a 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->volt);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe97 	bl	8001832 <HD44780_PrintStr>
	//Set Current
	snprintf(ar->amp, 5, "%04.1f", val[1]);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1ddc      	adds	r4, r3, #7
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd1a 	bl	8000548 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1c:	4a38      	ldr	r2, [pc, #224]	@ (8001c00 <update_lcd_val+0x13c>)
 8001b1e:	2105      	movs	r1, #5
 8001b20:	4620      	mov	r0, r4
 8001b22:	f00b ff8d 	bl	800da40 <sniprintf>
	HD44780_SetCursor(ar->cur_amp[0],ar->cur_amp[1]);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7dda      	ldrb	r2, [r3, #23]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7ff fe0d 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->amp);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3307      	adds	r3, #7
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe79 	bl	8001832 <HD44780_PrintStr>
	//Set Temp
	snprintf(ar->temp, 4, "%03.0f", val[2]);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	1d1c      	adds	r4, r3, #4
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3308      	adds	r3, #8
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcfc 	bl	8000548 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9cd 2300 	strd	r2, r3, [sp]
 8001b58:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <update_lcd_val+0x140>)
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f00b ff6f 	bl	800da40 <sniprintf>
	HD44780_SetCursor(ar->cur_temp[0],ar->cur_temp[1]);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7d5a      	ldrb	r2, [r3, #21]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7d9b      	ldrb	r3, [r3, #22]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7ff fdef 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->temp);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fe5b 	bl	8001832 <HD44780_PrintStr>
	//Set Speed
	snprintf(ar->speed, 3, "%02.0f",val[3] );
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f103 040b 	add.w	r4, r3, #11
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	330c      	adds	r3, #12
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fcdd 	bl	8000548 <__aeabi_f2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	e9cd 2300 	strd	r2, r3, [sp]
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <update_lcd_val+0x144>)
 8001b98:	2103      	movs	r1, #3
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f00b ff50 	bl	800da40 <sniprintf>
	HD44780_SetCursor(ar->cur_speed[0],ar->cur_speed[1]);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7e5a      	ldrb	r2, [r3, #25]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e9b      	ldrb	r3, [r3, #26]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7ff fdd0 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->speed);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	330b      	adds	r3, #11
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fe3c 	bl	8001832 <HD44780_PrintStr>
	//Set ERPM
	snprintf(ar->erpm, 5, "%04.0f",rpm);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 040d 	add.w	r4, r3, #13
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <update_lcd_val+0x148>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcbf 	bl	8000548 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	e9cd 2300 	strd	r2, r3, [sp]
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c10 <update_lcd_val+0x14c>)
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f00b ff32 	bl	800da40 <sniprintf>
	HD44780_SetCursor(ar->cur_erpm[0],ar->cur_erpm[1]);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7eda      	ldrb	r2, [r3, #27]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7f1b      	ldrb	r3, [r3, #28]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f7ff fdb2 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr(ar->erpm);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	330d      	adds	r3, #13
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe1e 	bl	8001832 <HD44780_PrintStr>
	//Set PWm
	//snprintf(ar->pwm,3,"%02.0f",val[4] );
	//HD44780_SetCursor(ar->cur_pwm[0],ar->cur_pwm[1]);
	//HD44780_PrintStr(ar->pwm);

}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	08010110 	.word	0x08010110
 8001c04:	08010118 	.word	0x08010118
 8001c08:	08010120 	.word	0x08010120
 8001c0c:	20000554 	.word	0x20000554
 8001c10:	08010128 	.word	0x08010128

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	//init button array
	but[0]=1;
 8001c18:	4b61      	ldr	r3, [pc, #388]	@ (8001da0 <main+0x18c>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	801a      	strh	r2, [r3, #0]
	but[1]=1;
 8001c1e:	4b60      	ldr	r3, [pc, #384]	@ (8001da0 <main+0x18c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	805a      	strh	r2, [r3, #2]
	but[2]=1;
 8001c24:	4b5e      	ldr	r3, [pc, #376]	@ (8001da0 <main+0x18c>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	809a      	strh	r2, [r3, #4]
	but[3]=1;
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001da0 <main+0x18c>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f001 fd22 	bl	8003678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f8ce 	bl	8001dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f000 fc28 	bl	800248c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c3c:	f000 f936 	bl	8001eac <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c40:	f000 f986 	bl	8001f50 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c44:	f000 f9d6 	bl	8001ff4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001c48:	f000 fa42 	bl	80020d0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001c4c:	f000 fb72 	bl	8002334 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001c50:	f000 fbf2 	bl	8002438 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001c54:	f00a fce6 	bl	800c624 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001c58:	f000 fa68 	bl	800212c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c5c:	f000 fb1e 	bl	800229c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Start 100ms AUX Timer
   */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001c60:	4850      	ldr	r0, [pc, #320]	@ (8001da4 <main+0x190>)
 8001c62:	f005 fa3b 	bl	80070dc <HAL_TIM_Base_Start_IT>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <main+0x5c>
  {
    /* Starting Error */
    Error_Handler();
 8001c6c:	f001 f8e2 	bl	8002e34 <Error_Handler>
  }

  //Close Relay
  HAL_GPIO_WritePin(GPIOB,PB5_DO_DC_ON_Pin,GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2120      	movs	r1, #32
 8001c74:	484c      	ldr	r0, [pc, #304]	@ (8001da8 <main+0x194>)
 8001c76:	f002 fe0d 	bl	8004894 <HAL_GPIO_WritePin>
  //Init Blinker
  TIM3->CCR1 = 250;
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001dac <main+0x198>)
 8001c7c:	22fa      	movs	r2, #250	@ 0xfa
 8001c7e:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c80:	2100      	movs	r1, #0
 8001c82:	484b      	ldr	r0, [pc, #300]	@ (8001db0 <main+0x19c>)
 8001c84:	f005 faf4 	bl	8007270 <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 250;
 8001c88:	4b48      	ldr	r3, [pc, #288]	@ (8001dac <main+0x198>)
 8001c8a:	22fa      	movs	r2, #250	@ 0xfa
 8001c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4847      	ldr	r0, [pc, #284]	@ (8001db0 <main+0x19c>)
 8001c92:	f005 faed 	bl	8007270 <HAL_TIM_PWM_Start>

   HD44780_Init(4);
 8001c96:	2004      	movs	r0, #4
 8001c98:	f7ff fcc0 	bl	800161c <HD44780_Init>
   HD44780_Clear();
 8001c9c:	f7ff fd42 	bl	8001724 <HD44780_Clear>

   HD44780_SetCursor(6,0);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2006      	movs	r0, #6
 8001ca4:	f7ff fd54 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("Init...");
 8001ca8:	4842      	ldr	r0, [pc, #264]	@ (8001db4 <main+0x1a0>)
 8001caa:	f7ff fdc2 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(250);
 8001cae:	20fa      	movs	r0, #250	@ 0xfa
 8001cb0:	f001 fd54 	bl	800375c <HAL_Delay>

   HD44780_SetCursor(5,1);
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	2005      	movs	r0, #5
 8001cb8:	f7ff fd4a 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("BLDC DRIVE");
 8001cbc:	483e      	ldr	r0, [pc, #248]	@ (8001db8 <main+0x1a4>)
 8001cbe:	f7ff fdb8 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(250);
 8001cc2:	20fa      	movs	r0, #250	@ 0xfa
 8001cc4:	f001 fd4a 	bl	800375c <HAL_Delay>

   HD44780_SetCursor(8,2);
 8001cc8:	2102      	movs	r1, #2
 8001cca:	2008      	movs	r0, #8
 8001ccc:	f7ff fd40 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("By:");
 8001cd0:	483a      	ldr	r0, [pc, #232]	@ (8001dbc <main+0x1a8>)
 8001cd2:	f7ff fdae 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(250);
 8001cd6:	20fa      	movs	r0, #250	@ 0xfa
 8001cd8:	f001 fd40 	bl	800375c <HAL_Delay>

   HD44780_SetCursor(5,3);
 8001cdc:	2103      	movs	r1, #3
 8001cde:	2005      	movs	r0, #5
 8001ce0:	f7ff fd36 	bl	8001750 <HD44780_SetCursor>
   HD44780_PrintStr("LEON REEH");
 8001ce4:	4836      	ldr	r0, [pc, #216]	@ (8001dc0 <main+0x1ac>)
 8001ce6:	f7ff fda4 	bl	8001832 <HD44780_PrintStr>
   HAL_Delay(500);
 8001cea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cee:	f001 fd35 	bl	800375c <HAL_Delay>
   HD44780_Clear();
 8001cf2:	f7ff fd17 	bl	8001724 <HD44780_Clear>

   Init_lcd_ar(&lcd_val);
 8001cf6:	4833      	ldr	r0, [pc, #204]	@ (8001dc4 <main+0x1b0>)
 8001cf8:	f7ff fe8a 	bl	8001a10 <Init_lcd_ar>
   resetDO();
 8001cfc:	f000 ff1c 	bl	8002b38 <resetDO>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Read inputs
	  readADCs();
 8001d00:	f000 fd34 	bl	800276c <readADCs>
	  readDI();
 8001d04:	f000 fe92 	bl	8002a2c <readDI>
	  doADCs();
 8001d08:	f000 fd8e 	bl	8002828 <doADCs>
	  /* STATE MACHINE */
	  switch(STATE){
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <main+0x1b4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d82f      	bhi.n	8001d74 <main+0x160>
 8001d14:	a201      	add	r2, pc, #4	@ (adr r2, 8001d1c <main+0x108>)
 8001d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1a:	bf00      	nop
 8001d1c:	08001d39 	.word	0x08001d39
 8001d20:	08001d43 	.word	0x08001d43
 8001d24:	08001d4d 	.word	0x08001d4d
 8001d28:	08001d57 	.word	0x08001d57
 8001d2c:	08001d61 	.word	0x08001d61
 8001d30:	08001d75 	.word	0x08001d75
 8001d34:	08001d6b 	.word	0x08001d6b
	  	  case READY:
	  		  ready();
 8001d38:	f000 ff14 	bl	8002b64 <ready>
	  		  setDO();
 8001d3c:	f000 fec0 	bl	8002ac0 <setDO>
	  		  break;
 8001d40:	e01d      	b.n	8001d7e <main+0x16a>

	  	  case DRIVE:
	  		  drive();
 8001d42:	f000 ff5d 	bl	8002c00 <drive>
	  		  setDO();
 8001d46:	f000 febb 	bl	8002ac0 <setDO>
	  		  break;
 8001d4a:	e018      	b.n	8001d7e <main+0x16a>

	  	  case BREAK:
	  		  breaking();
 8001d4c:	f000 ff90 	bl	8002c70 <breaking>
	  		  setDO();
 8001d50:	f000 feb6 	bl	8002ac0 <setDO>
	  		  break;
 8001d54:	e013      	b.n	8001d7e <main+0x16a>

	  	  case SWFAULT:
	  		  resetDO();
 8001d56:	f000 feef 	bl	8002b38 <resetDO>
	  		  swfault();
 8001d5a:	f000 ffbf 	bl	8002cdc <swfault>
	  		  break;
 8001d5e:	e00e      	b.n	8001d7e <main+0x16a>

	  	  case HWFAULT:
	  		  resetDO();
 8001d60:	f000 feea 	bl	8002b38 <resetDO>
	  		  hwfault();
 8001d64:	f000 ffcc 	bl	8002d00 <hwfault>
	  		  break;
 8001d68:	e009      	b.n	8001d7e <main+0x16a>

	  	  case DEBUGST:
	  		  debug();
 8001d6a:	f000 ffdf 	bl	8002d2c <debug>
	  		  setDO();
 8001d6e:	f000 fea7 	bl	8002ac0 <setDO>
	  		  break;
 8001d72:	e004      	b.n	8001d7e <main+0x16a>

	  	  default:
	  		  resetDO();
 8001d74:	f000 fee0 	bl	8002b38 <resetDO>
	  		  hwfault();
 8001d78:	f000 ffc2 	bl	8002d00 <hwfault>
	  		  break;
 8001d7c:	bf00      	nop
	  	  }

	  //Update LCD every 500ms
	  if(timcc>=5){
 8001d7e:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <main+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	dd08      	ble.n	8001d98 <main+0x184>
		  update_lcd_val(&lcd_val,ADC_VAL);
 8001d86:	4912      	ldr	r1, [pc, #72]	@ (8001dd0 <main+0x1bc>)
 8001d88:	480e      	ldr	r0, [pc, #56]	@ (8001dc4 <main+0x1b0>)
 8001d8a:	f7ff fe9b 	bl	8001ac4 <update_lcd_val>
		  writeState();
 8001d8e:	f000 fe05 	bl	800299c <writeState>
		  timcc =0;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <main+0x1b8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(20);
 8001d98:	2014      	movs	r0, #20
 8001d9a:	f001 fcdf 	bl	800375c <HAL_Delay>
	  readADCs();
 8001d9e:	e7af      	b.n	8001d00 <main+0xec>
 8001da0:	2000056c 	.word	0x2000056c
 8001da4:	20000474 	.word	0x20000474
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40000400 	.word	0x40000400
 8001db0:	200004bc 	.word	0x200004bc
 8001db4:	08010130 	.word	0x08010130
 8001db8:	08010138 	.word	0x08010138
 8001dbc:	08010144 	.word	0x08010144
 8001dc0:	08010148 	.word	0x08010148
 8001dc4:	20000578 	.word	0x20000578
 8001dc8:	20000010 	.word	0x20000010
 8001dcc:	20000598 	.word	0x20000598
 8001dd0:	2000055c 	.word	0x2000055c

08001dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b094      	sub	sp, #80	@ 0x50
 8001dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dda:	f107 0320 	add.w	r3, r7, #32
 8001dde:	2230      	movs	r2, #48	@ 0x30
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00b fea3 	bl	800db2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <SystemClock_Config+0xd0>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	4a28      	ldr	r2, [pc, #160]	@ (8001ea4 <SystemClock_Config+0xd0>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e08:	4b26      	ldr	r3, [pc, #152]	@ (8001ea4 <SystemClock_Config+0xd0>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <SystemClock_Config+0xd4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <SystemClock_Config+0xd4>)
 8001e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <SystemClock_Config+0xd4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e42:	2302      	movs	r3, #2
 8001e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e50:	2348      	movs	r3, #72	@ 0x48
 8001e52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e5c:	f107 0320 	add.w	r3, r7, #32
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fc53 	bl	800670c <HAL_RCC_OscConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e6c:	f000 ffe2 	bl	8002e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e70:	230f      	movs	r3, #15
 8001e72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 feb6 	bl	8006bfc <HAL_RCC_ClockConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e96:	f000 ffcd 	bl	8002e34 <Error_Handler>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3750      	adds	r7, #80	@ 0x50
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000

08001eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ec0:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <MX_ADC1_Init+0x9c>)
 8001ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ed8:	2204      	movs	r2, #4
 8001eda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eea:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001eec:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <MX_ADC1_Init+0xa0>)
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f0a:	480e      	ldr	r0, [pc, #56]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001f0c:	f001 fc4a 	bl	80037a4 <HAL_ADC_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f16:	f000 ff8d 	bl	8002e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f26:	463b      	mov	r3, r7
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	@ (8001f44 <MX_ADC1_Init+0x98>)
 8001f2c:	f001 ff4a 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f36:	f000 ff7d 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000300 	.word	0x20000300
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	0f000001 	.word	0x0f000001

08001f50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f56:	463b      	mov	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f64:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <MX_ADC2_Init+0x9c>)
 8001f66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f88:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f90:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <MX_ADC2_Init+0xa0>)
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001fae:	480e      	ldr	r0, [pc, #56]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001fb0:	f001 fbf8 	bl	80037a4 <HAL_ADC_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001fba:	f000 ff3b 	bl	8002e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4806      	ldr	r0, [pc, #24]	@ (8001fe8 <MX_ADC2_Init+0x98>)
 8001fd0:	f001 fef8 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001fda:	f000 ff2b 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000348 	.word	0x20000348
 8001fec:	40012100 	.word	0x40012100
 8001ff0:	0f000001 	.word	0x0f000001

08001ff4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002006:	4b2f      	ldr	r3, [pc, #188]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002008:	4a2f      	ldr	r2, [pc, #188]	@ (80020c8 <MX_ADC3_Init+0xd4>)
 800200a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800200c:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 800200e:	2200      	movs	r2, #0
 8002010:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002012:	4b2c      	ldr	r3, [pc, #176]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8002018:	4b2a      	ldr	r3, [pc, #168]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 800201a:	2204      	movs	r2, #4
 800201c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800201e:	4b29      	ldr	r3, [pc, #164]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002020:	2204      	movs	r2, #4
 8002022:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002024:	4b27      	ldr	r3, [pc, #156]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800202c:	4b25      	ldr	r3, [pc, #148]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002032:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002034:	4a25      	ldr	r2, [pc, #148]	@ (80020cc <MX_ADC3_Init+0xd8>)
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002038:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 800203e:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002040:	2203      	movs	r2, #3
 8002042:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002044:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 800204e:	2201      	movs	r2, #1
 8002050:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002052:	481c      	ldr	r0, [pc, #112]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002054:	f001 fba6 	bl	80037a4 <HAL_ADC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800205e:	f000 fee9 	bl	8002e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002062:	2301      	movs	r3, #1
 8002064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800206a:	2302      	movs	r3, #2
 800206c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	4619      	mov	r1, r3
 8002072:	4814      	ldr	r0, [pc, #80]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002074:	f001 fea6 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800207e:	f000 fed9 	bl	8002e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002086:	2302      	movs	r3, #2
 8002088:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800208a:	463b      	mov	r3, r7
 800208c:	4619      	mov	r1, r3
 800208e:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 8002090:	f001 fe98 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 800209a:	f000 fecb 	bl	8002e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800209e:	230d      	movs	r3, #13
 80020a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80020a2:	2303      	movs	r3, #3
 80020a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020a6:	463b      	mov	r3, r7
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	@ (80020c4 <MX_ADC3_Init+0xd0>)
 80020ac:	f001 fe8a 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 80020b6:	f000 febd 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000390 	.word	0x20000390
 80020c8:	40012200 	.word	0x40012200
 80020cc:	0f000001 	.word	0x0f000001

080020d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <MX_I2C1_Init+0x50>)
 80020d6:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <MX_I2C1_Init+0x54>)
 80020d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <MX_I2C1_Init+0x50>)
 80020dc:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <MX_I2C1_Init+0x58>)
 80020de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <MX_I2C1_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <MX_I2C1_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <MX_I2C1_Init+0x50>)
 80020ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <MX_I2C1_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <MX_I2C1_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002100:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <MX_I2C1_Init+0x50>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <MX_I2C1_Init+0x50>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800210c:	4804      	ldr	r0, [pc, #16]	@ (8002120 <MX_I2C1_Init+0x50>)
 800210e:	f002 fc0d 	bl	800492c <HAL_I2C_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002118:	f000 fe8c 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200003d8 	.word	0x200003d8
 8002124:	40005400 	.word	0x40005400
 8002128:	000186a0 	.word	0x000186a0

0800212c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b096      	sub	sp, #88	@ 0x58
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	615a      	str	r2, [r3, #20]
 800215c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2220      	movs	r2, #32
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f00b fce2 	bl	800db2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800216a:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <MX_TIM1_Init+0x168>)
 800216c:	4a4a      	ldr	r2, [pc, #296]	@ (8002298 <MX_TIM1_Init+0x16c>)
 800216e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8002170:	4b48      	ldr	r3, [pc, #288]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002172:	220f      	movs	r2, #15
 8002174:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002176:	4b47      	ldr	r3, [pc, #284]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800217c:	4b45      	ldr	r3, [pc, #276]	@ (8002294 <MX_TIM1_Init+0x168>)
 800217e:	2263      	movs	r2, #99	@ 0x63
 8002180:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002182:	4b44      	ldr	r3, [pc, #272]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002188:	4b42      	ldr	r3, [pc, #264]	@ (8002294 <MX_TIM1_Init+0x168>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b41      	ldr	r3, [pc, #260]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002194:	483f      	ldr	r0, [pc, #252]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002196:	f004 ff51 	bl	800703c <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80021a0:	f000 fe48 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021ae:	4619      	mov	r1, r3
 80021b0:	4838      	ldr	r0, [pc, #224]	@ (8002294 <MX_TIM1_Init+0x168>)
 80021b2:	f005 fb47 	bl	8007844 <HAL_TIM_ConfigClockSource>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80021bc:	f000 fe3a 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021c0:	4834      	ldr	r0, [pc, #208]	@ (8002294 <MX_TIM1_Init+0x168>)
 80021c2:	f004 fffb 	bl	80071bc <HAL_TIM_PWM_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80021cc:	f000 fe32 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021dc:	4619      	mov	r1, r3
 80021de:	482d      	ldr	r0, [pc, #180]	@ (8002294 <MX_TIM1_Init+0x168>)
 80021e0:	f005 ff46 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80021ea:	f000 fe23 	bl	8002e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ee:	2360      	movs	r3, #96	@ 0x60
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220e:	2200      	movs	r2, #0
 8002210:	4619      	mov	r1, r3
 8002212:	4820      	ldr	r0, [pc, #128]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002214:	f005 fa54 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800221e:	f000 fe09 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002226:	2204      	movs	r2, #4
 8002228:	4619      	mov	r1, r3
 800222a:	481a      	ldr	r0, [pc, #104]	@ (8002294 <MX_TIM1_Init+0x168>)
 800222c:	f005 fa48 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002236:	f000 fdfd 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800223a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800223e:	2208      	movs	r2, #8
 8002240:	4619      	mov	r1, r3
 8002242:	4814      	ldr	r0, [pc, #80]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002244:	f005 fa3c 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800224e:	f000 fdf1 	bl	8002e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800226a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4807      	ldr	r0, [pc, #28]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002276:	f005 ff77 	bl	8008168 <HAL_TIMEx_ConfigBreakDeadTime>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002280:	f000 fdd8 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <MX_TIM1_Init+0x168>)
 8002286:	f000 ff75 	bl	8003174 <HAL_TIM_MspPostInit>

}
 800228a:	bf00      	nop
 800228c:	3758      	adds	r7, #88	@ 0x58
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000042c 	.word	0x2000042c
 8002298:	40010000 	.word	0x40010000

0800229c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	463b      	mov	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022c2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80022c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022d0:	2263      	movs	r2, #99	@ 0x63
 80022d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022e0:	4813      	ldr	r0, [pc, #76]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022e2:	f004 feab 	bl	800703c <HAL_TIM_Base_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022ec:	f000 fda2 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	@ (8002330 <MX_TIM2_Init+0x94>)
 80022fe:	f005 faa1 	bl	8007844 <HAL_TIM_ConfigClockSource>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002308:	f000 fd94 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	@ (8002330 <MX_TIM2_Init+0x94>)
 800231a:	f005 fea9 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002324:	f000 fd86 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000474 	.word	0x20000474

08002334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	@ 0x38
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
 8002360:	615a      	str	r2, [r3, #20]
 8002362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002364:	4b32      	ldr	r3, [pc, #200]	@ (8002430 <MX_TIM3_Init+0xfc>)
 8002366:	4a33      	ldr	r2, [pc, #204]	@ (8002434 <MX_TIM3_Init+0x100>)
 8002368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 800236a:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <MX_TIM3_Init+0xfc>)
 800236c:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002370:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002372:	4b2f      	ldr	r3, [pc, #188]	@ (8002430 <MX_TIM3_Init+0xfc>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002378:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <MX_TIM3_Init+0xfc>)
 800237a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800237e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002380:	4b2b      	ldr	r3, [pc, #172]	@ (8002430 <MX_TIM3_Init+0xfc>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002386:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <MX_TIM3_Init+0xfc>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800238c:	4828      	ldr	r0, [pc, #160]	@ (8002430 <MX_TIM3_Init+0xfc>)
 800238e:	f004 fe55 	bl	800703c <HAL_TIM_Base_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002398:	f000 fd4c 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023a6:	4619      	mov	r1, r3
 80023a8:	4821      	ldr	r0, [pc, #132]	@ (8002430 <MX_TIM3_Init+0xfc>)
 80023aa:	f005 fa4b 	bl	8007844 <HAL_TIM_ConfigClockSource>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80023b4:	f000 fd3e 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023b8:	481d      	ldr	r0, [pc, #116]	@ (8002430 <MX_TIM3_Init+0xfc>)
 80023ba:	f004 feff 	bl	80071bc <HAL_TIM_PWM_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80023c4:	f000 fd36 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	4619      	mov	r1, r3
 80023d6:	4816      	ldr	r0, [pc, #88]	@ (8002430 <MX_TIM3_Init+0xfc>)
 80023d8:	f005 fe4a 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80023e2:	f000 fd27 	bl	8002e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e6:	2360      	movs	r3, #96	@ 0x60
 80023e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	4619      	mov	r1, r3
 80023fc:	480c      	ldr	r0, [pc, #48]	@ (8002430 <MX_TIM3_Init+0xfc>)
 80023fe:	f005 f95f 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002408:	f000 fd14 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2204      	movs	r2, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4807      	ldr	r0, [pc, #28]	@ (8002430 <MX_TIM3_Init+0xfc>)
 8002414:	f005 f954 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800241e:	f000 fd09 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002422:	4803      	ldr	r0, [pc, #12]	@ (8002430 <MX_TIM3_Init+0xfc>)
 8002424:	f000 fea6 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8002428:	bf00      	nop
 800242a:	3738      	adds	r7, #56	@ 0x38
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200004bc 	.word	0x200004bc
 8002434:	40000400 	.word	0x40000400

08002438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 8002440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002470:	f005 fee0 	bl	8008234 <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800247a:	f000 fcdb 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000504 	.word	0x20000504
 8002488:	40004400 	.word	0x40004400

0800248c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	@ 0x28
 8002490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b4a      	ldr	r3, [pc, #296]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	4a49      	ldr	r2, [pc, #292]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b2:	4b47      	ldr	r3, [pc, #284]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b43      	ldr	r3, [pc, #268]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a42      	ldr	r2, [pc, #264]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b40      	ldr	r3, [pc, #256]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	4b3c      	ldr	r3, [pc, #240]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a3b      	ldr	r2, [pc, #236]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	4b35      	ldr	r3, [pc, #212]	@ (80025d0 <MX_GPIO_Init+0x144>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a34      	ldr	r2, [pc, #208]	@ (80025d0 <MX_GPIO_Init+0x144>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <MX_GPIO_Init+0x144>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB1_LED_RED_Pin|PB0_LED_GREEN_Pin|PB13_U_Pin|PB14_V_Pin
 8002512:	2200      	movs	r2, #0
 8002514:	f24e 110b 	movw	r1, #57611	@ 0xe10b
 8002518:	482e      	ldr	r0, [pc, #184]	@ (80025d4 <MX_GPIO_Init+0x148>)
 800251a:	f002 f9bb 	bl	8004894 <HAL_GPIO_WritePin>
                          |PB15_W_Pin|PB3_DO_LIGHT_Pin|PB8_DO_FAN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_DO_DC_ON_GPIO_Port, PB5_DO_DC_ON_Pin, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	2120      	movs	r1, #32
 8002522:	482c      	ldr	r0, [pc, #176]	@ (80025d4 <MX_GPIO_Init+0x148>)
 8002524:	f002 f9b6 	bl	8004894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_DI_AUX_Pin PC10_DI_LIGHT_Pin PC11_DI_BLINKER_L_Pin PC12_DI_BLINKER_R_Pin */
  GPIO_InitStruct.Pin = PC13_DI_AUX_Pin|PC10_DI_LIGHT_Pin|PC11_DI_BLINKER_L_Pin|PC12_DI_BLINKER_R_Pin;
 8002528:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800252c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	4826      	ldr	r0, [pc, #152]	@ (80025d8 <MX_GPIO_Init+0x14c>)
 800253e:	f002 f80d 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI5_Break_Pin EXTI6_HALL_U_Pin EXTI7_HALL_V_Pin EXTI8_HALL_W_Pin */
  GPIO_InitStruct.Pin = EXTI5_Break_Pin|EXTI6_HALL_U_Pin|EXTI7_HALL_V_Pin|EXTI8_HALL_W_Pin;
 8002542:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002548:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800254c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	481f      	ldr	r0, [pc, #124]	@ (80025d8 <MX_GPIO_Init+0x14c>)
 800255a:	f001 ffff 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_LED_RED_Pin PB0_LED_GREEN_Pin PB3_DO_LIGHT_Pin PB5_DO_DC_ON_Pin
                           PB8_DO_FAN_Pin */
  GPIO_InitStruct.Pin = PB1_LED_RED_Pin|PB0_LED_GREEN_Pin|PB3_DO_LIGHT_Pin|PB5_DO_DC_ON_Pin
 800255e:	f240 132b 	movw	r3, #299	@ 0x12b
 8002562:	617b      	str	r3, [r7, #20]
                          |PB8_DO_FAN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002564:	2311      	movs	r3, #17
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002568:	2301      	movs	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4817      	ldr	r0, [pc, #92]	@ (80025d4 <MX_GPIO_Init+0x148>)
 8002578:	f001 fff0 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13_U_Pin PB14_V_Pin PB15_W_Pin */
  GPIO_InitStruct.Pin = PB13_U_Pin|PB14_V_Pin|PB15_W_Pin;
 800257c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	480f      	ldr	r0, [pc, #60]	@ (80025d4 <MX_GPIO_Init+0x148>)
 8002596:	f001 ffe1 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI9_FAULT_Pin */
  GPIO_InitStruct.Pin = EXTI9_FAULT_Pin;
 800259a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI9_FAULT_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4809      	ldr	r0, [pc, #36]	@ (80025d8 <MX_GPIO_Init+0x14c>)
 80025b2:	f001 ffd3 	bl	800455c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	2017      	movs	r0, #23
 80025bc:	f001 ff05 	bl	80043ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025c0:	2017      	movs	r0, #23
 80025c2:	f001 ff1e 	bl	8004402 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	@ 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800

080025dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//Interrupt Pin Function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
    // Handle Break Signal Interrupt
    if (GPIO_Pin == EXTI5_Break_Pin) {
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d102      	bne.n	80025f2 <HAL_GPIO_EXTI_Callback+0x16>
    	handleBreakInterrupt();
 80025ec:	f000 f828 	bl	8002640 <handleBreakInterrupt>
        }
    } else {
        // No operation for other states
        __NOP();
    }
}
 80025f0:	e020      	b.n	8002634 <HAL_GPIO_EXTI_Callback+0x58>
    else if (GPIO_Pin == EXTI9_FAULT_Pin) {
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f8:	d102      	bne.n	8002600 <HAL_GPIO_EXTI_Callback+0x24>
    	handleHardwareFaultInterrupt();
 80025fa:	f000 f867 	bl	80026cc <handleHardwareFaultInterrupt>
}
 80025fe:	e019      	b.n	8002634 <HAL_GPIO_EXTI_Callback+0x58>
    else if (STATE == DRIVE || STATE == READY) {
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_GPIO_EXTI_Callback+0x60>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_EXTI_Callback+0x34>
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <HAL_GPIO_EXTI_Callback+0x60>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10e      	bne.n	800262e <HAL_GPIO_EXTI_Callback+0x52>
        if (GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin) {
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	2b40      	cmp	r3, #64	@ 0x40
 8002614:	d006      	beq.n	8002624 <HAL_GPIO_EXTI_Callback+0x48>
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b80      	cmp	r3, #128	@ 0x80
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_EXTI_Callback+0x48>
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002622:	d106      	bne.n	8002632 <HAL_GPIO_EXTI_Callback+0x56>
        	handleHallSensorInterrupt(GPIO_Pin);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f85c 	bl	80026e4 <handleHallSensorInterrupt>
        if (GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin) {
 800262c:	e001      	b.n	8002632 <HAL_GPIO_EXTI_Callback+0x56>
        __NOP();
 800262e:	bf00      	nop
}
 8002630:	e000      	b.n	8002634 <HAL_GPIO_EXTI_Callback+0x58>
        if (GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin) {
 8002632:	bf00      	nop
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000010 	.word	0x20000010

08002640 <handleBreakInterrupt>:
/**
  * @brief Handles the brake interrupt signal, transitioning motor state between BREAK and READY
  * @param None
  * @retval void
  */
void handleBreakInterrupt() {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
    uint16_t breakSignal = (GPIOC->IDR & GPIO_IDR_ID5) ? 0x0001 : 0x0000;
 8002646:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <handleBreakInterrupt+0x7c>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	80fb      	strh	r3, [r7, #6]
    if (breakSignal == 0) {
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10d      	bne.n	800267c <handleBreakInterrupt+0x3c>
        // Transition to BREAK state
        STATE = BREAK;
 8002660:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <handleBreakInterrupt+0x80>)
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port, PB0_LED_GREEN_Pin, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	2102      	movs	r1, #2
 800266a:	4816      	ldr	r0, [pc, #88]	@ (80026c4 <handleBreakInterrupt+0x84>)
 800266c:	f002 f912 	bl	8004894 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	2101      	movs	r1, #1
 8002674:	4813      	ldr	r0, [pc, #76]	@ (80026c4 <handleBreakInterrupt+0x84>)
 8002676:	f002 f90d 	bl	8004894 <HAL_GPIO_WritePin>
    		STATE = READY;
    	}
        HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port, PB0_LED_GREEN_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin, GPIO_PIN_RESET);
    }
}
 800267a:	e01a      	b.n	80026b2 <handleBreakInterrupt+0x72>
    	if(rpm >=5){
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <handleBreakInterrupt+0x88>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	db03      	blt.n	8002698 <handleBreakInterrupt+0x58>
    		STATE = DRIVE;
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <handleBreakInterrupt+0x80>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e002      	b.n	800269e <handleBreakInterrupt+0x5e>
    		STATE = READY;
 8002698:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <handleBreakInterrupt+0x80>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port, PB0_LED_GREEN_Pin, GPIO_PIN_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	2102      	movs	r1, #2
 80026a2:	4808      	ldr	r0, [pc, #32]	@ (80026c4 <handleBreakInterrupt+0x84>)
 80026a4:	f002 f8f6 	bl	8004894 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin, GPIO_PIN_RESET);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2101      	movs	r1, #1
 80026ac:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <handleBreakInterrupt+0x84>)
 80026ae:	f002 f8f1 	bl	8004894 <HAL_GPIO_WritePin>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40020800 	.word	0x40020800
 80026c0:	20000010 	.word	0x20000010
 80026c4:	40020400 	.word	0x40020400
 80026c8:	20000554 	.word	0x20000554

080026cc <handleHardwareFaultInterrupt>:
/**
  * @brief Handles hardware fault interrupts, transitioning motor state to HWFAULT
  * @param None
  * @retval void
  */
void handleHardwareFaultInterrupt() {
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	STATE = HWFAULT;
 80026d0:	4b03      	ldr	r3, [pc, #12]	@ (80026e0 <handleHardwareFaultInterrupt+0x14>)
 80026d2:	2204      	movs	r2, #4
 80026d4:	601a      	str	r2, [r3, #0]
    // Optional: Implement hardware fault handling
    // Example readADCs() and determine fault cause;
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	20000010 	.word	0x20000010

080026e4 <handleHallSensorInterrupt>:
/**
  * @brief Handles hall sensor interrupts, updates commutator step for motor control
  * @param GPIO_Pin      = Pin number that triggered the interrupt
  * @retval void
  */
void handleHallSensorInterrupt(uint16_t GPIO_Pin) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
    hallCC++; // Increment hall sensor counter
 80026ee:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <handleHallSensorInterrupt+0x78>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	4a19      	ldr	r2, [pc, #100]	@ (800275c <handleHallSensorInterrupt+0x78>)
 80026f6:	6013      	str	r3, [r2, #0]

    // Read hall sensor states
    uint16_t hall[3];
    hall[0] = (GPIOC->IDR & GPIO_IDR_ID6) ? 0x0001 : 0x0000; // Sensor U
 80026f8:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <handleHallSensorInterrupt+0x7c>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	813b      	strh	r3, [r7, #8]
    hall[1] = (GPIOC->IDR & GPIO_IDR_ID7) ? 0x0001 : 0x0000; // Sensor V
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <handleHallSensorInterrupt+0x7c>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	817b      	strh	r3, [r7, #10]
    hall[2] = (GPIOC->IDR & GPIO_IDR_ID8) ? 0x0001 : 0x0000; // Sensor W
 8002720:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <handleHallSensorInterrupt+0x7c>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf14      	ite	ne
 800272c:	2301      	movne	r3, #1
 800272e:	2300      	moveq	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	81bb      	strh	r3, [r7, #12]

    // Trapazoidal control
    uint16_t commutatorStep = hallState(hall);
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fbfd 	bl	8000f38 <hallState>
 800273e:	4603      	mov	r3, r0
 8002740:	81fb      	strh	r3, [r7, #14]
    commutator(commutatorStep, duty, dir);
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <handleHallSensorInterrupt+0x80>)
 8002746:	6811      	ldr	r1, [r2, #0]
 8002748:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <handleHallSensorInterrupt+0x84>)
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fc67 	bl	8001020 <commutator>
    /*
     * uint16_t commutatorStep = hallState(hall);
     * uint16_t phaseAngle = electricalAngle(commutatorStep);
     * FOCcommutator(phaseAngle, duty);
     */
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000550 	.word	0x20000550
 8002760:	40020800 	.word	0x40020800
 8002764:	2000054c 	.word	0x2000054c
 8002768:	20000014 	.word	0x20000014

0800276c <readADCs>:
/**
  * @brief Reads ADC values for voltage, current, and temperature, and updates corresponding variables
  * @param None
  * @retval void
  */
void readADCs(){
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
	uint16_t x =0;
 8002772:	2300      	movs	r3, #0
 8002774:	80fb      	strh	r3, [r7, #6]

	//READ Voltage
	ADC3_Select_CH(0);
 8002776:	2000      	movs	r0, #0
 8002778:	f000 fb0e 	bl	8002d98 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 800277c:	4828      	ldr	r0, [pc, #160]	@ (8002820 <readADCs+0xb4>)
 800277e:	f001 f855 	bl	800382c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, ADC_TIMEOUT);
 8002782:	2114      	movs	r1, #20
 8002784:	4826      	ldr	r0, [pc, #152]	@ (8002820 <readADCs+0xb4>)
 8002786:	f001 f956 	bl	8003a36 <HAL_ADC_PollForConversion>
	x =HAL_ADC_GetValue(&hadc3);
 800278a:	4825      	ldr	r0, [pc, #148]	@ (8002820 <readADCs+0xb4>)
 800278c:	f001 faee 	bl	8003d6c <HAL_ADC_GetValue>
 8002790:	4603      	mov	r3, r0
 8002792:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 8002794:	4822      	ldr	r0, [pc, #136]	@ (8002820 <readADCs+0xb4>)
 8002796:	f001 f91b 	bl	80039d0 <HAL_ADC_Stop>
	ADC_VAL[0] = adc_volt(x);
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fd9f 	bl	80012e0 <adc_volt>
 80027a2:	eef0 7a40 	vmov.f32	s15, s0
 80027a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <readADCs+0xb8>)
 80027a8:	edc3 7a00 	vstr	s15, [r3]

	//READ Current
	ADC3_Select_CH(1);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f000 faf3 	bl	8002d98 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 80027b2:	481b      	ldr	r0, [pc, #108]	@ (8002820 <readADCs+0xb4>)
 80027b4:	f001 f83a 	bl	800382c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, ADC_TIMEOUT);
 80027b8:	2114      	movs	r1, #20
 80027ba:	4819      	ldr	r0, [pc, #100]	@ (8002820 <readADCs+0xb4>)
 80027bc:	f001 f93b 	bl	8003a36 <HAL_ADC_PollForConversion>
	x =HAL_ADC_GetValue(&hadc3);
 80027c0:	4817      	ldr	r0, [pc, #92]	@ (8002820 <readADCs+0xb4>)
 80027c2:	f001 fad3 	bl	8003d6c <HAL_ADC_GetValue>
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 80027ca:	4815      	ldr	r0, [pc, #84]	@ (8002820 <readADCs+0xb4>)
 80027cc:	f001 f900 	bl	80039d0 <HAL_ADC_Stop>
	ADC_VAL[1] = adc_cur(x);
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fdd4 	bl	8001380 <adc_cur>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <readADCs+0xb8>)
 80027de:	edc3 7a01 	vstr	s15, [r3, #4]

	//READ Temperature
	ADC3_Select_CH(2);
 80027e2:	2002      	movs	r0, #2
 80027e4:	f000 fad8 	bl	8002d98 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 80027e8:	480d      	ldr	r0, [pc, #52]	@ (8002820 <readADCs+0xb4>)
 80027ea:	f001 f81f 	bl	800382c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, ADC_TIMEOUT);
 80027ee:	2114      	movs	r1, #20
 80027f0:	480b      	ldr	r0, [pc, #44]	@ (8002820 <readADCs+0xb4>)
 80027f2:	f001 f920 	bl	8003a36 <HAL_ADC_PollForConversion>
	x =HAL_ADC_GetValue(&hadc3);
 80027f6:	480a      	ldr	r0, [pc, #40]	@ (8002820 <readADCs+0xb4>)
 80027f8:	f001 fab8 	bl	8003d6c <HAL_ADC_GetValue>
 80027fc:	4603      	mov	r3, r0
 80027fe:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 8002800:	4807      	ldr	r0, [pc, #28]	@ (8002820 <readADCs+0xb4>)
 8002802:	f001 f8e5 	bl	80039d0 <HAL_ADC_Stop>
	ADC_VAL[2] = adc_temp(x);
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fe19 	bl	8001440 <adc_temp>
 800280e:	eef0 7a40 	vmov.f32	s15, s0
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <readADCs+0xb8>)
 8002814:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000390 	.word	0x20000390
 8002824:	2000055c 	.word	0x2000055c

08002828 <doADCs>:
/**
  * @brief Processes ADC values to monitor and control system states, including fault detection and fan control
  * @param None
  * @retval void
  */
void doADCs() {
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
        HD44780_PrintStr("ERR:ADC VAL SIZE");
        return;
    }

    // Release SW_FAULT if all conditions are normal
    if (STATE == SWFAULT) {
 800282c:	4b45      	ldr	r3, [pc, #276]	@ (8002944 <doADCs+0x11c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d12a      	bne.n	800288a <doADCs+0x62>
        if (ADC_VAL[0] < SW_OV && ADC_VAL[0] > SW_UV + 2 &&  // Voltage OK
 8002834:	4b44      	ldr	r3, [pc, #272]	@ (8002948 <doADCs+0x120>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800294c <doADCs+0x124>
 800283e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	d520      	bpl.n	800288a <doADCs+0x62>
 8002848:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <doADCs+0x120>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002950 <doADCs+0x128>
 8002852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	dd16      	ble.n	800288a <doADCs+0x62>
            ADC_VAL[1] <= 1 &&                              // Current OK
 800285c:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <doADCs+0x120>)
 800285e:	edd3 7a01 	vldr	s15, [r3, #4]
        if (ADC_VAL[0] < SW_OV && ADC_VAL[0] > SW_UV + 2 &&  // Voltage OK
 8002862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d80c      	bhi.n	800288a <doADCs+0x62>
            ADC_VAL[2] <= Temp_FAN_ON) {                    // Temperature OK
 8002870:	4b35      	ldr	r3, [pc, #212]	@ (8002948 <doADCs+0x120>)
 8002872:	edd3 7a02 	vldr	s15, [r3, #8]
            ADC_VAL[1] <= 1 &&                              // Current OK
 8002876:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002954 <doADCs+0x12c>
 800287a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	d802      	bhi.n	800288a <doADCs+0x62>
            STATE = BREAK;
 8002884:	4b2f      	ldr	r3, [pc, #188]	@ (8002944 <doADCs+0x11c>)
 8002886:	2202      	movs	r2, #2
 8002888:	601a      	str	r2, [r3, #0]
        }
    }
    // Device is in normal condition
    if (STATE !=SWFAULT){
 800288a:	4b2e      	ldr	r3, [pc, #184]	@ (8002944 <doADCs+0x11c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d057      	beq.n	8002942 <doADCs+0x11a>
        // Control the fan based on temperature
        if (ADC_VAL[2] >= Temp_FAN_ON) {
 8002892:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <doADCs+0x120>)
 8002894:	edd3 7a02 	vldr	s15, [r3, #8]
 8002898:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002954 <doADCs+0x12c>
 800289c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	db06      	blt.n	80028b4 <doADCs+0x8c>
            HAL_GPIO_WritePin(GPIOB, PB8_DO_FAN_Pin, GPIO_PIN_RESET); // FAN ON
 80028a6:	2200      	movs	r2, #0
 80028a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028ac:	482a      	ldr	r0, [pc, #168]	@ (8002958 <doADCs+0x130>)
 80028ae:	f001 fff1 	bl	8004894 <HAL_GPIO_WritePin>
 80028b2:	e00f      	b.n	80028d4 <doADCs+0xac>
        } else if (ADC_VAL[2] <= Temp_FAN_OFF) {
 80028b4:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <doADCs+0x120>)
 80028b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80028ba:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800294c <doADCs+0x124>
 80028be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	d805      	bhi.n	80028d4 <doADCs+0xac>
            HAL_GPIO_WritePin(GPIOB, PB8_DO_FAN_Pin, GPIO_PIN_SET);   // FAN OFF
 80028c8:	2201      	movs	r2, #1
 80028ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028ce:	4822      	ldr	r0, [pc, #136]	@ (8002958 <doADCs+0x130>)
 80028d0:	f001 ffe0 	bl	8004894 <HAL_GPIO_WritePin>
        }

        // Check for software faults and set error messages
        if (ADC_VAL[0] >= SW_OV) {
 80028d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002948 <doADCs+0x120>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800294c <doADCs+0x124>
 80028de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	db03      	blt.n	80028f0 <doADCs+0xc8>
            setFaultState("ERR:SW OV");
 80028e8:	481c      	ldr	r0, [pc, #112]	@ (800295c <doADCs+0x134>)
 80028ea:	f000 f843 	bl	8002974 <setFaultState>
 80028ee:	e028      	b.n	8002942 <doADCs+0x11a>
        } else if (ADC_VAL[0] <= SW_UV) {
 80028f0:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <doADCs+0x120>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002960 <doADCs+0x138>
 80028fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	d803      	bhi.n	800290c <doADCs+0xe4>
            setFaultState("ERR:SW UV");
 8002904:	4817      	ldr	r0, [pc, #92]	@ (8002964 <doADCs+0x13c>)
 8002906:	f000 f835 	bl	8002974 <setFaultState>
 800290a:	e01a      	b.n	8002942 <doADCs+0x11a>
        } else if (ADC_VAL[1] >= SW_OC) {
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <doADCs+0x120>)
 800290e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002912:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8002916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291e:	db03      	blt.n	8002928 <doADCs+0x100>
            setFaultState("ERR:SW OC");
 8002920:	4811      	ldr	r0, [pc, #68]	@ (8002968 <doADCs+0x140>)
 8002922:	f000 f827 	bl	8002974 <setFaultState>
 8002926:	e00c      	b.n	8002942 <doADCs+0x11a>
        } else if (ADC_VAL[2] >= SW_OT) {
 8002928:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <doADCs+0x120>)
 800292a:	edd3 7a02 	vldr	s15, [r3, #8]
 800292e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800296c <doADCs+0x144>
 8002932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	db02      	blt.n	8002942 <doADCs+0x11a>
            setFaultState("ERR:SW OT");
 800293c:	480c      	ldr	r0, [pc, #48]	@ (8002970 <doADCs+0x148>)
 800293e:	f000 f819 	bl	8002974 <setFaultState>
        }
    }
}
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000010 	.word	0x20000010
 8002948:	2000055c 	.word	0x2000055c
 800294c:	42700000 	.word	0x42700000
 8002950:	42380000 	.word	0x42380000
 8002954:	42a00000 	.word	0x42a00000
 8002958:	40020400 	.word	0x40020400
 800295c:	08010154 	.word	0x08010154
 8002960:	42300000 	.word	0x42300000
 8002964:	08010160 	.word	0x08010160
 8002968:	0801016c 	.word	0x0801016c
 800296c:	42c80000 	.word	0x42c80000
 8002970:	08010178 	.word	0x08010178

08002974 <setFaultState>:
/**
  * @brief Sets the system state to SWFAULT and displays the provided error message
  * @param errorMessage    = Pointer to a string containing the fault error message
  * @retval void
  */
void setFaultState(const char* errorMessage) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    STATE = SWFAULT;
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <setFaultState+0x24>)
 800297e:	2203      	movs	r2, #3
 8002980:	601a      	str	r2, [r3, #0]
    HD44780_SetCursor(0, 1);
 8002982:	2101      	movs	r1, #1
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe fee3 	bl	8001750 <HD44780_SetCursor>
    HD44780_PrintStr(errorMessage);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe ff51 	bl	8001832 <HD44780_PrintStr>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000010 	.word	0x20000010

0800299c <writeState>:

/**
  * @brief Write the Hardware state to the corresponding position onto the display
  * @retval void
  */
void writeState() {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
    const char *state; // String to hold the text corresponding to the state

    switch (STATE) {
 80029a2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <writeState+0x70>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d822      	bhi.n	80029f0 <writeState+0x54>
 80029aa:	a201      	add	r2, pc, #4	@ (adr r2, 80029b0 <writeState+0x14>)
 80029ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b0:	080029cd 	.word	0x080029cd
 80029b4:	080029d3 	.word	0x080029d3
 80029b8:	080029d9 	.word	0x080029d9
 80029bc:	080029df 	.word	0x080029df
 80029c0:	080029e5 	.word	0x080029e5
 80029c4:	080029f1 	.word	0x080029f1
 80029c8:	080029eb 	.word	0x080029eb
        case READY:
            state = "READY";
 80029cc:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <writeState+0x74>)
 80029ce:	607b      	str	r3, [r7, #4]
            break;
 80029d0:	e011      	b.n	80029f6 <writeState+0x5a>
        case DRIVE:
            state = "DRIVE";
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <writeState+0x78>)
 80029d4:	607b      	str	r3, [r7, #4]
            break;
 80029d6:	e00e      	b.n	80029f6 <writeState+0x5a>
        case BREAK:
            state = "BREAK";
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <writeState+0x7c>)
 80029da:	607b      	str	r3, [r7, #4]
            break;
 80029dc:	e00b      	b.n	80029f6 <writeState+0x5a>
        case SWFAULT:
            state = "SWFAULT";
 80029de:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <writeState+0x80>)
 80029e0:	607b      	str	r3, [r7, #4]
            break;
 80029e2:	e008      	b.n	80029f6 <writeState+0x5a>
        case HWFAULT:
            state = "HWFAULT";
 80029e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <writeState+0x84>)
 80029e6:	607b      	str	r3, [r7, #4]
            break;
 80029e8:	e005      	b.n	80029f6 <writeState+0x5a>
        case DEBUGST:
        	state = "DEBUG";
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <writeState+0x88>)
 80029ec:	607b      	str	r3, [r7, #4]
            break;
 80029ee:	e002      	b.n	80029f6 <writeState+0x5a>
        default:
            state = "UNKNOWN"; // Fallback for undefined states
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <writeState+0x8c>)
 80029f2:	607b      	str	r3, [r7, #4]
            break;
 80029f4:	bf00      	nop
    }

    // Set the cursor to position (0, 2)
    HD44780_SetCursor(0, 2);
 80029f6:	2102      	movs	r1, #2
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe fea9 	bl	8001750 <HD44780_SetCursor>

    // Write the corresponding state string to the display
    HD44780_PrintStr(state);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe ff17 	bl	8001832 <HD44780_PrintStr>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	08010184 	.word	0x08010184
 8002a14:	0801018c 	.word	0x0801018c
 8002a18:	08010194 	.word	0x08010194
 8002a1c:	0801019c 	.word	0x0801019c
 8002a20:	080101a4 	.word	0x080101a4
 8002a24:	080101ac 	.word	0x080101ac
 8002a28:	080101b4 	.word	0x080101b4

08002a2c <readDI>:
/**
  * @brief Reads digital input values from GPIO pins and updates button states
  * @param None
  * @retval void
  */
void readDI(){
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
    // Button data[Light, Blinker L, Blinker R, Aux]
    uint16_t but_new[4];
    but_new[0] = (GPIOC->IDR & GPIO_IDR_ID10) ? 0x0001 : 0x0000;
 8002a32:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <readDI+0x8c>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	80bb      	strh	r3, [r7, #4]
    but_new[1] = (GPIOC->IDR & GPIO_IDR_ID11) ? 0x0001 : 0x0000;
 8002a46:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <readDI+0x8c>)
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	80fb      	strh	r3, [r7, #6]
    but_new[2] = (GPIOC->IDR & GPIO_IDR_ID12) ? 0x0001 : 0x0000;
 8002a5a:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <readDI+0x8c>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf14      	ite	ne
 8002a66:	2301      	movne	r3, #1
 8002a68:	2300      	moveq	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	813b      	strh	r3, [r7, #8]
    but_new[3] = (GPIOC->IDR & GPIO_IDR_ID13) ? 0x0001 : 0x0000;
 8002a6e:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <readDI+0x8c>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < 4; i++) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e00c      	b.n	8002aa2 <readDI+0x76>
    	but[i] = but_new[i];
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	443b      	add	r3, r7
 8002a90:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8002a94:	4a09      	ldr	r2, [pc, #36]	@ (8002abc <readDI+0x90>)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	ddef      	ble.n	8002a88 <readDI+0x5c>
        }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	2000056c 	.word	0x2000056c

08002ac0 <setDO>:
/**
  * @brief Sets digital output states based on button inputs and updates system behavior accordingly
  * @param None
  * @retval void
  */
void setDO() {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
		setFaultState("ERR: DO SIZE");
	}

    // Button data: [Light, Blinker L, Blinker R, Aux]
    // Toggle lights based on button state
    HAL_GPIO_WritePin(GPIOB, PB3_DO_LIGHT_Pin, but[0] == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002ac4:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <setDO+0x68>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2108      	movs	r1, #8
 8002ad6:	4815      	ldr	r0, [pc, #84]	@ (8002b2c <setDO+0x6c>)
 8002ad8:	f001 fedc 	bl	8004894 <HAL_GPIO_WritePin>

    // Handle Blinker Left (PWM Control)
    if (but[1] == 1) {
 8002adc:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <setDO+0x68>)
 8002ade:	885b      	ldrh	r3, [r3, #2]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d103      	bne.n	8002aec <setDO+0x2c>
        TIM3->CCR2 = BLINKER_START;  // Start PWM
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <setDO+0x70>)
 8002ae6:	22fa      	movs	r2, #250	@ 0xfa
 8002ae8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002aea:	e003      	b.n	8002af4 <setDO+0x34>
    } else {
        TIM3->CCR2 = BLINKER_STOP;  // Stop PWM
 8002aec:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <setDO+0x70>)
 8002aee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002af2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Handle Blinker Right (PWM Control)
    if (but[2] == 1) {
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <setDO+0x68>)
 8002af6:	889b      	ldrh	r3, [r3, #4]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d103      	bne.n	8002b04 <setDO+0x44>
        TIM3->CCR1 = BLINKER_START;  // Start PWM
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <setDO+0x70>)
 8002afe:	22fa      	movs	r2, #250	@ 0xfa
 8002b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b02:	e003      	b.n	8002b0c <setDO+0x4c>
    } else {
        TIM3->CCR1 = BLINKER_STOP;  // Stop PWM
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <setDO+0x70>)
 8002b06:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b0a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Handle Aux button action
    if (but[3] == 0) {
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <setDO+0x68>)
 8002b0e:	88db      	ldrh	r3, [r3, #6]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <setDO+0x62>
        HAL_GPIO_TogglePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin); // Toggle LED
 8002b14:	2101      	movs	r1, #1
 8002b16:	4805      	ldr	r0, [pc, #20]	@ (8002b2c <setDO+0x6c>)
 8002b18:	f001 fed5 	bl	80048c6 <HAL_GPIO_TogglePin>
        STATE = DRIVE;                                             // Set state to DRIVE
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <setDO+0x74>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    }
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2000056c 	.word	0x2000056c
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40000400 	.word	0x40000400
 8002b34:	20000010 	.word	0x20000010

08002b38 <resetDO>:
/**
  * @brief Resets digital output states into off state
  * @param None
  * @retval void
  */
void resetDO(){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	//main light off
	HAL_GPIO_WritePin(GPIOB, PB3_DO_LIGHT_Pin,GPIO_PIN_RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2108      	movs	r1, #8
 8002b40:	4806      	ldr	r0, [pc, #24]	@ (8002b5c <resetDO+0x24>)
 8002b42:	f001 fea7 	bl	8004894 <HAL_GPIO_WritePin>
	TIM3->CCR2 = BLINKER_STOP;  // Stop Blinker Left PWM
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <resetDO+0x28>)
 8002b48:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b4c:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR1 = BLINKER_STOP;  // Stop Blinker Right PWM
 8002b4e:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <resetDO+0x28>)
 8002b50:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b54:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40000400 	.word	0x40000400

08002b64 <ready>:
/**
  * @brief Prepares the system for motor operation by initializing throttle input and PWM control
  * @param None
  * @retval void
  */
void ready() {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af02      	add	r7, sp, #8
    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8002b6a:	481f      	ldr	r0, [pc, #124]	@ (8002be8 <ready+0x84>)
 8002b6c:	f000 fe5e 	bl	800382c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 20);
 8002b70:	2114      	movs	r1, #20
 8002b72:	481d      	ldr	r0, [pc, #116]	@ (8002be8 <ready+0x84>)
 8002b74:	f000 ff5f 	bl	8003a36 <HAL_ADC_PollForConversion>

    // Get throttle raw value
    rawThrot = HAL_ADC_GetValue(&hadc1);
 8002b78:	481b      	ldr	r0, [pc, #108]	@ (8002be8 <ready+0x84>)
 8002b7a:	f001 f8f7 	bl	8003d6c <HAL_ADC_GetValue>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <ready+0x88>)
 8002b84:	801a      	strh	r2, [r3, #0]

    // Map throttle value to duty cycle range
    int THrotduty = map(rawThrot, MINADC, MAXADC, MINDUTY, MAXDUTY);
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <ready+0x88>)
 8002b88:	8818      	ldrh	r0, [r3, #0]
 8002b8a:	2364      	movs	r3, #100	@ 0x64
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f640 4262 	movw	r2, #3170	@ 0xc62
 8002b94:	f240 411f 	movw	r1, #1055	@ 0x41f
 8002b98:	f7fe fb7c 	bl	8001294 <map>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	607b      	str	r3, [r7, #4]

    // Check if throttle duty cycle exceeds the threshold
    if (THrotduty >= THROTTLE_THRESHOLD) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b1d      	cmp	r3, #29
 8002ba4:	dd1c      	ble.n	8002be0 <ready+0x7c>
        // Initialize PWM outputs to zero
        TIM1->CCR1 = 0;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <ready+0x8c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM1->CCR2 = 0;
 8002bac:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <ready+0x8c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM1->CCR3 = 0;
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <ready+0x8c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	63da      	str	r2, [r3, #60]	@ 0x3c

        // Start PWM for all three channels
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	480e      	ldr	r0, [pc, #56]	@ (8002bf4 <ready+0x90>)
 8002bbc:	f004 fb58 	bl	8007270 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	480c      	ldr	r0, [pc, #48]	@ (8002bf4 <ready+0x90>)
 8002bc4:	f004 fb54 	bl	8007270 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002bc8:	2108      	movs	r1, #8
 8002bca:	480a      	ldr	r0, [pc, #40]	@ (8002bf4 <ready+0x90>)
 8002bcc:	f004 fb50 	bl	8007270 <HAL_TIM_PWM_Start>

        // Initialize BLDC motor
        initBLDC();
 8002bd0:	f7fe fb2e 	bl	8001230 <initBLDC>

        // Set initial duty cycle
        duty = 10; // Set initial duty cycle; modify as needed
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <ready+0x94>)
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	601a      	str	r2, [r3, #0]

        // Change state to DRIVE
        STATE = DRIVE;
 8002bda:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <ready+0x98>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    }
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000300 	.word	0x20000300
 8002bec:	20000558 	.word	0x20000558
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	2000042c 	.word	0x2000042c
 8002bf8:	2000054c 	.word	0x2000054c
 8002bfc:	20000010 	.word	0x20000010

08002c00 <drive>:
/**
  * @brief Controls the motor drive by reading throttle input and updating the PWM duty cycle
  * @param None
  * @retval void
  */
void drive() {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af02      	add	r7, sp, #8
    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8002c06:	4816      	ldr	r0, [pc, #88]	@ (8002c60 <drive+0x60>)
 8002c08:	f000 fe10 	bl	800382c <HAL_ADC_Start>

    // Wait for ADC conversion to complete with a timeout
    if (HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT) == HAL_OK) {
 8002c0c:	2114      	movs	r1, #20
 8002c0e:	4814      	ldr	r0, [pc, #80]	@ (8002c60 <drive+0x60>)
 8002c10:	f000 ff11 	bl	8003a36 <HAL_ADC_PollForConversion>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d117      	bne.n	8002c4a <drive+0x4a>
        // Get raw throttle value
        rawThrot = HAL_ADC_GetValue(&hadc1);
 8002c1a:	4811      	ldr	r0, [pc, #68]	@ (8002c60 <drive+0x60>)
 8002c1c:	f001 f8a6 	bl	8003d6c <HAL_ADC_GetValue>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <drive+0x64>)
 8002c26:	801a      	strh	r2, [r3, #0]

        // Map the raw throttle value to a duty cycle range
        int THrotduty = map(rawThrot, MINADC, MAXADC, MINDUTY, MAXDUTY);
 8002c28:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <drive+0x64>)
 8002c2a:	8818      	ldrh	r0, [r3, #0]
 8002c2c:	2364      	movs	r3, #100	@ 0x64
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2300      	movs	r3, #0
 8002c32:	f640 4262 	movw	r2, #3170	@ 0xc62
 8002c36:	f240 411f 	movw	r1, #1055	@ 0x41f
 8002c3a:	f7fe fb2b 	bl	8001294 <map>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	607b      	str	r3, [r7, #4]

        // Update the duty cycle
        duty = THrotduty;
 8002c42:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <drive+0x68>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6013      	str	r3, [r2, #0]
        // Handle ADC conversion error (optional)
        duty = 0; // Set duty to a safe value in case of failure
        setFaultState("ERR: ADC");
        // Optionally log or display an error message
    }
}
 8002c48:	e005      	b.n	8002c56 <drive+0x56>
        duty = 0; // Set duty to a safe value in case of failure
 8002c4a:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <drive+0x68>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
        setFaultState("ERR: ADC");
 8002c50:	4806      	ldr	r0, [pc, #24]	@ (8002c6c <drive+0x6c>)
 8002c52:	f7ff fe8f 	bl	8002974 <setFaultState>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000300 	.word	0x20000300
 8002c64:	20000558 	.word	0x20000558
 8002c68:	2000054c 	.word	0x2000054c
 8002c6c:	080101bc 	.word	0x080101bc

08002c70 <breaking>:
/**
  * @brief Engages the braking mechanism by stopping PWM outputs and activating braking GPIO pins
  * @param None
  * @retval void
  */
void breaking() {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    TIM1->CCR1 = 0;
 8002c74:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <breaking+0x5c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <breaking+0x5c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = 0;
 8002c80:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <breaking+0x5c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	63da      	str	r2, [r3, #60]	@ 0x3c
    duty = 0; // Reset duty cycle to zero
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <breaking+0x60>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4811      	ldr	r0, [pc, #68]	@ (8002cd4 <breaking+0x64>)
 8002c90:	f004 fbb6 	bl	8007400 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002c94:	2104      	movs	r1, #4
 8002c96:	480f      	ldr	r0, [pc, #60]	@ (8002cd4 <breaking+0x64>)
 8002c98:	f004 fbb2 	bl	8007400 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002c9c:	2108      	movs	r1, #8
 8002c9e:	480d      	ldr	r0, [pc, #52]	@ (8002cd4 <breaking+0x64>)
 8002ca0:	f004 fbae 	bl	8007400 <HAL_TIM_PWM_Stop>

    // Set GPIO pins for braking mode
    HAL_GPIO_WritePin(GPIOB, PB13_U_Pin, GPIO_PIN_SET);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002caa:	480b      	ldr	r0, [pc, #44]	@ (8002cd8 <breaking+0x68>)
 8002cac:	f001 fdf2 	bl	8004894 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, PB14_V_Pin, GPIO_PIN_SET);
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cb6:	4808      	ldr	r0, [pc, #32]	@ (8002cd8 <breaking+0x68>)
 8002cb8:	f001 fdec 	bl	8004894 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, PB15_W_Pin, GPIO_PIN_SET);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cc2:	4805      	ldr	r0, [pc, #20]	@ (8002cd8 <breaking+0x68>)
 8002cc4:	f001 fde6 	bl	8004894 <HAL_GPIO_WritePin>
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	2000054c 	.word	0x2000054c
 8002cd4:	2000042c 	.word	0x2000042c
 8002cd8:	40020400 	.word	0x40020400

08002cdc <swfault>:
/**
  * @brief Handles the software fault state by engaging braking and transitioning to HWFAULT after a timeout
  * @param None
  * @retval void
  */
void swfault() {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
    // Perform breaking to ensure the system is in a safe state
    breaking();
 8002ce0:	f7ff ffc6 	bl	8002c70 <breaking>

    // Check if the timeout for SWFAULT has elapsed (30s = 300 units of 100ms)
    if (swfault_time_counter >= SWFAULT_TIMOUT) {
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <swfault+0x1c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002cec:	d302      	bcc.n	8002cf4 <swfault+0x18>
        // Transition to HWFAULT state
        STATE = HWFAULT;
 8002cee:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <swfault+0x20>)
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
    }
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000574 	.word	0x20000574
 8002cfc:	20000010 	.word	0x20000010

08002d00 <hwfault>:
/**
  * @brief Handles hardware faults by engaging braking, displaying an error message, and halting execution
  * @param None
  * @retval void
  */
void hwfault(){
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
	STATE = HWFAULT;
 8002d04:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <hwfault+0x24>)
 8002d06:	2204      	movs	r2, #4
 8002d08:	601a      	str	r2, [r3, #0]
	breaking();
 8002d0a:	f7ff ffb1 	bl	8002c70 <breaking>
	HD44780_SetCursor(0,1);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe fd1d 	bl	8001750 <HD44780_SetCursor>
	HD44780_PrintStr("ERROR:HW FAULT");
 8002d16:	4804      	ldr	r0, [pc, #16]	@ (8002d28 <hwfault+0x28>)
 8002d18:	f7fe fd8b 	bl	8001832 <HD44780_PrintStr>
	//Stuck untill Power on reset
	while(1){
		HAL_Delay(100);
 8002d1c:	2064      	movs	r0, #100	@ 0x64
 8002d1e:	f000 fd1d 	bl	800375c <HAL_Delay>
 8002d22:	e7fb      	b.n	8002d1c <hwfault+0x1c>
 8002d24:	20000010 	.word	0x20000010
 8002d28:	080101c8 	.word	0x080101c8

08002d2c <debug>:

	}
}

void debug(){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8002d30:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <debug+0x5c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 8002d36:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <debug+0x5c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <debug+0x5c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	63da      	str	r2, [r3, #60]	@ 0x3c
	duty = 0;
 8002d42:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <debug+0x60>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4811      	ldr	r0, [pc, #68]	@ (8002d90 <debug+0x64>)
 8002d4c:	f004 fb58 	bl	8007400 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002d50:	2104      	movs	r1, #4
 8002d52:	480f      	ldr	r0, [pc, #60]	@ (8002d90 <debug+0x64>)
 8002d54:	f004 fb54 	bl	8007400 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002d58:	2108      	movs	r1, #8
 8002d5a:	480d      	ldr	r0, [pc, #52]	@ (8002d90 <debug+0x64>)
 8002d5c:	f004 fb50 	bl	8007400 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d66:	480b      	ldr	r0, [pc, #44]	@ (8002d94 <debug+0x68>)
 8002d68:	f001 fd94 	bl	8004894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d72:	4808      	ldr	r0, [pc, #32]	@ (8002d94 <debug+0x68>)
 8002d74:	f001 fd8e 	bl	8004894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d7e:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <debug+0x68>)
 8002d80:	f001 fd88 	bl	8004894 <HAL_GPIO_WritePin>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	2000054c 	.word	0x2000054c
 8002d90:	2000042c 	.word	0x2000042c
 8002d94:	40020400 	.word	0x40020400

08002d98 <ADC3_Select_CH>:
/**
  * @brief Configures the ADC3 channel for the selected input
  * @param ch    = Channel number to configure (0, 1, or 2)
  * @retval void
  */
void ADC3_Select_CH(int ch){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
	if(ch ==0){
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d110      	bne.n	8002dd6 <ADC3_Select_CH+0x3e>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002dc0:	f107 0308 	add.w	r3, r7, #8
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	481a      	ldr	r0, [pc, #104]	@ (8002e30 <ADC3_Select_CH+0x98>)
 8002dc8:	f000 fffc 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <ADC3_Select_CH+0x3e>
		  {
		    Error_Handler();
 8002dd2:	f000 f82f 	bl	8002e34 <Error_Handler>
		  }
	}

	if(ch==1){
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d110      	bne.n	8002dfe <ADC3_Select_CH+0x66>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002de0:	2301      	movs	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002de4:	2302      	movs	r3, #2
 8002de6:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002de8:	f107 0308 	add.w	r3, r7, #8
 8002dec:	4619      	mov	r1, r3
 8002dee:	4810      	ldr	r0, [pc, #64]	@ (8002e30 <ADC3_Select_CH+0x98>)
 8002df0:	f000 ffe8 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <ADC3_Select_CH+0x66>
		  {
		    Error_Handler();
 8002dfa:	f000 f81b 	bl	8002e34 <Error_Handler>
		  }
	}
	if(ch==2){
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d110      	bne.n	8002e26 <ADC3_Select_CH+0x8e>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_13;
 8002e04:	230d      	movs	r3, #13
 8002e06:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	4619      	mov	r1, r3
 8002e16:	4806      	ldr	r0, [pc, #24]	@ (8002e30 <ADC3_Select_CH+0x98>)
 8002e18:	f000 ffd4 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <ADC3_Select_CH+0x8e>
		  {
		    Error_Handler();
 8002e22:	f000 f807 	bl	8002e34 <Error_Handler>
		  }
	}
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000390 	.word	0x20000390

08002e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e38:	b672      	cpsid	i
}
 8002e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <Error_Handler+0x8>

08002e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_MspInit+0x4c>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e8c <HAL_MspInit+0x4c>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_MspInit+0x4c>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <HAL_MspInit+0x4c>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	4a08      	ldr	r2, [pc, #32]	@ (8002e8c <HAL_MspInit+0x4c>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_MspInit+0x4c>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08e      	sub	sp, #56	@ 0x38
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5e      	ldr	r2, [pc, #376]	@ (8003028 <HAL_ADC_MspInit+0x198>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d130      	bne.n	8002f14 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	4a5c      	ldr	r2, [pc, #368]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	4b56      	ldr	r3, [pc, #344]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a55      	ldr	r2, [pc, #340]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN5_Throttle_Pin;
 8002eea:	2320      	movs	r3, #32
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC1_IN5_Throttle_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002efa:	4619      	mov	r1, r3
 8002efc:	484c      	ldr	r0, [pc, #304]	@ (8003030 <HAL_ADC_MspInit+0x1a0>)
 8002efe:	f001 fb2d 	bl	800455c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	2012      	movs	r0, #18
 8002f08:	f001 fa5f 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f0c:	2012      	movs	r0, #18
 8002f0e:	f001 fa78 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f12:	e084      	b.n	800301e <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a46      	ldr	r2, [pc, #280]	@ (8003034 <HAL_ADC_MspInit+0x1a4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d130      	bne.n	8002f80 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	4b42      	ldr	r3, [pc, #264]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	4a41      	ldr	r2, [pc, #260]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ADC2_IN10_U_CUR_Pin|ADC2_IN11_V_CUR_Pin|ADC2_IN12_W_CUR_Pin;
 8002f56:	2307      	movs	r3, #7
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f66:	4619      	mov	r1, r3
 8002f68:	4833      	ldr	r0, [pc, #204]	@ (8003038 <HAL_ADC_MspInit+0x1a8>)
 8002f6a:	f001 faf7 	bl	800455c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2012      	movs	r0, #18
 8002f74:	f001 fa29 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f78:	2012      	movs	r0, #18
 8002f7a:	f001 fa42 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 8002f7e:	e04e      	b.n	800301e <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2d      	ldr	r2, [pc, #180]	@ (800303c <HAL_ADC_MspInit+0x1ac>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d149      	bne.n	800301e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	4a26      	ldr	r2, [pc, #152]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f9a:	4b24      	ldr	r3, [pc, #144]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	4a1f      	ldr	r2, [pc, #124]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	4a18      	ldr	r2, [pc, #96]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd2:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_ADC_MspInit+0x19c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC3_IN13_TEMP_Pin;
 8002fde:	2308      	movs	r3, #8
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC3_IN13_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4811      	ldr	r0, [pc, #68]	@ (8003038 <HAL_ADC_MspInit+0x1a8>)
 8002ff2:	f001 fab3 	bl	800455c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN0_BUS_VOLT_Pin|ADC3_IN1_BUS_CUR_Pin;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003006:	4619      	mov	r1, r3
 8003008:	4809      	ldr	r0, [pc, #36]	@ (8003030 <HAL_ADC_MspInit+0x1a0>)
 800300a:	f001 faa7 	bl	800455c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	2012      	movs	r0, #18
 8003014:	f001 f9d9 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003018:	2012      	movs	r0, #18
 800301a:	f001 f9f2 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 800301e:	bf00      	nop
 8003020:	3738      	adds	r7, #56	@ 0x38
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40012000 	.word	0x40012000
 800302c:	40023800 	.word	0x40023800
 8003030:	40020000 	.word	0x40020000
 8003034:	40012100 	.word	0x40012100
 8003038:	40020800 	.word	0x40020800
 800303c:	40012200 	.word	0x40012200

08003040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	@ 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	@ (80030c4 <HAL_I2C_MspInit+0x84>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d12b      	bne.n	80030ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <HAL_I2C_MspInit+0x88>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a17      	ldr	r2, [pc, #92]	@ (80030c8 <HAL_I2C_MspInit+0x88>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <HAL_I2C_MspInit+0x88>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800307e:	23c0      	movs	r3, #192	@ 0xc0
 8003080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003082:	2312      	movs	r3, #18
 8003084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800308e:	2304      	movs	r3, #4
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	480c      	ldr	r0, [pc, #48]	@ (80030cc <HAL_I2C_MspInit+0x8c>)
 800309a:	f001 fa5f 	bl	800455c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_I2C_MspInit+0x88>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	4a08      	ldr	r2, [pc, #32]	@ (80030c8 <HAL_I2C_MspInit+0x88>)
 80030a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <HAL_I2C_MspInit+0x88>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80030ba:	bf00      	nop
 80030bc:	3728      	adds	r7, #40	@ 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40005400 	.word	0x40005400
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020400 	.word	0x40020400

080030d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a22      	ldr	r2, [pc, #136]	@ (8003168 <HAL_TIM_Base_MspInit+0x98>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	4a20      	ldr	r2, [pc, #128]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f2:	4b1e      	ldr	r3, [pc, #120]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030fe:	e02e      	b.n	800315e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003108:	d116      	bne.n	8003138 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b17      	ldr	r3, [pc, #92]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	4a16      	ldr	r2, [pc, #88]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6413      	str	r3, [r2, #64]	@ 0x40
 800311a:	4b14      	ldr	r3, [pc, #80]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	201c      	movs	r0, #28
 800312c:	f001 f94d 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003130:	201c      	movs	r0, #28
 8003132:	f001 f966 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 8003136:	e012      	b.n	800315e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0c      	ldr	r2, [pc, #48]	@ (8003170 <HAL_TIM_Base_MspInit+0xa0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10d      	bne.n	800315e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	4a08      	ldr	r2, [pc, #32]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6413      	str	r3, [r2, #64]	@ 0x40
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_TIM_Base_MspInit+0x9c>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40023800 	.word	0x40023800
 8003170:	40000400 	.word	0x40000400

08003174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a24      	ldr	r2, [pc, #144]	@ (8003224 <HAL_TIM_MspPostInit+0xb0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d11f      	bne.n	80031d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <HAL_TIM_MspPostInit+0xb4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	4a22      	ldr	r2, [pc, #136]	@ (8003228 <HAL_TIM_MspPostInit+0xb4>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a6:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_TIM_MspPostInit+0xb4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_U_Pin|TIM1_CH2_V_Pin|TIM1_CH3_W_Pin;
 80031b2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80031b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2302      	movs	r3, #2
 80031ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2300      	movs	r3, #0
 80031c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031c4:	2301      	movs	r3, #1
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4619      	mov	r1, r3
 80031ce:	4817      	ldr	r0, [pc, #92]	@ (800322c <HAL_TIM_MspPostInit+0xb8>)
 80031d0:	f001 f9c4 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031d4:	e022      	b.n	800321c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <HAL_TIM_MspPostInit+0xbc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d11d      	bne.n	800321c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <HAL_TIM_MspPostInit+0xb4>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003228 <HAL_TIM_MspPostInit+0xb4>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <HAL_TIM_MspPostInit+0xb4>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_Blinker_R_Pin|TIM3_CH2_Blinker_L_Pin;
 80031fc:	23c0      	movs	r3, #192	@ 0xc0
 80031fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800320c:	2302      	movs	r3, #2
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4619      	mov	r1, r3
 8003216:	4805      	ldr	r0, [pc, #20]	@ (800322c <HAL_TIM_MspPostInit+0xb8>)
 8003218:	f001 f9a0 	bl	800455c <HAL_GPIO_Init>
}
 800321c:	bf00      	nop
 800321e:	3728      	adds	r7, #40	@ 0x28
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40010000 	.word	0x40010000
 8003228:	40023800 	.word	0x40023800
 800322c:	40020000 	.word	0x40020000
 8003230:	40000400 	.word	0x40000400

08003234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <HAL_UART_MspInit+0x94>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d133      	bne.n	80032be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_UART_MspInit+0x98>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <HAL_UART_MspInit+0x98>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003264:	6413      	str	r3, [r2, #64]	@ 0x40
 8003266:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_UART_MspInit+0x98>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_UART_MspInit+0x98>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	4a14      	ldr	r2, [pc, #80]	@ (80032cc <HAL_UART_MspInit+0x98>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6313      	str	r3, [r2, #48]	@ 0x30
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <HAL_UART_MspInit+0x98>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800328e:	230c      	movs	r3, #12
 8003290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800329e:	2307      	movs	r3, #7
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	4619      	mov	r1, r3
 80032a8:	4809      	ldr	r0, [pc, #36]	@ (80032d0 <HAL_UART_MspInit+0x9c>)
 80032aa:	f001 f957 	bl	800455c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2026      	movs	r0, #38	@ 0x26
 80032b4:	f001 f889 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032b8:	2026      	movs	r0, #38	@ 0x26
 80032ba:	f001 f8a2 	bl	8004402 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80032be:	bf00      	nop
 80032c0:	3728      	adds	r7, #40	@ 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40004400 	.word	0x40004400
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020000 	.word	0x40020000

080032d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <NMI_Handler+0x4>

080032dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <HardFault_Handler+0x4>

080032e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <MemManage_Handler+0x4>

080032ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <BusFault_Handler+0x4>

080032f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <UsageFault_Handler+0x4>

080032fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800332a:	f000 f9f7 	bl	800371c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003338:	4805      	ldr	r0, [pc, #20]	@ (8003350 <ADC_IRQHandler+0x1c>)
 800333a:	f000 fc07 	bl	8003b4c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800333e:	4805      	ldr	r0, [pc, #20]	@ (8003354 <ADC_IRQHandler+0x20>)
 8003340:	f000 fc04 	bl	8003b4c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8003344:	4804      	ldr	r0, [pc, #16]	@ (8003358 <ADC_IRQHandler+0x24>)
 8003346:	f000 fc01 	bl	8003b4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000300 	.word	0x20000300
 8003354:	20000348 	.word	0x20000348
 8003358:	20000390 	.word	0x20000390

0800335c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI5_Break_Pin);
 8003360:	2020      	movs	r0, #32
 8003362:	f001 facb 	bl	80048fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI6_HALL_U_Pin);
 8003366:	2040      	movs	r0, #64	@ 0x40
 8003368:	f001 fac8 	bl	80048fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI7_HALL_V_Pin);
 800336c:	2080      	movs	r0, #128	@ 0x80
 800336e:	f001 fac5 	bl	80048fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI8_HALL_W_Pin);
 8003372:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003376:	f001 fac1 	bl	80048fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI9_FAULT_Pin);
 800337a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800337e:	f001 fabd 	bl	80048fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	int x = hallCC*10;
 800338e:	4b26      	ldr	r3, [pc, #152]	@ (8003428 <TIM2_IRQHandler+0xa0>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	607b      	str	r3, [r7, #4]
	float rev = x/24;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a23      	ldr	r2, [pc, #140]	@ (800342c <TIM2_IRQHandler+0xa4>)
 80033a0:	fb82 1203 	smull	r1, r2, r2, r3
 80033a4:	1092      	asrs	r2, r2, #2
 80033a6:	17db      	asrs	r3, r3, #31
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033b2:	edc7 7a00 	vstr	s15, [r7]
	rpm = rev*60;
 80033b6:	edd7 7a00 	vldr	s15, [r7]
 80033ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003430 <TIM2_IRQHandler+0xa8>
 80033be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <TIM2_IRQHandler+0xac>)
 80033c4:	edc3 7a00 	vstr	s15, [r3]
	hallCC = 0;
 80033c8:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <TIM2_IRQHandler+0xa0>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
	ADC_VAL[3] = rpm_tokmh(rpm);
 80033ce:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <TIM2_IRQHandler+0xac>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eeb0 0a67 	vmov.f32	s0, s15
 80033d8:	f7fe f8f4 	bl	80015c4 <rpm_tokmh>
 80033dc:	eef0 7a40 	vmov.f32	s15, s0
 80033e0:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <TIM2_IRQHandler+0xb0>)
 80033e2:	edc3 7a03 	vstr	s15, [r3, #12]
	//HAL_GPIO_TogglePin(PB1_LED_RED_GPIO_Port,PB1_LED_RED_Pin);
	if(timcc >= 10){
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <TIM2_IRQHandler+0xb4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	dd03      	ble.n	80033f6 <TIM2_IRQHandler+0x6e>
		timcc = 0;
 80033ee:	4b13      	ldr	r3, [pc, #76]	@ (800343c <TIM2_IRQHandler+0xb4>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e004      	b.n	8003400 <TIM2_IRQHandler+0x78>
	}else{
		timcc++;
 80033f6:	4b11      	ldr	r3, [pc, #68]	@ (800343c <TIM2_IRQHandler+0xb4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a0f      	ldr	r2, [pc, #60]	@ (800343c <TIM2_IRQHandler+0xb4>)
 80033fe:	6013      	str	r3, [r2, #0]
	}
	 // Increment counter only if in SWFAULT state
	if (STATE == SWFAULT) {
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <TIM2_IRQHandler+0xb8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d105      	bne.n	8003414 <TIM2_IRQHandler+0x8c>
		swfault_time_counter++;
 8003408:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <TIM2_IRQHandler+0xbc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a0d      	ldr	r2, [pc, #52]	@ (8003444 <TIM2_IRQHandler+0xbc>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e002      	b.n	800341a <TIM2_IRQHandler+0x92>
	} else {
		// Reset the counter if leaving SWFAULT state
        swfault_time_counter = 0;
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <TIM2_IRQHandler+0xbc>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800341a:	480b      	ldr	r0, [pc, #44]	@ (8003448 <TIM2_IRQHandler+0xc0>)
 800341c:	f004 f860 	bl	80074e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000550 	.word	0x20000550
 800342c:	2aaaaaab 	.word	0x2aaaaaab
 8003430:	42700000 	.word	0x42700000
 8003434:	20000554 	.word	0x20000554
 8003438:	2000055c 	.word	0x2000055c
 800343c:	20000598 	.word	0x20000598
 8003440:	20000010 	.word	0x20000010
 8003444:	20000574 	.word	0x20000574
 8003448:	20000474 	.word	0x20000474

0800344c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003450:	4802      	ldr	r0, [pc, #8]	@ (800345c <USART2_IRQHandler+0x10>)
 8003452:	f004 ff3f 	bl	80082d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000504 	.word	0x20000504

08003460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003464:	4802      	ldr	r0, [pc, #8]	@ (8003470 <OTG_FS_IRQHandler+0x10>)
 8003466:	f002 f842 	bl	80054ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20001a84 	.word	0x20001a84

08003474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return 1;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <_kill>:

int _kill(int pid, int sig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800348e:	f00a fba1 	bl	800dbd4 <__errno>
 8003492:	4603      	mov	r3, r0
 8003494:	2216      	movs	r2, #22
 8003496:	601a      	str	r2, [r3, #0]
  return -1;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_exit>:

void _exit (int status)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ffe7 	bl	8003484 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <_exit+0x12>

080034ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e00a      	b.n	80034e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034cc:	f3af 8000 	nop.w
 80034d0:	4601      	mov	r1, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	60ba      	str	r2, [r7, #8]
 80034d8:	b2ca      	uxtb	r2, r1
 80034da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3301      	adds	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dbf0      	blt.n	80034cc <_read+0x12>
  }

  return len;
 80034ea:	687b      	ldr	r3, [r7, #4]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e009      	b.n	800351a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	60ba      	str	r2, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3301      	adds	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	dbf1      	blt.n	8003506 <_write+0x12>
  }
  return len;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_close>:

int _close(int file)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003554:	605a      	str	r2, [r3, #4]
  return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_isatty>:

int _isatty(int file)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <_sbrk+0x5c>)
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <_sbrk+0x60>)
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a8:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <_sbrk+0x64>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b0:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <_sbrk+0x64>)
 80035b2:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <_sbrk+0x68>)
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <_sbrk+0x64>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d207      	bcs.n	80035d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c4:	f00a fb06 	bl	800dbd4 <__errno>
 80035c8:	4603      	mov	r3, r0
 80035ca:	220c      	movs	r2, #12
 80035cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	e009      	b.n	80035e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d4:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <_sbrk+0x64>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	4a05      	ldr	r2, [pc, #20]	@ (80035f8 <_sbrk+0x64>)
 80035e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20020000 	.word	0x20020000
 80035f4:	00000400 	.word	0x00000400
 80035f8:	2000059c 	.word	0x2000059c
 80035fc:	200022d8 	.word	0x200022d8

08003600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <SystemInit+0x20>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	4a05      	ldr	r2, [pc, #20]	@ (8003620 <SystemInit+0x20>)
 800360c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800365c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003628:	f7ff ffea 	bl	8003600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800362c:	480c      	ldr	r0, [pc, #48]	@ (8003660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800362e:	490d      	ldr	r1, [pc, #52]	@ (8003664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003630:	4a0d      	ldr	r2, [pc, #52]	@ (8003668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003634:	e002      	b.n	800363c <LoopCopyDataInit>

08003636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800363a:	3304      	adds	r3, #4

0800363c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800363c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003640:	d3f9      	bcc.n	8003636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003644:	4c0a      	ldr	r4, [pc, #40]	@ (8003670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003648:	e001      	b.n	800364e <LoopFillZerobss>

0800364a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800364a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800364c:	3204      	adds	r2, #4

0800364e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003650:	d3fb      	bcc.n	800364a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003652:	f00a fac5 	bl	800dbe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003656:	f7fe fadd 	bl	8001c14 <main>
  bx  lr    
 800365a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800365c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003664:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8003668:	080105b8 	.word	0x080105b8
  ldr r2, =_sbss
 800366c:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8003670:	200022d4 	.word	0x200022d4

08003674 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003674:	e7fe      	b.n	8003674 <CAN1_RX0_IRQHandler>
	...

08003678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800367c:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_Init+0x40>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <HAL_Init+0x40>)
 8003682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <HAL_Init+0x40>)
 800368e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003694:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <HAL_Init+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a07      	ldr	r2, [pc, #28]	@ (80036b8 <HAL_Init+0x40>)
 800369a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a0:	2003      	movs	r0, #3
 80036a2:	f000 fe87 	bl	80043b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a6:	200f      	movs	r0, #15
 80036a8:	f000 f808 	bl	80036bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036ac:	f7ff fbc8 	bl	8002e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023c00 	.word	0x40023c00

080036bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <HAL_InitTick+0x54>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_InitTick+0x58>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	4619      	mov	r1, r3
 80036ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fe9f 	bl	800441e <HAL_SYSTICK_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00e      	b.n	8003708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b0f      	cmp	r3, #15
 80036ee:	d80a      	bhi.n	8003706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f0:	2200      	movs	r2, #0
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f000 fe67 	bl	80043ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036fc:	4a06      	ldr	r2, [pc, #24]	@ (8003718 <HAL_InitTick+0x5c>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e000      	b.n	8003708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000018 	.word	0x20000018
 8003714:	20000020 	.word	0x20000020
 8003718:	2000001c 	.word	0x2000001c

0800371c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_IncTick+0x20>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_IncTick+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4413      	add	r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_IncTick+0x24>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000020 	.word	0x20000020
 8003740:	200005a0 	.word	0x200005a0

08003744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return uwTick;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_GetTick+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	200005a0 	.word	0x200005a0

0800375c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff ffee 	bl	8003744 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d005      	beq.n	8003782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <HAL_Delay+0x44>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003782:	bf00      	nop
 8003784:	f7ff ffde 	bl	8003744 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	429a      	cmp	r2, r3
 8003792:	d8f7      	bhi.n	8003784 <HAL_Delay+0x28>
  {
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000020 	.word	0x20000020

080037a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e033      	b.n	8003822 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fb64 	bl	8002e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037ea:	f023 0302 	bic.w	r3, r3, #2
 80037ee:	f043 0202 	orr.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fc06 	bl	8004008 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
 8003812:	e001      	b.n	8003818 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Start+0x1a>
 8003842:	2302      	movs	r3, #2
 8003844:	e0b2      	b.n	80039ac <HAL_ADC_Start+0x180>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d018      	beq.n	800388e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800386c:	4b52      	ldr	r3, [pc, #328]	@ (80039b8 <HAL_ADC_Start+0x18c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a52      	ldr	r2, [pc, #328]	@ (80039bc <HAL_ADC_Start+0x190>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0c9a      	lsrs	r2, r3, #18
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003880:	e002      	b.n	8003888 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3b01      	subs	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f9      	bne.n	8003882 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d17a      	bne.n	8003992 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038da:	d106      	bne.n	80038ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f023 0206 	bic.w	r2, r3, #6
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80038e8:	e002      	b.n	80038f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038f8:	4b31      	ldr	r3, [pc, #196]	@ (80039c0 <HAL_ADC_Start+0x194>)
 80038fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003904:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2b00      	cmp	r3, #0
 8003910:	d12a      	bne.n	8003968 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_ADC_Start+0x198>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d015      	beq.n	8003948 <HAL_ADC_Start+0x11c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <HAL_ADC_Start+0x19c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d105      	bne.n	8003932 <HAL_ADC_Start+0x106>
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_ADC_Start+0x194>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a25      	ldr	r2, [pc, #148]	@ (80039cc <HAL_ADC_Start+0x1a0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d136      	bne.n	80039aa <HAL_ADC_Start+0x17e>
 800393c:	4b20      	ldr	r3, [pc, #128]	@ (80039c0 <HAL_ADC_Start+0x194>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d130      	bne.n	80039aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d129      	bne.n	80039aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	e020      	b.n	80039aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a15      	ldr	r2, [pc, #84]	@ (80039c4 <HAL_ADC_Start+0x198>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d11b      	bne.n	80039aa <HAL_ADC_Start+0x17e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d114      	bne.n	80039aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	e00b      	b.n	80039aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20000018 	.word	0x20000018
 80039bc:	431bde83 	.word	0x431bde83
 80039c0:	40012300 	.word	0x40012300
 80039c4:	40012000 	.word	0x40012000
 80039c8:	40012100 	.word	0x40012100
 80039cc:	40012200 	.word	0x40012200

080039d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_ADC_Stop+0x16>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e021      	b.n	8003a2a <HAL_ADC_Stop+0x5a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	f043 0201 	orr.w	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a52:	d113      	bne.n	8003a7c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a62:	d10b      	bne.n	8003a7c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e063      	b.n	8003b44 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7c:	f7ff fe62 	bl	8003744 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a82:	e021      	b.n	8003ac8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_ADC_PollForConversion+0x6c>
 8003a92:	f7ff fe57 	bl	8003744 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d212      	bcs.n	8003ac8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d00b      	beq.n	8003ac8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e03d      	b.n	8003b44 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d1d6      	bne.n	8003a84 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f06f 0212 	mvn.w	r2, #18
 8003ade:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d123      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11f      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d111      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d105      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d049      	beq.n	8003c16 <HAL_ADC_IRQHandler+0xca>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d046      	beq.n	8003c16 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12b      	bne.n	8003c06 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d127      	bne.n	8003c06 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d119      	bne.n	8003c06 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0220 	bic.w	r2, r2, #32
 8003be0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8bd 	bl	8003d86 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0212 	mvn.w	r2, #18
 8003c14:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c24:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d057      	beq.n	8003cdc <HAL_ADC_IRQHandler+0x190>
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d054      	beq.n	8003cdc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d105      	bne.n	8003c4a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d139      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d12b      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d124      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d11d      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d119      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ca6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fa97 	bl	8004200 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 020c 	mvn.w	r2, #12
 8003cda:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cea:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d017      	beq.n	8003d22 <HAL_ADC_IRQHandler+0x1d6>
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d014      	beq.n	8003d22 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10d      	bne.n	8003d22 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f841 	bl	8003d9a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0201 	mvn.w	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d30:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x218>
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d012      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	f043 0202 	orr.w	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f06f 0220 	mvn.w	r2, #32
 8003d52:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f82a 	bl	8003dae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f06f 0220 	mvn.w	r2, #32
 8003d62:	601a      	str	r2, [r3, #0]
  }
}
 8003d64:	bf00      	nop
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x1c>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e105      	b.n	8003fec <HAL_ADC_ConfigChannel+0x228>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b09      	cmp	r3, #9
 8003dee:	d925      	bls.n	8003e3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68d9      	ldr	r1, [r3, #12]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	3b1e      	subs	r3, #30
 8003e06:	2207      	movs	r2, #7
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43da      	mvns	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	400a      	ands	r2, r1
 8003e14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	4603      	mov	r3, r0
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4403      	add	r3, r0
 8003e2e:	3b1e      	subs	r3, #30
 8003e30:	409a      	lsls	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	e022      	b.n	8003e82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6919      	ldr	r1, [r3, #16]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	2207      	movs	r2, #7
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4618      	mov	r0, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4403      	add	r3, r0
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d824      	bhi.n	8003ed4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	3b05      	subs	r3, #5
 8003e9c:	221f      	movs	r2, #31
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3b05      	subs	r3, #5
 8003ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ed2:	e04c      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d824      	bhi.n	8003f26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	3b23      	subs	r3, #35	@ 0x23
 8003eee:	221f      	movs	r2, #31
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43da      	mvns	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	400a      	ands	r2, r1
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	3b23      	subs	r3, #35	@ 0x23
 8003f18:	fa00 f203 	lsl.w	r2, r0, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f24:	e023      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	3b41      	subs	r3, #65	@ 0x41
 8003f38:	221f      	movs	r2, #31
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	400a      	ands	r2, r1
 8003f46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	3b41      	subs	r3, #65	@ 0x41
 8003f62:	fa00 f203 	lsl.w	r2, r0, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x234>)
 8003f70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a21      	ldr	r2, [pc, #132]	@ (8003ffc <HAL_ADC_ConfigChannel+0x238>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x1cc>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b12      	cmp	r3, #18
 8003f82:	d105      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <HAL_ADC_ConfigChannel+0x238>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d123      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x21e>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d003      	beq.n	8003faa <HAL_ADC_ConfigChannel+0x1e6>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b11      	cmp	r3, #17
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d111      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fbe:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <HAL_ADC_ConfigChannel+0x23c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a10      	ldr	r2, [pc, #64]	@ (8004004 <HAL_ADC_ConfigChannel+0x240>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	0c9a      	lsrs	r2, r3, #18
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fd4:	e002      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f9      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40012300 	.word	0x40012300
 8003ffc:	40012000 	.word	0x40012000
 8004000:	20000018 	.word	0x20000018
 8004004:	431bde83 	.word	0x431bde83

08004008 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004010:	4b79      	ldr	r3, [pc, #484]	@ (80041f8 <ADC_Init+0x1f0>)
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	431a      	orrs	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800403c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	021a      	lsls	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004082:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6899      	ldr	r1, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	4a58      	ldr	r2, [pc, #352]	@ (80041fc <ADC_Init+0x1f4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	e00f      	b.n	8004106 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004104:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0202 	bic.w	r2, r2, #2
 8004114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6899      	ldr	r1, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7e1b      	ldrb	r3, [r3, #24]
 8004120:	005a      	lsls	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01b      	beq.n	800416c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004142:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004152:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	3b01      	subs	r3, #1
 8004160:	035a      	lsls	r2, r3, #13
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e007      	b.n	800417c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800417a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	3b01      	subs	r3, #1
 8004198:	051a      	lsls	r2, r3, #20
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80041b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6899      	ldr	r1, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041be:	025a      	lsls	r2, r3, #9
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	029a      	lsls	r2, r3, #10
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40012300 	.word	0x40012300
 80041fc:	0f000001 	.word	0x0f000001

08004200 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004224:	4b0c      	ldr	r3, [pc, #48]	@ (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800423c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004246:	4a04      	ldr	r2, [pc, #16]	@ (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004260:	4b04      	ldr	r3, [pc, #16]	@ (8004274 <__NVIC_GetPriorityGrouping+0x18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0307 	and.w	r3, r3, #7
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db0b      	blt.n	80042a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4907      	ldr	r1, [pc, #28]	@ (80042b0 <__NVIC_EnableIRQ+0x38>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2001      	movs	r0, #1
 800429a:	fa00 f202 	lsl.w	r2, r0, r2
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db0a      	blt.n	80042de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	490c      	ldr	r1, [pc, #48]	@ (8004300 <__NVIC_SetPriority+0x4c>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042dc:	e00a      	b.n	80042f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4908      	ldr	r1, [pc, #32]	@ (8004304 <__NVIC_SetPriority+0x50>)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	3b04      	subs	r3, #4
 80042ec:	0112      	lsls	r2, r2, #4
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	440b      	add	r3, r1
 80042f2:	761a      	strb	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	@ 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	bf28      	it	cs
 8004326:	2304      	movcs	r3, #4
 8004328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3304      	adds	r3, #4
 800432e:	2b06      	cmp	r3, #6
 8004330:	d902      	bls.n	8004338 <NVIC_EncodePriority+0x30>
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3b03      	subs	r3, #3
 8004336:	e000      	b.n	800433a <NVIC_EncodePriority+0x32>
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	401a      	ands	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004350:	f04f 31ff 	mov.w	r1, #4294967295
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43d9      	mvns	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004360:	4313      	orrs	r3, r2
         );
}
 8004362:	4618      	mov	r0, r3
 8004364:	3724      	adds	r7, #36	@ 0x24
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004380:	d301      	bcc.n	8004386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004382:	2301      	movs	r3, #1
 8004384:	e00f      	b.n	80043a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004386:	4a0a      	ldr	r2, [pc, #40]	@ (80043b0 <SysTick_Config+0x40>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438e:	210f      	movs	r1, #15
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f7ff ff8e 	bl	80042b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <SysTick_Config+0x40>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439e:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <SysTick_Config+0x40>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	e000e010 	.word	0xe000e010

080043b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff29 	bl	8004214 <__NVIC_SetPriorityGrouping>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043dc:	f7ff ff3e 	bl	800425c <__NVIC_GetPriorityGrouping>
 80043e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff ff8e 	bl	8004308 <NVIC_EncodePriority>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff5d 	bl	80042b4 <__NVIC_SetPriority>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff31 	bl	8004278 <__NVIC_EnableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ffa2 	bl	8004370 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004444:	f7ff f97e 	bl	8003744 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d008      	beq.n	8004468 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2280      	movs	r2, #128	@ 0x80
 800445a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e052      	b.n	800450e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0216 	bic.w	r2, r2, #22
 8004476:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004486:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d103      	bne.n	8004498 <HAL_DMA_Abort+0x62>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0208 	bic.w	r2, r2, #8
 80044a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b8:	e013      	b.n	80044e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ba:	f7ff f943 	bl	8003744 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d90c      	bls.n	80044e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e015      	b.n	800450e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e4      	bne.n	80044ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	223f      	movs	r2, #63	@ 0x3f
 80044f6:	409a      	lsls	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d004      	beq.n	8004534 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2280      	movs	r2, #128	@ 0x80
 800452e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e00c      	b.n	800454e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2205      	movs	r2, #5
 8004538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	@ 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	e16b      	b.n	8004850 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004578:	2201      	movs	r2, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	429a      	cmp	r2, r3
 8004592:	f040 815a 	bne.w	800484a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d005      	beq.n	80045ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d130      	bne.n	8004610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	2203      	movs	r2, #3
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e4:	2201      	movs	r2, #1
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 0201 	and.w	r2, r3, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b03      	cmp	r3, #3
 800461a:	d017      	beq.n	800464c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d123      	bne.n	80046a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	08da      	lsrs	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3208      	adds	r2, #8
 8004660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	220f      	movs	r2, #15
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	08da      	lsrs	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3208      	adds	r2, #8
 800469a:	69b9      	ldr	r1, [r7, #24]
 800469c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	2203      	movs	r2, #3
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0203 	and.w	r2, r3, #3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80b4 	beq.w	800484a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b60      	ldr	r3, [pc, #384]	@ (8004868 <HAL_GPIO_Init+0x30c>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004868 <HAL_GPIO_Init+0x30c>)
 80046ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80046f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004868 <HAL_GPIO_Init+0x30c>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046fe:	4a5b      	ldr	r2, [pc, #364]	@ (800486c <HAL_GPIO_Init+0x310>)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3302      	adds	r3, #2
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a52      	ldr	r2, [pc, #328]	@ (8004870 <HAL_GPIO_Init+0x314>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02b      	beq.n	8004782 <HAL_GPIO_Init+0x226>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a51      	ldr	r2, [pc, #324]	@ (8004874 <HAL_GPIO_Init+0x318>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d025      	beq.n	800477e <HAL_GPIO_Init+0x222>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a50      	ldr	r2, [pc, #320]	@ (8004878 <HAL_GPIO_Init+0x31c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01f      	beq.n	800477a <HAL_GPIO_Init+0x21e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a4f      	ldr	r2, [pc, #316]	@ (800487c <HAL_GPIO_Init+0x320>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d019      	beq.n	8004776 <HAL_GPIO_Init+0x21a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a4e      	ldr	r2, [pc, #312]	@ (8004880 <HAL_GPIO_Init+0x324>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <HAL_GPIO_Init+0x216>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a4d      	ldr	r2, [pc, #308]	@ (8004884 <HAL_GPIO_Init+0x328>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00d      	beq.n	800476e <HAL_GPIO_Init+0x212>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4c      	ldr	r2, [pc, #304]	@ (8004888 <HAL_GPIO_Init+0x32c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <HAL_GPIO_Init+0x20e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4b      	ldr	r2, [pc, #300]	@ (800488c <HAL_GPIO_Init+0x330>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_GPIO_Init+0x20a>
 8004762:	2307      	movs	r3, #7
 8004764:	e00e      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004766:	2308      	movs	r3, #8
 8004768:	e00c      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800476a:	2306      	movs	r3, #6
 800476c:	e00a      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800476e:	2305      	movs	r3, #5
 8004770:	e008      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004772:	2304      	movs	r3, #4
 8004774:	e006      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004776:	2303      	movs	r3, #3
 8004778:	e004      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800477a:	2302      	movs	r3, #2
 800477c:	e002      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004782:	2300      	movs	r3, #0
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4093      	lsls	r3, r2
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004794:	4935      	ldr	r1, [pc, #212]	@ (800486c <HAL_GPIO_Init+0x310>)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	3302      	adds	r3, #2
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <HAL_GPIO_Init+0x334>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047c6:	4a32      	ldr	r2, [pc, #200]	@ (8004890 <HAL_GPIO_Init+0x334>)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047cc:	4b30      	ldr	r3, [pc, #192]	@ (8004890 <HAL_GPIO_Init+0x334>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f0:	4a27      	ldr	r2, [pc, #156]	@ (8004890 <HAL_GPIO_Init+0x334>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047f6:	4b26      	ldr	r3, [pc, #152]	@ (8004890 <HAL_GPIO_Init+0x334>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800481a:	4a1d      	ldr	r2, [pc, #116]	@ (8004890 <HAL_GPIO_Init+0x334>)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <HAL_GPIO_Init+0x334>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004844:	4a12      	ldr	r2, [pc, #72]	@ (8004890 <HAL_GPIO_Init+0x334>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	f67f ae90 	bls.w	8004578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3724      	adds	r7, #36	@ 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	40013800 	.word	0x40013800
 8004870:	40020000 	.word	0x40020000
 8004874:	40020400 	.word	0x40020400
 8004878:	40020800 	.word	0x40020800
 800487c:	40020c00 	.word	0x40020c00
 8004880:	40021000 	.word	0x40021000
 8004884:	40021400 	.word	0x40021400
 8004888:	40021800 	.word	0x40021800
 800488c:	40021c00 	.word	0x40021c00
 8004890:	40013c00 	.word	0x40013c00

08004894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]
 80048a0:	4613      	mov	r3, r2
 80048a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048a4:	787b      	ldrb	r3, [r7, #1]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048b0:	e003      	b.n	80048ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	041a      	lsls	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	619a      	str	r2, [r3, #24]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048d8:	887a      	ldrh	r2, [r7, #2]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4013      	ands	r3, r2
 80048de:	041a      	lsls	r2, r3, #16
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	43d9      	mvns	r1, r3
 80048e4:	887b      	ldrh	r3, [r7, #2]
 80048e6:	400b      	ands	r3, r1
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	619a      	str	r2, [r3, #24]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004906:	4b08      	ldr	r3, [pc, #32]	@ (8004928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d006      	beq.n	8004920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004912:	4a05      	ldr	r2, [pc, #20]	@ (8004928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fe5e 	bl	80025dc <HAL_GPIO_EXTI_Callback>
  }
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40013c00 	.word	0x40013c00

0800492c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e12b      	b.n	8004b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe fb74 	bl	8003040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	@ 0x24
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800497e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800498e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004990:	f002 fb2c 	bl	8006fec <HAL_RCC_GetPCLK1Freq>
 8004994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4a81      	ldr	r2, [pc, #516]	@ (8004ba0 <HAL_I2C_Init+0x274>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d807      	bhi.n	80049b0 <HAL_I2C_Init+0x84>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a80      	ldr	r2, [pc, #512]	@ (8004ba4 <HAL_I2C_Init+0x278>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	bf94      	ite	ls
 80049a8:	2301      	movls	r3, #1
 80049aa:	2300      	movhi	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e006      	b.n	80049be <HAL_I2C_Init+0x92>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a7d      	ldr	r2, [pc, #500]	@ (8004ba8 <HAL_I2C_Init+0x27c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	bf94      	ite	ls
 80049b8:	2301      	movls	r3, #1
 80049ba:	2300      	movhi	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0e7      	b.n	8004b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a78      	ldr	r2, [pc, #480]	@ (8004bac <HAL_I2C_Init+0x280>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	0c9b      	lsrs	r3, r3, #18
 80049d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a6a      	ldr	r2, [pc, #424]	@ (8004ba0 <HAL_I2C_Init+0x274>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d802      	bhi.n	8004a00 <HAL_I2C_Init+0xd4>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3301      	adds	r3, #1
 80049fe:	e009      	b.n	8004a14 <HAL_I2C_Init+0xe8>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	4a69      	ldr	r2, [pc, #420]	@ (8004bb0 <HAL_I2C_Init+0x284>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	3301      	adds	r3, #1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	495c      	ldr	r1, [pc, #368]	@ (8004ba0 <HAL_I2C_Init+0x274>)
 8004a30:	428b      	cmp	r3, r1
 8004a32:	d819      	bhi.n	8004a68 <HAL_I2C_Init+0x13c>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1e59      	subs	r1, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a48:	400b      	ands	r3, r1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_I2C_Init+0x138>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1e59      	subs	r1, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	e051      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004a64:	2304      	movs	r3, #4
 8004a66:	e04f      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d111      	bne.n	8004a94 <HAL_I2C_Init+0x168>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1e58      	subs	r0, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	440b      	add	r3, r1
 8004a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a82:	3301      	adds	r3, #1
 8004a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e012      	b.n	8004aba <HAL_I2C_Init+0x18e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1e58      	subs	r0, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	0099      	lsls	r1, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Init+0x196>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e022      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_I2C_Init+0x1bc>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1e58      	subs	r0, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	440b      	add	r3, r1
 8004ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae6:	e00f      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1e58      	subs	r0, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	0099      	lsls	r1, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	6809      	ldr	r1, [r1, #0]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6911      	ldr	r1, [r2, #16]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	4311      	orrs	r1, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	000186a0 	.word	0x000186a0
 8004ba4:	001e847f 	.word	0x001e847f
 8004ba8:	003d08ff 	.word	0x003d08ff
 8004bac:	431bde83 	.word	0x431bde83
 8004bb0:	10624dd3 	.word	0x10624dd3

08004bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	817b      	strh	r3, [r7, #10]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7fe fdbc 	bl	8003744 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	f040 80e0 	bne.w	8004d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2319      	movs	r3, #25
 8004be2:	2201      	movs	r2, #1
 8004be4:	4970      	ldr	r1, [pc, #448]	@ (8004da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f964 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0d3      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_I2C_Master_Transmit+0x50>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0cc      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d007      	beq.n	8004c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2221      	movs	r2, #33	@ 0x21
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2210      	movs	r2, #16
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	893a      	ldrh	r2, [r7, #8]
 8004c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a50      	ldr	r2, [pc, #320]	@ (8004dac <HAL_I2C_Master_Transmit+0x1f8>)
 8004c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c6c:	8979      	ldrh	r1, [r7, #10]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f89c 	bl	8004db0 <I2C_MasterRequestWrite>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e08d      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c98:	e066      	b.n	8004d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fa22 	bl	80050e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e06b      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d11b      	bne.n	8004d3c <HAL_I2C_Master_Transmit+0x188>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d017      	beq.n	8004d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	6a39      	ldr	r1, [r7, #32]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fa19 	bl	8005178 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00d      	beq.n	8004d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d107      	bne.n	8004d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e01a      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d194      	bne.n	8004c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	00100002 	.word	0x00100002
 8004dac:	ffff0000 	.word	0xffff0000

08004db0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d006      	beq.n	8004dda <I2C_MasterRequestWrite+0x2a>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d003      	beq.n	8004dda <I2C_MasterRequestWrite+0x2a>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004dd8:	d108      	bne.n	8004dec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e00b      	b.n	8004e04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	2b12      	cmp	r3, #18
 8004df2:	d107      	bne.n	8004e04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f84f 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e2a:	d103      	bne.n	8004e34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e035      	b.n	8004ea4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e40:	d108      	bne.n	8004e54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e42:	897b      	ldrh	r3, [r7, #10]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e50:	611a      	str	r2, [r3, #16]
 8004e52:	e01b      	b.n	8004e8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e54:	897b      	ldrh	r3, [r7, #10]
 8004e56:	11db      	asrs	r3, r3, #7
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 0306 	and.w	r3, r3, #6
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f063 030f 	orn	r3, r3, #15
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	490e      	ldr	r1, [pc, #56]	@ (8004eac <I2C_MasterRequestWrite+0xfc>)
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f898 	bl	8004fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e010      	b.n	8004ea4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4907      	ldr	r1, [pc, #28]	@ (8004eb0 <I2C_MasterRequestWrite+0x100>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f888 	bl	8004fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010008 	.word	0x00010008
 8004eb0:	00010002 	.word	0x00010002

08004eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec4:	e048      	b.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d044      	beq.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7fe fc39 	bl	8003744 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d139      	bne.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	0c1b      	lsrs	r3, r3, #16
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d10d      	bne.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	43da      	mvns	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	e00c      	b.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	43da      	mvns	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d116      	bne.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e023      	b.n	8004fa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10d      	bne.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	43da      	mvns	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	e00c      	b.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	43da      	mvns	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d093      	beq.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fb6:	e071      	b.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc6:	d123      	bne.n	8005010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	f043 0204 	orr.w	r2, r3, #4
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e067      	b.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d041      	beq.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005018:	f7fe fb94 	bl	8003744 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d302      	bcc.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d136      	bne.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d10c      	bne.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	43da      	mvns	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	bf14      	ite	ne
 800504a:	2301      	movne	r3, #1
 800504c:	2300      	moveq	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e00b      	b.n	800506a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	43da      	mvns	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	f043 0220 	orr.w	r2, r3, #32
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e021      	b.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10c      	bne.n	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	43da      	mvns	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e00b      	b.n	80050d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	43da      	mvns	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf14      	ite	ne
 80050d2:	2301      	movne	r3, #1
 80050d4:	2300      	moveq	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f af6d 	bne.w	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f4:	e034      	b.n	8005160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f886 	bl	8005208 <I2C_IsAcknowledgeFailed>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e034      	b.n	8005170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d028      	beq.n	8005160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fe fb19 	bl	8003744 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d11d      	bne.n	8005160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512e:	2b80      	cmp	r3, #128	@ 0x80
 8005130:	d016      	beq.n	8005160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	f043 0220 	orr.w	r2, r3, #32
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e007      	b.n	8005170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516a:	2b80      	cmp	r3, #128	@ 0x80
 800516c:	d1c3      	bne.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005184:	e034      	b.n	80051f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f83e 	bl	8005208 <I2C_IsAcknowledgeFailed>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e034      	b.n	8005200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d028      	beq.n	80051f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fe fad1 	bl	8003744 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11d      	bne.n	80051f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d016      	beq.n	80051f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e007      	b.n	8005200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d1c3      	bne.n	8005186 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521e:	d11b      	bne.n	8005258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005244:	f043 0204 	orr.w	r2, r3, #4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af02      	add	r7, sp, #8
 800526c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e101      	b.n	800547c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f007 fba6 	bl	800c9e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2203      	movs	r2, #3
 800529c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a6:	d102      	bne.n	80052ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f003 fff3 	bl	800929e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7c1a      	ldrb	r2, [r3, #16]
 80052c0:	f88d 2000 	strb.w	r2, [sp]
 80052c4:	3304      	adds	r3, #4
 80052c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052c8:	f003 fed2 	bl	8009070 <USB_CoreInit>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e0ce      	b.n	800547c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f003 ffeb 	bl	80092c0 <USB_SetCurrentMode>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0bf      	b.n	800547c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e04a      	b.n	8005398 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	3315      	adds	r3, #21
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005316:	7bfa      	ldrb	r2, [r7, #15]
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	3314      	adds	r3, #20
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800532a:	7bfa      	ldrb	r2, [r7, #15]
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	b298      	uxth	r0, r3
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	332e      	adds	r3, #46	@ 0x2e
 800533e:	4602      	mov	r2, r0
 8005340:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005342:	7bfa      	ldrb	r2, [r7, #15]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	3318      	adds	r3, #24
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005356:	7bfa      	ldrb	r2, [r7, #15]
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	331c      	adds	r3, #28
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800536a:	7bfa      	ldrb	r2, [r7, #15]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3320      	adds	r3, #32
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3324      	adds	r3, #36	@ 0x24
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	3301      	adds	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	791b      	ldrb	r3, [r3, #4]
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3af      	bcc.n	8005302 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]
 80053a6:	e044      	b.n	8005432 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053be:	7bfa      	ldrb	r2, [r7, #15]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80053d0:	7bfa      	ldrb	r2, [r7, #15]
 80053d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053d4:	7bfa      	ldrb	r2, [r7, #15]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053ea:	7bfa      	ldrb	r2, [r7, #15]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	3301      	adds	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	791b      	ldrb	r3, [r3, #4]
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	429a      	cmp	r2, r3
 800543a:	d3b5      	bcc.n	80053a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	7c1a      	ldrb	r2, [r3, #16]
 8005444:	f88d 2000 	strb.w	r2, [sp]
 8005448:	3304      	adds	r3, #4
 800544a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800544c:	f003 ff84 	bl	8009358 <USB_DevInit>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e00c      	b.n	800547c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f004 ffce 	bl	800a416 <USB_DevDisconnect>

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_PCD_Start+0x1c>
 800549c:	2302      	movs	r3, #2
 800549e:	e022      	b.n	80054e6 <HAL_PCD_Start+0x62>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f003 fed5 	bl	800927c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f004 ff7c 	bl	800a3d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80054ee:	b590      	push	{r4, r7, lr}
 80054f0:	b08d      	sub	sp, #52	@ 0x34
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f005 f83a 	bl	800a57e <USB_GetMode>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	f040 848c 	bne.w	8005e2a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f004 ff9e 	bl	800a458 <USB_ReadInterrupts>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8482 	beq.w	8005e28 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f004 ff8b 	bl	800a458 <USB_ReadInterrupts>
 8005542:	4603      	mov	r3, r0
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d107      	bne.n	800555c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f002 0202 	and.w	r2, r2, #2
 800555a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f004 ff79 	bl	800a458 <USB_ReadInterrupts>
 8005566:	4603      	mov	r3, r0
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b10      	cmp	r3, #16
 800556e:	d161      	bne.n	8005634 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0210 	bic.w	r2, r2, #16
 800557e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4413      	add	r3, r2
 800559c:	3304      	adds	r3, #4
 800559e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	0c5b      	lsrs	r3, r3, #17
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d124      	bne.n	80055f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d035      	beq.n	8005624 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6a38      	ldr	r0, [r7, #32]
 80055cc:	f004 fdb0 	bl	800a130 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055dc:	441a      	add	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ee:	441a      	add	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	615a      	str	r2, [r3, #20]
 80055f4:	e016      	b.n	8005624 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	0c5b      	lsrs	r3, r3, #17
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d110      	bne.n	8005624 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005608:	2208      	movs	r2, #8
 800560a:	4619      	mov	r1, r3
 800560c:	6a38      	ldr	r0, [r7, #32]
 800560e:	f004 fd8f 	bl	800a130 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800561e:	441a      	add	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0210 	orr.w	r2, r2, #16
 8005632:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f004 ff0d 	bl	800a458 <USB_ReadInterrupts>
 800563e:	4603      	mov	r3, r0
 8005640:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005644:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005648:	f040 80a7 	bne.w	800579a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f004 ff12 	bl	800a47e <USB_ReadDevAllOutEpInterrupt>
 800565a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800565c:	e099      	b.n	8005792 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 808e 	beq.w	8005786 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	4611      	mov	r1, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f004 ff36 	bl	800a4e6 <USB_ReadDevOutEPInterrupt>
 800567a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00c      	beq.n	80056a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005692:	461a      	mov	r2, r3
 8005694:	2301      	movs	r3, #1
 8005696:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fea4 	bl	80063e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b6:	461a      	mov	r2, r3
 80056b8:	2308      	movs	r3, #8
 80056ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80056bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 ff7a 	bl	80065b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056da:	461a      	mov	r2, r3
 80056dc:	2310      	movs	r3, #16
 80056de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d030      	beq.n	800574c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f2:	2b80      	cmp	r3, #128	@ 0x80
 80056f4:	d109      	bne.n	800570a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005704:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005708:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800570a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	4413      	add	r3, r2
 800571c:	3304      	adds	r3, #4
 800571e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	78db      	ldrb	r3, [r3, #3]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d108      	bne.n	800573a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2200      	movs	r2, #0
 800572c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	b2db      	uxtb	r3, r3
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f007 fa5b 	bl	800cbf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	2302      	movs	r3, #2
 800574a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	2320      	movs	r3, #32
 8005766:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005784:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	3301      	adds	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	2b00      	cmp	r3, #0
 8005796:	f47f af62 	bne.w	800565e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f004 fe5a 	bl	800a458 <USB_ReadInterrupts>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057ae:	f040 80db 	bne.w	8005968 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f004 fe7b 	bl	800a4b2 <USB_ReadDevAllInEpInterrupt>
 80057bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80057c2:	e0cd      	b.n	8005960 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80057c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80c2 	beq.w	8005954 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f004 fea1 	bl	800a522 <USB_ReadDevInEPInterrupt>
 80057e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d057      	beq.n	800589c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	2201      	movs	r2, #1
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	43db      	mvns	r3, r3
 8005806:	69f9      	ldr	r1, [r7, #28]
 8005808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800580c:	4013      	ands	r3, r2
 800580e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800581c:	461a      	mov	r2, r3
 800581e:	2301      	movs	r3, #1
 8005820:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	799b      	ldrb	r3, [r3, #6]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d132      	bne.n	8005890 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582e:	4613      	mov	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	3320      	adds	r3, #32
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4403      	add	r3, r0
 800584a:	331c      	adds	r3, #28
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4419      	add	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	4613      	mov	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4403      	add	r3, r0
 800585e:	3320      	adds	r3, #32
 8005860:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d113      	bne.n	8005890 <HAL_PCD_IRQHandler+0x3a2>
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	3324      	adds	r3, #36	@ 0x24
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005888:	461a      	mov	r2, r3
 800588a:	2101      	movs	r1, #1
 800588c:	f004 fea8 	bl	800a5e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	b2db      	uxtb	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f007 f925 	bl	800cae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	461a      	mov	r2, r3
 80058b4:	2308      	movs	r3, #8
 80058b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ce:	461a      	mov	r2, r3
 80058d0:	2310      	movs	r3, #16
 80058d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ea:	461a      	mov	r2, r3
 80058ec:	2340      	movs	r3, #64	@ 0x40
 80058ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d023      	beq.n	8005942 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80058fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058fc:	6a38      	ldr	r0, [r7, #32]
 80058fe:	f003 fe8f 	bl	8009620 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	3310      	adds	r3, #16
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	3304      	adds	r3, #4
 8005914:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d108      	bne.n	8005930 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2200      	movs	r2, #0
 8005922:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	b2db      	uxtb	r3, r3
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f007 f972 	bl	800cc14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593c:	461a      	mov	r2, r3
 800593e:	2302      	movs	r3, #2
 8005940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800594c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fcbd 	bl	80062ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	3301      	adds	r3, #1
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	f47f af2e 	bne.w	80057c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f004 fd73 	bl	800a458 <USB_ReadInterrupts>
 8005972:	4603      	mov	r3, r0
 8005974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800597c:	d122      	bne.n	80059c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005998:	2b01      	cmp	r3, #1
 800599a:	d108      	bne.n	80059ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059a4:	2100      	movs	r1, #0
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fea4 	bl	80066f4 <HAL_PCDEx_LPM_Callback>
 80059ac:	e002      	b.n	80059b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f007 f910 	bl	800cbd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80059c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f004 fd45 	bl	800a458 <USB_ReadInterrupts>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d8:	d112      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d102      	bne.n	80059f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f007 f8cc 	bl	800cb88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80059fe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f004 fd27 	bl	800a458 <USB_ReadInterrupts>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a14:	f040 80b7 	bne.w	8005b86 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2110      	movs	r1, #16
 8005a32:	4618      	mov	r0, r3
 8005a34:	f003 fdf4 	bl	8009620 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a3c:	e046      	b.n	8005acc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005aa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ac4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac8:	3301      	adds	r3, #1
 8005aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	791b      	ldrb	r3, [r3, #4]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d3b2      	bcc.n	8005a3e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ae6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005aea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	7bdb      	ldrb	r3, [r3, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d016      	beq.n	8005b22 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b04:	f043 030b 	orr.w	r3, r3, #11
 8005b08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b1a:	f043 030b 	orr.w	r3, r3, #11
 8005b1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b20:	e015      	b.n	8005b4e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b34:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005b38:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b48:	f043 030b 	orr.w	r3, r3, #11
 8005b4c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b5c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b60:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b70:	461a      	mov	r2, r3
 8005b72:	f004 fd35 	bl	800a5e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f004 fc64 	bl	800a458 <USB_ReadInterrupts>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b9a:	d123      	bne.n	8005be4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f004 fcfa 	bl	800a59a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f003 fdb1 	bl	8009712 <USB_GetDevSpeed>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681c      	ldr	r4, [r3, #0]
 8005bbc:	f001 fa0a 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8005bc0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f003 fab5 	bl	8009138 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f006 ffb1 	bl	800cb36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f004 fc35 	bl	800a458 <USB_ReadInterrupts>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d10a      	bne.n	8005c0e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f006 ff8e 	bl	800cb1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f002 0208 	and.w	r2, r2, #8
 8005c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f004 fc20 	bl	800a458 <USB_ReadInterrupts>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1e:	2b80      	cmp	r3, #128	@ 0x80
 8005c20:	d123      	bne.n	8005c6a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c2e:	2301      	movs	r3, #1
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c32:	e014      	b.n	8005c5e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d105      	bne.n	8005c58 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb0a 	bl	800626c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	461a      	mov	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d3e4      	bcc.n	8005c34 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f004 fbf2 	bl	800a458 <USB_ReadInterrupts>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c7e:	d13c      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c80:	2301      	movs	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c84:	e02b      	b.n	8005cde <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3318      	adds	r3, #24
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d115      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005cac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da12      	bge.n	8005cd8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3317      	adds	r3, #23
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 faca 	bl	800626c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	3301      	adds	r3, #1
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	791b      	ldrb	r3, [r3, #4]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d3cd      	bcc.n	8005c86 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f004 fbaa 	bl	800a458 <USB_ReadInterrupts>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d0e:	d156      	bne.n	8005dbe <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d10:	2301      	movs	r3, #1
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d14:	e045      	b.n	8005da2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d12e      	bne.n	8005d9c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da2b      	bge.n	8005d9c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005d50:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d121      	bne.n	8005d9c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d98:	6053      	str	r3, [r2, #4]
            break;
 8005d9a:	e008      	b.n	8005dae <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	3301      	adds	r3, #1
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d3b3      	bcc.n	8005d16 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 fb48 	bl	800a458 <USB_ReadInterrupts>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd2:	d10a      	bne.n	8005dea <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f006 ff2f 	bl	800cc38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f004 fb32 	bl	800a458 <USB_ReadInterrupts>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d115      	bne.n	8005e2a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f006 ff1f 	bl	800cc54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	e000      	b.n	8005e2a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005e28:	bf00      	nop
    }
  }
}
 8005e2a:	3734      	adds	r7, #52	@ 0x34
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd90      	pop	{r4, r7, pc}

08005e30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_PCD_SetAddress+0x1a>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e012      	b.n	8005e70 <HAL_PCD_SetAddress+0x40>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f004 fa91 	bl	800a388 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	70fb      	strb	r3, [r7, #3]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	803b      	strh	r3, [r7, #0]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da0f      	bge.n	8005ebe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	3310      	adds	r3, #16
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	705a      	strb	r2, [r3, #1]
 8005ebc:	e00f      	b.n	8005ede <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	f003 020f 	and.w	r2, r3, #15
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005eea:	883b      	ldrh	r3, [r7, #0]
 8005eec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	78ba      	ldrb	r2, [r7, #2]
 8005ef8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f0c:	78bb      	ldrb	r3, [r7, #2]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d102      	bne.n	8005f18 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_PCD_EP_Open+0xae>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e00e      	b.n	8005f44 <HAL_PCD_EP_Open+0xcc>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68f9      	ldr	r1, [r7, #12]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f003 fc11 	bl	800975c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005f42:	7afb      	ldrb	r3, [r7, #11]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	da0f      	bge.n	8005f80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	f003 020f 	and.w	r2, r3, #15
 8005f66:	4613      	mov	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	3310      	adds	r3, #16
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	3304      	adds	r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	705a      	strb	r2, [r3, #1]
 8005f7e:	e00f      	b.n	8005fa0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	f003 020f 	and.w	r2, r3, #15
 8005f86:	4613      	mov	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	4413      	add	r3, r2
 8005f96:	3304      	adds	r3, #4
 8005f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_PCD_EP_Close+0x6e>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e00e      	b.n	8005fd8 <HAL_PCD_EP_Close+0x8c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f003 fc4f 	bl	800986c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	460b      	mov	r3, r1
 8005fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	f003 020f 	and.w	r2, r3, #15
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	3304      	adds	r3, #4
 8006008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	b2da      	uxtb	r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	799b      	ldrb	r3, [r3, #6]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d102      	bne.n	800603c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	799b      	ldrb	r3, [r3, #6]
 8006044:	461a      	mov	r2, r3
 8006046:	6979      	ldr	r1, [r7, #20]
 8006048:	f003 fcec 	bl	8009a24 <USB_EPStartXfer>

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	f003 020f 	and.w	r2, r3, #15
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006078:	681b      	ldr	r3, [r3, #0]
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b086      	sub	sp, #24
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
 8006092:	460b      	mov	r3, r1
 8006094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	3310      	adds	r3, #16
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2200      	movs	r2, #0
 80060be:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2201      	movs	r2, #1
 80060c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	799b      	ldrb	r3, [r3, #6]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	f003 fc9a 	bl	8009a24 <USB_EPStartXfer>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	7912      	ldrb	r2, [r2, #4]
 8006110:	4293      	cmp	r3, r2
 8006112:	d901      	bls.n	8006118 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e04f      	b.n	80061b8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	da0f      	bge.n	8006140 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	f003 020f 	and.w	r2, r3, #15
 8006126:	4613      	mov	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	3310      	adds	r3, #16
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	705a      	strb	r2, [r3, #1]
 800613e:	e00d      	b.n	800615c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	3304      	adds	r3, #4
 8006154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	b2da      	uxtb	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_PCD_EP_SetStall+0x82>
 8006178:	2302      	movs	r3, #2
 800617a:	e01d      	b.n	80061b8 <HAL_PCD_EP_SetStall+0xbe>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68f9      	ldr	r1, [r7, #12]
 800618a:	4618      	mov	r0, r3
 800618c:	f004 f828 	bl	800a1e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7999      	ldrb	r1, [r3, #6]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061a8:	461a      	mov	r2, r3
 80061aa:	f004 fa19 	bl	800a5e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	7912      	ldrb	r2, [r2, #4]
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e042      	b.n	8006264 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da0f      	bge.n	8006206 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	f003 020f 	and.w	r2, r3, #15
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	3310      	adds	r3, #16
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4413      	add	r3, r2
 80061fa:	3304      	adds	r3, #4
 80061fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	705a      	strb	r2, [r3, #1]
 8006204:	e00f      	b.n	8006226 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	4613      	mov	r3, r2
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	4413      	add	r3, r2
 800621c:	3304      	adds	r3, #4
 800621e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	b2da      	uxtb	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_PCD_EP_ClrStall+0x86>
 8006242:	2302      	movs	r3, #2
 8006244:	e00e      	b.n	8006264 <HAL_PCD_EP_ClrStall+0xa4>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68f9      	ldr	r1, [r7, #12]
 8006254:	4618      	mov	r0, r3
 8006256:	f004 f831 	bl	800a2bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800627c:	2b00      	cmp	r3, #0
 800627e:	da0c      	bge.n	800629a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	f003 020f 	and.w	r2, r3, #15
 8006286:	4613      	mov	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	3310      	adds	r3, #16
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	4413      	add	r3, r2
 8006294:	3304      	adds	r3, #4
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e00c      	b.n	80062b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4413      	add	r3, r2
 80062b0:	3304      	adds	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f003 fe50 	bl	8009f60 <USB_EPStopXfer>
 80062c0:	4603      	mov	r3, r0
 80062c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80062c4:	7afb      	ldrb	r3, [r7, #11]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b08a      	sub	sp, #40	@ 0x28
 80062d2:	af02      	add	r7, sp, #8
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	3310      	adds	r3, #16
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d901      	bls.n	8006306 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e06b      	b.n	80063de <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	429a      	cmp	r2, r3
 800631a:	d902      	bls.n	8006322 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3303      	adds	r3, #3
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800632a:	e02a      	b.n	8006382 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	429a      	cmp	r2, r3
 8006340:	d902      	bls.n	8006348 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	3303      	adds	r3, #3
 800634c:	089b      	lsrs	r3, r3, #2
 800634e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68d9      	ldr	r1, [r3, #12]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	4603      	mov	r3, r0
 8006364:	6978      	ldr	r0, [r7, #20]
 8006366:	f003 fea5 	bl	800a0b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	441a      	add	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	441a      	add	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	429a      	cmp	r2, r3
 8006396:	d809      	bhi.n	80063ac <PCD_WriteEmptyTxFifo+0xde>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d203      	bcs.n	80063ac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1bf      	bne.n	800632c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d811      	bhi.n	80063dc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	2201      	movs	r2, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	43db      	mvns	r3, r3
 80063d2:	6939      	ldr	r1, [r7, #16]
 80063d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063d8:	4013      	ands	r3, r2
 80063da:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	333c      	adds	r3, #60	@ 0x3c
 8006400:	3304      	adds	r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	799b      	ldrb	r3, [r3, #6]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d17b      	bne.n	8006516 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d015      	beq.n	8006454 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4a61      	ldr	r2, [pc, #388]	@ (80065b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	f240 80b9 	bls.w	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80b3 	beq.w	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644a:	461a      	mov	r2, r3
 800644c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006450:	6093      	str	r3, [r2, #8]
 8006452:	e0a7      	b.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646a:	461a      	mov	r2, r3
 800646c:	2320      	movs	r3, #32
 800646e:	6093      	str	r3, [r2, #8]
 8006470:	e098      	b.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 8093 	bne.w	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	4a4b      	ldr	r2, [pc, #300]	@ (80065b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d90f      	bls.n	80064a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649c:	461a      	mov	r2, r3
 800649e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064a2:	6093      	str	r3, [r2, #8]
 80064a4:	e07e      	b.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	4413      	add	r3, r2
 80064b8:	3304      	adds	r3, #4
 80064ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1a      	ldr	r2, [r3, #32]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	0159      	lsls	r1, r3, #5
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	440b      	add	r3, r1
 80064c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d114      	bne.n	8006508 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064f0:	461a      	mov	r2, r3
 80064f2:	2101      	movs	r1, #1
 80064f4:	f004 f874 	bl	800a5e0 <USB_EP0_OutStart>
 80064f8:	e006      	b.n	8006508 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	441a      	add	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f006 face 	bl	800cab0 <HAL_PCD_DataOutStageCallback>
 8006514:	e046      	b.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	4a26      	ldr	r2, [pc, #152]	@ (80065b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d124      	bne.n	8006568 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006534:	461a      	mov	r2, r3
 8006536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800653a:	6093      	str	r3, [r2, #8]
 800653c:	e032      	b.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006554:	461a      	mov	r2, r3
 8006556:	2320      	movs	r3, #32
 8006558:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f006 faa5 	bl	800cab0 <HAL_PCD_DataOutStageCallback>
 8006566:	e01d      	b.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d114      	bne.n	8006598 <PCD_EP_OutXfrComplete_int+0x1b0>
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d108      	bne.n	8006598 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006590:	461a      	mov	r2, r3
 8006592:	2100      	movs	r1, #0
 8006594:	f004 f824 	bl	800a5e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f006 fa86 	bl	800cab0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	4f54300a 	.word	0x4f54300a
 80065b4:	4f54310a 	.word	0x4f54310a

080065b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	333c      	adds	r3, #60	@ 0x3c
 80065d0:	3304      	adds	r3, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a15      	ldr	r2, [pc, #84]	@ (8006640 <PCD_EP_OutSetupPacket_int+0x88>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d90e      	bls.n	800660c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006604:	461a      	mov	r2, r3
 8006606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f006 fa3d 	bl	800ca8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4a0a      	ldr	r2, [pc, #40]	@ (8006640 <PCD_EP_OutSetupPacket_int+0x88>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d90c      	bls.n	8006634 <PCD_EP_OutSetupPacket_int+0x7c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	799b      	ldrb	r3, [r3, #6]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d108      	bne.n	8006634 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800662c:	461a      	mov	r2, r3
 800662e:	2101      	movs	r1, #1
 8006630:	f003 ffd6 	bl	800a5e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	4f54300a 	.word	0x4f54300a

08006644 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
 8006650:	4613      	mov	r3, r2
 8006652:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006662:	883b      	ldrh	r3, [r7, #0]
 8006664:	0419      	lsls	r1, r3, #16
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	430a      	orrs	r2, r1
 800666e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006670:	e028      	b.n	80066c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	4413      	add	r3, r2
 800667e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
 8006684:	e00d      	b.n	80066a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	3340      	adds	r3, #64	@ 0x40
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	0c1b      	lsrs	r3, r3, #16
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	4413      	add	r3, r2
 800669a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	3301      	adds	r3, #1
 80066a0:	73fb      	strb	r3, [r7, #15]
 80066a2:	7bfa      	ldrb	r2, [r7, #15]
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d3ec      	bcc.n	8006686 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066ac:	883b      	ldrh	r3, [r7, #0]
 80066ae:	0418      	lsls	r0, r3, #16
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6819      	ldr	r1, [r3, #0]
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	4302      	orrs	r2, r0
 80066bc:	3340      	adds	r3, #64	@ 0x40
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	887a      	ldrh	r2, [r7, #2]
 80066e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e267      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d075      	beq.n	8006816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800672a:	4b88      	ldr	r3, [pc, #544]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b04      	cmp	r3, #4
 8006734:	d00c      	beq.n	8006750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006736:	4b85      	ldr	r3, [pc, #532]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800673e:	2b08      	cmp	r3, #8
 8006740:	d112      	bne.n	8006768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006742:	4b82      	ldr	r3, [pc, #520]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800674e:	d10b      	bne.n	8006768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006750:	4b7e      	ldr	r3, [pc, #504]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05b      	beq.n	8006814 <HAL_RCC_OscConfig+0x108>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d157      	bne.n	8006814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e242      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006770:	d106      	bne.n	8006780 <HAL_RCC_OscConfig+0x74>
 8006772:	4b76      	ldr	r3, [pc, #472]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a75      	ldr	r2, [pc, #468]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e01d      	b.n	80067bc <HAL_RCC_OscConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006788:	d10c      	bne.n	80067a4 <HAL_RCC_OscConfig+0x98>
 800678a:	4b70      	ldr	r3, [pc, #448]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a6f      	ldr	r2, [pc, #444]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4b6d      	ldr	r3, [pc, #436]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6c      	ldr	r2, [pc, #432]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800679c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e00b      	b.n	80067bc <HAL_RCC_OscConfig+0xb0>
 80067a4:	4b69      	ldr	r3, [pc, #420]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a68      	ldr	r2, [pc, #416]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4b66      	ldr	r3, [pc, #408]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a65      	ldr	r2, [pc, #404]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d013      	beq.n	80067ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c4:	f7fc ffbe 	bl	8003744 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067cc:	f7fc ffba 	bl	8003744 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b64      	cmp	r3, #100	@ 0x64
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e207      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	4b5b      	ldr	r3, [pc, #364]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCC_OscConfig+0xc0>
 80067ea:	e014      	b.n	8006816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fc ffaa 	bl	8003744 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f4:	f7fc ffa6 	bl	8003744 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b64      	cmp	r3, #100	@ 0x64
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e1f3      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006806:	4b51      	ldr	r3, [pc, #324]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0xe8>
 8006812:	e000      	b.n	8006816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d063      	beq.n	80068ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006822:	4b4a      	ldr	r3, [pc, #296]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800682e:	4b47      	ldr	r3, [pc, #284]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006836:	2b08      	cmp	r3, #8
 8006838:	d11c      	bne.n	8006874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800683a:	4b44      	ldr	r3, [pc, #272]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d116      	bne.n	8006874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006846:	4b41      	ldr	r3, [pc, #260]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_RCC_OscConfig+0x152>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d001      	beq.n	800685e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e1c7      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685e:	4b3b      	ldr	r3, [pc, #236]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	4937      	ldr	r1, [pc, #220]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800686e:	4313      	orrs	r3, r2
 8006870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006872:	e03a      	b.n	80068ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d020      	beq.n	80068be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800687c:	4b34      	ldr	r3, [pc, #208]	@ (8006950 <HAL_RCC_OscConfig+0x244>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006882:	f7fc ff5f 	bl	8003744 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800688a:	f7fc ff5b 	bl	8003744 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e1a8      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689c:	4b2b      	ldr	r3, [pc, #172]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a8:	4b28      	ldr	r3, [pc, #160]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	4925      	ldr	r1, [pc, #148]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]
 80068bc:	e015      	b.n	80068ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068be:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <HAL_RCC_OscConfig+0x244>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fc ff3e 	bl	8003744 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068cc:	f7fc ff3a 	bl	8003744 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e187      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068de:	4b1b      	ldr	r3, [pc, #108]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d036      	beq.n	8006964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d016      	beq.n	800692c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068fe:	4b15      	ldr	r3, [pc, #84]	@ (8006954 <HAL_RCC_OscConfig+0x248>)
 8006900:	2201      	movs	r2, #1
 8006902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7fc ff1e 	bl	8003744 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800690c:	f7fc ff1a 	bl	8003744 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e167      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0x200>
 800692a:	e01b      	b.n	8006964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800692c:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <HAL_RCC_OscConfig+0x248>)
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006932:	f7fc ff07 	bl	8003744 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006938:	e00e      	b.n	8006958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800693a:	f7fc ff03 	bl	8003744 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d907      	bls.n	8006958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e150      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
 800694c:	40023800 	.word	0x40023800
 8006950:	42470000 	.word	0x42470000
 8006954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006958:	4b88      	ldr	r3, [pc, #544]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 800695a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1ea      	bne.n	800693a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8097 	beq.w	8006aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006976:	4b81      	ldr	r3, [pc, #516]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10f      	bne.n	80069a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	4b7d      	ldr	r3, [pc, #500]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 800698c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006990:	6413      	str	r3, [r2, #64]	@ 0x40
 8006992:	4b7a      	ldr	r3, [pc, #488]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a2:	4b77      	ldr	r3, [pc, #476]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d118      	bne.n	80069e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ae:	4b74      	ldr	r3, [pc, #464]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a73      	ldr	r2, [pc, #460]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ba:	f7fc fec3 	bl	8003744 <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c2:	f7fc febf 	bl	8003744 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e10c      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d106      	bne.n	80069f6 <HAL_RCC_OscConfig+0x2ea>
 80069e8:	4b64      	ldr	r3, [pc, #400]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ec:	4a63      	ldr	r2, [pc, #396]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069f4:	e01c      	b.n	8006a30 <HAL_RCC_OscConfig+0x324>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d10c      	bne.n	8006a18 <HAL_RCC_OscConfig+0x30c>
 80069fe:	4b5f      	ldr	r3, [pc, #380]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a02:	4a5e      	ldr	r2, [pc, #376]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a04:	f043 0304 	orr.w	r3, r3, #4
 8006a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a16:	e00b      	b.n	8006a30 <HAL_RCC_OscConfig+0x324>
 8006a18:	4b58      	ldr	r3, [pc, #352]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1c:	4a57      	ldr	r2, [pc, #348]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
 8006a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a24:	4b55      	ldr	r3, [pc, #340]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a28:	4a54      	ldr	r2, [pc, #336]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a2a:	f023 0304 	bic.w	r3, r3, #4
 8006a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d015      	beq.n	8006a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a38:	f7fc fe84 	bl	8003744 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a40:	f7fc fe80 	bl	8003744 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e0cb      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a56:	4b49      	ldr	r3, [pc, #292]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0ee      	beq.n	8006a40 <HAL_RCC_OscConfig+0x334>
 8006a62:	e014      	b.n	8006a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a64:	f7fc fe6e 	bl	8003744 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a6a:	e00a      	b.n	8006a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6c:	f7fc fe6a 	bl	8003744 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e0b5      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a82:	4b3e      	ldr	r3, [pc, #248]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1ee      	bne.n	8006a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a94:	4b39      	ldr	r3, [pc, #228]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	4a38      	ldr	r2, [pc, #224]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80a1 	beq.w	8006bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aaa:	4b34      	ldr	r3, [pc, #208]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d05c      	beq.n	8006b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d141      	bne.n	8006b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <HAL_RCC_OscConfig+0x478>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac4:	f7fc fe3e 	bl	8003744 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006acc:	f7fc fe3a 	bl	8003744 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e087      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ade:	4b27      	ldr	r3, [pc, #156]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	019b      	lsls	r3, r3, #6
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	3b01      	subs	r3, #1
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	061b      	lsls	r3, r3, #24
 8006b0e:	491b      	ldr	r1, [pc, #108]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b14:	4b1b      	ldr	r3, [pc, #108]	@ (8006b84 <HAL_RCC_OscConfig+0x478>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1a:	f7fc fe13 	bl	8003744 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b22:	f7fc fe0f 	bl	8003744 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e05c      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b34:	4b11      	ldr	r3, [pc, #68]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x416>
 8006b40:	e054      	b.n	8006bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b42:	4b10      	ldr	r3, [pc, #64]	@ (8006b84 <HAL_RCC_OscConfig+0x478>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fc fdfc 	bl	8003744 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b50:	f7fc fdf8 	bl	8003744 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e045      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b62:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCC_OscConfig+0x444>
 8006b6e:	e03d      	b.n	8006bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d107      	bne.n	8006b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e038      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	40007000 	.word	0x40007000
 8006b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b88:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf8 <HAL_RCC_OscConfig+0x4ec>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d028      	beq.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d121      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d11a      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006bb8:	4013      	ands	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d111      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d107      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800

08006bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0cc      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c10:	4b68      	ldr	r3, [pc, #416]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d90c      	bls.n	8006c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1e:	4b65      	ldr	r3, [pc, #404]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c26:	4b63      	ldr	r3, [pc, #396]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0b8      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d020      	beq.n	8006c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c50:	4b59      	ldr	r3, [pc, #356]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a58      	ldr	r2, [pc, #352]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c68:	4b53      	ldr	r3, [pc, #332]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4a52      	ldr	r2, [pc, #328]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c74:	4b50      	ldr	r3, [pc, #320]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	494d      	ldr	r1, [pc, #308]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d044      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d107      	bne.n	8006caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9a:	4b47      	ldr	r3, [pc, #284]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d119      	bne.n	8006cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e07f      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d003      	beq.n	8006cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d107      	bne.n	8006cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cba:	4b3f      	ldr	r3, [pc, #252]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e06f      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cca:	4b3b      	ldr	r3, [pc, #236]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e067      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cda:	4b37      	ldr	r3, [pc, #220]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f023 0203 	bic.w	r2, r3, #3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4934      	ldr	r1, [pc, #208]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cec:	f7fc fd2a 	bl	8003744 <HAL_GetTick>
 8006cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf2:	e00a      	b.n	8006d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf4:	f7fc fd26 	bl	8003744 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e04f      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 020c 	and.w	r2, r3, #12
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d1eb      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d1c:	4b25      	ldr	r3, [pc, #148]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d20c      	bcs.n	8006d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2a:	4b22      	ldr	r3, [pc, #136]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d32:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e032      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d50:	4b19      	ldr	r3, [pc, #100]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4916      	ldr	r1, [pc, #88]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d6e:	4b12      	ldr	r3, [pc, #72]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	490e      	ldr	r1, [pc, #56]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d82:	f000 f821 	bl	8006dc8 <HAL_RCC_GetSysClockFreq>
 8006d86:	4602      	mov	r2, r0
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	490a      	ldr	r1, [pc, #40]	@ (8006dbc <HAL_RCC_ClockConfig+0x1c0>)
 8006d94:	5ccb      	ldrb	r3, [r1, r3]
 8006d96:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9a:	4a09      	ldr	r2, [pc, #36]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d9e:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fc fc8a 	bl	80036bc <HAL_InitTick>

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40023c00 	.word	0x40023c00
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	08010220 	.word	0x08010220
 8006dc0:	20000018 	.word	0x20000018
 8006dc4:	2000001c 	.word	0x2000001c

08006dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dcc:	b094      	sub	sp, #80	@ 0x50
 8006dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006de0:	4b79      	ldr	r3, [pc, #484]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 030c 	and.w	r3, r3, #12
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d00d      	beq.n	8006e08 <HAL_RCC_GetSysClockFreq+0x40>
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	f200 80e1 	bhi.w	8006fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_RCC_GetSysClockFreq+0x34>
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d003      	beq.n	8006e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dfa:	e0db      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dfc:	4b73      	ldr	r3, [pc, #460]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8006dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e00:	e0db      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e02:	4b73      	ldr	r3, [pc, #460]	@ (8006fd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e06:	e0d8      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e08:	4b6f      	ldr	r3, [pc, #444]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e12:	4b6d      	ldr	r3, [pc, #436]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d063      	beq.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	099b      	lsrs	r3, r3, #6
 8006e24:	2200      	movs	r2, #0
 8006e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	f04f 0000 	mov.w	r0, #0
 8006e42:	f04f 0100 	mov.w	r1, #0
 8006e46:	0159      	lsls	r1, r3, #5
 8006e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e4c:	0150      	lsls	r0, r2, #5
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4621      	mov	r1, r4
 8006e54:	1a51      	subs	r1, r2, r1
 8006e56:	6139      	str	r1, [r7, #16]
 8006e58:	4629      	mov	r1, r5
 8006e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	018b      	lsls	r3, r1, #6
 8006e70:	4651      	mov	r1, sl
 8006e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e76:	4651      	mov	r1, sl
 8006e78:	018a      	lsls	r2, r1, #6
 8006e7a:	4651      	mov	r1, sl
 8006e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8006e80:	4659      	mov	r1, fp
 8006e82:	eb63 0901 	sbc.w	r9, r3, r1
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e9a:	4690      	mov	r8, r2
 8006e9c:	4699      	mov	r9, r3
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	eb18 0303 	adds.w	r3, r8, r3
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	eb49 0303 	adc.w	r3, r9, r3
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006eba:	4629      	mov	r1, r5
 8006ebc:	024b      	lsls	r3, r1, #9
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	024a      	lsls	r2, r1, #9
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ece:	2200      	movs	r2, #0
 8006ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ed8:	f7f9 feb6 	bl	8000c48 <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee4:	e058      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee6:	4b38      	ldr	r3, [pc, #224]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	099b      	lsrs	r3, r3, #6
 8006eec:	2200      	movs	r2, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ef6:	623b      	str	r3, [r7, #32]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f00:	4642      	mov	r2, r8
 8006f02:	464b      	mov	r3, r9
 8006f04:	f04f 0000 	mov.w	r0, #0
 8006f08:	f04f 0100 	mov.w	r1, #0
 8006f0c:	0159      	lsls	r1, r3, #5
 8006f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f12:	0150      	lsls	r0, r2, #5
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4641      	mov	r1, r8
 8006f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f1e:	4649      	mov	r1, r9
 8006f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f38:	ebb2 040a 	subs.w	r4, r2, sl
 8006f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	00eb      	lsls	r3, r5, #3
 8006f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f4e:	00e2      	lsls	r2, r4, #3
 8006f50:	4614      	mov	r4, r2
 8006f52:	461d      	mov	r5, r3
 8006f54:	4643      	mov	r3, r8
 8006f56:	18e3      	adds	r3, r4, r3
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	eb45 0303 	adc.w	r3, r5, r3
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f6e:	4629      	mov	r1, r5
 8006f70:	028b      	lsls	r3, r1, #10
 8006f72:	4621      	mov	r1, r4
 8006f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f78:	4621      	mov	r1, r4
 8006f7a:	028a      	lsls	r2, r1, #10
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f82:	2200      	movs	r2, #0
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	61fa      	str	r2, [r7, #28]
 8006f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f8c:	f7f9 fe5c 	bl	8000c48 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4613      	mov	r3, r2
 8006f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006f98:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fb2:	e002      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fb4:	4b05      	ldr	r3, [pc, #20]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8006fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3750      	adds	r7, #80	@ 0x50
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	00f42400 	.word	0x00f42400
 8006fd0:	007a1200 	.word	0x007a1200

08006fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd8:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fda:	681b      	ldr	r3, [r3, #0]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000018 	.word	0x20000018

08006fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ff0:	f7ff fff0 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	4b05      	ldr	r3, [pc, #20]	@ (800700c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	0a9b      	lsrs	r3, r3, #10
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	4903      	ldr	r1, [pc, #12]	@ (8007010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007002:	5ccb      	ldrb	r3, [r1, r3]
 8007004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007008:	4618      	mov	r0, r3
 800700a:	bd80      	pop	{r7, pc}
 800700c:	40023800 	.word	0x40023800
 8007010:	08010230 	.word	0x08010230

08007014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007018:	f7ff ffdc 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 800701c:	4602      	mov	r2, r0
 800701e:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	0b5b      	lsrs	r3, r3, #13
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	4903      	ldr	r1, [pc, #12]	@ (8007038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800702a:	5ccb      	ldrb	r3, [r1, r3]
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007030:	4618      	mov	r0, r3
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40023800 	.word	0x40023800
 8007038:	08010230 	.word	0x08010230

0800703c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e041      	b.n	80070d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fc f834 	bl	80030d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f000 fcdc 	bl	8007a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d001      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e04e      	b.n	8007192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a23      	ldr	r2, [pc, #140]	@ (80071a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d022      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x80>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711e:	d01d      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x80>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1f      	ldr	r2, [pc, #124]	@ (80071a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d018      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x80>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1e      	ldr	r2, [pc, #120]	@ (80071a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x80>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1c      	ldr	r2, [pc, #112]	@ (80071ac <HAL_TIM_Base_Start_IT+0xd0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00e      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x80>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1b      	ldr	r2, [pc, #108]	@ (80071b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d009      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x80>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a19      	ldr	r2, [pc, #100]	@ (80071b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x80>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a18      	ldr	r2, [pc, #96]	@ (80071b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d111      	bne.n	8007180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b06      	cmp	r3, #6
 800716c:	d010      	beq.n	8007190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717e:	e007      	b.n	8007190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40000800 	.word	0x40000800
 80071ac:	40000c00 	.word	0x40000c00
 80071b0:	40010400 	.word	0x40010400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40001800 	.word	0x40001800

080071bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e041      	b.n	8007252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f839 	bl	800725a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f000 fc1c 	bl	8007a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <HAL_TIM_PWM_Start+0x24>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	e022      	b.n	80072da <HAL_TIM_PWM_Start+0x6a>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b04      	cmp	r3, #4
 8007298:	d109      	bne.n	80072ae <HAL_TIM_PWM_Start+0x3e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	bf14      	ite	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	2300      	moveq	r3, #0
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	e015      	b.n	80072da <HAL_TIM_PWM_Start+0x6a>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d109      	bne.n	80072c8 <HAL_TIM_PWM_Start+0x58>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	bf14      	ite	ne
 80072c0:	2301      	movne	r3, #1
 80072c2:	2300      	moveq	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	e008      	b.n	80072da <HAL_TIM_PWM_Start+0x6a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	bf14      	ite	ne
 80072d4:	2301      	movne	r3, #1
 80072d6:	2300      	moveq	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e07c      	b.n	80073dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x82>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072f0:	e013      	b.n	800731a <HAL_TIM_PWM_Start+0xaa>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Start+0x92>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007300:	e00b      	b.n	800731a <HAL_TIM_PWM_Start+0xaa>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b08      	cmp	r3, #8
 8007306:	d104      	bne.n	8007312 <HAL_TIM_PWM_Start+0xa2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007310:	e003      	b.n	800731a <HAL_TIM_PWM_Start+0xaa>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2201      	movs	r2, #1
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fe7e 	bl	8008024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a2d      	ldr	r2, [pc, #180]	@ (80073e4 <HAL_TIM_PWM_Start+0x174>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIM_PWM_Start+0xcc>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a2c      	ldr	r2, [pc, #176]	@ (80073e8 <HAL_TIM_PWM_Start+0x178>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d101      	bne.n	8007340 <HAL_TIM_PWM_Start+0xd0>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <HAL_TIM_PWM_Start+0xd2>
 8007340:	2300      	movs	r3, #0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007354:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <HAL_TIM_PWM_Start+0x174>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d022      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x136>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007368:	d01d      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x136>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <HAL_TIM_PWM_Start+0x17c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d018      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x136>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a1d      	ldr	r2, [pc, #116]	@ (80073f0 <HAL_TIM_PWM_Start+0x180>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d013      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x136>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a1c      	ldr	r2, [pc, #112]	@ (80073f4 <HAL_TIM_PWM_Start+0x184>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00e      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x136>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a16      	ldr	r2, [pc, #88]	@ (80073e8 <HAL_TIM_PWM_Start+0x178>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d009      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x136>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <HAL_TIM_PWM_Start+0x188>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d004      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x136>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <HAL_TIM_PWM_Start+0x18c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d111      	bne.n	80073ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b06      	cmp	r3, #6
 80073b6:	d010      	beq.n	80073da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c8:	e007      	b.n	80073da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400
 80073ec:	40000400 	.word	0x40000400
 80073f0:	40000800 	.word	0x40000800
 80073f4:	40000c00 	.word	0x40000c00
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40001800 	.word	0x40001800

08007400 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fe06 	bl	8008024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2e      	ldr	r2, [pc, #184]	@ (80074d8 <HAL_TIM_PWM_Stop+0xd8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_TIM_PWM_Stop+0x2c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2d      	ldr	r2, [pc, #180]	@ (80074dc <HAL_TIM_PWM_Stop+0xdc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d101      	bne.n	8007430 <HAL_TIM_PWM_Stop+0x30>
 800742c:	2301      	movs	r3, #1
 800742e:	e000      	b.n	8007432 <HAL_TIM_PWM_Stop+0x32>
 8007430:	2300      	movs	r3, #0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d017      	beq.n	8007466 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007440:	4013      	ands	r3, r2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10f      	bne.n	8007466 <HAL_TIM_PWM_Stop+0x66>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a1a      	ldr	r2, [r3, #32]
 800744c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <HAL_TIM_PWM_Stop+0x66>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007464:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a1a      	ldr	r2, [r3, #32]
 800746c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10f      	bne.n	8007496 <HAL_TIM_PWM_Stop+0x96>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6a1a      	ldr	r2, [r3, #32]
 800747c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007480:	4013      	ands	r3, r2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d107      	bne.n	8007496 <HAL_TIM_PWM_Stop+0x96>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_PWM_Stop+0xa6>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074a4:	e013      	b.n	80074ce <HAL_TIM_PWM_Stop+0xce>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_PWM_Stop+0xb6>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074b4:	e00b      	b.n	80074ce <HAL_TIM_PWM_Stop+0xce>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d104      	bne.n	80074c6 <HAL_TIM_PWM_Stop+0xc6>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074c4:	e003      	b.n	80074ce <HAL_TIM_PWM_Stop+0xce>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40010400 	.word	0x40010400

080074e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d020      	beq.n	8007544 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01b      	beq.n	8007544 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0202 	mvn.w	r2, #2
 8007514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa65 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 8007530:	e005      	b.n	800753e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa57 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa68 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d020      	beq.n	8007590 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01b      	beq.n	8007590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0204 	mvn.w	r2, #4
 8007560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa3f 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 800757c:	e005      	b.n	800758a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa31 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fa42 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d020      	beq.n	80075dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01b      	beq.n	80075dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0208 	mvn.w	r2, #8
 80075ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2204      	movs	r2, #4
 80075b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa19 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 80075c8:	e005      	b.n	80075d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa0b 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa1c 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d020      	beq.n	8007628 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01b      	beq.n	8007628 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0210 	mvn.w	r2, #16
 80075f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2208      	movs	r2, #8
 80075fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f9f3 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9e5 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f9f6 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00c      	beq.n	800764c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0201 	mvn.w	r2, #1
 8007644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f9c3 	bl	80079d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00c      	beq.n	8007670 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fdd8 	bl	8008220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00c      	beq.n	8007694 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d007      	beq.n	8007694 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800768c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9c7 	bl	8007a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00c      	beq.n	80076b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d007      	beq.n	80076b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0220 	mvn.w	r2, #32
 80076b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fdaa 	bl	800820c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076b8:	bf00      	nop
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076da:	2302      	movs	r3, #2
 80076dc:	e0ae      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	f200 809f 	bhi.w	800782c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076ee:	a201      	add	r2, pc, #4	@ (adr r2, 80076f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007729 	.word	0x08007729
 80076f8:	0800782d 	.word	0x0800782d
 80076fc:	0800782d 	.word	0x0800782d
 8007700:	0800782d 	.word	0x0800782d
 8007704:	08007769 	.word	0x08007769
 8007708:	0800782d 	.word	0x0800782d
 800770c:	0800782d 	.word	0x0800782d
 8007710:	0800782d 	.word	0x0800782d
 8007714:	080077ab 	.word	0x080077ab
 8007718:	0800782d 	.word	0x0800782d
 800771c:	0800782d 	.word	0x0800782d
 8007720:	0800782d 	.word	0x0800782d
 8007724:	080077eb 	.word	0x080077eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fa2e 	bl	8007b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0208 	orr.w	r2, r2, #8
 8007742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0204 	bic.w	r2, r2, #4
 8007752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6999      	ldr	r1, [r3, #24]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	619a      	str	r2, [r3, #24]
      break;
 8007766:	e064      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fa7e 	bl	8007c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6999      	ldr	r1, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	619a      	str	r2, [r3, #24]
      break;
 80077a8:	e043      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fad3 	bl	8007d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0208 	orr.w	r2, r2, #8
 80077c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0204 	bic.w	r2, r2, #4
 80077d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69d9      	ldr	r1, [r3, #28]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	61da      	str	r2, [r3, #28]
      break;
 80077e8:	e023      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fb27 	bl	8007e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69d9      	ldr	r1, [r3, #28]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	021a      	lsls	r2, r3, #8
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	61da      	str	r2, [r3, #28]
      break;
 800782a:	e002      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
      break;
 8007830:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIM_ConfigClockSource+0x1c>
 800785c:	2302      	movs	r3, #2
 800785e:	e0b4      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x186>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800787e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007898:	d03e      	beq.n	8007918 <HAL_TIM_ConfigClockSource+0xd4>
 800789a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800789e:	f200 8087 	bhi.w	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078a6:	f000 8086 	beq.w	80079b6 <HAL_TIM_ConfigClockSource+0x172>
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ae:	d87f      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078b0:	2b70      	cmp	r3, #112	@ 0x70
 80078b2:	d01a      	beq.n	80078ea <HAL_TIM_ConfigClockSource+0xa6>
 80078b4:	2b70      	cmp	r3, #112	@ 0x70
 80078b6:	d87b      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078b8:	2b60      	cmp	r3, #96	@ 0x60
 80078ba:	d050      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x11a>
 80078bc:	2b60      	cmp	r3, #96	@ 0x60
 80078be:	d877      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078c0:	2b50      	cmp	r3, #80	@ 0x50
 80078c2:	d03c      	beq.n	800793e <HAL_TIM_ConfigClockSource+0xfa>
 80078c4:	2b50      	cmp	r3, #80	@ 0x50
 80078c6:	d873      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078c8:	2b40      	cmp	r3, #64	@ 0x40
 80078ca:	d058      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x13a>
 80078cc:	2b40      	cmp	r3, #64	@ 0x40
 80078ce:	d86f      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078d0:	2b30      	cmp	r3, #48	@ 0x30
 80078d2:	d064      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078d4:	2b30      	cmp	r3, #48	@ 0x30
 80078d6:	d86b      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d060      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d867      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d05c      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078e4:	2b10      	cmp	r3, #16
 80078e6:	d05a      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078e8:	e062      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078fa:	f000 fb73 	bl	8007fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800790c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	609a      	str	r2, [r3, #8]
      break;
 8007916:	e04f      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007928:	f000 fb5c 	bl	8007fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800793a:	609a      	str	r2, [r3, #8]
      break;
 800793c:	e03c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794a:	461a      	mov	r2, r3
 800794c:	f000 fad0 	bl	8007ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2150      	movs	r1, #80	@ 0x50
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fb29 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 800795c:	e02c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800796a:	461a      	mov	r2, r3
 800796c:	f000 faef 	bl	8007f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2160      	movs	r1, #96	@ 0x60
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fb19 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 800797c:	e01c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800798a:	461a      	mov	r2, r3
 800798c:	f000 fab0 	bl	8007ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2140      	movs	r1, #64	@ 0x40
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fb09 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 800799c:	e00c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f000 fb00 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 80079ae:	e003      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
      break;
 80079b4:	e000      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a46      	ldr	r2, [pc, #280]	@ (8007b64 <TIM_Base_SetConfig+0x12c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d013      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a56:	d00f      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a43      	ldr	r2, [pc, #268]	@ (8007b68 <TIM_Base_SetConfig+0x130>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00b      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a42      	ldr	r2, [pc, #264]	@ (8007b6c <TIM_Base_SetConfig+0x134>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d007      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a41      	ldr	r2, [pc, #260]	@ (8007b70 <TIM_Base_SetConfig+0x138>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d003      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a40      	ldr	r2, [pc, #256]	@ (8007b74 <TIM_Base_SetConfig+0x13c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d108      	bne.n	8007a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a35      	ldr	r2, [pc, #212]	@ (8007b64 <TIM_Base_SetConfig+0x12c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d02b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a98:	d027      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a32      	ldr	r2, [pc, #200]	@ (8007b68 <TIM_Base_SetConfig+0x130>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d023      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a31      	ldr	r2, [pc, #196]	@ (8007b6c <TIM_Base_SetConfig+0x134>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01f      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a30      	ldr	r2, [pc, #192]	@ (8007b70 <TIM_Base_SetConfig+0x138>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d01b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8007b74 <TIM_Base_SetConfig+0x13c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d017      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a2e      	ldr	r2, [pc, #184]	@ (8007b78 <TIM_Base_SetConfig+0x140>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b7c <TIM_Base_SetConfig+0x144>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00f      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a2c      	ldr	r2, [pc, #176]	@ (8007b80 <TIM_Base_SetConfig+0x148>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8007b84 <TIM_Base_SetConfig+0x14c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d007      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a2a      	ldr	r2, [pc, #168]	@ (8007b88 <TIM_Base_SetConfig+0x150>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d003      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a29      	ldr	r2, [pc, #164]	@ (8007b8c <TIM_Base_SetConfig+0x154>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d108      	bne.n	8007afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a10      	ldr	r2, [pc, #64]	@ (8007b64 <TIM_Base_SetConfig+0x12c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d003      	beq.n	8007b30 <TIM_Base_SetConfig+0xf8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a12      	ldr	r2, [pc, #72]	@ (8007b74 <TIM_Base_SetConfig+0x13c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d103      	bne.n	8007b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d105      	bne.n	8007b56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f023 0201 	bic.w	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	611a      	str	r2, [r3, #16]
  }
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40010000 	.word	0x40010000
 8007b68:	40000400 	.word	0x40000400
 8007b6c:	40000800 	.word	0x40000800
 8007b70:	40000c00 	.word	0x40000c00
 8007b74:	40010400 	.word	0x40010400
 8007b78:	40014000 	.word	0x40014000
 8007b7c:	40014400 	.word	0x40014400
 8007b80:	40014800 	.word	0x40014800
 8007b84:	40001800 	.word	0x40001800
 8007b88:	40001c00 	.word	0x40001c00
 8007b8c:	40002000 	.word	0x40002000

08007b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f023 0201 	bic.w	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0303 	bic.w	r3, r3, #3
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f023 0302 	bic.w	r3, r3, #2
 8007bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a20      	ldr	r2, [pc, #128]	@ (8007c68 <TIM_OC1_SetConfig+0xd8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_OC1_SetConfig+0x64>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1f      	ldr	r2, [pc, #124]	@ (8007c6c <TIM_OC1_SetConfig+0xdc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10c      	bne.n	8007c0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0308 	bic.w	r3, r3, #8
 8007bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f023 0304 	bic.w	r3, r3, #4
 8007c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a15      	ldr	r2, [pc, #84]	@ (8007c68 <TIM_OC1_SetConfig+0xd8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d003      	beq.n	8007c1e <TIM_OC1_SetConfig+0x8e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a14      	ldr	r2, [pc, #80]	@ (8007c6c <TIM_OC1_SetConfig+0xdc>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d111      	bne.n	8007c42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	40010400 	.word	0x40010400

08007c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	f023 0210 	bic.w	r2, r3, #16
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f023 0320 	bic.w	r3, r3, #32
 8007cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a22      	ldr	r2, [pc, #136]	@ (8007d54 <TIM_OC2_SetConfig+0xe4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <TIM_OC2_SetConfig+0x68>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a21      	ldr	r2, [pc, #132]	@ (8007d58 <TIM_OC2_SetConfig+0xe8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d10d      	bne.n	8007cf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a17      	ldr	r2, [pc, #92]	@ (8007d54 <TIM_OC2_SetConfig+0xe4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_OC2_SetConfig+0x94>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a16      	ldr	r2, [pc, #88]	@ (8007d58 <TIM_OC2_SetConfig+0xe8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d113      	bne.n	8007d2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40010400 	.word	0x40010400

08007d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a21      	ldr	r2, [pc, #132]	@ (8007e3c <TIM_OC3_SetConfig+0xe0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_OC3_SetConfig+0x66>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a20      	ldr	r2, [pc, #128]	@ (8007e40 <TIM_OC3_SetConfig+0xe4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d10d      	bne.n	8007dde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a16      	ldr	r2, [pc, #88]	@ (8007e3c <TIM_OC3_SetConfig+0xe0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_OC3_SetConfig+0x92>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a15      	ldr	r2, [pc, #84]	@ (8007e40 <TIM_OC3_SetConfig+0xe4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d113      	bne.n	8007e16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	621a      	str	r2, [r3, #32]
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40010400 	.word	0x40010400

08007e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	031b      	lsls	r3, r3, #12
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a12      	ldr	r2, [pc, #72]	@ (8007ee8 <TIM_OC4_SetConfig+0xa4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d003      	beq.n	8007eac <TIM_OC4_SetConfig+0x68>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a11      	ldr	r2, [pc, #68]	@ (8007eec <TIM_OC4_SetConfig+0xa8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d109      	bne.n	8007ec0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	019b      	lsls	r3, r3, #6
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	621a      	str	r2, [r3, #32]
}
 8007eda:	bf00      	nop
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40010000 	.word	0x40010000
 8007eec:	40010400 	.word	0x40010400

08007ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	f023 0201 	bic.w	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	011b      	lsls	r3, r3, #4
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f023 030a 	bic.w	r3, r3, #10
 8007f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b087      	sub	sp, #28
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f023 0210 	bic.w	r2, r3, #16
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	031b      	lsls	r3, r3, #12
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	011b      	lsls	r3, r3, #4
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f043 0307 	orr.w	r3, r3, #7
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	609a      	str	r2, [r3, #8]
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	431a      	orrs	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4313      	orrs	r3, r2
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	609a      	str	r2, [r3, #8]
}
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2201      	movs	r2, #1
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1a      	ldr	r2, [r3, #32]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	43db      	mvns	r3, r3
 8008046:	401a      	ands	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1a      	ldr	r2, [r3, #32]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	fa01 f303 	lsl.w	r3, r1, r3
 800805c:	431a      	orrs	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	621a      	str	r2, [r3, #32]
}
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008084:	2302      	movs	r3, #2
 8008086:	e05a      	b.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a21      	ldr	r2, [pc, #132]	@ (800814c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d022      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d4:	d01d      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1d      	ldr	r2, [pc, #116]	@ (8008150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d018      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d013      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a18      	ldr	r2, [pc, #96]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a17      	ldr	r2, [pc, #92]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a15      	ldr	r2, [pc, #84]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d10c      	bne.n	800812c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4313      	orrs	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40010400 	.word	0x40010400
 8008160:	40014000 	.word	0x40014000
 8008164:	40001800 	.word	0x40001800

08008168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008180:	2302      	movs	r3, #2
 8008182:	e03d      	b.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e042      	b.n	80082cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fa ffea 	bl	8003234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2224      	movs	r2, #36	@ 0x24
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc85 	bl	8008b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800828c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695a      	ldr	r2, [r3, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800829c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b0ba      	sub	sp, #232	@ 0xe8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10f      	bne.n	800833a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800831a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <HAL_UART_IRQHandler+0x66>
 8008326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fb69 	bl	8008a0a <UART_Receive_IT>
      return;
 8008338:	e25b      	b.n	80087f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800833a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80de 	beq.w	8008500 <HAL_UART_IRQHandler+0x22c>
 8008344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d106      	bne.n	800835e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008354:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 80d1 	beq.w	8008500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800835e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00b      	beq.n	8008382 <HAL_UART_IRQHandler+0xae>
 800836a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800836e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837a:	f043 0201 	orr.w	r2, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00b      	beq.n	80083a6 <HAL_UART_IRQHandler+0xd2>
 800838e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839e:	f043 0202 	orr.w	r2, r3, #2
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00b      	beq.n	80083ca <HAL_UART_IRQHandler+0xf6>
 80083b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c2:	f043 0204 	orr.w	r2, r3, #4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ce:	f003 0308 	and.w	r3, r3, #8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d011      	beq.n	80083fa <HAL_UART_IRQHandler+0x126>
 80083d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f2:	f043 0208 	orr.w	r2, r3, #8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 81f2 	beq.w	80087e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008408:	f003 0320 	and.w	r3, r3, #32
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <HAL_UART_IRQHandler+0x14e>
 8008410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 faf4 	bl	8008a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842c:	2b40      	cmp	r3, #64	@ 0x40
 800842e:	bf0c      	ite	eq
 8008430:	2301      	moveq	r3, #1
 8008432:	2300      	movne	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <HAL_UART_IRQHandler+0x17a>
 8008446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d04f      	beq.n	80084ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f9fc 	bl	800884c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845e:	2b40      	cmp	r3, #64	@ 0x40
 8008460:	d141      	bne.n	80084e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3314      	adds	r3, #20
 8008468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800847c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3314      	adds	r3, #20
 800848a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800848e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800849a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80084a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1d9      	bne.n	8008462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d013      	beq.n	80084de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ba:	4a7e      	ldr	r2, [pc, #504]	@ (80086b4 <HAL_UART_IRQHandler+0x3e0>)
 80084bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fc f827 	bl	8004516 <HAL_DMA_Abort_IT>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	e00e      	b.n	80084fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f99e 	bl	8008820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	e00a      	b.n	80084fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f99a 	bl	8008820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ec:	e006      	b.n	80084fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f996 	bl	8008820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80084fa:	e175      	b.n	80087e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	bf00      	nop
    return;
 80084fe:	e173      	b.n	80087e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008504:	2b01      	cmp	r3, #1
 8008506:	f040 814f 	bne.w	80087a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800850a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800850e:	f003 0310 	and.w	r3, r3, #16
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 8148 	beq.w	80087a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8141 	beq.w	80087a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008526:	2300      	movs	r3, #0
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008546:	2b40      	cmp	r3, #64	@ 0x40
 8008548:	f040 80b6 	bne.w	80086b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8145 	beq.w	80087ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800856a:	429a      	cmp	r2, r3
 800856c:	f080 813e 	bcs.w	80087ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008576:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008582:	f000 8088 	beq.w	8008696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	330c      	adds	r3, #12
 800858c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800859c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80085b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80085b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80085be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80085ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1d9      	bne.n	8008586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3314      	adds	r3, #20
 80085d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80085e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3314      	adds	r3, #20
 80085f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e1      	bne.n	80085d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3314      	adds	r3, #20
 8008614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800861e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3314      	adds	r3, #20
 800862e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e3      	bne.n	800860e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008666:	f023 0310 	bic.w	r3, r3, #16
 800866a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	330c      	adds	r3, #12
 8008674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008678:	65ba      	str	r2, [r7, #88]	@ 0x58
 800867a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800867e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e3      	bne.n	8008654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008690:	4618      	mov	r0, r3
 8008692:	f7fb fed0 	bl	8004436 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f8c1 	bl	8008834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086b2:	e09b      	b.n	80087ec <HAL_UART_IRQHandler+0x518>
 80086b4:	08008913 	.word	0x08008913
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 808e 	beq.w	80087f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80086d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 8089 	beq.w	80087f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	330c      	adds	r3, #12
 80086e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008702:	647a      	str	r2, [r7, #68]	@ 0x44
 8008704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e3      	bne.n	80086de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3314      	adds	r3, #20
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	623b      	str	r3, [r7, #32]
   return(result);
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3314      	adds	r3, #20
 8008736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800873a:	633a      	str	r2, [r7, #48]	@ 0x30
 800873c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e3      	bne.n	8008716 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	330c      	adds	r3, #12
 8008762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	60fb      	str	r3, [r7, #12]
   return(result);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0310 	bic.w	r3, r3, #16
 8008772:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	330c      	adds	r3, #12
 800877c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008780:	61fa      	str	r2, [r7, #28]
 8008782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	69b9      	ldr	r1, [r7, #24]
 8008786:	69fa      	ldr	r2, [r7, #28]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	617b      	str	r3, [r7, #20]
   return(result);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e3      	bne.n	800875c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800879a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f847 	bl	8008834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087a6:	e023      	b.n	80087f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <HAL_UART_IRQHandler+0x4f4>
 80087b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f8ba 	bl	800893a <UART_Transmit_IT>
    return;
 80087c6:	e014      	b.n	80087f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00e      	beq.n	80087f2 <HAL_UART_IRQHandler+0x51e>
 80087d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d008      	beq.n	80087f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f8fa 	bl	80089da <UART_EndTransmit_IT>
    return;
 80087e6:	e004      	b.n	80087f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80087e8:	bf00      	nop
 80087ea:	e002      	b.n	80087f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80087ec:	bf00      	nop
 80087ee:	e000      	b.n	80087f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80087f0:	bf00      	nop
  }
}
 80087f2:	37e8      	adds	r7, #232	@ 0xe8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b095      	sub	sp, #84	@ 0x54
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	330c      	adds	r3, #12
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800886a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008874:	643a      	str	r2, [r7, #64]	@ 0x40
 8008876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800887a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e5      	bne.n	8008854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3314      	adds	r3, #20
 800888e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	61fb      	str	r3, [r7, #28]
   return(result);
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	f023 0301 	bic.w	r3, r3, #1
 800889e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3314      	adds	r3, #20
 80088a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e5      	bne.n	8008888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d119      	bne.n	80088f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	330c      	adds	r3, #12
 80088ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f023 0310 	bic.w	r3, r3, #16
 80088da:	647b      	str	r3, [r7, #68]	@ 0x44
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	330c      	adds	r3, #12
 80088e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e4:	61ba      	str	r2, [r7, #24]
 80088e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	6979      	ldr	r1, [r7, #20]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	613b      	str	r3, [r7, #16]
   return(result);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e5      	bne.n	80088c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008906:	bf00      	nop
 8008908:	3754      	adds	r7, #84	@ 0x54
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff ff77 	bl	8008820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b21      	cmp	r3, #33	@ 0x21
 800894c:	d13e      	bne.n	80089cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008956:	d114      	bne.n	8008982 <UART_Transmit_IT+0x48>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d110      	bne.n	8008982 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008974:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	1c9a      	adds	r2, r3, #2
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	621a      	str	r2, [r3, #32]
 8008980:	e008      	b.n	8008994 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	1c59      	adds	r1, r3, #1
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6211      	str	r1, [r2, #32]
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29b      	uxth	r3, r3
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	4619      	mov	r1, r3
 80089a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10f      	bne.n	80089c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	e000      	b.n	80089ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089cc:	2302      	movs	r3, #2
  }
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fefc 	bl	80087f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b08c      	sub	sp, #48	@ 0x30
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b22      	cmp	r3, #34	@ 0x22
 8008a1c:	f040 80ae 	bne.w	8008b7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a28:	d117      	bne.n	8008a5a <UART_Receive_IT+0x50>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d113      	bne.n	8008a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	1c9a      	adds	r2, r3, #2
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a58:	e026      	b.n	8008aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008a60:	2300      	movs	r3, #0
 8008a62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a6c:	d007      	beq.n	8008a7e <UART_Receive_IT+0x74>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10a      	bne.n	8008a8c <UART_Receive_IT+0x82>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a88:	701a      	strb	r2, [r3, #0]
 8008a8a:	e008      	b.n	8008a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d15d      	bne.n	8008b78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0220 	bic.w	r2, r2, #32
 8008aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695a      	ldr	r2, [r3, #20]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0201 	bic.w	r2, r2, #1
 8008aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d135      	bne.n	8008b6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	330c      	adds	r3, #12
 8008b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	e853 3f00 	ldrex	r3, [r3]
 8008b16:	613b      	str	r3, [r7, #16]
   return(result);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f023 0310 	bic.w	r3, r3, #16
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	330c      	adds	r3, #12
 8008b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b28:	623a      	str	r2, [r7, #32]
 8008b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	69f9      	ldr	r1, [r7, #28]
 8008b2e:	6a3a      	ldr	r2, [r7, #32]
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e5      	bne.n	8008b08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0310 	and.w	r3, r3, #16
 8008b46:	2b10      	cmp	r3, #16
 8008b48:	d10a      	bne.n	8008b60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff fe64 	bl	8008834 <HAL_UARTEx_RxEventCallback>
 8008b6c:	e002      	b.n	8008b74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff fe4c 	bl	800880c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e002      	b.n	8008b7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3730      	adds	r7, #48	@ 0x30
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b8c:	b0c0      	sub	sp, #256	@ 0x100
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba4:	68d9      	ldr	r1, [r3, #12]
 8008ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	ea40 0301 	orr.w	r3, r0, r1
 8008bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008be0:	f021 010c 	bic.w	r1, r1, #12
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c02:	6999      	ldr	r1, [r3, #24]
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	ea40 0301 	orr.w	r3, r0, r1
 8008c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b8f      	ldr	r3, [pc, #572]	@ (8008e54 <UART_SetConfig+0x2cc>)
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d005      	beq.n	8008c28 <UART_SetConfig+0xa0>
 8008c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b8d      	ldr	r3, [pc, #564]	@ (8008e58 <UART_SetConfig+0x2d0>)
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d104      	bne.n	8008c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c28:	f7fe f9f4 	bl	8007014 <HAL_RCC_GetPCLK2Freq>
 8008c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c30:	e003      	b.n	8008c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c32:	f7fe f9db 	bl	8006fec <HAL_RCC_GetPCLK1Freq>
 8008c36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c44:	f040 810c 	bne.w	8008e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	462b      	mov	r3, r5
 8008c5e:	1891      	adds	r1, r2, r2
 8008c60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008c62:	415b      	adcs	r3, r3
 8008c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	eb12 0801 	adds.w	r8, r2, r1
 8008c70:	4629      	mov	r1, r5
 8008c72:	eb43 0901 	adc.w	r9, r3, r1
 8008c76:	f04f 0200 	mov.w	r2, #0
 8008c7a:	f04f 0300 	mov.w	r3, #0
 8008c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c8a:	4690      	mov	r8, r2
 8008c8c:	4699      	mov	r9, r3
 8008c8e:	4623      	mov	r3, r4
 8008c90:	eb18 0303 	adds.w	r3, r8, r3
 8008c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c98:	462b      	mov	r3, r5
 8008c9a:	eb49 0303 	adc.w	r3, r9, r3
 8008c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	18db      	adds	r3, r3, r3
 8008cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	eb42 0303 	adc.w	r3, r2, r3
 8008cc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008ccc:	f7f7 ffbc 	bl	8000c48 <__aeabi_uldivmod>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4b61      	ldr	r3, [pc, #388]	@ (8008e5c <UART_SetConfig+0x2d4>)
 8008cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	011c      	lsls	r4, r3, #4
 8008cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	1891      	adds	r1, r2, r2
 8008cf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008cf8:	415b      	adcs	r3, r3
 8008cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d00:	4641      	mov	r1, r8
 8008d02:	eb12 0a01 	adds.w	sl, r2, r1
 8008d06:	4649      	mov	r1, r9
 8008d08:	eb43 0b01 	adc.w	fp, r3, r1
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d20:	4692      	mov	sl, r2
 8008d22:	469b      	mov	fp, r3
 8008d24:	4643      	mov	r3, r8
 8008d26:	eb1a 0303 	adds.w	r3, sl, r3
 8008d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d2e:	464b      	mov	r3, r9
 8008d30:	eb4b 0303 	adc.w	r3, fp, r3
 8008d34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	18db      	adds	r3, r3, r3
 8008d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d52:	4613      	mov	r3, r2
 8008d54:	eb42 0303 	adc.w	r3, r2, r3
 8008d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008d62:	f7f7 ff71 	bl	8000c48 <__aeabi_uldivmod>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e5c <UART_SetConfig+0x2d4>)
 8008d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	2264      	movs	r2, #100	@ 0x64
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	1acb      	subs	r3, r1, r3
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008d82:	4b36      	ldr	r3, [pc, #216]	@ (8008e5c <UART_SetConfig+0x2d4>)
 8008d84:	fba3 2302 	umull	r2, r3, r3, r2
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008d90:	441c      	add	r4, r3
 8008d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008da4:	4642      	mov	r2, r8
 8008da6:	464b      	mov	r3, r9
 8008da8:	1891      	adds	r1, r2, r2
 8008daa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008dac:	415b      	adcs	r3, r3
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008db4:	4641      	mov	r1, r8
 8008db6:	1851      	adds	r1, r2, r1
 8008db8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008dba:	4649      	mov	r1, r9
 8008dbc:	414b      	adcs	r3, r1
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008dcc:	4659      	mov	r1, fp
 8008dce:	00cb      	lsls	r3, r1, #3
 8008dd0:	4651      	mov	r1, sl
 8008dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	00ca      	lsls	r2, r1, #3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	4642      	mov	r2, r8
 8008de2:	189b      	adds	r3, r3, r2
 8008de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008de8:	464b      	mov	r3, r9
 8008dea:	460a      	mov	r2, r1
 8008dec:	eb42 0303 	adc.w	r3, r2, r3
 8008df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e08:	460b      	mov	r3, r1
 8008e0a:	18db      	adds	r3, r3, r3
 8008e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e0e:	4613      	mov	r3, r2
 8008e10:	eb42 0303 	adc.w	r3, r2, r3
 8008e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e1e:	f7f7 ff13 	bl	8000c48 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4b0d      	ldr	r3, [pc, #52]	@ (8008e5c <UART_SetConfig+0x2d4>)
 8008e28:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	2164      	movs	r1, #100	@ 0x64
 8008e30:	fb01 f303 	mul.w	r3, r1, r3
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	3332      	adds	r3, #50	@ 0x32
 8008e3a:	4a08      	ldr	r2, [pc, #32]	@ (8008e5c <UART_SetConfig+0x2d4>)
 8008e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	f003 0207 	and.w	r2, r3, #7
 8008e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4422      	add	r2, r4
 8008e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e50:	e106      	b.n	8009060 <UART_SetConfig+0x4d8>
 8008e52:	bf00      	nop
 8008e54:	40011000 	.word	0x40011000
 8008e58:	40011400 	.word	0x40011400
 8008e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008e72:	4642      	mov	r2, r8
 8008e74:	464b      	mov	r3, r9
 8008e76:	1891      	adds	r1, r2, r2
 8008e78:	6239      	str	r1, [r7, #32]
 8008e7a:	415b      	adcs	r3, r3
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e82:	4641      	mov	r1, r8
 8008e84:	1854      	adds	r4, r2, r1
 8008e86:	4649      	mov	r1, r9
 8008e88:	eb43 0501 	adc.w	r5, r3, r1
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	00eb      	lsls	r3, r5, #3
 8008e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e9a:	00e2      	lsls	r2, r4, #3
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	461d      	mov	r5, r3
 8008ea0:	4643      	mov	r3, r8
 8008ea2:	18e3      	adds	r3, r4, r3
 8008ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	eb45 0303 	adc.w	r3, r5, r3
 8008eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ebe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ec2:	f04f 0200 	mov.w	r2, #0
 8008ec6:	f04f 0300 	mov.w	r3, #0
 8008eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008ece:	4629      	mov	r1, r5
 8008ed0:	008b      	lsls	r3, r1, #2
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ed8:	4621      	mov	r1, r4
 8008eda:	008a      	lsls	r2, r1, #2
 8008edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ee0:	f7f7 feb2 	bl	8000c48 <__aeabi_uldivmod>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4b60      	ldr	r3, [pc, #384]	@ (800906c <UART_SetConfig+0x4e4>)
 8008eea:	fba3 2302 	umull	r2, r3, r3, r2
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	011c      	lsls	r4, r3, #4
 8008ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008efc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f04:	4642      	mov	r2, r8
 8008f06:	464b      	mov	r3, r9
 8008f08:	1891      	adds	r1, r2, r2
 8008f0a:	61b9      	str	r1, [r7, #24]
 8008f0c:	415b      	adcs	r3, r3
 8008f0e:	61fb      	str	r3, [r7, #28]
 8008f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f14:	4641      	mov	r1, r8
 8008f16:	1851      	adds	r1, r2, r1
 8008f18:	6139      	str	r1, [r7, #16]
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	414b      	adcs	r3, r1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	f04f 0200 	mov.w	r2, #0
 8008f24:	f04f 0300 	mov.w	r3, #0
 8008f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	00cb      	lsls	r3, r1, #3
 8008f30:	4651      	mov	r1, sl
 8008f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f36:	4651      	mov	r1, sl
 8008f38:	00ca      	lsls	r2, r1, #3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4642      	mov	r2, r8
 8008f42:	189b      	adds	r3, r3, r2
 8008f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f48:	464b      	mov	r3, r9
 8008f4a:	460a      	mov	r2, r1
 8008f4c:	eb42 0303 	adc.w	r3, r2, r3
 8008f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	f04f 0300 	mov.w	r3, #0
 8008f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	008b      	lsls	r3, r1, #2
 8008f70:	4641      	mov	r1, r8
 8008f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f76:	4641      	mov	r1, r8
 8008f78:	008a      	lsls	r2, r1, #2
 8008f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008f7e:	f7f7 fe63 	bl	8000c48 <__aeabi_uldivmod>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4611      	mov	r1, r2
 8008f88:	4b38      	ldr	r3, [pc, #224]	@ (800906c <UART_SetConfig+0x4e4>)
 8008f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	2264      	movs	r2, #100	@ 0x64
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
 8008f96:	1acb      	subs	r3, r1, r3
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	3332      	adds	r3, #50	@ 0x32
 8008f9c:	4a33      	ldr	r2, [pc, #204]	@ (800906c <UART_SetConfig+0x4e4>)
 8008f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fa8:	441c      	add	r4, r3
 8008faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fae:	2200      	movs	r2, #0
 8008fb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008fb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008fb8:	4642      	mov	r2, r8
 8008fba:	464b      	mov	r3, r9
 8008fbc:	1891      	adds	r1, r2, r2
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	415b      	adcs	r3, r3
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fc8:	4641      	mov	r1, r8
 8008fca:	1851      	adds	r1, r2, r1
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	4649      	mov	r1, r9
 8008fd0:	414b      	adcs	r3, r1
 8008fd2:	607b      	str	r3, [r7, #4]
 8008fd4:	f04f 0200 	mov.w	r2, #0
 8008fd8:	f04f 0300 	mov.w	r3, #0
 8008fdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	00cb      	lsls	r3, r1, #3
 8008fe4:	4651      	mov	r1, sl
 8008fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fea:	4651      	mov	r1, sl
 8008fec:	00ca      	lsls	r2, r1, #3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	4642      	mov	r2, r8
 8008ff6:	189b      	adds	r3, r3, r2
 8008ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	eb42 0303 	adc.w	r3, r2, r3
 8009002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	663b      	str	r3, [r7, #96]	@ 0x60
 800900e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800901c:	4649      	mov	r1, r9
 800901e:	008b      	lsls	r3, r1, #2
 8009020:	4641      	mov	r1, r8
 8009022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009026:	4641      	mov	r1, r8
 8009028:	008a      	lsls	r2, r1, #2
 800902a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800902e:	f7f7 fe0b 	bl	8000c48 <__aeabi_uldivmod>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4b0d      	ldr	r3, [pc, #52]	@ (800906c <UART_SetConfig+0x4e4>)
 8009038:	fba3 1302 	umull	r1, r3, r3, r2
 800903c:	095b      	lsrs	r3, r3, #5
 800903e:	2164      	movs	r1, #100	@ 0x64
 8009040:	fb01 f303 	mul.w	r3, r1, r3
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	3332      	adds	r3, #50	@ 0x32
 800904a:	4a08      	ldr	r2, [pc, #32]	@ (800906c <UART_SetConfig+0x4e4>)
 800904c:	fba2 2303 	umull	r2, r3, r2, r3
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	f003 020f 	and.w	r2, r3, #15
 8009056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4422      	add	r2, r4
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	bf00      	nop
 8009062:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009066:	46bd      	mov	sp, r7
 8009068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800906c:	51eb851f 	.word	0x51eb851f

08009070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009070:	b084      	sub	sp, #16
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	f107 001c 	add.w	r0, r7, #28
 800907e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009082:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009086:	2b01      	cmp	r3, #1
 8009088:	d123      	bne.n	80090d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800909e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d105      	bne.n	80090c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fae8 	bl	800a69c <USB_CoreReset>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	e01b      	b.n	800910a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 fadc 	bl	800a69c <USB_CoreReset>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d106      	bne.n	80090fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80090fc:	e005      	b.n	800910a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009102:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800910a:	7fbb      	ldrb	r3, [r7, #30]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d10b      	bne.n	8009128 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f043 0206 	orr.w	r2, r3, #6
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f043 0220 	orr.w	r2, r3, #32
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009134:	b004      	add	sp, #16
 8009136:	4770      	bx	lr

08009138 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d165      	bne.n	8009218 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4a41      	ldr	r2, [pc, #260]	@ (8009254 <USB_SetTurnaroundTime+0x11c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d906      	bls.n	8009162 <USB_SetTurnaroundTime+0x2a>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4a40      	ldr	r2, [pc, #256]	@ (8009258 <USB_SetTurnaroundTime+0x120>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d202      	bcs.n	8009162 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800915c:	230f      	movs	r3, #15
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e062      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	4a3c      	ldr	r2, [pc, #240]	@ (8009258 <USB_SetTurnaroundTime+0x120>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d306      	bcc.n	8009178 <USB_SetTurnaroundTime+0x40>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a3b      	ldr	r2, [pc, #236]	@ (800925c <USB_SetTurnaroundTime+0x124>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d202      	bcs.n	8009178 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009172:	230e      	movs	r3, #14
 8009174:	617b      	str	r3, [r7, #20]
 8009176:	e057      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4a38      	ldr	r2, [pc, #224]	@ (800925c <USB_SetTurnaroundTime+0x124>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d306      	bcc.n	800918e <USB_SetTurnaroundTime+0x56>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4a37      	ldr	r2, [pc, #220]	@ (8009260 <USB_SetTurnaroundTime+0x128>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d202      	bcs.n	800918e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009188:	230d      	movs	r3, #13
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	e04c      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	4a33      	ldr	r2, [pc, #204]	@ (8009260 <USB_SetTurnaroundTime+0x128>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d306      	bcc.n	80091a4 <USB_SetTurnaroundTime+0x6c>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	4a32      	ldr	r2, [pc, #200]	@ (8009264 <USB_SetTurnaroundTime+0x12c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d802      	bhi.n	80091a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800919e:	230c      	movs	r3, #12
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	e041      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	4a2f      	ldr	r2, [pc, #188]	@ (8009264 <USB_SetTurnaroundTime+0x12c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d906      	bls.n	80091ba <USB_SetTurnaroundTime+0x82>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4a2e      	ldr	r2, [pc, #184]	@ (8009268 <USB_SetTurnaroundTime+0x130>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d802      	bhi.n	80091ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80091b4:	230b      	movs	r3, #11
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e036      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009268 <USB_SetTurnaroundTime+0x130>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d906      	bls.n	80091d0 <USB_SetTurnaroundTime+0x98>
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4a29      	ldr	r2, [pc, #164]	@ (800926c <USB_SetTurnaroundTime+0x134>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d802      	bhi.n	80091d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80091ca:	230a      	movs	r3, #10
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	e02b      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4a26      	ldr	r2, [pc, #152]	@ (800926c <USB_SetTurnaroundTime+0x134>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d906      	bls.n	80091e6 <USB_SetTurnaroundTime+0xae>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4a25      	ldr	r2, [pc, #148]	@ (8009270 <USB_SetTurnaroundTime+0x138>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d202      	bcs.n	80091e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80091e0:	2309      	movs	r3, #9
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	e020      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	4a21      	ldr	r2, [pc, #132]	@ (8009270 <USB_SetTurnaroundTime+0x138>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d306      	bcc.n	80091fc <USB_SetTurnaroundTime+0xc4>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	4a20      	ldr	r2, [pc, #128]	@ (8009274 <USB_SetTurnaroundTime+0x13c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d802      	bhi.n	80091fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80091f6:	2308      	movs	r3, #8
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e015      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009274 <USB_SetTurnaroundTime+0x13c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d906      	bls.n	8009212 <USB_SetTurnaroundTime+0xda>
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4a1c      	ldr	r2, [pc, #112]	@ (8009278 <USB_SetTurnaroundTime+0x140>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d202      	bcs.n	8009212 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800920c:	2307      	movs	r3, #7
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	e00a      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009212:	2306      	movs	r3, #6
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	e007      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800921e:	2309      	movs	r3, #9
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e001      	b.n	8009228 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009224:	2309      	movs	r3, #9
 8009226:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	029b      	lsls	r3, r3, #10
 800923c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009240:	431a      	orrs	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	00d8acbf 	.word	0x00d8acbf
 8009258:	00e4e1c0 	.word	0x00e4e1c0
 800925c:	00f42400 	.word	0x00f42400
 8009260:	01067380 	.word	0x01067380
 8009264:	011a499f 	.word	0x011a499f
 8009268:	01312cff 	.word	0x01312cff
 800926c:	014ca43f 	.word	0x014ca43f
 8009270:	016e3600 	.word	0x016e3600
 8009274:	01a6ab1f 	.word	0x01a6ab1f
 8009278:	01e84800 	.word	0x01e84800

0800927c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f043 0201 	orr.w	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f023 0201 	bic.w	r2, r3, #1
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d115      	bne.n	800930e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80092ee:	200a      	movs	r0, #10
 80092f0:	f7fa fa34 	bl	800375c <HAL_Delay>
      ms += 10U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	330a      	adds	r3, #10
 80092f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f93f 	bl	800a57e <USB_GetMode>
 8009300:	4603      	mov	r3, r0
 8009302:	2b01      	cmp	r3, #1
 8009304:	d01e      	beq.n	8009344 <USB_SetCurrentMode+0x84>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2bc7      	cmp	r3, #199	@ 0xc7
 800930a:	d9f0      	bls.n	80092ee <USB_SetCurrentMode+0x2e>
 800930c:	e01a      	b.n	8009344 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d115      	bne.n	8009340 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009320:	200a      	movs	r0, #10
 8009322:	f7fa fa1b 	bl	800375c <HAL_Delay>
      ms += 10U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	330a      	adds	r3, #10
 800932a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 f926 	bl	800a57e <USB_GetMode>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <USB_SetCurrentMode+0x84>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2bc7      	cmp	r3, #199	@ 0xc7
 800933c:	d9f0      	bls.n	8009320 <USB_SetCurrentMode+0x60>
 800933e:	e001      	b.n	8009344 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e005      	b.n	8009350 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2bc8      	cmp	r3, #200	@ 0xc8
 8009348:	d101      	bne.n	800934e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009358:	b084      	sub	sp, #16
 800935a:	b580      	push	{r7, lr}
 800935c:	b086      	sub	sp, #24
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009372:	2300      	movs	r3, #0
 8009374:	613b      	str	r3, [r7, #16]
 8009376:	e009      	b.n	800938c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	3340      	adds	r3, #64	@ 0x40
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	2200      	movs	r2, #0
 8009384:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	3301      	adds	r3, #1
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	2b0e      	cmp	r3, #14
 8009390:	d9f2      	bls.n	8009378 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009392:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009396:	2b00      	cmp	r3, #0
 8009398:	d11c      	bne.n	80093d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093a8:	f043 0302 	orr.w	r3, r3, #2
 80093ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80093d2:	e00b      	b.n	80093ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093f2:	461a      	mov	r2, r3
 80093f4:	2300      	movs	r3, #0
 80093f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d10d      	bne.n	800941c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009404:	2b00      	cmp	r3, #0
 8009406:	d104      	bne.n	8009412 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009408:	2100      	movs	r1, #0
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f968 	bl	80096e0 <USB_SetDevSpeed>
 8009410:	e008      	b.n	8009424 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009412:	2101      	movs	r1, #1
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f963 	bl	80096e0 <USB_SetDevSpeed>
 800941a:	e003      	b.n	8009424 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800941c:	2103      	movs	r1, #3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f95e 	bl	80096e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009424:	2110      	movs	r1, #16
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f8fa 	bl	8009620 <USB_FlushTxFifo>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f924 	bl	8009684 <USB_FlushRxFifo>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944c:	461a      	mov	r2, r3
 800944e:	2300      	movs	r3, #0
 8009450:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009458:	461a      	mov	r2, r3
 800945a:	2300      	movs	r3, #0
 800945c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009464:	461a      	mov	r2, r3
 8009466:	2300      	movs	r3, #0
 8009468:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	e043      	b.n	80094f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009482:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009486:	d118      	bne.n	80094ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800949a:	461a      	mov	r2, r3
 800949c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	e013      	b.n	80094cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094b0:	461a      	mov	r2, r3
 80094b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	e008      	b.n	80094cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c6:	461a      	mov	r2, r3
 80094c8:	2300      	movs	r3, #0
 80094ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094d8:	461a      	mov	r2, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ea:	461a      	mov	r2, r3
 80094ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	3301      	adds	r3, #1
 80094f6:	613b      	str	r3, [r7, #16]
 80094f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094fc:	461a      	mov	r2, r3
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	4293      	cmp	r3, r2
 8009502:	d3b5      	bcc.n	8009470 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009504:	2300      	movs	r3, #0
 8009506:	613b      	str	r3, [r7, #16]
 8009508:	e043      	b.n	8009592 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800951c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009520:	d118      	bne.n	8009554 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009534:	461a      	mov	r2, r3
 8009536:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	e013      	b.n	8009566 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800954a:	461a      	mov	r2, r3
 800954c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	e008      	b.n	8009566 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009560:	461a      	mov	r2, r3
 8009562:	2300      	movs	r3, #0
 8009564:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009572:	461a      	mov	r2, r3
 8009574:	2300      	movs	r3, #0
 8009576:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009584:	461a      	mov	r2, r3
 8009586:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800958a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	3301      	adds	r3, #1
 8009590:	613b      	str	r3, [r7, #16]
 8009592:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009596:	461a      	mov	r2, r3
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	4293      	cmp	r3, r2
 800959c:	d3b5      	bcc.n	800950a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80095be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d105      	bne.n	80095d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f043 0210 	orr.w	r2, r3, #16
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	4b10      	ldr	r3, [pc, #64]	@ (800961c <USB_DevInit+0x2c4>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80095e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f043 0208 	orr.w	r2, r3, #8
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80095f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d107      	bne.n	800960c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009604:	f043 0304 	orr.w	r3, r3, #4
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800960c:	7dfb      	ldrb	r3, [r7, #23]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009618:	b004      	add	sp, #16
 800961a:	4770      	bx	lr
 800961c:	803c3800 	.word	0x803c3800

08009620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800963a:	d901      	bls.n	8009640 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e01b      	b.n	8009678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	daf2      	bge.n	800962e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	019b      	lsls	r3, r3, #6
 8009650:	f043 0220 	orr.w	r2, r3, #32
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009664:	d901      	bls.n	800966a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e006      	b.n	8009678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b20      	cmp	r3, #32
 8009674:	d0f0      	beq.n	8009658 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800969c:	d901      	bls.n	80096a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e018      	b.n	80096d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	daf2      	bge.n	8009690 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2210      	movs	r2, #16
 80096b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	3301      	adds	r3, #1
 80096b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096c0:	d901      	bls.n	80096c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e006      	b.n	80096d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f003 0310 	and.w	r3, r3, #16
 80096ce:	2b10      	cmp	r3, #16
 80096d0:	d0f0      	beq.n	80096b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009700:	4313      	orrs	r3, r2
 8009702:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009712:	b480      	push	{r7}
 8009714:	b087      	sub	sp, #28
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0306 	and.w	r3, r3, #6
 800972a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
 8009736:	e00a      	b.n	800974e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d002      	beq.n	8009744 <USB_GetDevSpeed+0x32>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b06      	cmp	r3, #6
 8009742:	d102      	bne.n	800974a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009744:	2302      	movs	r3, #2
 8009746:	75fb      	strb	r3, [r7, #23]
 8009748:	e001      	b.n	800974e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800974a:	230f      	movs	r3, #15
 800974c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800974e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009750:	4618      	mov	r0, r3
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d13a      	bne.n	80097ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	f003 030f 	and.w	r3, r3, #15
 8009788:	2101      	movs	r1, #1
 800978a:	fa01 f303 	lsl.w	r3, r1, r3
 800978e:	b29b      	uxth	r3, r3
 8009790:	68f9      	ldr	r1, [r7, #12]
 8009792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009796:	4313      	orrs	r3, r2
 8009798:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d155      	bne.n	800985c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	791b      	ldrb	r3, [r3, #4]
 80097ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	059b      	lsls	r3, r3, #22
 80097d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80097d4:	4313      	orrs	r3, r2
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	e036      	b.n	800985c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f4:	69da      	ldr	r2, [r3, #28]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	2101      	movs	r1, #1
 8009800:	fa01 f303 	lsl.w	r3, r1, r3
 8009804:	041b      	lsls	r3, r3, #16
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800980c:	4313      	orrs	r3, r2
 800980e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d11a      	bne.n	800985c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	791b      	ldrb	r3, [r3, #4]
 8009840:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009842:	430b      	orrs	r3, r1
 8009844:	4313      	orrs	r3, r2
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800985a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d161      	bne.n	800994c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800989a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800989e:	d11f      	bne.n	80098e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	0151      	lsls	r1, r2, #5
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	440a      	add	r2, r1
 80098d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	2101      	movs	r1, #1
 80098f2:	fa01 f303 	lsl.w	r3, r1, r3
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	43db      	mvns	r3, r3
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009900:	4013      	ands	r3, r2
 8009902:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800990a:	69da      	ldr	r2, [r3, #28]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	2101      	movs	r1, #1
 8009916:	fa01 f303 	lsl.w	r3, r1, r3
 800991a:	b29b      	uxth	r3, r3
 800991c:	43db      	mvns	r3, r3
 800991e:	68f9      	ldr	r1, [r7, #12]
 8009920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009924:	4013      	ands	r3, r2
 8009926:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	0159      	lsls	r1, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	440b      	add	r3, r1
 800993e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009942:	4619      	mov	r1, r3
 8009944:	4b35      	ldr	r3, [pc, #212]	@ (8009a1c <USB_DeactivateEndpoint+0x1b0>)
 8009946:	4013      	ands	r3, r2
 8009948:	600b      	str	r3, [r1, #0]
 800994a:	e060      	b.n	8009a0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800995e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009962:	d11f      	bne.n	80099a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	0151      	lsls	r1, r2, #5
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	440a      	add	r2, r1
 800997a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800997e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009982:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800999e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	2101      	movs	r1, #1
 80099b6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ba:	041b      	lsls	r3, r3, #16
 80099bc:	43db      	mvns	r3, r3
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099c4:	4013      	ands	r3, r2
 80099c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ce:	69da      	ldr	r2, [r3, #28]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f003 030f 	and.w	r3, r3, #15
 80099d8:	2101      	movs	r1, #1
 80099da:	fa01 f303 	lsl.w	r3, r1, r3
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	43db      	mvns	r3, r3
 80099e2:	68f9      	ldr	r1, [r7, #12]
 80099e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099e8:	4013      	ands	r3, r2
 80099ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	0159      	lsls	r1, r3, #5
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	440b      	add	r3, r1
 8009a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a06:	4619      	mov	r1, r3
 8009a08:	4b05      	ldr	r3, [pc, #20]	@ (8009a20 <USB_DeactivateEndpoint+0x1b4>)
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	ec337800 	.word	0xec337800
 8009a20:	eff37800 	.word	0xeff37800

08009a24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	@ 0x28
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	f040 817f 	bne.w	8009d44 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d132      	bne.n	8009ab4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	69ba      	ldr	r2, [r7, #24]
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a68:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a6c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	0151      	lsls	r1, r2, #5
 8009aa4:	69fa      	ldr	r2, [r7, #28]
 8009aa6:	440a      	add	r2, r1
 8009aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aac:	0cdb      	lsrs	r3, r3, #19
 8009aae:	04db      	lsls	r3, r3, #19
 8009ab0:	6113      	str	r3, [r2, #16]
 8009ab2:	e097      	b.n	8009be4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	0151      	lsls	r1, r2, #5
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	440a      	add	r2, r1
 8009aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ace:	0cdb      	lsrs	r3, r3, #19
 8009ad0:	04db      	lsls	r3, r3, #19
 8009ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	0151      	lsls	r1, r2, #5
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	440a      	add	r2, r1
 8009aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009af2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009af6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d11a      	bne.n	8009b34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d903      	bls.n	8009b12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	0151      	lsls	r1, r2, #5
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	440a      	add	r2, r1
 8009b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b30:	6113      	str	r3, [r2, #16]
 8009b32:	e044      	b.n	8009bbe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	691a      	ldr	r2, [r3, #16]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	1e5a      	subs	r2, r3, #1
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b48:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b56:	691a      	ldr	r2, [r3, #16]
 8009b58:	8afb      	ldrh	r3, [r7, #22]
 8009b5a:	04d9      	lsls	r1, r3, #19
 8009b5c:	4ba4      	ldr	r3, [pc, #656]	@ (8009df0 <USB_EPStartXfer+0x3cc>)
 8009b5e:	400b      	ands	r3, r1
 8009b60:	69b9      	ldr	r1, [r7, #24]
 8009b62:	0148      	lsls	r0, r1, #5
 8009b64:	69f9      	ldr	r1, [r7, #28]
 8009b66:	4401      	add	r1, r0
 8009b68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d122      	bne.n	8009bbe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009b96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba4:	691a      	ldr	r2, [r3, #16]
 8009ba6:	8afb      	ldrh	r3, [r7, #22]
 8009ba8:	075b      	lsls	r3, r3, #29
 8009baa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009bae:	69b9      	ldr	r1, [r7, #24]
 8009bb0:	0148      	lsls	r0, r1, #5
 8009bb2:	69f9      	ldr	r1, [r7, #28]
 8009bb4:	4401      	add	r1, r0
 8009bb6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bd4:	69b9      	ldr	r1, [r7, #24]
 8009bd6:	0148      	lsls	r0, r1, #5
 8009bd8:	69f9      	ldr	r1, [r7, #28]
 8009bda:	4401      	add	r1, r0
 8009bdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009be0:	4313      	orrs	r3, r2
 8009be2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d14b      	bne.n	8009c82 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d009      	beq.n	8009c06 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfe:	461a      	mov	r2, r3
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	791b      	ldrb	r3, [r3, #4]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d128      	bne.n	8009c60 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d110      	bne.n	8009c40 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	e00f      	b.n	8009c60 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	0151      	lsls	r1, r2, #5
 8009c52:	69fa      	ldr	r2, [r7, #28]
 8009c54:	440a      	add	r2, r1
 8009c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c5e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	0151      	lsls	r1, r2, #5
 8009c72:	69fa      	ldr	r2, [r7, #28]
 8009c74:	440a      	add	r2, r1
 8009c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	e166      	b.n	8009f50 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69ba      	ldr	r2, [r7, #24]
 8009c92:	0151      	lsls	r1, r2, #5
 8009c94:	69fa      	ldr	r2, [r7, #28]
 8009c96:	440a      	add	r2, r1
 8009c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ca0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	791b      	ldrb	r3, [r3, #4]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d015      	beq.n	8009cd6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 814e 	beq.w	8009f50 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 030f 	and.w	r3, r3, #15
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cca:	69f9      	ldr	r1, [r7, #28]
 8009ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	634b      	str	r3, [r1, #52]	@ 0x34
 8009cd4:	e13c      	b.n	8009f50 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d110      	bne.n	8009d08 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	e00f      	b.n	8009d28 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d26:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	68d9      	ldr	r1, [r3, #12]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	b298      	uxth	r0, r3
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f9b9 	bl	800a0b4 <USB_WritePacket>
 8009d42:	e105      	b.n	8009f50 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	0151      	lsls	r1, r2, #5
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	440a      	add	r2, r1
 8009d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d5e:	0cdb      	lsrs	r3, r3, #19
 8009d60:	04db      	lsls	r3, r3, #19
 8009d62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d86:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d132      	bne.n	8009df4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	689a      	ldr	r2, [r3, #8]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dbc:	69b9      	ldr	r1, [r7, #24]
 8009dbe:	0148      	lsls	r0, r1, #5
 8009dc0:	69f9      	ldr	r1, [r7, #28]
 8009dc2:	4401      	add	r1, r0
 8009dc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dea:	6113      	str	r3, [r2, #16]
 8009dec:	e062      	b.n	8009eb4 <USB_EPStartXfer+0x490>
 8009dee:	bf00      	nop
 8009df0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d123      	bne.n	8009e44 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e08:	691a      	ldr	r2, [r3, #16]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e12:	69b9      	ldr	r1, [r7, #24]
 8009e14:	0148      	lsls	r0, r1, #5
 8009e16:	69f9      	ldr	r1, [r7, #28]
 8009e18:	4401      	add	r1, r0
 8009e1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	69ba      	ldr	r2, [r7, #24]
 8009e32:	0151      	lsls	r1, r2, #5
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	440a      	add	r2, r1
 8009e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e40:	6113      	str	r3, [r2, #16]
 8009e42:	e037      	b.n	8009eb4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	1e5a      	subs	r2, r3, #1
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	8afa      	ldrh	r2, [r7, #22]
 8009e60:	fb03 f202 	mul.w	r2, r3, r2
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	8afb      	ldrh	r3, [r7, #22]
 8009e78:	04d9      	lsls	r1, r3, #19
 8009e7a:	4b38      	ldr	r3, [pc, #224]	@ (8009f5c <USB_EPStartXfer+0x538>)
 8009e7c:	400b      	ands	r3, r1
 8009e7e:	69b9      	ldr	r1, [r7, #24]
 8009e80:	0148      	lsls	r0, r1, #5
 8009e82:	69f9      	ldr	r1, [r7, #28]
 8009e84:	4401      	add	r1, r0
 8009e86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ea4:	69b9      	ldr	r1, [r7, #24]
 8009ea6:	0148      	lsls	r0, r1, #5
 8009ea8:	69f9      	ldr	r1, [r7, #28]
 8009eaa:	4401      	add	r1, r0
 8009eac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d10d      	bne.n	8009ed6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	68d9      	ldr	r1, [r3, #12]
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed2:	460a      	mov	r2, r1
 8009ed4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	791b      	ldrb	r3, [r3, #4]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d128      	bne.n	8009f30 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d110      	bne.n	8009f10 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	69ba      	ldr	r2, [r7, #24]
 8009efe:	0151      	lsls	r1, r2, #5
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	440a      	add	r2, r1
 8009f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	e00f      	b.n	8009f30 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	69fa      	ldr	r2, [r7, #28]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009f4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3720      	adds	r7, #32
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	1ff80000 	.word	0x1ff80000

08009f60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d14a      	bne.n	800a014 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f96:	f040 8086 	bne.w	800a0a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	7812      	ldrb	r2, [r2, #0]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009fe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d902      	bls.n	8009ff8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff6:	e056      	b.n	800a0a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a00c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a010:	d0e7      	beq.n	8009fe2 <USB_EPStopXfer+0x82>
 800a012:	e048      	b.n	800a0a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a02c:	d13b      	bne.n	800a0a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	7812      	ldrb	r2, [r2, #0]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	440a      	add	r2, r1
 800a048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a04c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a050:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	7812      	ldrb	r2, [r2, #0]
 800a066:	0151      	lsls	r1, r2, #5
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	440a      	add	r2, r1
 800a06c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a070:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a074:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a082:	4293      	cmp	r3, r2
 800a084:	d902      	bls.n	800a08c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]
          break;
 800a08a:	e00c      	b.n	800a0a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0a4:	d0e7      	beq.n	800a076 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b089      	sub	sp, #36	@ 0x24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	71fb      	strb	r3, [r7, #7]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d123      	bne.n	800a122 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0da:	88bb      	ldrh	r3, [r7, #4]
 800a0dc:	3303      	adds	r3, #3
 800a0de:	089b      	lsrs	r3, r3, #2
 800a0e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	61bb      	str	r3, [r7, #24]
 800a0e6:	e018      	b.n	800a11a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	031a      	lsls	r2, r3, #12
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	3301      	adds	r3, #1
 800a100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	3301      	adds	r3, #1
 800a106:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	3301      	adds	r3, #1
 800a10c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	3301      	adds	r3, #1
 800a112:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	3301      	adds	r3, #1
 800a118:	61bb      	str	r3, [r7, #24]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d3e2      	bcc.n	800a0e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3724      	adds	r7, #36	@ 0x24
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a130:	b480      	push	{r7}
 800a132:	b08b      	sub	sp, #44	@ 0x2c
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	4613      	mov	r3, r2
 800a13c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	089b      	lsrs	r3, r3, #2
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a156:	2300      	movs	r3, #0
 800a158:	623b      	str	r3, [r7, #32]
 800a15a:	e014      	b.n	800a186 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	601a      	str	r2, [r3, #0]
    pDest++;
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	3301      	adds	r3, #1
 800a16c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a170:	3301      	adds	r3, #1
 800a172:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	3301      	adds	r3, #1
 800a178:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17c:	3301      	adds	r3, #1
 800a17e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	3301      	adds	r3, #1
 800a184:	623b      	str	r3, [r7, #32]
 800a186:	6a3a      	ldr	r2, [r7, #32]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d3e6      	bcc.n	800a15c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a18e:	8bfb      	ldrh	r3, [r7, #30]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01e      	beq.n	800a1d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f107 0310 	add.w	r3, r7, #16
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b8:	701a      	strb	r2, [r3, #0]
      i++;
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	623b      	str	r3, [r7, #32]
      pDest++;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a1c6:	8bfb      	ldrh	r3, [r7, #30]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1cc:	8bfb      	ldrh	r3, [r7, #30]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1ea      	bne.n	800a1a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	372c      	adds	r7, #44	@ 0x2c
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d12c      	bne.n	800a256 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	db12      	blt.n	800a234 <USB_EPSetStall+0x54>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00f      	beq.n	800a234 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	0151      	lsls	r1, r2, #5
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	440a      	add	r2, r1
 800a22a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a22e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a232:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a24e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	e02b      	b.n	800a2ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	db12      	blt.n	800a28e <USB_EPSetStall+0xae>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00f      	beq.n	800a28e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	0151      	lsls	r1, r2, #5
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	440a      	add	r2, r1
 800a284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a288:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a28c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	0151      	lsls	r1, r2, #5
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	440a      	add	r2, r1
 800a2a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a2ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d128      	bne.n	800a32a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	791b      	ldrb	r3, [r3, #4]
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d003      	beq.n	800a308 <USB_EPClearStall+0x4c>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	791b      	ldrb	r3, [r3, #4]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d138      	bne.n	800a37a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	e027      	b.n	800a37a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a344:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a348:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	791b      	ldrb	r3, [r3, #4]
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d003      	beq.n	800a35a <USB_EPClearStall+0x9e>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	791b      	ldrb	r3, [r3, #4]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d10f      	bne.n	800a37a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	0151      	lsls	r1, r2, #5
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	440a      	add	r2, r1
 800a370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a378:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a3aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	011b      	lsls	r3, r3, #4
 800a3b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a3bc:	68f9      	ldr	r1, [r7, #12]
 800a3be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a3ee:	f023 0303 	bic.w	r3, r3, #3
 800a3f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a402:	f023 0302 	bic.w	r3, r3, #2
 800a406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a430:	f023 0303 	bic.w	r3, r3, #3
 800a434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a444:	f043 0302 	orr.w	r3, r3, #2
 800a448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4013      	ands	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	0c1b      	lsrs	r3, r3, #16
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	b29b      	uxth	r3, r3
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	4013      	ands	r3, r2
 800a512:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a514:	68bb      	ldr	r3, [r7, #8]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a522:	b480      	push	{r7}
 800a524:	b087      	sub	sp, #28
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a544:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	f003 030f 	and.w	r3, r3, #15
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	fa22 f303 	lsr.w	r3, r2, r3
 800a552:	01db      	lsls	r3, r3, #7
 800a554:	b2db      	uxtb	r3, r3
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	4313      	orrs	r3, r2
 800a55a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	4013      	ands	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a570:	68bb      	ldr	r3, [r7, #8]
}
 800a572:	4618      	mov	r0, r3
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f003 0301 	and.w	r3, r3, #1
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a5b8:	f023 0307 	bic.w	r3, r3, #7
 800a5bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	333c      	adds	r3, #60	@ 0x3c
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	4a26      	ldr	r2, [pc, #152]	@ (800a698 <USB_EP0_OutStart+0xb8>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d90a      	bls.n	800a61a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a614:	d101      	bne.n	800a61a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	e037      	b.n	800a68a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a620:	461a      	mov	r2, r3
 800a622:	2300      	movs	r3, #0
 800a624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a634:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a648:	f043 0318 	orr.w	r3, r3, #24
 800a64c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a65c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a660:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a662:	7afb      	ldrb	r3, [r7, #11]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d10f      	bne.n	800a688 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66e:	461a      	mov	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a682:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	4f54300a 	.word	0x4f54300a

0800a69c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6b4:	d901      	bls.n	800a6ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e01b      	b.n	800a6f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	daf2      	bge.n	800a6a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	f043 0201 	orr.w	r2, r3, #1
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6de:	d901      	bls.n	800a6e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e006      	b.n	800a6f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	f003 0301 	and.w	r3, r3, #1
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d0f0      	beq.n	800a6d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
	...

0800a700 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a70c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a710:	f002 fc38 	bl	800cf84 <USBD_static_malloc>
 800a714:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d109      	bne.n	800a730 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	32b0      	adds	r2, #176	@ 0xb0
 800a726:	2100      	movs	r1, #0
 800a728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a72c:	2302      	movs	r3, #2
 800a72e:	e0d4      	b.n	800a8da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a730:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a734:	2100      	movs	r1, #0
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f003 f9f9 	bl	800db2e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	32b0      	adds	r2, #176	@ 0xb0
 800a746:	68f9      	ldr	r1, [r7, #12]
 800a748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	32b0      	adds	r2, #176	@ 0xb0
 800a756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7c1b      	ldrb	r3, [r3, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d138      	bne.n	800a7da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a768:	4b5e      	ldr	r3, [pc, #376]	@ (800a8e4 <USBD_CDC_Init+0x1e4>)
 800a76a:	7819      	ldrb	r1, [r3, #0]
 800a76c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a770:	2202      	movs	r2, #2
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f002 fae3 	bl	800cd3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a778:	4b5a      	ldr	r3, [pc, #360]	@ (800a8e4 <USBD_CDC_Init+0x1e4>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	f003 020f 	and.w	r2, r3, #15
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	440b      	add	r3, r1
 800a78c:	3324      	adds	r3, #36	@ 0x24
 800a78e:	2201      	movs	r2, #1
 800a790:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a792:	4b55      	ldr	r3, [pc, #340]	@ (800a8e8 <USBD_CDC_Init+0x1e8>)
 800a794:	7819      	ldrb	r1, [r3, #0]
 800a796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a79a:	2202      	movs	r2, #2
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f002 face 	bl	800cd3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7a2:	4b51      	ldr	r3, [pc, #324]	@ (800a8e8 <USBD_CDC_Init+0x1e8>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	f003 020f 	and.w	r2, r3, #15
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	440b      	add	r3, r1
 800a7b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a7be:	4b4b      	ldr	r3, [pc, #300]	@ (800a8ec <USBD_CDC_Init+0x1ec>)
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	f003 020f 	and.w	r2, r3, #15
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	440b      	add	r3, r1
 800a7d2:	3326      	adds	r3, #38	@ 0x26
 800a7d4:	2210      	movs	r2, #16
 800a7d6:	801a      	strh	r2, [r3, #0]
 800a7d8:	e035      	b.n	800a846 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7da:	4b42      	ldr	r3, [pc, #264]	@ (800a8e4 <USBD_CDC_Init+0x1e4>)
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	2340      	movs	r3, #64	@ 0x40
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f002 faab 	bl	800cd3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e4 <USBD_CDC_Init+0x1e4>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f003 020f 	and.w	r2, r3, #15
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3324      	adds	r3, #36	@ 0x24
 800a7fe:	2201      	movs	r2, #1
 800a800:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a802:	4b39      	ldr	r3, [pc, #228]	@ (800a8e8 <USBD_CDC_Init+0x1e8>)
 800a804:	7819      	ldrb	r1, [r3, #0]
 800a806:	2340      	movs	r3, #64	@ 0x40
 800a808:	2202      	movs	r2, #2
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f002 fa97 	bl	800cd3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a810:	4b35      	ldr	r3, [pc, #212]	@ (800a8e8 <USBD_CDC_Init+0x1e8>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	f003 020f 	and.w	r2, r3, #15
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	4613      	mov	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	440b      	add	r3, r1
 800a824:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a828:	2201      	movs	r2, #1
 800a82a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a82c:	4b2f      	ldr	r3, [pc, #188]	@ (800a8ec <USBD_CDC_Init+0x1ec>)
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	f003 020f 	and.w	r2, r3, #15
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	3326      	adds	r3, #38	@ 0x26
 800a842:	2210      	movs	r2, #16
 800a844:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a846:	4b29      	ldr	r3, [pc, #164]	@ (800a8ec <USBD_CDC_Init+0x1ec>)
 800a848:	7819      	ldrb	r1, [r3, #0]
 800a84a:	2308      	movs	r3, #8
 800a84c:	2203      	movs	r2, #3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f002 fa75 	bl	800cd3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a854:	4b25      	ldr	r3, [pc, #148]	@ (800a8ec <USBD_CDC_Init+0x1ec>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f003 020f 	and.w	r2, r3, #15
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	440b      	add	r3, r1
 800a868:	3324      	adds	r3, #36	@ 0x24
 800a86a:	2201      	movs	r2, #1
 800a86c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	33b0      	adds	r3, #176	@ 0xb0
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e018      	b.n	800a8da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	7c1b      	ldrb	r3, [r3, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e8 <USBD_CDC_Init+0x1e8>)
 800a8b2:	7819      	ldrb	r1, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a8ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f002 fb2c 	bl	800cf1c <USBD_LL_PrepareReceive>
 800a8c4:	e008      	b.n	800a8d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8c6:	4b08      	ldr	r3, [pc, #32]	@ (800a8e8 <USBD_CDC_Init+0x1e8>)
 800a8c8:	7819      	ldrb	r1, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a8d0:	2340      	movs	r3, #64	@ 0x40
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f002 fb22 	bl	800cf1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200000ab 	.word	0x200000ab
 800a8e8:	200000ac 	.word	0x200000ac
 800a8ec:	200000ad 	.word	0x200000ad

0800a8f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8fc:	4b3a      	ldr	r3, [pc, #232]	@ (800a9e8 <USBD_CDC_DeInit+0xf8>)
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f002 fa41 	bl	800cd8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a908:	4b37      	ldr	r3, [pc, #220]	@ (800a9e8 <USBD_CDC_DeInit+0xf8>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	f003 020f 	and.w	r2, r3, #15
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	440b      	add	r3, r1
 800a91c:	3324      	adds	r3, #36	@ 0x24
 800a91e:	2200      	movs	r2, #0
 800a920:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a922:	4b32      	ldr	r3, [pc, #200]	@ (800a9ec <USBD_CDC_DeInit+0xfc>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f002 fa2e 	bl	800cd8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a92e:	4b2f      	ldr	r3, [pc, #188]	@ (800a9ec <USBD_CDC_DeInit+0xfc>)
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	f003 020f 	and.w	r2, r3, #15
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	4613      	mov	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	440b      	add	r3, r1
 800a942:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a946:	2200      	movs	r2, #0
 800a948:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a94a:	4b29      	ldr	r3, [pc, #164]	@ (800a9f0 <USBD_CDC_DeInit+0x100>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f002 fa1a 	bl	800cd8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a956:	4b26      	ldr	r3, [pc, #152]	@ (800a9f0 <USBD_CDC_DeInit+0x100>)
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	f003 020f 	and.w	r2, r3, #15
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	440b      	add	r3, r1
 800a96a:	3324      	adds	r3, #36	@ 0x24
 800a96c:	2200      	movs	r2, #0
 800a96e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a970:	4b1f      	ldr	r3, [pc, #124]	@ (800a9f0 <USBD_CDC_DeInit+0x100>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 020f 	and.w	r2, r3, #15
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	440b      	add	r3, r1
 800a984:	3326      	adds	r3, #38	@ 0x26
 800a986:	2200      	movs	r2, #0
 800a988:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	32b0      	adds	r2, #176	@ 0xb0
 800a994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d01f      	beq.n	800a9dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	33b0      	adds	r3, #176	@ 0xb0
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	32b0      	adds	r2, #176	@ 0xb0
 800a9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f002 faee 	bl	800cfa0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	32b0      	adds	r2, #176	@ 0xb0
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	200000ab 	.word	0x200000ab
 800a9ec:	200000ac 	.word	0x200000ac
 800a9f0:	200000ad 	.word	0x200000ad

0800a9f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	32b0      	adds	r2, #176	@ 0xb0
 800aa08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e0bf      	b.n	800aba4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d050      	beq.n	800aad2 <USBD_CDC_Setup+0xde>
 800aa30:	2b20      	cmp	r3, #32
 800aa32:	f040 80af 	bne.w	800ab94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	88db      	ldrh	r3, [r3, #6]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d03a      	beq.n	800aab4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	da1b      	bge.n	800aa80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	33b0      	adds	r3, #176	@ 0xb0
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	88d2      	ldrh	r2, [r2, #6]
 800aa64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	88db      	ldrh	r3, [r3, #6]
 800aa6a:	2b07      	cmp	r3, #7
 800aa6c:	bf28      	it	cs
 800aa6e:	2307      	movcs	r3, #7
 800aa70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	89fa      	ldrh	r2, [r7, #14]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 fd53 	bl	800c524 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa7e:	e090      	b.n	800aba2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	785a      	ldrb	r2, [r3, #1]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	88db      	ldrh	r3, [r3, #6]
 800aa8e:	2b3f      	cmp	r3, #63	@ 0x3f
 800aa90:	d803      	bhi.n	800aa9a <USBD_CDC_Setup+0xa6>
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	88db      	ldrh	r3, [r3, #6]
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	e000      	b.n	800aa9c <USBD_CDC_Setup+0xa8>
 800aa9a:	2240      	movs	r2, #64	@ 0x40
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aaa2:	6939      	ldr	r1, [r7, #16]
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aaaa:	461a      	mov	r2, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 fd65 	bl	800c57c <USBD_CtlPrepareRx>
      break;
 800aab2:	e076      	b.n	800aba2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	33b0      	adds	r3, #176	@ 0xb0
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	7850      	ldrb	r0, [r2, #1]
 800aaca:	2200      	movs	r2, #0
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	4798      	blx	r3
      break;
 800aad0:	e067      	b.n	800aba2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	2b0b      	cmp	r3, #11
 800aad8:	d851      	bhi.n	800ab7e <USBD_CDC_Setup+0x18a>
 800aada:	a201      	add	r2, pc, #4	@ (adr r2, 800aae0 <USBD_CDC_Setup+0xec>)
 800aadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae0:	0800ab11 	.word	0x0800ab11
 800aae4:	0800ab8d 	.word	0x0800ab8d
 800aae8:	0800ab7f 	.word	0x0800ab7f
 800aaec:	0800ab7f 	.word	0x0800ab7f
 800aaf0:	0800ab7f 	.word	0x0800ab7f
 800aaf4:	0800ab7f 	.word	0x0800ab7f
 800aaf8:	0800ab7f 	.word	0x0800ab7f
 800aafc:	0800ab7f 	.word	0x0800ab7f
 800ab00:	0800ab7f 	.word	0x0800ab7f
 800ab04:	0800ab7f 	.word	0x0800ab7f
 800ab08:	0800ab3b 	.word	0x0800ab3b
 800ab0c:	0800ab65 	.word	0x0800ab65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d107      	bne.n	800ab2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab1c:	f107 030a 	add.w	r3, r7, #10
 800ab20:	2202      	movs	r2, #2
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 fcfd 	bl	800c524 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab2a:	e032      	b.n	800ab92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f001 fc7b 	bl	800c42a <USBD_CtlError>
            ret = USBD_FAIL;
 800ab34:	2303      	movs	r3, #3
 800ab36:	75fb      	strb	r3, [r7, #23]
          break;
 800ab38:	e02b      	b.n	800ab92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d107      	bne.n	800ab56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab46:	f107 030d 	add.w	r3, r7, #13
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 fce8 	bl	800c524 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab54:	e01d      	b.n	800ab92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f001 fc66 	bl	800c42a <USBD_CtlError>
            ret = USBD_FAIL;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	75fb      	strb	r3, [r7, #23]
          break;
 800ab62:	e016      	b.n	800ab92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d00f      	beq.n	800ab90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 fc59 	bl	800c42a <USBD_CtlError>
            ret = USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab7c:	e008      	b.n	800ab90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 fc52 	bl	800c42a <USBD_CtlError>
          ret = USBD_FAIL;
 800ab86:	2303      	movs	r3, #3
 800ab88:	75fb      	strb	r3, [r7, #23]
          break;
 800ab8a:	e002      	b.n	800ab92 <USBD_CDC_Setup+0x19e>
          break;
 800ab8c:	bf00      	nop
 800ab8e:	e008      	b.n	800aba2 <USBD_CDC_Setup+0x1ae>
          break;
 800ab90:	bf00      	nop
      }
      break;
 800ab92:	e006      	b.n	800aba2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f001 fc47 	bl	800c42a <USBD_CtlError>
      ret = USBD_FAIL;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aba0:	bf00      	nop
  }

  return (uint8_t)ret;
 800aba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	32b0      	adds	r2, #176	@ 0xb0
 800abca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e065      	b.n	800aca2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	32b0      	adds	r2, #176	@ 0xb0
 800abe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	f003 020f 	and.w	r2, r3, #15
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	440b      	add	r3, r1
 800abf8:	3318      	adds	r3, #24
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d02f      	beq.n	800ac60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	f003 020f 	and.w	r2, r3, #15
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	440b      	add	r3, r1
 800ac12:	3318      	adds	r3, #24
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	f003 010f 	and.w	r1, r3, #15
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	440b      	add	r3, r1
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4403      	add	r3, r0
 800ac28:	331c      	adds	r3, #28
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac30:	fb01 f303 	mul.w	r3, r1, r3
 800ac34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d112      	bne.n	800ac60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	f003 020f 	and.w	r2, r3, #15
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3318      	adds	r3, #24
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac52:	78f9      	ldrb	r1, [r7, #3]
 800ac54:	2300      	movs	r3, #0
 800ac56:	2200      	movs	r2, #0
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f002 f93e 	bl	800ceda <USBD_LL_Transmit>
 800ac5e:	e01f      	b.n	800aca0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	33b0      	adds	r3, #176	@ 0xb0
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d010      	beq.n	800aca0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	33b0      	adds	r3, #176	@ 0xb0
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ac9c:	78fa      	ldrb	r2, [r7, #3]
 800ac9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	32b0      	adds	r2, #176	@ 0xb0
 800acc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	32b0      	adds	r2, #176	@ 0xb0
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800acd8:	2303      	movs	r3, #3
 800acda:	e01a      	b.n	800ad12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800acdc:	78fb      	ldrb	r3, [r7, #3]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f002 f93c 	bl	800cf5e <USBD_LL_GetRxDataSize>
 800ace6:	4602      	mov	r2, r0
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	33b0      	adds	r3, #176	@ 0xb0
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	32b0      	adds	r2, #176	@ 0xb0
 800ad2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e024      	b.n	800ad86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	33b0      	adds	r3, #176	@ 0xb0
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d019      	beq.n	800ad84 <USBD_CDC_EP0_RxReady+0x6a>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ad56:	2bff      	cmp	r3, #255	@ 0xff
 800ad58:	d014      	beq.n	800ad84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	33b0      	adds	r3, #176	@ 0xb0
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	22ff      	movs	r2, #255	@ 0xff
 800ad80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad98:	2182      	movs	r1, #130	@ 0x82
 800ad9a:	4818      	ldr	r0, [pc, #96]	@ (800adfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad9c:	f000 fd0f 	bl	800b7be <USBD_GetEpDesc>
 800ada0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ada2:	2101      	movs	r1, #1
 800ada4:	4815      	ldr	r0, [pc, #84]	@ (800adfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ada6:	f000 fd0a 	bl	800b7be <USBD_GetEpDesc>
 800adaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800adac:	2181      	movs	r1, #129	@ 0x81
 800adae:	4813      	ldr	r0, [pc, #76]	@ (800adfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800adb0:	f000 fd05 	bl	800b7be <USBD_GetEpDesc>
 800adb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2210      	movs	r2, #16
 800adc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d006      	beq.n	800add6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2200      	movs	r2, #0
 800adcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800add0:	711a      	strb	r2, [r3, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d006      	beq.n	800adea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ade4:	711a      	strb	r2, [r3, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2243      	movs	r2, #67	@ 0x43
 800adee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adf0:	4b02      	ldr	r3, [pc, #8]	@ (800adfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20000068 	.word	0x20000068

0800ae00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae08:	2182      	movs	r1, #130	@ 0x82
 800ae0a:	4818      	ldr	r0, [pc, #96]	@ (800ae6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae0c:	f000 fcd7 	bl	800b7be <USBD_GetEpDesc>
 800ae10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae12:	2101      	movs	r1, #1
 800ae14:	4815      	ldr	r0, [pc, #84]	@ (800ae6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae16:	f000 fcd2 	bl	800b7be <USBD_GetEpDesc>
 800ae1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae1c:	2181      	movs	r1, #129	@ 0x81
 800ae1e:	4813      	ldr	r0, [pc, #76]	@ (800ae6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae20:	f000 fccd 	bl	800b7be <USBD_GetEpDesc>
 800ae24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	2210      	movs	r2, #16
 800ae30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d006      	beq.n	800ae46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	711a      	strb	r2, [r3, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f042 0202 	orr.w	r2, r2, #2
 800ae44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d006      	beq.n	800ae5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	711a      	strb	r2, [r3, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f042 0202 	orr.w	r2, r2, #2
 800ae58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2243      	movs	r2, #67	@ 0x43
 800ae5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae60:	4b02      	ldr	r3, [pc, #8]	@ (800ae6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000068 	.word	0x20000068

0800ae70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae78:	2182      	movs	r1, #130	@ 0x82
 800ae7a:	4818      	ldr	r0, [pc, #96]	@ (800aedc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae7c:	f000 fc9f 	bl	800b7be <USBD_GetEpDesc>
 800ae80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae82:	2101      	movs	r1, #1
 800ae84:	4815      	ldr	r0, [pc, #84]	@ (800aedc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae86:	f000 fc9a 	bl	800b7be <USBD_GetEpDesc>
 800ae8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae8c:	2181      	movs	r1, #129	@ 0x81
 800ae8e:	4813      	ldr	r0, [pc, #76]	@ (800aedc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae90:	f000 fc95 	bl	800b7be <USBD_GetEpDesc>
 800ae94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2210      	movs	r2, #16
 800aea0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d006      	beq.n	800aeb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aeb0:	711a      	strb	r2, [r3, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aec4:	711a      	strb	r2, [r3, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2243      	movs	r2, #67	@ 0x43
 800aece:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aed0:	4b02      	ldr	r3, [pc, #8]	@ (800aedc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20000068 	.word	0x20000068

0800aee0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	220a      	movs	r2, #10
 800aeec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aeee:	4b03      	ldr	r3, [pc, #12]	@ (800aefc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	20000024 	.word	0x20000024

0800af00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800af10:	2303      	movs	r3, #3
 800af12:	e009      	b.n	800af28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	33b0      	adds	r3, #176	@ 0xb0
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	32b0      	adds	r2, #176	@ 0xb0
 800af4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af56:	2303      	movs	r3, #3
 800af58:	e008      	b.n	800af6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	371c      	adds	r7, #28
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	32b0      	adds	r2, #176	@ 0xb0
 800af8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af98:	2303      	movs	r3, #3
 800af9a:	e004      	b.n	800afa6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
	...

0800afb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	32b0      	adds	r2, #176	@ 0xb0
 800afc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	32b0      	adds	r2, #176	@ 0xb0
 800afd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800afde:	2303      	movs	r3, #3
 800afe0:	e018      	b.n	800b014 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	7c1b      	ldrb	r3, [r3, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10a      	bne.n	800b000 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afea:	4b0c      	ldr	r3, [pc, #48]	@ (800b01c <USBD_CDC_ReceivePacket+0x68>)
 800afec:	7819      	ldrb	r1, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 ff8f 	bl	800cf1c <USBD_LL_PrepareReceive>
 800affe:	e008      	b.n	800b012 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b000:	4b06      	ldr	r3, [pc, #24]	@ (800b01c <USBD_CDC_ReceivePacket+0x68>)
 800b002:	7819      	ldrb	r1, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b00a:	2340      	movs	r3, #64	@ 0x40
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 ff85 	bl	800cf1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	200000ac 	.word	0x200000ac

0800b020 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	4613      	mov	r3, r2
 800b02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b034:	2303      	movs	r3, #3
 800b036:	e01f      	b.n	800b078 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	79fa      	ldrb	r2, [r7, #7]
 800b06a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f001 fdff 	bl	800cc70 <USBD_LL_Init>
 800b072:	4603      	mov	r3, r0
 800b074:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b094:	2303      	movs	r3, #3
 800b096:	e025      	b.n	800b0e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	32ae      	adds	r2, #174	@ 0xae
 800b0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00f      	beq.n	800b0d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	32ae      	adds	r2, #174	@ 0xae
 800b0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c4:	f107 020e 	add.w	r2, r7, #14
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4798      	blx	r3
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f001 fe07 	bl	800cd08 <USBD_LL_Start>
 800b0fa:	4603      	mov	r3, r0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b10c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	460b      	mov	r3, r1
 800b124:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b130:	2b00      	cmp	r3, #0
 800b132:	d009      	beq.n	800b148 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	4611      	mov	r1, r2
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	4798      	blx	r3
 800b144:	4603      	mov	r3, r0
 800b146:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b148:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	460b      	mov	r3, r1
 800b15c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	78fa      	ldrb	r2, [r7, #3]
 800b16c:	4611      	mov	r1, r2
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	4798      	blx	r3
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b178:	2303      	movs	r3, #3
 800b17a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	4618      	mov	r0, r3
 800b19a:	f001 f90c 	bl	800c3b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1ba:	f003 031f 	and.w	r3, r3, #31
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d01a      	beq.n	800b1f8 <USBD_LL_SetupStage+0x72>
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d822      	bhi.n	800b20c <USBD_LL_SetupStage+0x86>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <USBD_LL_SetupStage+0x4a>
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d00a      	beq.n	800b1e4 <USBD_LL_SetupStage+0x5e>
 800b1ce:	e01d      	b.n	800b20c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fb63 	bl	800b8a4 <USBD_StdDevReq>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e2:	e020      	b.n	800b226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fbcb 	bl	800b988 <USBD_StdItfReq>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f6:	e016      	b.n	800b226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fc2d 	bl	800ba60 <USBD_StdEPReq>
 800b206:	4603      	mov	r3, r0
 800b208:	73fb      	strb	r3, [r7, #15]
      break;
 800b20a:	e00c      	b.n	800b226 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b212:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b216:	b2db      	uxtb	r3, r3
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f001 fdd4 	bl	800cdc8 <USBD_LL_StallEP>
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]
      break;
 800b224:	bf00      	nop
  }

  return ret;
 800b226:	7bfb      	ldrb	r3, [r7, #15]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	460b      	mov	r3, r1
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b242:	7afb      	ldrb	r3, [r7, #11]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d16e      	bne.n	800b326 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b24e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b256:	2b03      	cmp	r3, #3
 800b258:	f040 8098 	bne.w	800b38c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	689a      	ldr	r2, [r3, #8]
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	429a      	cmp	r2, r3
 800b266:	d913      	bls.n	800b290 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	1ad2      	subs	r2, r2, r3
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	4293      	cmp	r3, r2
 800b280:	bf28      	it	cs
 800b282:	4613      	movcs	r3, r2
 800b284:	461a      	mov	r2, r3
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f001 f994 	bl	800c5b6 <USBD_CtlContinueRx>
 800b28e:	e07d      	b.n	800b38c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b296:	f003 031f 	and.w	r3, r3, #31
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d014      	beq.n	800b2c8 <USBD_LL_DataOutStage+0x98>
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d81d      	bhi.n	800b2de <USBD_LL_DataOutStage+0xae>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <USBD_LL_DataOutStage+0x7c>
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d003      	beq.n	800b2b2 <USBD_LL_DataOutStage+0x82>
 800b2aa:	e018      	b.n	800b2de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	75bb      	strb	r3, [r7, #22]
            break;
 800b2b0:	e018      	b.n	800b2e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 fa64 	bl	800b78a <USBD_CoreFindIF>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	75bb      	strb	r3, [r7, #22]
            break;
 800b2c6:	e00d      	b.n	800b2e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 fa66 	bl	800b7a4 <USBD_CoreFindEP>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	75bb      	strb	r3, [r7, #22]
            break;
 800b2dc:	e002      	b.n	800b2e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b2e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b2e4:	7dbb      	ldrb	r3, [r7, #22]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d119      	bne.n	800b31e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d113      	bne.n	800b31e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2f6:	7dba      	ldrb	r2, [r7, #22]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	32ae      	adds	r2, #174	@ 0xae
 800b2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00b      	beq.n	800b31e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b306:	7dba      	ldrb	r2, [r7, #22]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b30e:	7dba      	ldrb	r2, [r7, #22]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	32ae      	adds	r2, #174	@ 0xae
 800b314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f001 f95a 	bl	800c5d8 <USBD_CtlSendStatus>
 800b324:	e032      	b.n	800b38c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b326:	7afb      	ldrb	r3, [r7, #11]
 800b328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	4619      	mov	r1, r3
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 fa37 	bl	800b7a4 <USBD_CoreFindEP>
 800b336:	4603      	mov	r3, r0
 800b338:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b33a:	7dbb      	ldrb	r3, [r7, #22]
 800b33c:	2bff      	cmp	r3, #255	@ 0xff
 800b33e:	d025      	beq.n	800b38c <USBD_LL_DataOutStage+0x15c>
 800b340:	7dbb      	ldrb	r3, [r7, #22]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d122      	bne.n	800b38c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d117      	bne.n	800b382 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b352:	7dba      	ldrb	r2, [r7, #22]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	32ae      	adds	r2, #174	@ 0xae
 800b358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00f      	beq.n	800b382 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b362:	7dba      	ldrb	r2, [r7, #22]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b36a:	7dba      	ldrb	r2, [r7, #22]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	32ae      	adds	r2, #174	@ 0xae
 800b370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	7afa      	ldrb	r2, [r7, #11]
 800b378:	4611      	mov	r1, r2
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	4798      	blx	r3
 800b37e:	4603      	mov	r3, r0
 800b380:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d001      	beq.n	800b38c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	e000      	b.n	800b38e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b086      	sub	sp, #24
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d16f      	bne.n	800b48a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3314      	adds	r3, #20
 800b3ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d15a      	bne.n	800b470 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	689a      	ldr	r2, [r3, #8]
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d914      	bls.n	800b3f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	689a      	ldr	r2, [r3, #8]
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	1ad2      	subs	r2, r2, r3
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f001 f8bc 	bl	800c55a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f001 fd97 	bl	800cf1c <USBD_LL_PrepareReceive>
 800b3ee:	e03f      	b.n	800b470 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	68da      	ldr	r2, [r3, #12]
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d11c      	bne.n	800b436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b404:	429a      	cmp	r2, r3
 800b406:	d316      	bcc.n	800b436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b412:	429a      	cmp	r2, r3
 800b414:	d20f      	bcs.n	800b436 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b416:	2200      	movs	r2, #0
 800b418:	2100      	movs	r1, #0
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f001 f89d 	bl	800c55a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b428:	2300      	movs	r3, #0
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f001 fd74 	bl	800cf1c <USBD_LL_PrepareReceive>
 800b434:	e01c      	b.n	800b470 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d10f      	bne.n	800b462 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d009      	beq.n	800b462 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b462:	2180      	movs	r1, #128	@ 0x80
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f001 fcaf 	bl	800cdc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f001 f8c7 	bl	800c5fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d03a      	beq.n	800b4f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7ff fe42 	bl	800b104 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b488:	e032      	b.n	800b4f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b490:	b2db      	uxtb	r3, r3
 800b492:	4619      	mov	r1, r3
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 f985 	bl	800b7a4 <USBD_CoreFindEP>
 800b49a:	4603      	mov	r3, r0
 800b49c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	2bff      	cmp	r3, #255	@ 0xff
 800b4a2:	d025      	beq.n	800b4f0 <USBD_LL_DataInStage+0x15a>
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d122      	bne.n	800b4f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d11c      	bne.n	800b4f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b4b6:	7dfa      	ldrb	r2, [r7, #23]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	32ae      	adds	r2, #174	@ 0xae
 800b4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d014      	beq.n	800b4f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b4c6:	7dfa      	ldrb	r2, [r7, #23]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b4ce:	7dfa      	ldrb	r2, [r7, #23]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	32ae      	adds	r2, #174	@ 0xae
 800b4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	7afa      	ldrb	r2, [r7, #11]
 800b4dc:	4611      	mov	r1, r2
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	4798      	blx	r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b4e6:	7dbb      	ldrb	r3, [r7, #22]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b4ec:	7dbb      	ldrb	r3, [r7, #22]
 800b4ee:	e000      	b.n	800b4f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b532:	2b00      	cmp	r3, #0
 800b534:	d014      	beq.n	800b560 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00e      	beq.n	800b560 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	6852      	ldr	r2, [r2, #4]
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	4611      	mov	r1, r2
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	4798      	blx	r3
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b560:	2340      	movs	r3, #64	@ 0x40
 800b562:	2200      	movs	r2, #0
 800b564:	2100      	movs	r1, #0
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 fbe9 	bl	800cd3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2240      	movs	r2, #64	@ 0x40
 800b578:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b57c:	2340      	movs	r3, #64	@ 0x40
 800b57e:	2200      	movs	r2, #0
 800b580:	2180      	movs	r1, #128	@ 0x80
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fbdb 	bl	800cd3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2240      	movs	r2, #64	@ 0x40
 800b592:	621a      	str	r2, [r3, #32]

  return ret;
 800b594:	7bfb      	ldrb	r3, [r7, #15]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b083      	sub	sp, #12
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	78fa      	ldrb	r2, [r7, #3]
 800b5ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	d006      	beq.n	800b5e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b04      	cmp	r3, #4
 800b608:	d106      	bne.n	800b618 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b610:	b2da      	uxtb	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b082      	sub	sp, #8
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b03      	cmp	r3, #3
 800b638:	d110      	bne.n	800b65c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d005      	beq.n	800b65c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b082      	sub	sp, #8
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	32ae      	adds	r2, #174	@ 0xae
 800b67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b684:	2303      	movs	r3, #3
 800b686:	e01c      	b.n	800b6c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b03      	cmp	r3, #3
 800b692:	d115      	bne.n	800b6c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	32ae      	adds	r2, #174	@ 0xae
 800b69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a2:	6a1b      	ldr	r3, [r3, #32]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	32ae      	adds	r2, #174	@ 0xae
 800b6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	78fa      	ldrb	r2, [r7, #3]
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	32ae      	adds	r2, #174	@ 0xae
 800b6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e01c      	b.n	800b726 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d115      	bne.n	800b724 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	32ae      	adds	r2, #174	@ 0xae
 800b702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00b      	beq.n	800b724 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	32ae      	adds	r2, #174	@ 0xae
 800b716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b71c:	78fa      	ldrb	r2, [r7, #3]
 800b71e:	4611      	mov	r1, r2
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00e      	beq.n	800b780 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	6852      	ldr	r2, [r2, #4]
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	4611      	mov	r1, r2
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	4798      	blx	r3
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b77c:	2303      	movs	r3, #3
 800b77e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	460b      	mov	r3, r1
 800b794:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b796:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b7b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	885b      	ldrh	r3, [r3, #2]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	7812      	ldrb	r2, [r2, #0]
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d91f      	bls.n	800b824 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b7ea:	e013      	b.n	800b814 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b7ec:	f107 030a 	add.w	r3, r7, #10
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6978      	ldr	r0, [r7, #20]
 800b7f4:	f000 f81b 	bl	800b82e <USBD_GetNextDesc>
 800b7f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	785b      	ldrb	r3, [r3, #1]
 800b7fe:	2b05      	cmp	r3, #5
 800b800:	d108      	bne.n	800b814 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	789b      	ldrb	r3, [r3, #2]
 800b80a:	78fa      	ldrb	r2, [r7, #3]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d008      	beq.n	800b822 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b810:	2300      	movs	r3, #0
 800b812:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	885b      	ldrh	r3, [r3, #2]
 800b818:	b29a      	uxth	r2, r3
 800b81a:	897b      	ldrh	r3, [r7, #10]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d8e5      	bhi.n	800b7ec <USBD_GetEpDesc+0x2e>
 800b820:	e000      	b.n	800b824 <USBD_GetEpDesc+0x66>
          break;
 800b822:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b824:	693b      	ldr	r3, [r7, #16]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	7812      	ldrb	r2, [r2, #0]
 800b844:	4413      	add	r3, r2
 800b846:	b29a      	uxth	r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4413      	add	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b858:	68fb      	ldr	r3, [r7, #12]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b866:	b480      	push	{r7}
 800b868:	b087      	sub	sp, #28
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	3301      	adds	r3, #1
 800b87c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b884:	8a3b      	ldrh	r3, [r7, #16]
 800b886:	021b      	lsls	r3, r3, #8
 800b888:	b21a      	sxth	r2, r3
 800b88a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b88e:	4313      	orrs	r3, r2
 800b890:	b21b      	sxth	r3, r3
 800b892:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b894:	89fb      	ldrh	r3, [r7, #14]
}
 800b896:	4618      	mov	r0, r3
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
	...

0800b8a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8ba:	2b40      	cmp	r3, #64	@ 0x40
 800b8bc:	d005      	beq.n	800b8ca <USBD_StdDevReq+0x26>
 800b8be:	2b40      	cmp	r3, #64	@ 0x40
 800b8c0:	d857      	bhi.n	800b972 <USBD_StdDevReq+0xce>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00f      	beq.n	800b8e6 <USBD_StdDevReq+0x42>
 800b8c6:	2b20      	cmp	r3, #32
 800b8c8:	d153      	bne.n	800b972 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	32ae      	adds	r2, #174	@ 0xae
 800b8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	4798      	blx	r3
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e4:	e04a      	b.n	800b97c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	785b      	ldrb	r3, [r3, #1]
 800b8ea:	2b09      	cmp	r3, #9
 800b8ec:	d83b      	bhi.n	800b966 <USBD_StdDevReq+0xc2>
 800b8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f4 <USBD_StdDevReq+0x50>)
 800b8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f4:	0800b949 	.word	0x0800b949
 800b8f8:	0800b95d 	.word	0x0800b95d
 800b8fc:	0800b967 	.word	0x0800b967
 800b900:	0800b953 	.word	0x0800b953
 800b904:	0800b967 	.word	0x0800b967
 800b908:	0800b927 	.word	0x0800b927
 800b90c:	0800b91d 	.word	0x0800b91d
 800b910:	0800b967 	.word	0x0800b967
 800b914:	0800b93f 	.word	0x0800b93f
 800b918:	0800b931 	.word	0x0800b931
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fa3c 	bl	800bd9c <USBD_GetDescriptor>
          break;
 800b924:	e024      	b.n	800b970 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fba1 	bl	800c070 <USBD_SetAddress>
          break;
 800b92e:	e01f      	b.n	800b970 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fbe0 	bl	800c0f8 <USBD_SetConfig>
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]
          break;
 800b93c:	e018      	b.n	800b970 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fc83 	bl	800c24c <USBD_GetConfig>
          break;
 800b946:	e013      	b.n	800b970 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fcb4 	bl	800c2b8 <USBD_GetStatus>
          break;
 800b950:	e00e      	b.n	800b970 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fce3 	bl	800c320 <USBD_SetFeature>
          break;
 800b95a:	e009      	b.n	800b970 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fd07 	bl	800c372 <USBD_ClrFeature>
          break;
 800b964:	e004      	b.n	800b970 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fd5e 	bl	800c42a <USBD_CtlError>
          break;
 800b96e:	bf00      	nop
      }
      break;
 800b970:	e004      	b.n	800b97c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fd58 	bl	800c42a <USBD_CtlError>
      break;
 800b97a:	bf00      	nop
  }

  return ret;
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop

0800b988 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b99e:	2b40      	cmp	r3, #64	@ 0x40
 800b9a0:	d005      	beq.n	800b9ae <USBD_StdItfReq+0x26>
 800b9a2:	2b40      	cmp	r3, #64	@ 0x40
 800b9a4:	d852      	bhi.n	800ba4c <USBD_StdItfReq+0xc4>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <USBD_StdItfReq+0x26>
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	d14e      	bne.n	800ba4c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d840      	bhi.n	800ba3e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	889b      	ldrh	r3, [r3, #4]
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d836      	bhi.n	800ba34 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	889b      	ldrh	r3, [r3, #4]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff fedb 	bl	800b78a <USBD_CoreFindIF>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	2bff      	cmp	r3, #255	@ 0xff
 800b9dc:	d01d      	beq.n	800ba1a <USBD_StdItfReq+0x92>
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d11a      	bne.n	800ba1a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b9e4:	7bba      	ldrb	r2, [r7, #14]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	32ae      	adds	r2, #174	@ 0xae
 800b9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00f      	beq.n	800ba14 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b9f4:	7bba      	ldrb	r2, [r7, #14]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9fc:	7bba      	ldrb	r2, [r7, #14]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	32ae      	adds	r2, #174	@ 0xae
 800ba02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	4798      	blx	r3
 800ba0e:	4603      	mov	r3, r0
 800ba10:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba12:	e004      	b.n	800ba1e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ba14:	2303      	movs	r3, #3
 800ba16:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba18:	e001      	b.n	800ba1e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	88db      	ldrh	r3, [r3, #6]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d110      	bne.n	800ba48 <USBD_StdItfReq+0xc0>
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10d      	bne.n	800ba48 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fdd3 	bl	800c5d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba32:	e009      	b.n	800ba48 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fcf7 	bl	800c42a <USBD_CtlError>
          break;
 800ba3c:	e004      	b.n	800ba48 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fcf2 	bl	800c42a <USBD_CtlError>
          break;
 800ba46:	e000      	b.n	800ba4a <USBD_StdItfReq+0xc2>
          break;
 800ba48:	bf00      	nop
      }
      break;
 800ba4a:	e004      	b.n	800ba56 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fceb 	bl	800c42a <USBD_CtlError>
      break;
 800ba54:	bf00      	nop
  }

  return ret;
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	889b      	ldrh	r3, [r3, #4]
 800ba72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba7c:	2b40      	cmp	r3, #64	@ 0x40
 800ba7e:	d007      	beq.n	800ba90 <USBD_StdEPReq+0x30>
 800ba80:	2b40      	cmp	r3, #64	@ 0x40
 800ba82:	f200 817f 	bhi.w	800bd84 <USBD_StdEPReq+0x324>
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d02a      	beq.n	800bae0 <USBD_StdEPReq+0x80>
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	f040 817a 	bne.w	800bd84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fe85 	bl	800b7a4 <USBD_CoreFindEP>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba9e:	7b7b      	ldrb	r3, [r7, #13]
 800baa0:	2bff      	cmp	r3, #255	@ 0xff
 800baa2:	f000 8174 	beq.w	800bd8e <USBD_StdEPReq+0x32e>
 800baa6:	7b7b      	ldrb	r3, [r7, #13]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f040 8170 	bne.w	800bd8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800baae:	7b7a      	ldrb	r2, [r7, #13]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bab6:	7b7a      	ldrb	r2, [r7, #13]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	32ae      	adds	r2, #174	@ 0xae
 800babc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 8163 	beq.w	800bd8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bac8:	7b7a      	ldrb	r2, [r7, #13]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	32ae      	adds	r2, #174	@ 0xae
 800bace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
 800bada:	4603      	mov	r3, r0
 800badc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bade:	e156      	b.n	800bd8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	785b      	ldrb	r3, [r3, #1]
 800bae4:	2b03      	cmp	r3, #3
 800bae6:	d008      	beq.n	800bafa <USBD_StdEPReq+0x9a>
 800bae8:	2b03      	cmp	r3, #3
 800baea:	f300 8145 	bgt.w	800bd78 <USBD_StdEPReq+0x318>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 809b 	beq.w	800bc2a <USBD_StdEPReq+0x1ca>
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d03c      	beq.n	800bb72 <USBD_StdEPReq+0x112>
 800baf8:	e13e      	b.n	800bd78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d002      	beq.n	800bb0c <USBD_StdEPReq+0xac>
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d016      	beq.n	800bb38 <USBD_StdEPReq+0xd8>
 800bb0a:	e02c      	b.n	800bb66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb0c:	7bbb      	ldrb	r3, [r7, #14]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00d      	beq.n	800bb2e <USBD_StdEPReq+0xce>
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b80      	cmp	r3, #128	@ 0x80
 800bb16:	d00a      	beq.n	800bb2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f001 f953 	bl	800cdc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb22:	2180      	movs	r1, #128	@ 0x80
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f001 f94f 	bl	800cdc8 <USBD_LL_StallEP>
 800bb2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb2c:	e020      	b.n	800bb70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fc7a 	bl	800c42a <USBD_CtlError>
              break;
 800bb36:	e01b      	b.n	800bb70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	885b      	ldrh	r3, [r3, #2]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10e      	bne.n	800bb5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb40:	7bbb      	ldrb	r3, [r7, #14]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00b      	beq.n	800bb5e <USBD_StdEPReq+0xfe>
 800bb46:	7bbb      	ldrb	r3, [r7, #14]
 800bb48:	2b80      	cmp	r3, #128	@ 0x80
 800bb4a:	d008      	beq.n	800bb5e <USBD_StdEPReq+0xfe>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	88db      	ldrh	r3, [r3, #6]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d104      	bne.n	800bb5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f001 f935 	bl	800cdc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fd3a 	bl	800c5d8 <USBD_CtlSendStatus>

              break;
 800bb64:	e004      	b.n	800bb70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fc5e 	bl	800c42a <USBD_CtlError>
              break;
 800bb6e:	bf00      	nop
          }
          break;
 800bb70:	e107      	b.n	800bd82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d002      	beq.n	800bb84 <USBD_StdEPReq+0x124>
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d016      	beq.n	800bbb0 <USBD_StdEPReq+0x150>
 800bb82:	e04b      	b.n	800bc1c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00d      	beq.n	800bba6 <USBD_StdEPReq+0x146>
 800bb8a:	7bbb      	ldrb	r3, [r7, #14]
 800bb8c:	2b80      	cmp	r3, #128	@ 0x80
 800bb8e:	d00a      	beq.n	800bba6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f001 f917 	bl	800cdc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb9a:	2180      	movs	r1, #128	@ 0x80
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 f913 	bl	800cdc8 <USBD_LL_StallEP>
 800bba2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bba4:	e040      	b.n	800bc28 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fc3e 	bl	800c42a <USBD_CtlError>
              break;
 800bbae:	e03b      	b.n	800bc28 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	885b      	ldrh	r3, [r3, #2]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d136      	bne.n	800bc26 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d004      	beq.n	800bbcc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 f91d 	bl	800ce06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fd03 	bl	800c5d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7ff fde4 	bl	800b7a4 <USBD_CoreFindEP>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbe0:	7b7b      	ldrb	r3, [r7, #13]
 800bbe2:	2bff      	cmp	r3, #255	@ 0xff
 800bbe4:	d01f      	beq.n	800bc26 <USBD_StdEPReq+0x1c6>
 800bbe6:	7b7b      	ldrb	r3, [r7, #13]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d11c      	bne.n	800bc26 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bbec:	7b7a      	ldrb	r2, [r7, #13]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bbf4:	7b7a      	ldrb	r2, [r7, #13]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	32ae      	adds	r2, #174	@ 0xae
 800bbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d010      	beq.n	800bc26 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc04:	7b7a      	ldrb	r2, [r7, #13]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	32ae      	adds	r2, #174	@ 0xae
 800bc0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	4798      	blx	r3
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bc1a:	e004      	b.n	800bc26 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fc03 	bl	800c42a <USBD_CtlError>
              break;
 800bc24:	e000      	b.n	800bc28 <USBD_StdEPReq+0x1c8>
              break;
 800bc26:	bf00      	nop
          }
          break;
 800bc28:	e0ab      	b.n	800bd82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d002      	beq.n	800bc3c <USBD_StdEPReq+0x1dc>
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d032      	beq.n	800bca0 <USBD_StdEPReq+0x240>
 800bc3a:	e097      	b.n	800bd6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <USBD_StdEPReq+0x1f2>
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	2b80      	cmp	r3, #128	@ 0x80
 800bc46:	d004      	beq.n	800bc52 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fbed 	bl	800c42a <USBD_CtlError>
                break;
 800bc50:	e091      	b.n	800bd76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da0b      	bge.n	800bc72 <USBD_StdEPReq+0x212>
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	3310      	adds	r3, #16
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	3304      	adds	r3, #4
 800bc70:	e00b      	b.n	800bc8a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc72:	7bbb      	ldrb	r3, [r7, #14]
 800bc74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc78:	4613      	mov	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	4413      	add	r3, r2
 800bc88:	3304      	adds	r3, #4
 800bc8a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	2202      	movs	r2, #2
 800bc96:	4619      	mov	r1, r3
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 fc43 	bl	800c524 <USBD_CtlSendData>
              break;
 800bc9e:	e06a      	b.n	800bd76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	da11      	bge.n	800bccc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	f003 020f 	and.w	r2, r3, #15
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	440b      	add	r3, r1
 800bcba:	3324      	adds	r3, #36	@ 0x24
 800bcbc:	881b      	ldrh	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d117      	bne.n	800bcf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fbb0 	bl	800c42a <USBD_CtlError>
                  break;
 800bcca:	e054      	b.n	800bd76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	f003 020f 	and.w	r2, r3, #15
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	440b      	add	r3, r1
 800bcde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d104      	bne.n	800bcf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fb9d 	bl	800c42a <USBD_CtlError>
                  break;
 800bcf0:	e041      	b.n	800bd76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	da0b      	bge.n	800bd12 <USBD_StdEPReq+0x2b2>
 800bcfa:	7bbb      	ldrb	r3, [r7, #14]
 800bcfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd00:	4613      	mov	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	3310      	adds	r3, #16
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	3304      	adds	r3, #4
 800bd10:	e00b      	b.n	800bd2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd12:	7bbb      	ldrb	r3, [r7, #14]
 800bd14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	4413      	add	r3, r2
 800bd28:	3304      	adds	r3, #4
 800bd2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <USBD_StdEPReq+0x2d8>
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	2b80      	cmp	r3, #128	@ 0x80
 800bd36:	d103      	bne.n	800bd40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	e00e      	b.n	800bd5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd40:	7bbb      	ldrb	r3, [r7, #14]
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f001 f87d 	bl	800ce44 <USBD_LL_IsStallEP>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2201      	movs	r2, #1
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	e002      	b.n	800bd5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2202      	movs	r2, #2
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fbdd 	bl	800c524 <USBD_CtlSendData>
              break;
 800bd6a:	e004      	b.n	800bd76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fb5b 	bl	800c42a <USBD_CtlError>
              break;
 800bd74:	bf00      	nop
          }
          break;
 800bd76:	e004      	b.n	800bd82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fb55 	bl	800c42a <USBD_CtlError>
          break;
 800bd80:	bf00      	nop
      }
      break;
 800bd82:	e005      	b.n	800bd90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fb4f 	bl	800c42a <USBD_CtlError>
      break;
 800bd8c:	e000      	b.n	800bd90 <USBD_StdEPReq+0x330>
      break;
 800bd8e:	bf00      	nop
  }

  return ret;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bda6:	2300      	movs	r3, #0
 800bda8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	885b      	ldrh	r3, [r3, #2]
 800bdb6:	0a1b      	lsrs	r3, r3, #8
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	2b06      	cmp	r3, #6
 800bdbe:	f200 8128 	bhi.w	800c012 <USBD_GetDescriptor+0x276>
 800bdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc8 <USBD_GetDescriptor+0x2c>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800bde5 	.word	0x0800bde5
 800bdcc:	0800bdfd 	.word	0x0800bdfd
 800bdd0:	0800be3d 	.word	0x0800be3d
 800bdd4:	0800c013 	.word	0x0800c013
 800bdd8:	0800c013 	.word	0x0800c013
 800bddc:	0800bfb3 	.word	0x0800bfb3
 800bde0:	0800bfdf 	.word	0x0800bfdf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	7c12      	ldrb	r2, [r2, #16]
 800bdf0:	f107 0108 	add.w	r1, r7, #8
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4798      	blx	r3
 800bdf8:	60f8      	str	r0, [r7, #12]
      break;
 800bdfa:	e112      	b.n	800c022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7c1b      	ldrb	r3, [r3, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10d      	bne.n	800be20 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	f107 0208 	add.w	r2, r7, #8
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
 800be14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3301      	adds	r3, #1
 800be1a:	2202      	movs	r2, #2
 800be1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be1e:	e100      	b.n	800c022 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be28:	f107 0208 	add.w	r2, r7, #8
 800be2c:	4610      	mov	r0, r2
 800be2e:	4798      	blx	r3
 800be30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3301      	adds	r3, #1
 800be36:	2202      	movs	r2, #2
 800be38:	701a      	strb	r2, [r3, #0]
      break;
 800be3a:	e0f2      	b.n	800c022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	885b      	ldrh	r3, [r3, #2]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b05      	cmp	r3, #5
 800be44:	f200 80ac 	bhi.w	800bfa0 <USBD_GetDescriptor+0x204>
 800be48:	a201      	add	r2, pc, #4	@ (adr r2, 800be50 <USBD_GetDescriptor+0xb4>)
 800be4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4e:	bf00      	nop
 800be50:	0800be69 	.word	0x0800be69
 800be54:	0800be9d 	.word	0x0800be9d
 800be58:	0800bed1 	.word	0x0800bed1
 800be5c:	0800bf05 	.word	0x0800bf05
 800be60:	0800bf39 	.word	0x0800bf39
 800be64:	0800bf6d 	.word	0x0800bf6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00b      	beq.n	800be8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	7c12      	ldrb	r2, [r2, #16]
 800be80:	f107 0108 	add.w	r1, r7, #8
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
 800be88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be8a:	e091      	b.n	800bfb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 facb 	bl	800c42a <USBD_CtlError>
            err++;
 800be94:	7afb      	ldrb	r3, [r7, #11]
 800be96:	3301      	adds	r3, #1
 800be98:	72fb      	strb	r3, [r7, #11]
          break;
 800be9a:	e089      	b.n	800bfb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	7c12      	ldrb	r2, [r2, #16]
 800beb4:	f107 0108 	add.w	r1, r7, #8
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
 800bebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bebe:	e077      	b.n	800bfb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fab1 	bl	800c42a <USBD_CtlError>
            err++;
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	3301      	adds	r3, #1
 800becc:	72fb      	strb	r3, [r7, #11]
          break;
 800bece:	e06f      	b.n	800bfb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00b      	beq.n	800bef4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	7c12      	ldrb	r2, [r2, #16]
 800bee8:	f107 0108 	add.w	r1, r7, #8
 800beec:	4610      	mov	r0, r2
 800beee:	4798      	blx	r3
 800bef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bef2:	e05d      	b.n	800bfb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fa97 	bl	800c42a <USBD_CtlError>
            err++;
 800befc:	7afb      	ldrb	r3, [r7, #11]
 800befe:	3301      	adds	r3, #1
 800bf00:	72fb      	strb	r3, [r7, #11]
          break;
 800bf02:	e055      	b.n	800bfb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00b      	beq.n	800bf28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf16:	691b      	ldr	r3, [r3, #16]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	7c12      	ldrb	r2, [r2, #16]
 800bf1c:	f107 0108 	add.w	r1, r7, #8
 800bf20:	4610      	mov	r0, r2
 800bf22:	4798      	blx	r3
 800bf24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf26:	e043      	b.n	800bfb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fa7d 	bl	800c42a <USBD_CtlError>
            err++;
 800bf30:	7afb      	ldrb	r3, [r7, #11]
 800bf32:	3301      	adds	r3, #1
 800bf34:	72fb      	strb	r3, [r7, #11]
          break;
 800bf36:	e03b      	b.n	800bfb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf3e:	695b      	ldr	r3, [r3, #20]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00b      	beq.n	800bf5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	7c12      	ldrb	r2, [r2, #16]
 800bf50:	f107 0108 	add.w	r1, r7, #8
 800bf54:	4610      	mov	r0, r2
 800bf56:	4798      	blx	r3
 800bf58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf5a:	e029      	b.n	800bfb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fa63 	bl	800c42a <USBD_CtlError>
            err++;
 800bf64:	7afb      	ldrb	r3, [r7, #11]
 800bf66:	3301      	adds	r3, #1
 800bf68:	72fb      	strb	r3, [r7, #11]
          break;
 800bf6a:	e021      	b.n	800bfb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00b      	beq.n	800bf90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	7c12      	ldrb	r2, [r2, #16]
 800bf84:	f107 0108 	add.w	r1, r7, #8
 800bf88:	4610      	mov	r0, r2
 800bf8a:	4798      	blx	r3
 800bf8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf8e:	e00f      	b.n	800bfb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fa49 	bl	800c42a <USBD_CtlError>
            err++;
 800bf98:	7afb      	ldrb	r3, [r7, #11]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf9e:	e007      	b.n	800bfb0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fa41 	bl	800c42a <USBD_CtlError>
          err++;
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bfae:	bf00      	nop
      }
      break;
 800bfb0:	e037      	b.n	800c022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	7c1b      	ldrb	r3, [r3, #16]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d109      	bne.n	800bfce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfc2:	f107 0208 	add.w	r2, r7, #8
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	4798      	blx	r3
 800bfca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfcc:	e029      	b.n	800c022 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 fa2a 	bl	800c42a <USBD_CtlError>
        err++;
 800bfd6:	7afb      	ldrb	r3, [r7, #11]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	72fb      	strb	r3, [r7, #11]
      break;
 800bfdc:	e021      	b.n	800c022 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	7c1b      	ldrb	r3, [r3, #16]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d10d      	bne.n	800c002 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfee:	f107 0208 	add.w	r2, r7, #8
 800bff2:	4610      	mov	r0, r2
 800bff4:	4798      	blx	r3
 800bff6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3301      	adds	r3, #1
 800bffc:	2207      	movs	r2, #7
 800bffe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c000:	e00f      	b.n	800c022 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa10 	bl	800c42a <USBD_CtlError>
        err++;
 800c00a:	7afb      	ldrb	r3, [r7, #11]
 800c00c:	3301      	adds	r3, #1
 800c00e:	72fb      	strb	r3, [r7, #11]
      break;
 800c010:	e007      	b.n	800c022 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fa08 	bl	800c42a <USBD_CtlError>
      err++;
 800c01a:	7afb      	ldrb	r3, [r7, #11]
 800c01c:	3301      	adds	r3, #1
 800c01e:	72fb      	strb	r3, [r7, #11]
      break;
 800c020:	bf00      	nop
  }

  if (err != 0U)
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d11e      	bne.n	800c066 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	88db      	ldrh	r3, [r3, #6]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d016      	beq.n	800c05e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c030:	893b      	ldrh	r3, [r7, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00e      	beq.n	800c054 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	88da      	ldrh	r2, [r3, #6]
 800c03a:	893b      	ldrh	r3, [r7, #8]
 800c03c:	4293      	cmp	r3, r2
 800c03e:	bf28      	it	cs
 800c040:	4613      	movcs	r3, r2
 800c042:	b29b      	uxth	r3, r3
 800c044:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c046:	893b      	ldrh	r3, [r7, #8]
 800c048:	461a      	mov	r2, r3
 800c04a:	68f9      	ldr	r1, [r7, #12]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fa69 	bl	800c524 <USBD_CtlSendData>
 800c052:	e009      	b.n	800c068 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f9e7 	bl	800c42a <USBD_CtlError>
 800c05c:	e004      	b.n	800c068 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 faba 	bl	800c5d8 <USBD_CtlSendStatus>
 800c064:	e000      	b.n	800c068 <USBD_GetDescriptor+0x2cc>
    return;
 800c066:	bf00      	nop
  }
}
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop

0800c070 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	889b      	ldrh	r3, [r3, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d131      	bne.n	800c0e6 <USBD_SetAddress+0x76>
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	88db      	ldrh	r3, [r3, #6]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d12d      	bne.n	800c0e6 <USBD_SetAddress+0x76>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	885b      	ldrh	r3, [r3, #2]
 800c08e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c090:	d829      	bhi.n	800c0e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	885b      	ldrh	r3, [r3, #2]
 800c096:	b2db      	uxtb	r3, r3
 800c098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c09c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d104      	bne.n	800c0b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 f9bc 	bl	800c42a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b2:	e01d      	b.n	800c0f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7bfa      	ldrb	r2, [r7, #15]
 800c0b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 feeb 	bl	800ce9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa86 	bl	800c5d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0da:	e009      	b.n	800c0f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e4:	e004      	b.n	800c0f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f99e 	bl	800c42a <USBD_CtlError>
  }
}
 800c0ee:	bf00      	nop
 800c0f0:	bf00      	nop
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	885b      	ldrh	r3, [r3, #2]
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	4b4e      	ldr	r3, [pc, #312]	@ (800c248 <USBD_SetConfig+0x150>)
 800c10e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c110:	4b4d      	ldr	r3, [pc, #308]	@ (800c248 <USBD_SetConfig+0x150>)
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d905      	bls.n	800c124 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 f985 	bl	800c42a <USBD_CtlError>
    return USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	e08c      	b.n	800c23e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d002      	beq.n	800c136 <USBD_SetConfig+0x3e>
 800c130:	2b03      	cmp	r3, #3
 800c132:	d029      	beq.n	800c188 <USBD_SetConfig+0x90>
 800c134:	e075      	b.n	800c222 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c136:	4b44      	ldr	r3, [pc, #272]	@ (800c248 <USBD_SetConfig+0x150>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d020      	beq.n	800c180 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c13e:	4b42      	ldr	r3, [pc, #264]	@ (800c248 <USBD_SetConfig+0x150>)
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	461a      	mov	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c148:	4b3f      	ldr	r3, [pc, #252]	@ (800c248 <USBD_SetConfig+0x150>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7fe ffe3 	bl	800b11a <USBD_SetClassConfig>
 800c154:	4603      	mov	r3, r0
 800c156:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c158:	7bfb      	ldrb	r3, [r7, #15]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d008      	beq.n	800c170 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f962 	bl	800c42a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2202      	movs	r2, #2
 800c16a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c16e:	e065      	b.n	800c23c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fa31 	bl	800c5d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2203      	movs	r2, #3
 800c17a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c17e:	e05d      	b.n	800c23c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fa29 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800c186:	e059      	b.n	800c23c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c188:	4b2f      	ldr	r3, [pc, #188]	@ (800c248 <USBD_SetConfig+0x150>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d112      	bne.n	800c1b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2202      	movs	r2, #2
 800c194:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c198:	4b2b      	ldr	r3, [pc, #172]	@ (800c248 <USBD_SetConfig+0x150>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1a2:	4b29      	ldr	r3, [pc, #164]	@ (800c248 <USBD_SetConfig+0x150>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7fe ffd2 	bl	800b152 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fa12 	bl	800c5d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1b4:	e042      	b.n	800c23c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c1b6:	4b24      	ldr	r3, [pc, #144]	@ (800c248 <USBD_SetConfig+0x150>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d02a      	beq.n	800c21a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7fe ffc0 	bl	800b152 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c248 <USBD_SetConfig+0x150>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <USBD_SetConfig+0x150>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7fe ff99 	bl	800b11a <USBD_SetClassConfig>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00f      	beq.n	800c212 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f918 	bl	800c42a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7fe ffa5 	bl	800b152 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c210:	e014      	b.n	800c23c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f9e0 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800c218:	e010      	b.n	800c23c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f9dc 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800c220:	e00c      	b.n	800c23c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f900 	bl	800c42a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c22a:	4b07      	ldr	r3, [pc, #28]	@ (800c248 <USBD_SetConfig+0x150>)
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7fe ff8e 	bl	800b152 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c236:	2303      	movs	r3, #3
 800c238:	73fb      	strb	r3, [r7, #15]
      break;
 800c23a:	bf00      	nop
  }

  return ret;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	200005a4 	.word	0x200005a4

0800c24c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	88db      	ldrh	r3, [r3, #6]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d004      	beq.n	800c268 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f8e2 	bl	800c42a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c266:	e023      	b.n	800c2b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b02      	cmp	r3, #2
 800c272:	dc02      	bgt.n	800c27a <USBD_GetConfig+0x2e>
 800c274:	2b00      	cmp	r3, #0
 800c276:	dc03      	bgt.n	800c280 <USBD_GetConfig+0x34>
 800c278:	e015      	b.n	800c2a6 <USBD_GetConfig+0x5a>
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d00b      	beq.n	800c296 <USBD_GetConfig+0x4a>
 800c27e:	e012      	b.n	800c2a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3308      	adds	r3, #8
 800c28a:	2201      	movs	r2, #1
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f948 	bl	800c524 <USBD_CtlSendData>
        break;
 800c294:	e00c      	b.n	800c2b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3304      	adds	r3, #4
 800c29a:	2201      	movs	r2, #1
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f940 	bl	800c524 <USBD_CtlSendData>
        break;
 800c2a4:	e004      	b.n	800c2b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f8be 	bl	800c42a <USBD_CtlError>
        break;
 800c2ae:	bf00      	nop
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d81e      	bhi.n	800c30e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	88db      	ldrh	r3, [r3, #6]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d004      	beq.n	800c2e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f8a5 	bl	800c42a <USBD_CtlError>
        break;
 800c2e0:	e01a      	b.n	800c318 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d005      	beq.n	800c2fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	f043 0202 	orr.w	r2, r3, #2
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	330c      	adds	r3, #12
 800c302:	2202      	movs	r2, #2
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f90c 	bl	800c524 <USBD_CtlSendData>
      break;
 800c30c:	e004      	b.n	800c318 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f88a 	bl	800c42a <USBD_CtlError>
      break;
 800c316:	bf00      	nop
  }
}
 800c318:	bf00      	nop
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d107      	bne.n	800c342 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f94c 	bl	800c5d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c340:	e013      	b.n	800c36a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	885b      	ldrh	r3, [r3, #2]
 800c346:	2b02      	cmp	r3, #2
 800c348:	d10b      	bne.n	800c362 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	889b      	ldrh	r3, [r3, #4]
 800c34e:	0a1b      	lsrs	r3, r3, #8
 800c350:	b29b      	uxth	r3, r3
 800c352:	b2da      	uxtb	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f93c 	bl	800c5d8 <USBD_CtlSendStatus>
}
 800c360:	e003      	b.n	800c36a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f860 	bl	800c42a <USBD_CtlError>
}
 800c36a:	bf00      	nop
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c382:	b2db      	uxtb	r3, r3
 800c384:	3b01      	subs	r3, #1
 800c386:	2b02      	cmp	r3, #2
 800c388:	d80b      	bhi.n	800c3a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	885b      	ldrh	r3, [r3, #2]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d10c      	bne.n	800c3ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f91c 	bl	800c5d8 <USBD_CtlSendStatus>
      }
      break;
 800c3a0:	e004      	b.n	800c3ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f840 	bl	800c42a <USBD_CtlError>
      break;
 800c3aa:	e000      	b.n	800c3ae <USBD_ClrFeature+0x3c>
      break;
 800c3ac:	bf00      	nop
  }
}
 800c3ae:	bf00      	nop
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	781a      	ldrb	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	781a      	ldrb	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f7ff fa40 	bl	800b866 <SWAPBYTE>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff fa33 	bl	800b866 <SWAPBYTE>
 800c400:	4603      	mov	r3, r0
 800c402:	461a      	mov	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	3301      	adds	r3, #1
 800c40c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3301      	adds	r3, #1
 800c412:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f7ff fa26 	bl	800b866 <SWAPBYTE>
 800c41a:	4603      	mov	r3, r0
 800c41c:	461a      	mov	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	80da      	strh	r2, [r3, #6]
}
 800c422:	bf00      	nop
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b082      	sub	sp, #8
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c434:	2180      	movs	r1, #128	@ 0x80
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fcc6 	bl	800cdc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c43c:	2100      	movs	r1, #0
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fcc2 	bl	800cdc8 <USBD_LL_StallEP>
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d042      	beq.n	800c4e8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f000 f842 	bl	800c4f0 <USBD_GetLen>
 800c46c:	4603      	mov	r3, r0
 800c46e:	3301      	adds	r3, #1
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c476:	d808      	bhi.n	800c48a <USBD_GetString+0x3e>
 800c478:	6938      	ldr	r0, [r7, #16]
 800c47a:	f000 f839 	bl	800c4f0 <USBD_GetLen>
 800c47e:	4603      	mov	r3, r0
 800c480:	3301      	adds	r3, #1
 800c482:	b29b      	uxth	r3, r3
 800c484:	005b      	lsls	r3, r3, #1
 800c486:	b29a      	uxth	r2, r3
 800c488:	e001      	b.n	800c48e <USBD_GetString+0x42>
 800c48a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	4413      	add	r3, r2
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	7812      	ldrb	r2, [r2, #0]
 800c49c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	2203      	movs	r2, #3
 800c4ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c4b4:	e013      	b.n	800c4de <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	7812      	ldrb	r2, [r2, #0]
 800c4c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	613b      	str	r3, [r7, #16]
    idx++;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e7      	bne.n	800c4b6 <USBD_GetString+0x6a>
 800c4e6:	e000      	b.n	800c4ea <USBD_GetString+0x9e>
    return;
 800c4e8:	bf00      	nop
  }
}
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c500:	e005      	b.n	800c50e <USBD_GetLen+0x1e>
  {
    len++;
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	3301      	adds	r3, #1
 800c506:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	3301      	adds	r3, #1
 800c50c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1f5      	bne.n	800c502 <USBD_GetLen+0x12>
  }

  return len;
 800c516:	7bfb      	ldrb	r3, [r7, #15]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2202      	movs	r2, #2
 800c534:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	2100      	movs	r1, #0
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f000 fcc5 	bl	800ceda <USBD_LL_Transmit>

  return USBD_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b084      	sub	sp, #16
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	2100      	movs	r1, #0
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f000 fcb4 	bl	800ceda <USBD_LL_Transmit>

  return USBD_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2203      	movs	r2, #3
 800c58c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 fcb8 	bl	800cf1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b084      	sub	sp, #16
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 fca7 	bl	800cf1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2204      	movs	r2, #4
 800c5e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fc73 	bl	800ceda <USBD_LL_Transmit>

  return USBD_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2205      	movs	r2, #5
 800c60a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c60e:	2300      	movs	r3, #0
 800c610:	2200      	movs	r2, #0
 800c612:	2100      	movs	r1, #0
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fc81 	bl	800cf1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c628:	2200      	movs	r2, #0
 800c62a:	4912      	ldr	r1, [pc, #72]	@ (800c674 <MX_USB_DEVICE_Init+0x50>)
 800c62c:	4812      	ldr	r0, [pc, #72]	@ (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c62e:	f7fe fcf7 	bl	800b020 <USBD_Init>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c638:	f7f6 fbfc 	bl	8002e34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c63c:	490f      	ldr	r1, [pc, #60]	@ (800c67c <MX_USB_DEVICE_Init+0x58>)
 800c63e:	480e      	ldr	r0, [pc, #56]	@ (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c640:	f7fe fd1e 	bl	800b080 <USBD_RegisterClass>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c64a:	f7f6 fbf3 	bl	8002e34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c64e:	490c      	ldr	r1, [pc, #48]	@ (800c680 <MX_USB_DEVICE_Init+0x5c>)
 800c650:	4809      	ldr	r0, [pc, #36]	@ (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c652:	f7fe fc55 	bl	800af00 <USBD_CDC_RegisterInterface>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c65c:	f7f6 fbea 	bl	8002e34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c660:	4805      	ldr	r0, [pc, #20]	@ (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c662:	f7fe fd43 	bl	800b0ec <USBD_Start>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c66c:	f7f6 fbe2 	bl	8002e34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c670:	bf00      	nop
 800c672:	bd80      	pop	{r7, pc}
 800c674:	200000c4 	.word	0x200000c4
 800c678:	200005a8 	.word	0x200005a8
 800c67c:	20000030 	.word	0x20000030
 800c680:	200000b0 	.word	0x200000b0

0800c684 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c688:	2200      	movs	r2, #0
 800c68a:	4905      	ldr	r1, [pc, #20]	@ (800c6a0 <CDC_Init_FS+0x1c>)
 800c68c:	4805      	ldr	r0, [pc, #20]	@ (800c6a4 <CDC_Init_FS+0x20>)
 800c68e:	f7fe fc51 	bl	800af34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c692:	4905      	ldr	r1, [pc, #20]	@ (800c6a8 <CDC_Init_FS+0x24>)
 800c694:	4803      	ldr	r0, [pc, #12]	@ (800c6a4 <CDC_Init_FS+0x20>)
 800c696:	f7fe fc6f 	bl	800af78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c69a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	20001084 	.word	0x20001084
 800c6a4:	200005a8 	.word	0x200005a8
 800c6a8:	20000884 	.word	0x20000884

0800c6ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	6039      	str	r1, [r7, #0]
 800c6c6:	71fb      	strb	r3, [r7, #7]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6cc:	79fb      	ldrb	r3, [r7, #7]
 800c6ce:	2b23      	cmp	r3, #35	@ 0x23
 800c6d0:	d84a      	bhi.n	800c768 <CDC_Control_FS+0xac>
 800c6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d8 <CDC_Control_FS+0x1c>)
 800c6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d8:	0800c769 	.word	0x0800c769
 800c6dc:	0800c769 	.word	0x0800c769
 800c6e0:	0800c769 	.word	0x0800c769
 800c6e4:	0800c769 	.word	0x0800c769
 800c6e8:	0800c769 	.word	0x0800c769
 800c6ec:	0800c769 	.word	0x0800c769
 800c6f0:	0800c769 	.word	0x0800c769
 800c6f4:	0800c769 	.word	0x0800c769
 800c6f8:	0800c769 	.word	0x0800c769
 800c6fc:	0800c769 	.word	0x0800c769
 800c700:	0800c769 	.word	0x0800c769
 800c704:	0800c769 	.word	0x0800c769
 800c708:	0800c769 	.word	0x0800c769
 800c70c:	0800c769 	.word	0x0800c769
 800c710:	0800c769 	.word	0x0800c769
 800c714:	0800c769 	.word	0x0800c769
 800c718:	0800c769 	.word	0x0800c769
 800c71c:	0800c769 	.word	0x0800c769
 800c720:	0800c769 	.word	0x0800c769
 800c724:	0800c769 	.word	0x0800c769
 800c728:	0800c769 	.word	0x0800c769
 800c72c:	0800c769 	.word	0x0800c769
 800c730:	0800c769 	.word	0x0800c769
 800c734:	0800c769 	.word	0x0800c769
 800c738:	0800c769 	.word	0x0800c769
 800c73c:	0800c769 	.word	0x0800c769
 800c740:	0800c769 	.word	0x0800c769
 800c744:	0800c769 	.word	0x0800c769
 800c748:	0800c769 	.word	0x0800c769
 800c74c:	0800c769 	.word	0x0800c769
 800c750:	0800c769 	.word	0x0800c769
 800c754:	0800c769 	.word	0x0800c769
 800c758:	0800c769 	.word	0x0800c769
 800c75c:	0800c769 	.word	0x0800c769
 800c760:	0800c769 	.word	0x0800c769
 800c764:	0800c769 	.word	0x0800c769
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c768:	bf00      	nop
  }

  return (USBD_OK);
 800c76a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c782:	6879      	ldr	r1, [r7, #4]
 800c784:	4805      	ldr	r0, [pc, #20]	@ (800c79c <CDC_Receive_FS+0x24>)
 800c786:	f7fe fbf7 	bl	800af78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c78a:	4804      	ldr	r0, [pc, #16]	@ (800c79c <CDC_Receive_FS+0x24>)
 800c78c:	f7fe fc12 	bl	800afb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c790:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	200005a8 	.word	0x200005a8

0800c7a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c7b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
	...

0800c7c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	6039      	str	r1, [r7, #0]
 800c7ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2212      	movs	r2, #18
 800c7d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c7d6:	4b03      	ldr	r3, [pc, #12]	@ (800c7e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	200000e0 	.word	0x200000e0

0800c7e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	6039      	str	r1, [r7, #0]
 800c7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	2204      	movs	r2, #4
 800c7f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c7fa:	4b03      	ldr	r3, [pc, #12]	@ (800c808 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	200000f4 	.word	0x200000f4

0800c80c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	6039      	str	r1, [r7, #0]
 800c816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c818:	79fb      	ldrb	r3, [r7, #7]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d105      	bne.n	800c82a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	4907      	ldr	r1, [pc, #28]	@ (800c840 <USBD_FS_ProductStrDescriptor+0x34>)
 800c822:	4808      	ldr	r0, [pc, #32]	@ (800c844 <USBD_FS_ProductStrDescriptor+0x38>)
 800c824:	f7ff fe12 	bl	800c44c <USBD_GetString>
 800c828:	e004      	b.n	800c834 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	4904      	ldr	r1, [pc, #16]	@ (800c840 <USBD_FS_ProductStrDescriptor+0x34>)
 800c82e:	4805      	ldr	r0, [pc, #20]	@ (800c844 <USBD_FS_ProductStrDescriptor+0x38>)
 800c830:	f7ff fe0c 	bl	800c44c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c834:	4b02      	ldr	r3, [pc, #8]	@ (800c840 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20001884 	.word	0x20001884
 800c844:	080101d8 	.word	0x080101d8

0800c848 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	6039      	str	r1, [r7, #0]
 800c852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	4904      	ldr	r1, [pc, #16]	@ (800c868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c858:	4804      	ldr	r0, [pc, #16]	@ (800c86c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c85a:	f7ff fdf7 	bl	800c44c <USBD_GetString>
  return USBD_StrDesc;
 800c85e:	4b02      	ldr	r3, [pc, #8]	@ (800c868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20001884 	.word	0x20001884
 800c86c:	080101f0 	.word	0x080101f0

0800c870 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	6039      	str	r1, [r7, #0]
 800c87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	221a      	movs	r2, #26
 800c880:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c882:	f000 f843 	bl	800c90c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c886:	4b02      	ldr	r3, [pc, #8]	@ (800c890 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	200000f8 	.word	0x200000f8

0800c894 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8a0:	79fb      	ldrb	r3, [r7, #7]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d105      	bne.n	800c8b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	4907      	ldr	r1, [pc, #28]	@ (800c8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8aa:	4808      	ldr	r0, [pc, #32]	@ (800c8cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8ac:	f7ff fdce 	bl	800c44c <USBD_GetString>
 800c8b0:	e004      	b.n	800c8bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	4904      	ldr	r1, [pc, #16]	@ (800c8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8b6:	4805      	ldr	r0, [pc, #20]	@ (800c8cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8b8:	f7ff fdc8 	bl	800c44c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8bc:	4b02      	ldr	r3, [pc, #8]	@ (800c8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20001884 	.word	0x20001884
 800c8cc:	08010204 	.word	0x08010204

0800c8d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	6039      	str	r1, [r7, #0]
 800c8da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d105      	bne.n	800c8ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8e2:	683a      	ldr	r2, [r7, #0]
 800c8e4:	4907      	ldr	r1, [pc, #28]	@ (800c904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8e6:	4808      	ldr	r0, [pc, #32]	@ (800c908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8e8:	f7ff fdb0 	bl	800c44c <USBD_GetString>
 800c8ec:	e004      	b.n	800c8f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	4904      	ldr	r1, [pc, #16]	@ (800c904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8f2:	4805      	ldr	r0, [pc, #20]	@ (800c908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8f4:	f7ff fdaa 	bl	800c44c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8f8:	4b02      	ldr	r3, [pc, #8]	@ (800c904 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20001884 	.word	0x20001884
 800c908:	08010210 	.word	0x08010210

0800c90c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c912:	4b0f      	ldr	r3, [pc, #60]	@ (800c950 <Get_SerialNum+0x44>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c918:	4b0e      	ldr	r3, [pc, #56]	@ (800c954 <Get_SerialNum+0x48>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c91e:	4b0e      	ldr	r3, [pc, #56]	@ (800c958 <Get_SerialNum+0x4c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4413      	add	r3, r2
 800c92a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c932:	2208      	movs	r2, #8
 800c934:	4909      	ldr	r1, [pc, #36]	@ (800c95c <Get_SerialNum+0x50>)
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f000 f814 	bl	800c964 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c93c:	2204      	movs	r2, #4
 800c93e:	4908      	ldr	r1, [pc, #32]	@ (800c960 <Get_SerialNum+0x54>)
 800c940:	68b8      	ldr	r0, [r7, #8]
 800c942:	f000 f80f 	bl	800c964 <IntToUnicode>
  }
}
 800c946:	bf00      	nop
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	1fff7a10 	.word	0x1fff7a10
 800c954:	1fff7a14 	.word	0x1fff7a14
 800c958:	1fff7a18 	.word	0x1fff7a18
 800c95c:	200000fa 	.word	0x200000fa
 800c960:	2000010a 	.word	0x2000010a

0800c964 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c964:	b480      	push	{r7}
 800c966:	b087      	sub	sp, #28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	4613      	mov	r3, r2
 800c970:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c976:	2300      	movs	r3, #0
 800c978:	75fb      	strb	r3, [r7, #23]
 800c97a:	e027      	b.n	800c9cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	0f1b      	lsrs	r3, r3, #28
 800c980:	2b09      	cmp	r3, #9
 800c982:	d80b      	bhi.n	800c99c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	0f1b      	lsrs	r3, r3, #28
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	4619      	mov	r1, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	440b      	add	r3, r1
 800c994:	3230      	adds	r2, #48	@ 0x30
 800c996:	b2d2      	uxtb	r2, r2
 800c998:	701a      	strb	r2, [r3, #0]
 800c99a:	e00a      	b.n	800c9b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	0f1b      	lsrs	r3, r3, #28
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	440b      	add	r3, r1
 800c9ac:	3237      	adds	r2, #55	@ 0x37
 800c9ae:	b2d2      	uxtb	r2, r2
 800c9b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	011b      	lsls	r3, r3, #4
 800c9b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c9b8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	3301      	adds	r3, #1
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	75fb      	strb	r3, [r7, #23]
 800c9cc:	7dfa      	ldrb	r2, [r7, #23]
 800c9ce:	79fb      	ldrb	r3, [r7, #7]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d3d3      	bcc.n	800c97c <IntToUnicode+0x18>
  }
}
 800c9d4:	bf00      	nop
 800c9d6:	bf00      	nop
 800c9d8:	371c      	adds	r7, #28
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
	...

0800c9e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08a      	sub	sp, #40	@ 0x28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9ec:	f107 0314 	add.w	r3, r7, #20
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	605a      	str	r2, [r3, #4]
 800c9f6:	609a      	str	r2, [r3, #8]
 800c9f8:	60da      	str	r2, [r3, #12]
 800c9fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca04:	d13a      	bne.n	800ca7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca06:	2300      	movs	r3, #0
 800ca08:	613b      	str	r3, [r7, #16]
 800ca0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca0e:	4a1d      	ldr	r2, [pc, #116]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca10:	f043 0301 	orr.w	r3, r3, #1
 800ca14:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca16:	4b1b      	ldr	r3, [pc, #108]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	613b      	str	r3, [r7, #16]
 800ca20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ca22:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ca26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca30:	2303      	movs	r3, #3
 800ca32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ca34:	230a      	movs	r3, #10
 800ca36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca38:	f107 0314 	add.w	r3, r7, #20
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4812      	ldr	r0, [pc, #72]	@ (800ca88 <HAL_PCD_MspInit+0xa4>)
 800ca40:	f7f7 fd8c 	bl	800455c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ca44:	4b0f      	ldr	r3, [pc, #60]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca48:	4a0e      	ldr	r2, [pc, #56]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca4e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ca50:	2300      	movs	r3, #0
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	4b0b      	ldr	r3, [pc, #44]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca58:	4a0a      	ldr	r2, [pc, #40]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ca5e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ca60:	4b08      	ldr	r3, [pc, #32]	@ (800ca84 <HAL_PCD_MspInit+0xa0>)
 800ca62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca68:	60fb      	str	r3, [r7, #12]
 800ca6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	2100      	movs	r1, #0
 800ca70:	2043      	movs	r0, #67	@ 0x43
 800ca72:	f7f7 fcaa 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca76:	2043      	movs	r0, #67	@ 0x43
 800ca78:	f7f7 fcc3 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca7c:	bf00      	nop
 800ca7e:	3728      	adds	r7, #40	@ 0x28
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	40023800 	.word	0x40023800
 800ca88:	40020000 	.word	0x40020000

0800ca8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800caa0:	4619      	mov	r1, r3
 800caa2:	4610      	mov	r0, r2
 800caa4:	f7fe fb6f 	bl	800b186 <USBD_LL_SetupStage>
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	460b      	mov	r3, r1
 800caba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cac2:	78fa      	ldrb	r2, [r7, #3]
 800cac4:	6879      	ldr	r1, [r7, #4]
 800cac6:	4613      	mov	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	4413      	add	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	440b      	add	r3, r1
 800cad0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	78fb      	ldrb	r3, [r7, #3]
 800cad8:	4619      	mov	r1, r3
 800cada:	f7fe fba9 	bl	800b230 <USBD_LL_DataOutStage>
}
 800cade:	bf00      	nop
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b082      	sub	sp, #8
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	460b      	mov	r3, r1
 800caf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800caf8:	78fa      	ldrb	r2, [r7, #3]
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	4613      	mov	r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	440b      	add	r3, r1
 800cb06:	3320      	adds	r3, #32
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	78fb      	ldrb	r3, [r7, #3]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	f7fe fc42 	bl	800b396 <USBD_LL_DataInStage>
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe fd7c 	bl	800b626 <USBD_LL_SOF>
}
 800cb2e:	bf00      	nop
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	79db      	ldrb	r3, [r3, #7]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d102      	bne.n	800cb50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
 800cb4e:	e008      	b.n	800cb62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	79db      	ldrb	r3, [r3, #7]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d102      	bne.n	800cb5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	73fb      	strb	r3, [r7, #15]
 800cb5c:	e001      	b.n	800cb62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cb5e:	f7f6 f969 	bl	8002e34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb68:	7bfa      	ldrb	r2, [r7, #15]
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fd16 	bl	800b59e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe fcbe 	bl	800b4fa <USBD_LL_Reset>
}
 800cb7e:	bf00      	nop
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fe fd11 	bl	800b5be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	6812      	ldr	r2, [r2, #0]
 800cbaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cbae:	f043 0301 	orr.w	r3, r3, #1
 800cbb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	7adb      	ldrb	r3, [r3, #11]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d005      	beq.n	800cbc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbbc:	4b04      	ldr	r3, [pc, #16]	@ (800cbd0 <HAL_PCD_SuspendCallback+0x48>)
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	4a03      	ldr	r2, [pc, #12]	@ (800cbd0 <HAL_PCD_SuspendCallback+0x48>)
 800cbc2:	f043 0306 	orr.w	r3, r3, #6
 800cbc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cbc8:	bf00      	nop
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	e000ed00 	.word	0xe000ed00

0800cbd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe fd07 	bl	800b5f6 <USBD_LL_Resume>
}
 800cbe8:	bf00      	nop
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc02:	78fa      	ldrb	r2, [r7, #3]
 800cc04:	4611      	mov	r1, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe fd5f 	bl	800b6ca <USBD_LL_IsoOUTIncomplete>
}
 800cc0c:	bf00      	nop
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc26:	78fa      	ldrb	r2, [r7, #3]
 800cc28:	4611      	mov	r1, r2
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fe fd1b 	bl	800b666 <USBD_LL_IsoINIncomplete>
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe fd71 	bl	800b72e <USBD_LL_DevConnected>
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fd6e 	bl	800b744 <USBD_LL_DevDisconnected>
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d13c      	bne.n	800ccfa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cc80:	4a20      	ldr	r2, [pc, #128]	@ (800cd04 <USBD_LL_Init+0x94>)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a1e      	ldr	r2, [pc, #120]	@ (800cd04 <USBD_LL_Init+0x94>)
 800cc8c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cc90:	4b1c      	ldr	r3, [pc, #112]	@ (800cd04 <USBD_LL_Init+0x94>)
 800cc92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cc96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cc98:	4b1a      	ldr	r3, [pc, #104]	@ (800cd04 <USBD_LL_Init+0x94>)
 800cc9a:	2204      	movs	r2, #4
 800cc9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cc9e:	4b19      	ldr	r3, [pc, #100]	@ (800cd04 <USBD_LL_Init+0x94>)
 800cca0:	2202      	movs	r2, #2
 800cca2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cca4:	4b17      	ldr	r3, [pc, #92]	@ (800cd04 <USBD_LL_Init+0x94>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ccaa:	4b16      	ldr	r3, [pc, #88]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccac:	2202      	movs	r2, #2
 800ccae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ccb0:	4b14      	ldr	r3, [pc, #80]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ccb6:	4b13      	ldr	r3, [pc, #76]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ccbc:	4b11      	ldr	r3, [pc, #68]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ccc2:	4b10      	ldr	r3, [pc, #64]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ccc8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ccce:	480d      	ldr	r0, [pc, #52]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccd0:	f7f8 fac9 	bl	8005266 <HAL_PCD_Init>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ccda:	f7f6 f8ab 	bl	8002e34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ccde:	2180      	movs	r1, #128	@ 0x80
 800cce0:	4808      	ldr	r0, [pc, #32]	@ (800cd04 <USBD_LL_Init+0x94>)
 800cce2:	f7f9 fcf6 	bl	80066d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cce6:	2240      	movs	r2, #64	@ 0x40
 800cce8:	2100      	movs	r1, #0
 800ccea:	4806      	ldr	r0, [pc, #24]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccec:	f7f9 fcaa 	bl	8006644 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ccf0:	2280      	movs	r2, #128	@ 0x80
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	4803      	ldr	r0, [pc, #12]	@ (800cd04 <USBD_LL_Init+0x94>)
 800ccf6:	f7f9 fca5 	bl	8006644 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	20001a84 	.word	0x20001a84

0800cd08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7f8 fbb0 	bl	8005484 <HAL_PCD_Start>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd28:	7bfb      	ldrb	r3, [r7, #15]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 f942 	bl	800cfb4 <USBD_Get_USB_Status>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	4608      	mov	r0, r1
 800cd48:	4611      	mov	r1, r2
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	70fb      	strb	r3, [r7, #3]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70bb      	strb	r3, [r7, #2]
 800cd54:	4613      	mov	r3, r2
 800cd56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd66:	78bb      	ldrb	r3, [r7, #2]
 800cd68:	883a      	ldrh	r2, [r7, #0]
 800cd6a:	78f9      	ldrb	r1, [r7, #3]
 800cd6c:	f7f9 f884 	bl	8005e78 <HAL_PCD_EP_Open>
 800cd70:	4603      	mov	r3, r0
 800cd72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 f91c 	bl	800cfb4 <USBD_Get_USB_Status>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b084      	sub	sp, #16
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	460b      	mov	r3, r1
 800cd94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cda4:	78fa      	ldrb	r2, [r7, #3]
 800cda6:	4611      	mov	r1, r2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7f9 f8cf 	bl	8005f4c <HAL_PCD_EP_Close>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f000 f8fd 	bl	800cfb4 <USBD_Get_USB_Status>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cde2:	78fa      	ldrb	r2, [r7, #3]
 800cde4:	4611      	mov	r1, r2
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7f9 f987 	bl	80060fa <HAL_PCD_EP_SetStall>
 800cdec:	4603      	mov	r3, r0
 800cdee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 f8de 	bl	800cfb4 <USBD_Get_USB_Status>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b084      	sub	sp, #16
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	460b      	mov	r3, r1
 800ce10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce20:	78fa      	ldrb	r2, [r7, #3]
 800ce22:	4611      	mov	r1, r2
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7f9 f9cb 	bl	80061c0 <HAL_PCD_EP_ClrStall>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 f8bf 	bl	800cfb4 <USBD_Get_USB_Status>
 800ce36:	4603      	mov	r3, r0
 800ce38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	da0b      	bge.n	800ce78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce66:	68f9      	ldr	r1, [r7, #12]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	3316      	adds	r3, #22
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	e00b      	b.n	800ce90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce78:	78fb      	ldrb	r3, [r7, #3]
 800ce7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce7e:	68f9      	ldr	r1, [r7, #12]
 800ce80:	4613      	mov	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	4413      	add	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	440b      	add	r3, r1
 800ce8a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ce8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f8 ffb8 	bl	8005e30 <HAL_PCD_SetAddress>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 f874 	bl	800cfb4 <USBD_Get_USB_Status>
 800cecc:	4603      	mov	r3, r0
 800cece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b086      	sub	sp, #24
 800cede:	af00      	add	r7, sp, #0
 800cee0:	60f8      	str	r0, [r7, #12]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
 800cee6:	460b      	mov	r3, r1
 800cee8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cef8:	7af9      	ldrb	r1, [r7, #11]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	f7f9 f8c2 	bl	8006086 <HAL_PCD_EP_Transmit>
 800cf02:	4603      	mov	r3, r0
 800cf04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf06:	7dfb      	ldrb	r3, [r7, #23]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 f853 	bl	800cfb4 <USBD_Get_USB_Status>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf12:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	607a      	str	r2, [r7, #4]
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cf3a:	7af9      	ldrb	r1, [r7, #11]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	f7f9 f84e 	bl	8005fe0 <HAL_PCD_EP_Receive>
 800cf44:	4603      	mov	r3, r0
 800cf46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf48:	7dfb      	ldrb	r3, [r7, #23]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 f832 	bl	800cfb4 <USBD_Get_USB_Status>
 800cf50:	4603      	mov	r3, r0
 800cf52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf54:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf70:	78fa      	ldrb	r2, [r7, #3]
 800cf72:	4611      	mov	r1, r2
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7f9 f86e 	bl	8006056 <HAL_PCD_EP_GetRxCount>
 800cf7a:	4603      	mov	r3, r0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf8c:	4b03      	ldr	r3, [pc, #12]	@ (800cf9c <USBD_static_malloc+0x18>)
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	20001f68 	.word	0x20001f68

0800cfa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]

}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4603      	mov	r3, r0
 800cfbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cfc2:	79fb      	ldrb	r3, [r7, #7]
 800cfc4:	2b03      	cmp	r3, #3
 800cfc6:	d817      	bhi.n	800cff8 <USBD_Get_USB_Status+0x44>
 800cfc8:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd0 <USBD_Get_USB_Status+0x1c>)
 800cfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfce:	bf00      	nop
 800cfd0:	0800cfe1 	.word	0x0800cfe1
 800cfd4:	0800cfe7 	.word	0x0800cfe7
 800cfd8:	0800cfed 	.word	0x0800cfed
 800cfdc:	0800cff3 	.word	0x0800cff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfe4:	e00b      	b.n	800cffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	73fb      	strb	r3, [r7, #15]
    break;
 800cfea:	e008      	b.n	800cffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfec:	2301      	movs	r3, #1
 800cfee:	73fb      	strb	r3, [r7, #15]
    break;
 800cff0:	e005      	b.n	800cffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cff2:	2303      	movs	r3, #3
 800cff4:	73fb      	strb	r3, [r7, #15]
    break;
 800cff6:	e002      	b.n	800cffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cff8:	2303      	movs	r3, #3
 800cffa:	73fb      	strb	r3, [r7, #15]
    break;
 800cffc:	bf00      	nop
  }
  return usb_status;
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3714      	adds	r7, #20
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <__cvt>:
 800d00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d010:	ec57 6b10 	vmov	r6, r7, d0
 800d014:	2f00      	cmp	r7, #0
 800d016:	460c      	mov	r4, r1
 800d018:	4619      	mov	r1, r3
 800d01a:	463b      	mov	r3, r7
 800d01c:	bfbb      	ittet	lt
 800d01e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d022:	461f      	movlt	r7, r3
 800d024:	2300      	movge	r3, #0
 800d026:	232d      	movlt	r3, #45	@ 0x2d
 800d028:	700b      	strb	r3, [r1, #0]
 800d02a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d02c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d030:	4691      	mov	r9, r2
 800d032:	f023 0820 	bic.w	r8, r3, #32
 800d036:	bfbc      	itt	lt
 800d038:	4632      	movlt	r2, r6
 800d03a:	4616      	movlt	r6, r2
 800d03c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d040:	d005      	beq.n	800d04e <__cvt+0x42>
 800d042:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d046:	d100      	bne.n	800d04a <__cvt+0x3e>
 800d048:	3401      	adds	r4, #1
 800d04a:	2102      	movs	r1, #2
 800d04c:	e000      	b.n	800d050 <__cvt+0x44>
 800d04e:	2103      	movs	r1, #3
 800d050:	ab03      	add	r3, sp, #12
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	ab02      	add	r3, sp, #8
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	ec47 6b10 	vmov	d0, r6, r7
 800d05c:	4653      	mov	r3, sl
 800d05e:	4622      	mov	r2, r4
 800d060:	f000 fe6e 	bl	800dd40 <_dtoa_r>
 800d064:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d068:	4605      	mov	r5, r0
 800d06a:	d119      	bne.n	800d0a0 <__cvt+0x94>
 800d06c:	f019 0f01 	tst.w	r9, #1
 800d070:	d00e      	beq.n	800d090 <__cvt+0x84>
 800d072:	eb00 0904 	add.w	r9, r0, r4
 800d076:	2200      	movs	r2, #0
 800d078:	2300      	movs	r3, #0
 800d07a:	4630      	mov	r0, r6
 800d07c:	4639      	mov	r1, r7
 800d07e:	f7f3 fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 800d082:	b108      	cbz	r0, 800d088 <__cvt+0x7c>
 800d084:	f8cd 900c 	str.w	r9, [sp, #12]
 800d088:	2230      	movs	r2, #48	@ 0x30
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	454b      	cmp	r3, r9
 800d08e:	d31e      	bcc.n	800d0ce <__cvt+0xc2>
 800d090:	9b03      	ldr	r3, [sp, #12]
 800d092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d094:	1b5b      	subs	r3, r3, r5
 800d096:	4628      	mov	r0, r5
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	b004      	add	sp, #16
 800d09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d0a4:	eb00 0904 	add.w	r9, r0, r4
 800d0a8:	d1e5      	bne.n	800d076 <__cvt+0x6a>
 800d0aa:	7803      	ldrb	r3, [r0, #0]
 800d0ac:	2b30      	cmp	r3, #48	@ 0x30
 800d0ae:	d10a      	bne.n	800d0c6 <__cvt+0xba>
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	4639      	mov	r1, r7
 800d0b8:	f7f3 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0bc:	b918      	cbnz	r0, 800d0c6 <__cvt+0xba>
 800d0be:	f1c4 0401 	rsb	r4, r4, #1
 800d0c2:	f8ca 4000 	str.w	r4, [sl]
 800d0c6:	f8da 3000 	ldr.w	r3, [sl]
 800d0ca:	4499      	add	r9, r3
 800d0cc:	e7d3      	b.n	800d076 <__cvt+0x6a>
 800d0ce:	1c59      	adds	r1, r3, #1
 800d0d0:	9103      	str	r1, [sp, #12]
 800d0d2:	701a      	strb	r2, [r3, #0]
 800d0d4:	e7d9      	b.n	800d08a <__cvt+0x7e>

0800d0d6 <__exponent>:
 800d0d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0d8:	2900      	cmp	r1, #0
 800d0da:	bfba      	itte	lt
 800d0dc:	4249      	neglt	r1, r1
 800d0de:	232d      	movlt	r3, #45	@ 0x2d
 800d0e0:	232b      	movge	r3, #43	@ 0x2b
 800d0e2:	2909      	cmp	r1, #9
 800d0e4:	7002      	strb	r2, [r0, #0]
 800d0e6:	7043      	strb	r3, [r0, #1]
 800d0e8:	dd29      	ble.n	800d13e <__exponent+0x68>
 800d0ea:	f10d 0307 	add.w	r3, sp, #7
 800d0ee:	461d      	mov	r5, r3
 800d0f0:	270a      	movs	r7, #10
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d0f8:	fb07 1416 	mls	r4, r7, r6, r1
 800d0fc:	3430      	adds	r4, #48	@ 0x30
 800d0fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d102:	460c      	mov	r4, r1
 800d104:	2c63      	cmp	r4, #99	@ 0x63
 800d106:	f103 33ff 	add.w	r3, r3, #4294967295
 800d10a:	4631      	mov	r1, r6
 800d10c:	dcf1      	bgt.n	800d0f2 <__exponent+0x1c>
 800d10e:	3130      	adds	r1, #48	@ 0x30
 800d110:	1e94      	subs	r4, r2, #2
 800d112:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d116:	1c41      	adds	r1, r0, #1
 800d118:	4623      	mov	r3, r4
 800d11a:	42ab      	cmp	r3, r5
 800d11c:	d30a      	bcc.n	800d134 <__exponent+0x5e>
 800d11e:	f10d 0309 	add.w	r3, sp, #9
 800d122:	1a9b      	subs	r3, r3, r2
 800d124:	42ac      	cmp	r4, r5
 800d126:	bf88      	it	hi
 800d128:	2300      	movhi	r3, #0
 800d12a:	3302      	adds	r3, #2
 800d12c:	4403      	add	r3, r0
 800d12e:	1a18      	subs	r0, r3, r0
 800d130:	b003      	add	sp, #12
 800d132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d134:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d138:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d13c:	e7ed      	b.n	800d11a <__exponent+0x44>
 800d13e:	2330      	movs	r3, #48	@ 0x30
 800d140:	3130      	adds	r1, #48	@ 0x30
 800d142:	7083      	strb	r3, [r0, #2]
 800d144:	70c1      	strb	r1, [r0, #3]
 800d146:	1d03      	adds	r3, r0, #4
 800d148:	e7f1      	b.n	800d12e <__exponent+0x58>
	...

0800d14c <_printf_float>:
 800d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	b08d      	sub	sp, #52	@ 0x34
 800d152:	460c      	mov	r4, r1
 800d154:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d158:	4616      	mov	r6, r2
 800d15a:	461f      	mov	r7, r3
 800d15c:	4605      	mov	r5, r0
 800d15e:	f000 fcef 	bl	800db40 <_localeconv_r>
 800d162:	6803      	ldr	r3, [r0, #0]
 800d164:	9304      	str	r3, [sp, #16]
 800d166:	4618      	mov	r0, r3
 800d168:	f7f3 f882 	bl	8000270 <strlen>
 800d16c:	2300      	movs	r3, #0
 800d16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d170:	f8d8 3000 	ldr.w	r3, [r8]
 800d174:	9005      	str	r0, [sp, #20]
 800d176:	3307      	adds	r3, #7
 800d178:	f023 0307 	bic.w	r3, r3, #7
 800d17c:	f103 0208 	add.w	r2, r3, #8
 800d180:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d184:	f8d4 b000 	ldr.w	fp, [r4]
 800d188:	f8c8 2000 	str.w	r2, [r8]
 800d18c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d190:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d194:	9307      	str	r3, [sp, #28]
 800d196:	f8cd 8018 	str.w	r8, [sp, #24]
 800d19a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d19e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1a2:	4b9c      	ldr	r3, [pc, #624]	@ (800d414 <_printf_float+0x2c8>)
 800d1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a8:	f7f3 fcc0 	bl	8000b2c <__aeabi_dcmpun>
 800d1ac:	bb70      	cbnz	r0, 800d20c <_printf_float+0xc0>
 800d1ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1b2:	4b98      	ldr	r3, [pc, #608]	@ (800d414 <_printf_float+0x2c8>)
 800d1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b8:	f7f3 fc9a 	bl	8000af0 <__aeabi_dcmple>
 800d1bc:	bb30      	cbnz	r0, 800d20c <_printf_float+0xc0>
 800d1be:	2200      	movs	r2, #0
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4640      	mov	r0, r8
 800d1c4:	4649      	mov	r1, r9
 800d1c6:	f7f3 fc89 	bl	8000adc <__aeabi_dcmplt>
 800d1ca:	b110      	cbz	r0, 800d1d2 <_printf_float+0x86>
 800d1cc:	232d      	movs	r3, #45	@ 0x2d
 800d1ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1d2:	4a91      	ldr	r2, [pc, #580]	@ (800d418 <_printf_float+0x2cc>)
 800d1d4:	4b91      	ldr	r3, [pc, #580]	@ (800d41c <_printf_float+0x2d0>)
 800d1d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d1da:	bf94      	ite	ls
 800d1dc:	4690      	movls	r8, r2
 800d1de:	4698      	movhi	r8, r3
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	6123      	str	r3, [r4, #16]
 800d1e4:	f02b 0304 	bic.w	r3, fp, #4
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	f04f 0900 	mov.w	r9, #0
 800d1ee:	9700      	str	r7, [sp, #0]
 800d1f0:	4633      	mov	r3, r6
 800d1f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f000 f9d2 	bl	800d5a0 <_printf_common>
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	f040 808d 	bne.w	800d31c <_printf_float+0x1d0>
 800d202:	f04f 30ff 	mov.w	r0, #4294967295
 800d206:	b00d      	add	sp, #52	@ 0x34
 800d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20c:	4642      	mov	r2, r8
 800d20e:	464b      	mov	r3, r9
 800d210:	4640      	mov	r0, r8
 800d212:	4649      	mov	r1, r9
 800d214:	f7f3 fc8a 	bl	8000b2c <__aeabi_dcmpun>
 800d218:	b140      	cbz	r0, 800d22c <_printf_float+0xe0>
 800d21a:	464b      	mov	r3, r9
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	bfbc      	itt	lt
 800d220:	232d      	movlt	r3, #45	@ 0x2d
 800d222:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d226:	4a7e      	ldr	r2, [pc, #504]	@ (800d420 <_printf_float+0x2d4>)
 800d228:	4b7e      	ldr	r3, [pc, #504]	@ (800d424 <_printf_float+0x2d8>)
 800d22a:	e7d4      	b.n	800d1d6 <_printf_float+0x8a>
 800d22c:	6863      	ldr	r3, [r4, #4]
 800d22e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d232:	9206      	str	r2, [sp, #24]
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	d13b      	bne.n	800d2b0 <_printf_float+0x164>
 800d238:	2306      	movs	r3, #6
 800d23a:	6063      	str	r3, [r4, #4]
 800d23c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d240:	2300      	movs	r3, #0
 800d242:	6022      	str	r2, [r4, #0]
 800d244:	9303      	str	r3, [sp, #12]
 800d246:	ab0a      	add	r3, sp, #40	@ 0x28
 800d248:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d24c:	ab09      	add	r3, sp, #36	@ 0x24
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	6861      	ldr	r1, [r4, #4]
 800d252:	ec49 8b10 	vmov	d0, r8, r9
 800d256:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d25a:	4628      	mov	r0, r5
 800d25c:	f7ff fed6 	bl	800d00c <__cvt>
 800d260:	9b06      	ldr	r3, [sp, #24]
 800d262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d264:	2b47      	cmp	r3, #71	@ 0x47
 800d266:	4680      	mov	r8, r0
 800d268:	d129      	bne.n	800d2be <_printf_float+0x172>
 800d26a:	1cc8      	adds	r0, r1, #3
 800d26c:	db02      	blt.n	800d274 <_printf_float+0x128>
 800d26e:	6863      	ldr	r3, [r4, #4]
 800d270:	4299      	cmp	r1, r3
 800d272:	dd41      	ble.n	800d2f8 <_printf_float+0x1ac>
 800d274:	f1aa 0a02 	sub.w	sl, sl, #2
 800d278:	fa5f fa8a 	uxtb.w	sl, sl
 800d27c:	3901      	subs	r1, #1
 800d27e:	4652      	mov	r2, sl
 800d280:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d284:	9109      	str	r1, [sp, #36]	@ 0x24
 800d286:	f7ff ff26 	bl	800d0d6 <__exponent>
 800d28a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d28c:	1813      	adds	r3, r2, r0
 800d28e:	2a01      	cmp	r2, #1
 800d290:	4681      	mov	r9, r0
 800d292:	6123      	str	r3, [r4, #16]
 800d294:	dc02      	bgt.n	800d29c <_printf_float+0x150>
 800d296:	6822      	ldr	r2, [r4, #0]
 800d298:	07d2      	lsls	r2, r2, #31
 800d29a:	d501      	bpl.n	800d2a0 <_printf_float+0x154>
 800d29c:	3301      	adds	r3, #1
 800d29e:	6123      	str	r3, [r4, #16]
 800d2a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d0a2      	beq.n	800d1ee <_printf_float+0xa2>
 800d2a8:	232d      	movs	r3, #45	@ 0x2d
 800d2aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2ae:	e79e      	b.n	800d1ee <_printf_float+0xa2>
 800d2b0:	9a06      	ldr	r2, [sp, #24]
 800d2b2:	2a47      	cmp	r2, #71	@ 0x47
 800d2b4:	d1c2      	bne.n	800d23c <_printf_float+0xf0>
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1c0      	bne.n	800d23c <_printf_float+0xf0>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e7bd      	b.n	800d23a <_printf_float+0xee>
 800d2be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d2c2:	d9db      	bls.n	800d27c <_printf_float+0x130>
 800d2c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d2c8:	d118      	bne.n	800d2fc <_printf_float+0x1b0>
 800d2ca:	2900      	cmp	r1, #0
 800d2cc:	6863      	ldr	r3, [r4, #4]
 800d2ce:	dd0b      	ble.n	800d2e8 <_printf_float+0x19c>
 800d2d0:	6121      	str	r1, [r4, #16]
 800d2d2:	b913      	cbnz	r3, 800d2da <_printf_float+0x18e>
 800d2d4:	6822      	ldr	r2, [r4, #0]
 800d2d6:	07d0      	lsls	r0, r2, #31
 800d2d8:	d502      	bpl.n	800d2e0 <_printf_float+0x194>
 800d2da:	3301      	adds	r3, #1
 800d2dc:	440b      	add	r3, r1
 800d2de:	6123      	str	r3, [r4, #16]
 800d2e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d2e2:	f04f 0900 	mov.w	r9, #0
 800d2e6:	e7db      	b.n	800d2a0 <_printf_float+0x154>
 800d2e8:	b913      	cbnz	r3, 800d2f0 <_printf_float+0x1a4>
 800d2ea:	6822      	ldr	r2, [r4, #0]
 800d2ec:	07d2      	lsls	r2, r2, #31
 800d2ee:	d501      	bpl.n	800d2f4 <_printf_float+0x1a8>
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	e7f4      	b.n	800d2de <_printf_float+0x192>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e7f2      	b.n	800d2de <_printf_float+0x192>
 800d2f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2fe:	4299      	cmp	r1, r3
 800d300:	db05      	blt.n	800d30e <_printf_float+0x1c2>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	6121      	str	r1, [r4, #16]
 800d306:	07d8      	lsls	r0, r3, #31
 800d308:	d5ea      	bpl.n	800d2e0 <_printf_float+0x194>
 800d30a:	1c4b      	adds	r3, r1, #1
 800d30c:	e7e7      	b.n	800d2de <_printf_float+0x192>
 800d30e:	2900      	cmp	r1, #0
 800d310:	bfd4      	ite	le
 800d312:	f1c1 0202 	rsble	r2, r1, #2
 800d316:	2201      	movgt	r2, #1
 800d318:	4413      	add	r3, r2
 800d31a:	e7e0      	b.n	800d2de <_printf_float+0x192>
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	055a      	lsls	r2, r3, #21
 800d320:	d407      	bmi.n	800d332 <_printf_float+0x1e6>
 800d322:	6923      	ldr	r3, [r4, #16]
 800d324:	4642      	mov	r2, r8
 800d326:	4631      	mov	r1, r6
 800d328:	4628      	mov	r0, r5
 800d32a:	47b8      	blx	r7
 800d32c:	3001      	adds	r0, #1
 800d32e:	d12b      	bne.n	800d388 <_printf_float+0x23c>
 800d330:	e767      	b.n	800d202 <_printf_float+0xb6>
 800d332:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d336:	f240 80dd 	bls.w	800d4f4 <_printf_float+0x3a8>
 800d33a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d33e:	2200      	movs	r2, #0
 800d340:	2300      	movs	r3, #0
 800d342:	f7f3 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d346:	2800      	cmp	r0, #0
 800d348:	d033      	beq.n	800d3b2 <_printf_float+0x266>
 800d34a:	4a37      	ldr	r2, [pc, #220]	@ (800d428 <_printf_float+0x2dc>)
 800d34c:	2301      	movs	r3, #1
 800d34e:	4631      	mov	r1, r6
 800d350:	4628      	mov	r0, r5
 800d352:	47b8      	blx	r7
 800d354:	3001      	adds	r0, #1
 800d356:	f43f af54 	beq.w	800d202 <_printf_float+0xb6>
 800d35a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d35e:	4543      	cmp	r3, r8
 800d360:	db02      	blt.n	800d368 <_printf_float+0x21c>
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	07d8      	lsls	r0, r3, #31
 800d366:	d50f      	bpl.n	800d388 <_printf_float+0x23c>
 800d368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	f43f af45 	beq.w	800d202 <_printf_float+0xb6>
 800d378:	f04f 0900 	mov.w	r9, #0
 800d37c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d380:	f104 0a1a 	add.w	sl, r4, #26
 800d384:	45c8      	cmp	r8, r9
 800d386:	dc09      	bgt.n	800d39c <_printf_float+0x250>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	079b      	lsls	r3, r3, #30
 800d38c:	f100 8103 	bmi.w	800d596 <_printf_float+0x44a>
 800d390:	68e0      	ldr	r0, [r4, #12]
 800d392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d394:	4298      	cmp	r0, r3
 800d396:	bfb8      	it	lt
 800d398:	4618      	movlt	r0, r3
 800d39a:	e734      	b.n	800d206 <_printf_float+0xba>
 800d39c:	2301      	movs	r3, #1
 800d39e:	4652      	mov	r2, sl
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	47b8      	blx	r7
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	f43f af2b 	beq.w	800d202 <_printf_float+0xb6>
 800d3ac:	f109 0901 	add.w	r9, r9, #1
 800d3b0:	e7e8      	b.n	800d384 <_printf_float+0x238>
 800d3b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dc39      	bgt.n	800d42c <_printf_float+0x2e0>
 800d3b8:	4a1b      	ldr	r2, [pc, #108]	@ (800d428 <_printf_float+0x2dc>)
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4628      	mov	r0, r5
 800d3c0:	47b8      	blx	r7
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f43f af1d 	beq.w	800d202 <_printf_float+0xb6>
 800d3c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d3cc:	ea59 0303 	orrs.w	r3, r9, r3
 800d3d0:	d102      	bne.n	800d3d8 <_printf_float+0x28c>
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	07d9      	lsls	r1, r3, #31
 800d3d6:	d5d7      	bpl.n	800d388 <_printf_float+0x23c>
 800d3d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b8      	blx	r7
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	f43f af0d 	beq.w	800d202 <_printf_float+0xb6>
 800d3e8:	f04f 0a00 	mov.w	sl, #0
 800d3ec:	f104 0b1a 	add.w	fp, r4, #26
 800d3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f2:	425b      	negs	r3, r3
 800d3f4:	4553      	cmp	r3, sl
 800d3f6:	dc01      	bgt.n	800d3fc <_printf_float+0x2b0>
 800d3f8:	464b      	mov	r3, r9
 800d3fa:	e793      	b.n	800d324 <_printf_float+0x1d8>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	465a      	mov	r2, fp
 800d400:	4631      	mov	r1, r6
 800d402:	4628      	mov	r0, r5
 800d404:	47b8      	blx	r7
 800d406:	3001      	adds	r0, #1
 800d408:	f43f aefb 	beq.w	800d202 <_printf_float+0xb6>
 800d40c:	f10a 0a01 	add.w	sl, sl, #1
 800d410:	e7ee      	b.n	800d3f0 <_printf_float+0x2a4>
 800d412:	bf00      	nop
 800d414:	7fefffff 	.word	0x7fefffff
 800d418:	08010238 	.word	0x08010238
 800d41c:	0801023c 	.word	0x0801023c
 800d420:	08010240 	.word	0x08010240
 800d424:	08010244 	.word	0x08010244
 800d428:	08010248 	.word	0x08010248
 800d42c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d42e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d432:	4553      	cmp	r3, sl
 800d434:	bfa8      	it	ge
 800d436:	4653      	movge	r3, sl
 800d438:	2b00      	cmp	r3, #0
 800d43a:	4699      	mov	r9, r3
 800d43c:	dc36      	bgt.n	800d4ac <_printf_float+0x360>
 800d43e:	f04f 0b00 	mov.w	fp, #0
 800d442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d446:	f104 021a 	add.w	r2, r4, #26
 800d44a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d44c:	9306      	str	r3, [sp, #24]
 800d44e:	eba3 0309 	sub.w	r3, r3, r9
 800d452:	455b      	cmp	r3, fp
 800d454:	dc31      	bgt.n	800d4ba <_printf_float+0x36e>
 800d456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d458:	459a      	cmp	sl, r3
 800d45a:	dc3a      	bgt.n	800d4d2 <_printf_float+0x386>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	07da      	lsls	r2, r3, #31
 800d460:	d437      	bmi.n	800d4d2 <_printf_float+0x386>
 800d462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d464:	ebaa 0903 	sub.w	r9, sl, r3
 800d468:	9b06      	ldr	r3, [sp, #24]
 800d46a:	ebaa 0303 	sub.w	r3, sl, r3
 800d46e:	4599      	cmp	r9, r3
 800d470:	bfa8      	it	ge
 800d472:	4699      	movge	r9, r3
 800d474:	f1b9 0f00 	cmp.w	r9, #0
 800d478:	dc33      	bgt.n	800d4e2 <_printf_float+0x396>
 800d47a:	f04f 0800 	mov.w	r8, #0
 800d47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d482:	f104 0b1a 	add.w	fp, r4, #26
 800d486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d488:	ebaa 0303 	sub.w	r3, sl, r3
 800d48c:	eba3 0309 	sub.w	r3, r3, r9
 800d490:	4543      	cmp	r3, r8
 800d492:	f77f af79 	ble.w	800d388 <_printf_float+0x23c>
 800d496:	2301      	movs	r3, #1
 800d498:	465a      	mov	r2, fp
 800d49a:	4631      	mov	r1, r6
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b8      	blx	r7
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f43f aeae 	beq.w	800d202 <_printf_float+0xb6>
 800d4a6:	f108 0801 	add.w	r8, r8, #1
 800d4aa:	e7ec      	b.n	800d486 <_printf_float+0x33a>
 800d4ac:	4642      	mov	r2, r8
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	47b8      	blx	r7
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d1c2      	bne.n	800d43e <_printf_float+0x2f2>
 800d4b8:	e6a3      	b.n	800d202 <_printf_float+0xb6>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4631      	mov	r1, r6
 800d4be:	4628      	mov	r0, r5
 800d4c0:	9206      	str	r2, [sp, #24]
 800d4c2:	47b8      	blx	r7
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	f43f ae9c 	beq.w	800d202 <_printf_float+0xb6>
 800d4ca:	9a06      	ldr	r2, [sp, #24]
 800d4cc:	f10b 0b01 	add.w	fp, fp, #1
 800d4d0:	e7bb      	b.n	800d44a <_printf_float+0x2fe>
 800d4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	4628      	mov	r0, r5
 800d4da:	47b8      	blx	r7
 800d4dc:	3001      	adds	r0, #1
 800d4de:	d1c0      	bne.n	800d462 <_printf_float+0x316>
 800d4e0:	e68f      	b.n	800d202 <_printf_float+0xb6>
 800d4e2:	9a06      	ldr	r2, [sp, #24]
 800d4e4:	464b      	mov	r3, r9
 800d4e6:	4442      	add	r2, r8
 800d4e8:	4631      	mov	r1, r6
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	47b8      	blx	r7
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d1c3      	bne.n	800d47a <_printf_float+0x32e>
 800d4f2:	e686      	b.n	800d202 <_printf_float+0xb6>
 800d4f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d4f8:	f1ba 0f01 	cmp.w	sl, #1
 800d4fc:	dc01      	bgt.n	800d502 <_printf_float+0x3b6>
 800d4fe:	07db      	lsls	r3, r3, #31
 800d500:	d536      	bpl.n	800d570 <_printf_float+0x424>
 800d502:	2301      	movs	r3, #1
 800d504:	4642      	mov	r2, r8
 800d506:	4631      	mov	r1, r6
 800d508:	4628      	mov	r0, r5
 800d50a:	47b8      	blx	r7
 800d50c:	3001      	adds	r0, #1
 800d50e:	f43f ae78 	beq.w	800d202 <_printf_float+0xb6>
 800d512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d516:	4631      	mov	r1, r6
 800d518:	4628      	mov	r0, r5
 800d51a:	47b8      	blx	r7
 800d51c:	3001      	adds	r0, #1
 800d51e:	f43f ae70 	beq.w	800d202 <_printf_float+0xb6>
 800d522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d526:	2200      	movs	r2, #0
 800d528:	2300      	movs	r3, #0
 800d52a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d52e:	f7f3 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d532:	b9c0      	cbnz	r0, 800d566 <_printf_float+0x41a>
 800d534:	4653      	mov	r3, sl
 800d536:	f108 0201 	add.w	r2, r8, #1
 800d53a:	4631      	mov	r1, r6
 800d53c:	4628      	mov	r0, r5
 800d53e:	47b8      	blx	r7
 800d540:	3001      	adds	r0, #1
 800d542:	d10c      	bne.n	800d55e <_printf_float+0x412>
 800d544:	e65d      	b.n	800d202 <_printf_float+0xb6>
 800d546:	2301      	movs	r3, #1
 800d548:	465a      	mov	r2, fp
 800d54a:	4631      	mov	r1, r6
 800d54c:	4628      	mov	r0, r5
 800d54e:	47b8      	blx	r7
 800d550:	3001      	adds	r0, #1
 800d552:	f43f ae56 	beq.w	800d202 <_printf_float+0xb6>
 800d556:	f108 0801 	add.w	r8, r8, #1
 800d55a:	45d0      	cmp	r8, sl
 800d55c:	dbf3      	blt.n	800d546 <_printf_float+0x3fa>
 800d55e:	464b      	mov	r3, r9
 800d560:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d564:	e6df      	b.n	800d326 <_printf_float+0x1da>
 800d566:	f04f 0800 	mov.w	r8, #0
 800d56a:	f104 0b1a 	add.w	fp, r4, #26
 800d56e:	e7f4      	b.n	800d55a <_printf_float+0x40e>
 800d570:	2301      	movs	r3, #1
 800d572:	4642      	mov	r2, r8
 800d574:	e7e1      	b.n	800d53a <_printf_float+0x3ee>
 800d576:	2301      	movs	r3, #1
 800d578:	464a      	mov	r2, r9
 800d57a:	4631      	mov	r1, r6
 800d57c:	4628      	mov	r0, r5
 800d57e:	47b8      	blx	r7
 800d580:	3001      	adds	r0, #1
 800d582:	f43f ae3e 	beq.w	800d202 <_printf_float+0xb6>
 800d586:	f108 0801 	add.w	r8, r8, #1
 800d58a:	68e3      	ldr	r3, [r4, #12]
 800d58c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d58e:	1a5b      	subs	r3, r3, r1
 800d590:	4543      	cmp	r3, r8
 800d592:	dcf0      	bgt.n	800d576 <_printf_float+0x42a>
 800d594:	e6fc      	b.n	800d390 <_printf_float+0x244>
 800d596:	f04f 0800 	mov.w	r8, #0
 800d59a:	f104 0919 	add.w	r9, r4, #25
 800d59e:	e7f4      	b.n	800d58a <_printf_float+0x43e>

0800d5a0 <_printf_common>:
 800d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a4:	4616      	mov	r6, r2
 800d5a6:	4698      	mov	r8, r3
 800d5a8:	688a      	ldr	r2, [r1, #8]
 800d5aa:	690b      	ldr	r3, [r1, #16]
 800d5ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	bfb8      	it	lt
 800d5b4:	4613      	movlt	r3, r2
 800d5b6:	6033      	str	r3, [r6, #0]
 800d5b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5bc:	4607      	mov	r7, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	b10a      	cbz	r2, 800d5c6 <_printf_common+0x26>
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	6033      	str	r3, [r6, #0]
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	0699      	lsls	r1, r3, #26
 800d5ca:	bf42      	ittt	mi
 800d5cc:	6833      	ldrmi	r3, [r6, #0]
 800d5ce:	3302      	addmi	r3, #2
 800d5d0:	6033      	strmi	r3, [r6, #0]
 800d5d2:	6825      	ldr	r5, [r4, #0]
 800d5d4:	f015 0506 	ands.w	r5, r5, #6
 800d5d8:	d106      	bne.n	800d5e8 <_printf_common+0x48>
 800d5da:	f104 0a19 	add.w	sl, r4, #25
 800d5de:	68e3      	ldr	r3, [r4, #12]
 800d5e0:	6832      	ldr	r2, [r6, #0]
 800d5e2:	1a9b      	subs	r3, r3, r2
 800d5e4:	42ab      	cmp	r3, r5
 800d5e6:	dc26      	bgt.n	800d636 <_printf_common+0x96>
 800d5e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5ec:	6822      	ldr	r2, [r4, #0]
 800d5ee:	3b00      	subs	r3, #0
 800d5f0:	bf18      	it	ne
 800d5f2:	2301      	movne	r3, #1
 800d5f4:	0692      	lsls	r2, r2, #26
 800d5f6:	d42b      	bmi.n	800d650 <_printf_common+0xb0>
 800d5f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5fc:	4641      	mov	r1, r8
 800d5fe:	4638      	mov	r0, r7
 800d600:	47c8      	blx	r9
 800d602:	3001      	adds	r0, #1
 800d604:	d01e      	beq.n	800d644 <_printf_common+0xa4>
 800d606:	6823      	ldr	r3, [r4, #0]
 800d608:	6922      	ldr	r2, [r4, #16]
 800d60a:	f003 0306 	and.w	r3, r3, #6
 800d60e:	2b04      	cmp	r3, #4
 800d610:	bf02      	ittt	eq
 800d612:	68e5      	ldreq	r5, [r4, #12]
 800d614:	6833      	ldreq	r3, [r6, #0]
 800d616:	1aed      	subeq	r5, r5, r3
 800d618:	68a3      	ldr	r3, [r4, #8]
 800d61a:	bf0c      	ite	eq
 800d61c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d620:	2500      	movne	r5, #0
 800d622:	4293      	cmp	r3, r2
 800d624:	bfc4      	itt	gt
 800d626:	1a9b      	subgt	r3, r3, r2
 800d628:	18ed      	addgt	r5, r5, r3
 800d62a:	2600      	movs	r6, #0
 800d62c:	341a      	adds	r4, #26
 800d62e:	42b5      	cmp	r5, r6
 800d630:	d11a      	bne.n	800d668 <_printf_common+0xc8>
 800d632:	2000      	movs	r0, #0
 800d634:	e008      	b.n	800d648 <_printf_common+0xa8>
 800d636:	2301      	movs	r3, #1
 800d638:	4652      	mov	r2, sl
 800d63a:	4641      	mov	r1, r8
 800d63c:	4638      	mov	r0, r7
 800d63e:	47c8      	blx	r9
 800d640:	3001      	adds	r0, #1
 800d642:	d103      	bne.n	800d64c <_printf_common+0xac>
 800d644:	f04f 30ff 	mov.w	r0, #4294967295
 800d648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64c:	3501      	adds	r5, #1
 800d64e:	e7c6      	b.n	800d5de <_printf_common+0x3e>
 800d650:	18e1      	adds	r1, r4, r3
 800d652:	1c5a      	adds	r2, r3, #1
 800d654:	2030      	movs	r0, #48	@ 0x30
 800d656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d65a:	4422      	add	r2, r4
 800d65c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d664:	3302      	adds	r3, #2
 800d666:	e7c7      	b.n	800d5f8 <_printf_common+0x58>
 800d668:	2301      	movs	r3, #1
 800d66a:	4622      	mov	r2, r4
 800d66c:	4641      	mov	r1, r8
 800d66e:	4638      	mov	r0, r7
 800d670:	47c8      	blx	r9
 800d672:	3001      	adds	r0, #1
 800d674:	d0e6      	beq.n	800d644 <_printf_common+0xa4>
 800d676:	3601      	adds	r6, #1
 800d678:	e7d9      	b.n	800d62e <_printf_common+0x8e>
	...

0800d67c <_printf_i>:
 800d67c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d680:	7e0f      	ldrb	r7, [r1, #24]
 800d682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d684:	2f78      	cmp	r7, #120	@ 0x78
 800d686:	4691      	mov	r9, r2
 800d688:	4680      	mov	r8, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	469a      	mov	sl, r3
 800d68e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d692:	d807      	bhi.n	800d6a4 <_printf_i+0x28>
 800d694:	2f62      	cmp	r7, #98	@ 0x62
 800d696:	d80a      	bhi.n	800d6ae <_printf_i+0x32>
 800d698:	2f00      	cmp	r7, #0
 800d69a:	f000 80d2 	beq.w	800d842 <_printf_i+0x1c6>
 800d69e:	2f58      	cmp	r7, #88	@ 0x58
 800d6a0:	f000 80b9 	beq.w	800d816 <_printf_i+0x19a>
 800d6a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6ac:	e03a      	b.n	800d724 <_printf_i+0xa8>
 800d6ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6b2:	2b15      	cmp	r3, #21
 800d6b4:	d8f6      	bhi.n	800d6a4 <_printf_i+0x28>
 800d6b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d6bc <_printf_i+0x40>)
 800d6b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6bc:	0800d715 	.word	0x0800d715
 800d6c0:	0800d729 	.word	0x0800d729
 800d6c4:	0800d6a5 	.word	0x0800d6a5
 800d6c8:	0800d6a5 	.word	0x0800d6a5
 800d6cc:	0800d6a5 	.word	0x0800d6a5
 800d6d0:	0800d6a5 	.word	0x0800d6a5
 800d6d4:	0800d729 	.word	0x0800d729
 800d6d8:	0800d6a5 	.word	0x0800d6a5
 800d6dc:	0800d6a5 	.word	0x0800d6a5
 800d6e0:	0800d6a5 	.word	0x0800d6a5
 800d6e4:	0800d6a5 	.word	0x0800d6a5
 800d6e8:	0800d829 	.word	0x0800d829
 800d6ec:	0800d753 	.word	0x0800d753
 800d6f0:	0800d7e3 	.word	0x0800d7e3
 800d6f4:	0800d6a5 	.word	0x0800d6a5
 800d6f8:	0800d6a5 	.word	0x0800d6a5
 800d6fc:	0800d84b 	.word	0x0800d84b
 800d700:	0800d6a5 	.word	0x0800d6a5
 800d704:	0800d753 	.word	0x0800d753
 800d708:	0800d6a5 	.word	0x0800d6a5
 800d70c:	0800d6a5 	.word	0x0800d6a5
 800d710:	0800d7eb 	.word	0x0800d7eb
 800d714:	6833      	ldr	r3, [r6, #0]
 800d716:	1d1a      	adds	r2, r3, #4
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	6032      	str	r2, [r6, #0]
 800d71c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d724:	2301      	movs	r3, #1
 800d726:	e09d      	b.n	800d864 <_printf_i+0x1e8>
 800d728:	6833      	ldr	r3, [r6, #0]
 800d72a:	6820      	ldr	r0, [r4, #0]
 800d72c:	1d19      	adds	r1, r3, #4
 800d72e:	6031      	str	r1, [r6, #0]
 800d730:	0606      	lsls	r6, r0, #24
 800d732:	d501      	bpl.n	800d738 <_printf_i+0xbc>
 800d734:	681d      	ldr	r5, [r3, #0]
 800d736:	e003      	b.n	800d740 <_printf_i+0xc4>
 800d738:	0645      	lsls	r5, r0, #25
 800d73a:	d5fb      	bpl.n	800d734 <_printf_i+0xb8>
 800d73c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d740:	2d00      	cmp	r5, #0
 800d742:	da03      	bge.n	800d74c <_printf_i+0xd0>
 800d744:	232d      	movs	r3, #45	@ 0x2d
 800d746:	426d      	negs	r5, r5
 800d748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d74c:	4859      	ldr	r0, [pc, #356]	@ (800d8b4 <_printf_i+0x238>)
 800d74e:	230a      	movs	r3, #10
 800d750:	e011      	b.n	800d776 <_printf_i+0xfa>
 800d752:	6821      	ldr	r1, [r4, #0]
 800d754:	6833      	ldr	r3, [r6, #0]
 800d756:	0608      	lsls	r0, r1, #24
 800d758:	f853 5b04 	ldr.w	r5, [r3], #4
 800d75c:	d402      	bmi.n	800d764 <_printf_i+0xe8>
 800d75e:	0649      	lsls	r1, r1, #25
 800d760:	bf48      	it	mi
 800d762:	b2ad      	uxthmi	r5, r5
 800d764:	2f6f      	cmp	r7, #111	@ 0x6f
 800d766:	4853      	ldr	r0, [pc, #332]	@ (800d8b4 <_printf_i+0x238>)
 800d768:	6033      	str	r3, [r6, #0]
 800d76a:	bf14      	ite	ne
 800d76c:	230a      	movne	r3, #10
 800d76e:	2308      	moveq	r3, #8
 800d770:	2100      	movs	r1, #0
 800d772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d776:	6866      	ldr	r6, [r4, #4]
 800d778:	60a6      	str	r6, [r4, #8]
 800d77a:	2e00      	cmp	r6, #0
 800d77c:	bfa2      	ittt	ge
 800d77e:	6821      	ldrge	r1, [r4, #0]
 800d780:	f021 0104 	bicge.w	r1, r1, #4
 800d784:	6021      	strge	r1, [r4, #0]
 800d786:	b90d      	cbnz	r5, 800d78c <_printf_i+0x110>
 800d788:	2e00      	cmp	r6, #0
 800d78a:	d04b      	beq.n	800d824 <_printf_i+0x1a8>
 800d78c:	4616      	mov	r6, r2
 800d78e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d792:	fb03 5711 	mls	r7, r3, r1, r5
 800d796:	5dc7      	ldrb	r7, [r0, r7]
 800d798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d79c:	462f      	mov	r7, r5
 800d79e:	42bb      	cmp	r3, r7
 800d7a0:	460d      	mov	r5, r1
 800d7a2:	d9f4      	bls.n	800d78e <_printf_i+0x112>
 800d7a4:	2b08      	cmp	r3, #8
 800d7a6:	d10b      	bne.n	800d7c0 <_printf_i+0x144>
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	07df      	lsls	r7, r3, #31
 800d7ac:	d508      	bpl.n	800d7c0 <_printf_i+0x144>
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	6861      	ldr	r1, [r4, #4]
 800d7b2:	4299      	cmp	r1, r3
 800d7b4:	bfde      	ittt	le
 800d7b6:	2330      	movle	r3, #48	@ 0x30
 800d7b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7c0:	1b92      	subs	r2, r2, r6
 800d7c2:	6122      	str	r2, [r4, #16]
 800d7c4:	f8cd a000 	str.w	sl, [sp]
 800d7c8:	464b      	mov	r3, r9
 800d7ca:	aa03      	add	r2, sp, #12
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	f7ff fee6 	bl	800d5a0 <_printf_common>
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d14a      	bne.n	800d86e <_printf_i+0x1f2>
 800d7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7dc:	b004      	add	sp, #16
 800d7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	f043 0320 	orr.w	r3, r3, #32
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	4833      	ldr	r0, [pc, #204]	@ (800d8b8 <_printf_i+0x23c>)
 800d7ec:	2778      	movs	r7, #120	@ 0x78
 800d7ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	6831      	ldr	r1, [r6, #0]
 800d7f6:	061f      	lsls	r7, r3, #24
 800d7f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7fc:	d402      	bmi.n	800d804 <_printf_i+0x188>
 800d7fe:	065f      	lsls	r7, r3, #25
 800d800:	bf48      	it	mi
 800d802:	b2ad      	uxthmi	r5, r5
 800d804:	6031      	str	r1, [r6, #0]
 800d806:	07d9      	lsls	r1, r3, #31
 800d808:	bf44      	itt	mi
 800d80a:	f043 0320 	orrmi.w	r3, r3, #32
 800d80e:	6023      	strmi	r3, [r4, #0]
 800d810:	b11d      	cbz	r5, 800d81a <_printf_i+0x19e>
 800d812:	2310      	movs	r3, #16
 800d814:	e7ac      	b.n	800d770 <_printf_i+0xf4>
 800d816:	4827      	ldr	r0, [pc, #156]	@ (800d8b4 <_printf_i+0x238>)
 800d818:	e7e9      	b.n	800d7ee <_printf_i+0x172>
 800d81a:	6823      	ldr	r3, [r4, #0]
 800d81c:	f023 0320 	bic.w	r3, r3, #32
 800d820:	6023      	str	r3, [r4, #0]
 800d822:	e7f6      	b.n	800d812 <_printf_i+0x196>
 800d824:	4616      	mov	r6, r2
 800d826:	e7bd      	b.n	800d7a4 <_printf_i+0x128>
 800d828:	6833      	ldr	r3, [r6, #0]
 800d82a:	6825      	ldr	r5, [r4, #0]
 800d82c:	6961      	ldr	r1, [r4, #20]
 800d82e:	1d18      	adds	r0, r3, #4
 800d830:	6030      	str	r0, [r6, #0]
 800d832:	062e      	lsls	r6, r5, #24
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	d501      	bpl.n	800d83c <_printf_i+0x1c0>
 800d838:	6019      	str	r1, [r3, #0]
 800d83a:	e002      	b.n	800d842 <_printf_i+0x1c6>
 800d83c:	0668      	lsls	r0, r5, #25
 800d83e:	d5fb      	bpl.n	800d838 <_printf_i+0x1bc>
 800d840:	8019      	strh	r1, [r3, #0]
 800d842:	2300      	movs	r3, #0
 800d844:	6123      	str	r3, [r4, #16]
 800d846:	4616      	mov	r6, r2
 800d848:	e7bc      	b.n	800d7c4 <_printf_i+0x148>
 800d84a:	6833      	ldr	r3, [r6, #0]
 800d84c:	1d1a      	adds	r2, r3, #4
 800d84e:	6032      	str	r2, [r6, #0]
 800d850:	681e      	ldr	r6, [r3, #0]
 800d852:	6862      	ldr	r2, [r4, #4]
 800d854:	2100      	movs	r1, #0
 800d856:	4630      	mov	r0, r6
 800d858:	f7f2 fcba 	bl	80001d0 <memchr>
 800d85c:	b108      	cbz	r0, 800d862 <_printf_i+0x1e6>
 800d85e:	1b80      	subs	r0, r0, r6
 800d860:	6060      	str	r0, [r4, #4]
 800d862:	6863      	ldr	r3, [r4, #4]
 800d864:	6123      	str	r3, [r4, #16]
 800d866:	2300      	movs	r3, #0
 800d868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d86c:	e7aa      	b.n	800d7c4 <_printf_i+0x148>
 800d86e:	6923      	ldr	r3, [r4, #16]
 800d870:	4632      	mov	r2, r6
 800d872:	4649      	mov	r1, r9
 800d874:	4640      	mov	r0, r8
 800d876:	47d0      	blx	sl
 800d878:	3001      	adds	r0, #1
 800d87a:	d0ad      	beq.n	800d7d8 <_printf_i+0x15c>
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	079b      	lsls	r3, r3, #30
 800d880:	d413      	bmi.n	800d8aa <_printf_i+0x22e>
 800d882:	68e0      	ldr	r0, [r4, #12]
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	4298      	cmp	r0, r3
 800d888:	bfb8      	it	lt
 800d88a:	4618      	movlt	r0, r3
 800d88c:	e7a6      	b.n	800d7dc <_printf_i+0x160>
 800d88e:	2301      	movs	r3, #1
 800d890:	4632      	mov	r2, r6
 800d892:	4649      	mov	r1, r9
 800d894:	4640      	mov	r0, r8
 800d896:	47d0      	blx	sl
 800d898:	3001      	adds	r0, #1
 800d89a:	d09d      	beq.n	800d7d8 <_printf_i+0x15c>
 800d89c:	3501      	adds	r5, #1
 800d89e:	68e3      	ldr	r3, [r4, #12]
 800d8a0:	9903      	ldr	r1, [sp, #12]
 800d8a2:	1a5b      	subs	r3, r3, r1
 800d8a4:	42ab      	cmp	r3, r5
 800d8a6:	dcf2      	bgt.n	800d88e <_printf_i+0x212>
 800d8a8:	e7eb      	b.n	800d882 <_printf_i+0x206>
 800d8aa:	2500      	movs	r5, #0
 800d8ac:	f104 0619 	add.w	r6, r4, #25
 800d8b0:	e7f5      	b.n	800d89e <_printf_i+0x222>
 800d8b2:	bf00      	nop
 800d8b4:	0801024a 	.word	0x0801024a
 800d8b8:	0801025b 	.word	0x0801025b

0800d8bc <std>:
 800d8bc:	2300      	movs	r3, #0
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	e9c0 3300 	strd	r3, r3, [r0]
 800d8c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8ca:	6083      	str	r3, [r0, #8]
 800d8cc:	8181      	strh	r1, [r0, #12]
 800d8ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8d0:	81c2      	strh	r2, [r0, #14]
 800d8d2:	6183      	str	r3, [r0, #24]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	2208      	movs	r2, #8
 800d8d8:	305c      	adds	r0, #92	@ 0x5c
 800d8da:	f000 f928 	bl	800db2e <memset>
 800d8de:	4b0d      	ldr	r3, [pc, #52]	@ (800d914 <std+0x58>)
 800d8e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d918 <std+0x5c>)
 800d8e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d91c <std+0x60>)
 800d8e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d920 <std+0x64>)
 800d8ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d924 <std+0x68>)
 800d8f0:	6224      	str	r4, [r4, #32]
 800d8f2:	429c      	cmp	r4, r3
 800d8f4:	d006      	beq.n	800d904 <std+0x48>
 800d8f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d8fa:	4294      	cmp	r4, r2
 800d8fc:	d002      	beq.n	800d904 <std+0x48>
 800d8fe:	33d0      	adds	r3, #208	@ 0xd0
 800d900:	429c      	cmp	r4, r3
 800d902:	d105      	bne.n	800d910 <std+0x54>
 800d904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d90c:	f000 b98c 	b.w	800dc28 <__retarget_lock_init_recursive>
 800d910:	bd10      	pop	{r4, pc}
 800d912:	bf00      	nop
 800d914:	0800daa9 	.word	0x0800daa9
 800d918:	0800dacb 	.word	0x0800dacb
 800d91c:	0800db03 	.word	0x0800db03
 800d920:	0800db27 	.word	0x0800db27
 800d924:	20002188 	.word	0x20002188

0800d928 <stdio_exit_handler>:
 800d928:	4a02      	ldr	r2, [pc, #8]	@ (800d934 <stdio_exit_handler+0xc>)
 800d92a:	4903      	ldr	r1, [pc, #12]	@ (800d938 <stdio_exit_handler+0x10>)
 800d92c:	4803      	ldr	r0, [pc, #12]	@ (800d93c <stdio_exit_handler+0x14>)
 800d92e:	f000 b869 	b.w	800da04 <_fwalk_sglue>
 800d932:	bf00      	nop
 800d934:	20000114 	.word	0x20000114
 800d938:	0800f585 	.word	0x0800f585
 800d93c:	20000124 	.word	0x20000124

0800d940 <cleanup_stdio>:
 800d940:	6841      	ldr	r1, [r0, #4]
 800d942:	4b0c      	ldr	r3, [pc, #48]	@ (800d974 <cleanup_stdio+0x34>)
 800d944:	4299      	cmp	r1, r3
 800d946:	b510      	push	{r4, lr}
 800d948:	4604      	mov	r4, r0
 800d94a:	d001      	beq.n	800d950 <cleanup_stdio+0x10>
 800d94c:	f001 fe1a 	bl	800f584 <_fflush_r>
 800d950:	68a1      	ldr	r1, [r4, #8]
 800d952:	4b09      	ldr	r3, [pc, #36]	@ (800d978 <cleanup_stdio+0x38>)
 800d954:	4299      	cmp	r1, r3
 800d956:	d002      	beq.n	800d95e <cleanup_stdio+0x1e>
 800d958:	4620      	mov	r0, r4
 800d95a:	f001 fe13 	bl	800f584 <_fflush_r>
 800d95e:	68e1      	ldr	r1, [r4, #12]
 800d960:	4b06      	ldr	r3, [pc, #24]	@ (800d97c <cleanup_stdio+0x3c>)
 800d962:	4299      	cmp	r1, r3
 800d964:	d004      	beq.n	800d970 <cleanup_stdio+0x30>
 800d966:	4620      	mov	r0, r4
 800d968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d96c:	f001 be0a 	b.w	800f584 <_fflush_r>
 800d970:	bd10      	pop	{r4, pc}
 800d972:	bf00      	nop
 800d974:	20002188 	.word	0x20002188
 800d978:	200021f0 	.word	0x200021f0
 800d97c:	20002258 	.word	0x20002258

0800d980 <global_stdio_init.part.0>:
 800d980:	b510      	push	{r4, lr}
 800d982:	4b0b      	ldr	r3, [pc, #44]	@ (800d9b0 <global_stdio_init.part.0+0x30>)
 800d984:	4c0b      	ldr	r4, [pc, #44]	@ (800d9b4 <global_stdio_init.part.0+0x34>)
 800d986:	4a0c      	ldr	r2, [pc, #48]	@ (800d9b8 <global_stdio_init.part.0+0x38>)
 800d988:	601a      	str	r2, [r3, #0]
 800d98a:	4620      	mov	r0, r4
 800d98c:	2200      	movs	r2, #0
 800d98e:	2104      	movs	r1, #4
 800d990:	f7ff ff94 	bl	800d8bc <std>
 800d994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d998:	2201      	movs	r2, #1
 800d99a:	2109      	movs	r1, #9
 800d99c:	f7ff ff8e 	bl	800d8bc <std>
 800d9a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9aa:	2112      	movs	r1, #18
 800d9ac:	f7ff bf86 	b.w	800d8bc <std>
 800d9b0:	200022c0 	.word	0x200022c0
 800d9b4:	20002188 	.word	0x20002188
 800d9b8:	0800d929 	.word	0x0800d929

0800d9bc <__sfp_lock_acquire>:
 800d9bc:	4801      	ldr	r0, [pc, #4]	@ (800d9c4 <__sfp_lock_acquire+0x8>)
 800d9be:	f000 b934 	b.w	800dc2a <__retarget_lock_acquire_recursive>
 800d9c2:	bf00      	nop
 800d9c4:	200022c9 	.word	0x200022c9

0800d9c8 <__sfp_lock_release>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	@ (800d9d0 <__sfp_lock_release+0x8>)
 800d9ca:	f000 b92f 	b.w	800dc2c <__retarget_lock_release_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	200022c9 	.word	0x200022c9

0800d9d4 <__sinit>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	f7ff fff0 	bl	800d9bc <__sfp_lock_acquire>
 800d9dc:	6a23      	ldr	r3, [r4, #32]
 800d9de:	b11b      	cbz	r3, 800d9e8 <__sinit+0x14>
 800d9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9e4:	f7ff bff0 	b.w	800d9c8 <__sfp_lock_release>
 800d9e8:	4b04      	ldr	r3, [pc, #16]	@ (800d9fc <__sinit+0x28>)
 800d9ea:	6223      	str	r3, [r4, #32]
 800d9ec:	4b04      	ldr	r3, [pc, #16]	@ (800da00 <__sinit+0x2c>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1f5      	bne.n	800d9e0 <__sinit+0xc>
 800d9f4:	f7ff ffc4 	bl	800d980 <global_stdio_init.part.0>
 800d9f8:	e7f2      	b.n	800d9e0 <__sinit+0xc>
 800d9fa:	bf00      	nop
 800d9fc:	0800d941 	.word	0x0800d941
 800da00:	200022c0 	.word	0x200022c0

0800da04 <_fwalk_sglue>:
 800da04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da08:	4607      	mov	r7, r0
 800da0a:	4688      	mov	r8, r1
 800da0c:	4614      	mov	r4, r2
 800da0e:	2600      	movs	r6, #0
 800da10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da14:	f1b9 0901 	subs.w	r9, r9, #1
 800da18:	d505      	bpl.n	800da26 <_fwalk_sglue+0x22>
 800da1a:	6824      	ldr	r4, [r4, #0]
 800da1c:	2c00      	cmp	r4, #0
 800da1e:	d1f7      	bne.n	800da10 <_fwalk_sglue+0xc>
 800da20:	4630      	mov	r0, r6
 800da22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da26:	89ab      	ldrh	r3, [r5, #12]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d907      	bls.n	800da3c <_fwalk_sglue+0x38>
 800da2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da30:	3301      	adds	r3, #1
 800da32:	d003      	beq.n	800da3c <_fwalk_sglue+0x38>
 800da34:	4629      	mov	r1, r5
 800da36:	4638      	mov	r0, r7
 800da38:	47c0      	blx	r8
 800da3a:	4306      	orrs	r6, r0
 800da3c:	3568      	adds	r5, #104	@ 0x68
 800da3e:	e7e9      	b.n	800da14 <_fwalk_sglue+0x10>

0800da40 <sniprintf>:
 800da40:	b40c      	push	{r2, r3}
 800da42:	b530      	push	{r4, r5, lr}
 800da44:	4b17      	ldr	r3, [pc, #92]	@ (800daa4 <sniprintf+0x64>)
 800da46:	1e0c      	subs	r4, r1, #0
 800da48:	681d      	ldr	r5, [r3, #0]
 800da4a:	b09d      	sub	sp, #116	@ 0x74
 800da4c:	da08      	bge.n	800da60 <sniprintf+0x20>
 800da4e:	238b      	movs	r3, #139	@ 0x8b
 800da50:	602b      	str	r3, [r5, #0]
 800da52:	f04f 30ff 	mov.w	r0, #4294967295
 800da56:	b01d      	add	sp, #116	@ 0x74
 800da58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da5c:	b002      	add	sp, #8
 800da5e:	4770      	bx	lr
 800da60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da64:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da68:	bf14      	ite	ne
 800da6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da6e:	4623      	moveq	r3, r4
 800da70:	9304      	str	r3, [sp, #16]
 800da72:	9307      	str	r3, [sp, #28]
 800da74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da78:	9002      	str	r0, [sp, #8]
 800da7a:	9006      	str	r0, [sp, #24]
 800da7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800da82:	ab21      	add	r3, sp, #132	@ 0x84
 800da84:	a902      	add	r1, sp, #8
 800da86:	4628      	mov	r0, r5
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	f001 fbfb 	bl	800f284 <_svfiprintf_r>
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	bfbc      	itt	lt
 800da92:	238b      	movlt	r3, #139	@ 0x8b
 800da94:	602b      	strlt	r3, [r5, #0]
 800da96:	2c00      	cmp	r4, #0
 800da98:	d0dd      	beq.n	800da56 <sniprintf+0x16>
 800da9a:	9b02      	ldr	r3, [sp, #8]
 800da9c:	2200      	movs	r2, #0
 800da9e:	701a      	strb	r2, [r3, #0]
 800daa0:	e7d9      	b.n	800da56 <sniprintf+0x16>
 800daa2:	bf00      	nop
 800daa4:	20000120 	.word	0x20000120

0800daa8 <__sread>:
 800daa8:	b510      	push	{r4, lr}
 800daaa:	460c      	mov	r4, r1
 800daac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab0:	f000 f86c 	bl	800db8c <_read_r>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	bfab      	itete	ge
 800dab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800daba:	89a3      	ldrhlt	r3, [r4, #12]
 800dabc:	181b      	addge	r3, r3, r0
 800dabe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dac2:	bfac      	ite	ge
 800dac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dac6:	81a3      	strhlt	r3, [r4, #12]
 800dac8:	bd10      	pop	{r4, pc}

0800daca <__swrite>:
 800daca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dace:	461f      	mov	r7, r3
 800dad0:	898b      	ldrh	r3, [r1, #12]
 800dad2:	05db      	lsls	r3, r3, #23
 800dad4:	4605      	mov	r5, r0
 800dad6:	460c      	mov	r4, r1
 800dad8:	4616      	mov	r6, r2
 800dada:	d505      	bpl.n	800dae8 <__swrite+0x1e>
 800dadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae0:	2302      	movs	r3, #2
 800dae2:	2200      	movs	r2, #0
 800dae4:	f000 f840 	bl	800db68 <_lseek_r>
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800daf2:	81a3      	strh	r3, [r4, #12]
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	4628      	mov	r0, r5
 800dafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dafe:	f000 b857 	b.w	800dbb0 <_write_r>

0800db02 <__sseek>:
 800db02:	b510      	push	{r4, lr}
 800db04:	460c      	mov	r4, r1
 800db06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0a:	f000 f82d 	bl	800db68 <_lseek_r>
 800db0e:	1c43      	adds	r3, r0, #1
 800db10:	89a3      	ldrh	r3, [r4, #12]
 800db12:	bf15      	itete	ne
 800db14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db1e:	81a3      	strheq	r3, [r4, #12]
 800db20:	bf18      	it	ne
 800db22:	81a3      	strhne	r3, [r4, #12]
 800db24:	bd10      	pop	{r4, pc}

0800db26 <__sclose>:
 800db26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db2a:	f000 b80d 	b.w	800db48 <_close_r>

0800db2e <memset>:
 800db2e:	4402      	add	r2, r0
 800db30:	4603      	mov	r3, r0
 800db32:	4293      	cmp	r3, r2
 800db34:	d100      	bne.n	800db38 <memset+0xa>
 800db36:	4770      	bx	lr
 800db38:	f803 1b01 	strb.w	r1, [r3], #1
 800db3c:	e7f9      	b.n	800db32 <memset+0x4>
	...

0800db40 <_localeconv_r>:
 800db40:	4800      	ldr	r0, [pc, #0]	@ (800db44 <_localeconv_r+0x4>)
 800db42:	4770      	bx	lr
 800db44:	20000260 	.word	0x20000260

0800db48 <_close_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4d06      	ldr	r5, [pc, #24]	@ (800db64 <_close_r+0x1c>)
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	f7f5 fcea 	bl	800352c <_close>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d102      	bne.n	800db62 <_close_r+0x1a>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	b103      	cbz	r3, 800db62 <_close_r+0x1a>
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	200022c4 	.word	0x200022c4

0800db68 <_lseek_r>:
 800db68:	b538      	push	{r3, r4, r5, lr}
 800db6a:	4d07      	ldr	r5, [pc, #28]	@ (800db88 <_lseek_r+0x20>)
 800db6c:	4604      	mov	r4, r0
 800db6e:	4608      	mov	r0, r1
 800db70:	4611      	mov	r1, r2
 800db72:	2200      	movs	r2, #0
 800db74:	602a      	str	r2, [r5, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	f7f5 fcff 	bl	800357a <_lseek>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_lseek_r+0x1e>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_lseek_r+0x1e>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	200022c4 	.word	0x200022c4

0800db8c <_read_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d07      	ldr	r5, [pc, #28]	@ (800dbac <_read_r+0x20>)
 800db90:	4604      	mov	r4, r0
 800db92:	4608      	mov	r0, r1
 800db94:	4611      	mov	r1, r2
 800db96:	2200      	movs	r2, #0
 800db98:	602a      	str	r2, [r5, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	f7f5 fc8d 	bl	80034ba <_read>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_read_r+0x1e>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_read_r+0x1e>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	200022c4 	.word	0x200022c4

0800dbb0 <_write_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d07      	ldr	r5, [pc, #28]	@ (800dbd0 <_write_r+0x20>)
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	4611      	mov	r1, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	602a      	str	r2, [r5, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f7f5 fc98 	bl	80034f4 <_write>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_write_r+0x1e>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_write_r+0x1e>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	200022c4 	.word	0x200022c4

0800dbd4 <__errno>:
 800dbd4:	4b01      	ldr	r3, [pc, #4]	@ (800dbdc <__errno+0x8>)
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	20000120 	.word	0x20000120

0800dbe0 <__libc_init_array>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	4d0d      	ldr	r5, [pc, #52]	@ (800dc18 <__libc_init_array+0x38>)
 800dbe4:	4c0d      	ldr	r4, [pc, #52]	@ (800dc1c <__libc_init_array+0x3c>)
 800dbe6:	1b64      	subs	r4, r4, r5
 800dbe8:	10a4      	asrs	r4, r4, #2
 800dbea:	2600      	movs	r6, #0
 800dbec:	42a6      	cmp	r6, r4
 800dbee:	d109      	bne.n	800dc04 <__libc_init_array+0x24>
 800dbf0:	4d0b      	ldr	r5, [pc, #44]	@ (800dc20 <__libc_init_array+0x40>)
 800dbf2:	4c0c      	ldr	r4, [pc, #48]	@ (800dc24 <__libc_init_array+0x44>)
 800dbf4:	f002 fa62 	bl	80100bc <_init>
 800dbf8:	1b64      	subs	r4, r4, r5
 800dbfa:	10a4      	asrs	r4, r4, #2
 800dbfc:	2600      	movs	r6, #0
 800dbfe:	42a6      	cmp	r6, r4
 800dc00:	d105      	bne.n	800dc0e <__libc_init_array+0x2e>
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc08:	4798      	blx	r3
 800dc0a:	3601      	adds	r6, #1
 800dc0c:	e7ee      	b.n	800dbec <__libc_init_array+0xc>
 800dc0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc12:	4798      	blx	r3
 800dc14:	3601      	adds	r6, #1
 800dc16:	e7f2      	b.n	800dbfe <__libc_init_array+0x1e>
 800dc18:	080105b0 	.word	0x080105b0
 800dc1c:	080105b0 	.word	0x080105b0
 800dc20:	080105b0 	.word	0x080105b0
 800dc24:	080105b4 	.word	0x080105b4

0800dc28 <__retarget_lock_init_recursive>:
 800dc28:	4770      	bx	lr

0800dc2a <__retarget_lock_acquire_recursive>:
 800dc2a:	4770      	bx	lr

0800dc2c <__retarget_lock_release_recursive>:
 800dc2c:	4770      	bx	lr

0800dc2e <quorem>:
 800dc2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc32:	6903      	ldr	r3, [r0, #16]
 800dc34:	690c      	ldr	r4, [r1, #16]
 800dc36:	42a3      	cmp	r3, r4
 800dc38:	4607      	mov	r7, r0
 800dc3a:	db7e      	blt.n	800dd3a <quorem+0x10c>
 800dc3c:	3c01      	subs	r4, #1
 800dc3e:	f101 0814 	add.w	r8, r1, #20
 800dc42:	00a3      	lsls	r3, r4, #2
 800dc44:	f100 0514 	add.w	r5, r0, #20
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc4e:	9301      	str	r3, [sp, #4]
 800dc50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc60:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc64:	d32e      	bcc.n	800dcc4 <quorem+0x96>
 800dc66:	f04f 0a00 	mov.w	sl, #0
 800dc6a:	46c4      	mov	ip, r8
 800dc6c:	46ae      	mov	lr, r5
 800dc6e:	46d3      	mov	fp, sl
 800dc70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc74:	b298      	uxth	r0, r3
 800dc76:	fb06 a000 	mla	r0, r6, r0, sl
 800dc7a:	0c02      	lsrs	r2, r0, #16
 800dc7c:	0c1b      	lsrs	r3, r3, #16
 800dc7e:	fb06 2303 	mla	r3, r6, r3, r2
 800dc82:	f8de 2000 	ldr.w	r2, [lr]
 800dc86:	b280      	uxth	r0, r0
 800dc88:	b292      	uxth	r2, r2
 800dc8a:	1a12      	subs	r2, r2, r0
 800dc8c:	445a      	add	r2, fp
 800dc8e:	f8de 0000 	ldr.w	r0, [lr]
 800dc92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dca0:	b292      	uxth	r2, r2
 800dca2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dca6:	45e1      	cmp	r9, ip
 800dca8:	f84e 2b04 	str.w	r2, [lr], #4
 800dcac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dcb0:	d2de      	bcs.n	800dc70 <quorem+0x42>
 800dcb2:	9b00      	ldr	r3, [sp, #0]
 800dcb4:	58eb      	ldr	r3, [r5, r3]
 800dcb6:	b92b      	cbnz	r3, 800dcc4 <quorem+0x96>
 800dcb8:	9b01      	ldr	r3, [sp, #4]
 800dcba:	3b04      	subs	r3, #4
 800dcbc:	429d      	cmp	r5, r3
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	d32f      	bcc.n	800dd22 <quorem+0xf4>
 800dcc2:	613c      	str	r4, [r7, #16]
 800dcc4:	4638      	mov	r0, r7
 800dcc6:	f001 f979 	bl	800efbc <__mcmp>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	db25      	blt.n	800dd1a <quorem+0xec>
 800dcce:	4629      	mov	r1, r5
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcd6:	f8d1 c000 	ldr.w	ip, [r1]
 800dcda:	fa1f fe82 	uxth.w	lr, r2
 800dcde:	fa1f f38c 	uxth.w	r3, ip
 800dce2:	eba3 030e 	sub.w	r3, r3, lr
 800dce6:	4403      	add	r3, r0
 800dce8:	0c12      	lsrs	r2, r2, #16
 800dcea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dcee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcf8:	45c1      	cmp	r9, r8
 800dcfa:	f841 3b04 	str.w	r3, [r1], #4
 800dcfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd02:	d2e6      	bcs.n	800dcd2 <quorem+0xa4>
 800dd04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd0c:	b922      	cbnz	r2, 800dd18 <quorem+0xea>
 800dd0e:	3b04      	subs	r3, #4
 800dd10:	429d      	cmp	r5, r3
 800dd12:	461a      	mov	r2, r3
 800dd14:	d30b      	bcc.n	800dd2e <quorem+0x100>
 800dd16:	613c      	str	r4, [r7, #16]
 800dd18:	3601      	adds	r6, #1
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	b003      	add	sp, #12
 800dd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd22:	6812      	ldr	r2, [r2, #0]
 800dd24:	3b04      	subs	r3, #4
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	d1cb      	bne.n	800dcc2 <quorem+0x94>
 800dd2a:	3c01      	subs	r4, #1
 800dd2c:	e7c6      	b.n	800dcbc <quorem+0x8e>
 800dd2e:	6812      	ldr	r2, [r2, #0]
 800dd30:	3b04      	subs	r3, #4
 800dd32:	2a00      	cmp	r2, #0
 800dd34:	d1ef      	bne.n	800dd16 <quorem+0xe8>
 800dd36:	3c01      	subs	r4, #1
 800dd38:	e7ea      	b.n	800dd10 <quorem+0xe2>
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	e7ee      	b.n	800dd1c <quorem+0xee>
	...

0800dd40 <_dtoa_r>:
 800dd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd44:	69c7      	ldr	r7, [r0, #28]
 800dd46:	b099      	sub	sp, #100	@ 0x64
 800dd48:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd4c:	ec55 4b10 	vmov	r4, r5, d0
 800dd50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd52:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd54:	4683      	mov	fp, r0
 800dd56:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd5a:	b97f      	cbnz	r7, 800dd7c <_dtoa_r+0x3c>
 800dd5c:	2010      	movs	r0, #16
 800dd5e:	f000 fdfd 	bl	800e95c <malloc>
 800dd62:	4602      	mov	r2, r0
 800dd64:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd68:	b920      	cbnz	r0, 800dd74 <_dtoa_r+0x34>
 800dd6a:	4ba7      	ldr	r3, [pc, #668]	@ (800e008 <_dtoa_r+0x2c8>)
 800dd6c:	21ef      	movs	r1, #239	@ 0xef
 800dd6e:	48a7      	ldr	r0, [pc, #668]	@ (800e00c <_dtoa_r+0x2cc>)
 800dd70:	f001 fc68 	bl	800f644 <__assert_func>
 800dd74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd78:	6007      	str	r7, [r0, #0]
 800dd7a:	60c7      	str	r7, [r0, #12]
 800dd7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd80:	6819      	ldr	r1, [r3, #0]
 800dd82:	b159      	cbz	r1, 800dd9c <_dtoa_r+0x5c>
 800dd84:	685a      	ldr	r2, [r3, #4]
 800dd86:	604a      	str	r2, [r1, #4]
 800dd88:	2301      	movs	r3, #1
 800dd8a:	4093      	lsls	r3, r2
 800dd8c:	608b      	str	r3, [r1, #8]
 800dd8e:	4658      	mov	r0, fp
 800dd90:	f000 feda 	bl	800eb48 <_Bfree>
 800dd94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	1e2b      	subs	r3, r5, #0
 800dd9e:	bfb9      	ittee	lt
 800dda0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dda4:	9303      	strlt	r3, [sp, #12]
 800dda6:	2300      	movge	r3, #0
 800dda8:	6033      	strge	r3, [r6, #0]
 800ddaa:	9f03      	ldr	r7, [sp, #12]
 800ddac:	4b98      	ldr	r3, [pc, #608]	@ (800e010 <_dtoa_r+0x2d0>)
 800ddae:	bfbc      	itt	lt
 800ddb0:	2201      	movlt	r2, #1
 800ddb2:	6032      	strlt	r2, [r6, #0]
 800ddb4:	43bb      	bics	r3, r7
 800ddb6:	d112      	bne.n	800ddde <_dtoa_r+0x9e>
 800ddb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ddbe:	6013      	str	r3, [r2, #0]
 800ddc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddc4:	4323      	orrs	r3, r4
 800ddc6:	f000 854d 	beq.w	800e864 <_dtoa_r+0xb24>
 800ddca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddcc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e024 <_dtoa_r+0x2e4>
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 854f 	beq.w	800e874 <_dtoa_r+0xb34>
 800ddd6:	f10a 0303 	add.w	r3, sl, #3
 800ddda:	f000 bd49 	b.w	800e870 <_dtoa_r+0xb30>
 800ddde:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dde2:	2200      	movs	r2, #0
 800dde4:	ec51 0b17 	vmov	r0, r1, d7
 800dde8:	2300      	movs	r3, #0
 800ddea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ddee:	f7f2 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddf2:	4680      	mov	r8, r0
 800ddf4:	b158      	cbz	r0, 800de0e <_dtoa_r+0xce>
 800ddf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddfe:	b113      	cbz	r3, 800de06 <_dtoa_r+0xc6>
 800de00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de02:	4b84      	ldr	r3, [pc, #528]	@ (800e014 <_dtoa_r+0x2d4>)
 800de04:	6013      	str	r3, [r2, #0]
 800de06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e028 <_dtoa_r+0x2e8>
 800de0a:	f000 bd33 	b.w	800e874 <_dtoa_r+0xb34>
 800de0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de12:	aa16      	add	r2, sp, #88	@ 0x58
 800de14:	a917      	add	r1, sp, #92	@ 0x5c
 800de16:	4658      	mov	r0, fp
 800de18:	f001 f980 	bl	800f11c <__d2b>
 800de1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de20:	4681      	mov	r9, r0
 800de22:	2e00      	cmp	r6, #0
 800de24:	d077      	beq.n	800df16 <_dtoa_r+0x1d6>
 800de26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800de2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de40:	4619      	mov	r1, r3
 800de42:	2200      	movs	r2, #0
 800de44:	4b74      	ldr	r3, [pc, #464]	@ (800e018 <_dtoa_r+0x2d8>)
 800de46:	f7f2 fa1f 	bl	8000288 <__aeabi_dsub>
 800de4a:	a369      	add	r3, pc, #420	@ (adr r3, 800dff0 <_dtoa_r+0x2b0>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	f7f2 fbd2 	bl	80005f8 <__aeabi_dmul>
 800de54:	a368      	add	r3, pc, #416	@ (adr r3, 800dff8 <_dtoa_r+0x2b8>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	f7f2 fa17 	bl	800028c <__adddf3>
 800de5e:	4604      	mov	r4, r0
 800de60:	4630      	mov	r0, r6
 800de62:	460d      	mov	r5, r1
 800de64:	f7f2 fb5e 	bl	8000524 <__aeabi_i2d>
 800de68:	a365      	add	r3, pc, #404	@ (adr r3, 800e000 <_dtoa_r+0x2c0>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	f7f2 fbc3 	bl	80005f8 <__aeabi_dmul>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	4620      	mov	r0, r4
 800de78:	4629      	mov	r1, r5
 800de7a:	f7f2 fa07 	bl	800028c <__adddf3>
 800de7e:	4604      	mov	r4, r0
 800de80:	460d      	mov	r5, r1
 800de82:	f7f2 fe69 	bl	8000b58 <__aeabi_d2iz>
 800de86:	2200      	movs	r2, #0
 800de88:	4607      	mov	r7, r0
 800de8a:	2300      	movs	r3, #0
 800de8c:	4620      	mov	r0, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	f7f2 fe24 	bl	8000adc <__aeabi_dcmplt>
 800de94:	b140      	cbz	r0, 800dea8 <_dtoa_r+0x168>
 800de96:	4638      	mov	r0, r7
 800de98:	f7f2 fb44 	bl	8000524 <__aeabi_i2d>
 800de9c:	4622      	mov	r2, r4
 800de9e:	462b      	mov	r3, r5
 800dea0:	f7f2 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 800dea4:	b900      	cbnz	r0, 800dea8 <_dtoa_r+0x168>
 800dea6:	3f01      	subs	r7, #1
 800dea8:	2f16      	cmp	r7, #22
 800deaa:	d851      	bhi.n	800df50 <_dtoa_r+0x210>
 800deac:	4b5b      	ldr	r3, [pc, #364]	@ (800e01c <_dtoa_r+0x2dc>)
 800deae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800deb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800deba:	f7f2 fe0f 	bl	8000adc <__aeabi_dcmplt>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d048      	beq.n	800df54 <_dtoa_r+0x214>
 800dec2:	3f01      	subs	r7, #1
 800dec4:	2300      	movs	r3, #0
 800dec6:	9312      	str	r3, [sp, #72]	@ 0x48
 800dec8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800deca:	1b9b      	subs	r3, r3, r6
 800decc:	1e5a      	subs	r2, r3, #1
 800dece:	bf44      	itt	mi
 800ded0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ded4:	2300      	movmi	r3, #0
 800ded6:	9208      	str	r2, [sp, #32]
 800ded8:	bf54      	ite	pl
 800deda:	f04f 0800 	movpl.w	r8, #0
 800dede:	9308      	strmi	r3, [sp, #32]
 800dee0:	2f00      	cmp	r7, #0
 800dee2:	db39      	blt.n	800df58 <_dtoa_r+0x218>
 800dee4:	9b08      	ldr	r3, [sp, #32]
 800dee6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dee8:	443b      	add	r3, r7
 800deea:	9308      	str	r3, [sp, #32]
 800deec:	2300      	movs	r3, #0
 800deee:	930a      	str	r3, [sp, #40]	@ 0x28
 800def0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def2:	2b09      	cmp	r3, #9
 800def4:	d864      	bhi.n	800dfc0 <_dtoa_r+0x280>
 800def6:	2b05      	cmp	r3, #5
 800def8:	bfc4      	itt	gt
 800defa:	3b04      	subgt	r3, #4
 800defc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800defe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df00:	f1a3 0302 	sub.w	r3, r3, #2
 800df04:	bfcc      	ite	gt
 800df06:	2400      	movgt	r4, #0
 800df08:	2401      	movle	r4, #1
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d863      	bhi.n	800dfd6 <_dtoa_r+0x296>
 800df0e:	e8df f003 	tbb	[pc, r3]
 800df12:	372a      	.short	0x372a
 800df14:	5535      	.short	0x5535
 800df16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800df1a:	441e      	add	r6, r3
 800df1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df20:	2b20      	cmp	r3, #32
 800df22:	bfc1      	itttt	gt
 800df24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df28:	409f      	lslgt	r7, r3
 800df2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df32:	bfd6      	itet	le
 800df34:	f1c3 0320 	rsble	r3, r3, #32
 800df38:	ea47 0003 	orrgt.w	r0, r7, r3
 800df3c:	fa04 f003 	lslle.w	r0, r4, r3
 800df40:	f7f2 fae0 	bl	8000504 <__aeabi_ui2d>
 800df44:	2201      	movs	r2, #1
 800df46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df4a:	3e01      	subs	r6, #1
 800df4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800df4e:	e777      	b.n	800de40 <_dtoa_r+0x100>
 800df50:	2301      	movs	r3, #1
 800df52:	e7b8      	b.n	800dec6 <_dtoa_r+0x186>
 800df54:	9012      	str	r0, [sp, #72]	@ 0x48
 800df56:	e7b7      	b.n	800dec8 <_dtoa_r+0x188>
 800df58:	427b      	negs	r3, r7
 800df5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df5c:	2300      	movs	r3, #0
 800df5e:	eba8 0807 	sub.w	r8, r8, r7
 800df62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df64:	e7c4      	b.n	800def0 <_dtoa_r+0x1b0>
 800df66:	2300      	movs	r3, #0
 800df68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dc35      	bgt.n	800dfdc <_dtoa_r+0x29c>
 800df70:	2301      	movs	r3, #1
 800df72:	9300      	str	r3, [sp, #0]
 800df74:	9307      	str	r3, [sp, #28]
 800df76:	461a      	mov	r2, r3
 800df78:	920e      	str	r2, [sp, #56]	@ 0x38
 800df7a:	e00b      	b.n	800df94 <_dtoa_r+0x254>
 800df7c:	2301      	movs	r3, #1
 800df7e:	e7f3      	b.n	800df68 <_dtoa_r+0x228>
 800df80:	2300      	movs	r3, #0
 800df82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df86:	18fb      	adds	r3, r7, r3
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	3301      	adds	r3, #1
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	9307      	str	r3, [sp, #28]
 800df90:	bfb8      	it	lt
 800df92:	2301      	movlt	r3, #1
 800df94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800df98:	2100      	movs	r1, #0
 800df9a:	2204      	movs	r2, #4
 800df9c:	f102 0514 	add.w	r5, r2, #20
 800dfa0:	429d      	cmp	r5, r3
 800dfa2:	d91f      	bls.n	800dfe4 <_dtoa_r+0x2a4>
 800dfa4:	6041      	str	r1, [r0, #4]
 800dfa6:	4658      	mov	r0, fp
 800dfa8:	f000 fd8e 	bl	800eac8 <_Balloc>
 800dfac:	4682      	mov	sl, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d13c      	bne.n	800e02c <_dtoa_r+0x2ec>
 800dfb2:	4b1b      	ldr	r3, [pc, #108]	@ (800e020 <_dtoa_r+0x2e0>)
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	f240 11af 	movw	r1, #431	@ 0x1af
 800dfba:	e6d8      	b.n	800dd6e <_dtoa_r+0x2e>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e7e0      	b.n	800df82 <_dtoa_r+0x242>
 800dfc0:	2401      	movs	r4, #1
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	9307      	str	r3, [sp, #28]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	2312      	movs	r3, #18
 800dfd4:	e7d0      	b.n	800df78 <_dtoa_r+0x238>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfda:	e7f5      	b.n	800dfc8 <_dtoa_r+0x288>
 800dfdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	9307      	str	r3, [sp, #28]
 800dfe2:	e7d7      	b.n	800df94 <_dtoa_r+0x254>
 800dfe4:	3101      	adds	r1, #1
 800dfe6:	0052      	lsls	r2, r2, #1
 800dfe8:	e7d8      	b.n	800df9c <_dtoa_r+0x25c>
 800dfea:	bf00      	nop
 800dfec:	f3af 8000 	nop.w
 800dff0:	636f4361 	.word	0x636f4361
 800dff4:	3fd287a7 	.word	0x3fd287a7
 800dff8:	8b60c8b3 	.word	0x8b60c8b3
 800dffc:	3fc68a28 	.word	0x3fc68a28
 800e000:	509f79fb 	.word	0x509f79fb
 800e004:	3fd34413 	.word	0x3fd34413
 800e008:	08010279 	.word	0x08010279
 800e00c:	08010290 	.word	0x08010290
 800e010:	7ff00000 	.word	0x7ff00000
 800e014:	08010249 	.word	0x08010249
 800e018:	3ff80000 	.word	0x3ff80000
 800e01c:	08010388 	.word	0x08010388
 800e020:	080102e8 	.word	0x080102e8
 800e024:	08010275 	.word	0x08010275
 800e028:	08010248 	.word	0x08010248
 800e02c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e030:	6018      	str	r0, [r3, #0]
 800e032:	9b07      	ldr	r3, [sp, #28]
 800e034:	2b0e      	cmp	r3, #14
 800e036:	f200 80a4 	bhi.w	800e182 <_dtoa_r+0x442>
 800e03a:	2c00      	cmp	r4, #0
 800e03c:	f000 80a1 	beq.w	800e182 <_dtoa_r+0x442>
 800e040:	2f00      	cmp	r7, #0
 800e042:	dd33      	ble.n	800e0ac <_dtoa_r+0x36c>
 800e044:	4bad      	ldr	r3, [pc, #692]	@ (800e2fc <_dtoa_r+0x5bc>)
 800e046:	f007 020f 	and.w	r2, r7, #15
 800e04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e04e:	ed93 7b00 	vldr	d7, [r3]
 800e052:	05f8      	lsls	r0, r7, #23
 800e054:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e05c:	d516      	bpl.n	800e08c <_dtoa_r+0x34c>
 800e05e:	4ba8      	ldr	r3, [pc, #672]	@ (800e300 <_dtoa_r+0x5c0>)
 800e060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e068:	f7f2 fbf0 	bl	800084c <__aeabi_ddiv>
 800e06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e070:	f004 040f 	and.w	r4, r4, #15
 800e074:	2603      	movs	r6, #3
 800e076:	4da2      	ldr	r5, [pc, #648]	@ (800e300 <_dtoa_r+0x5c0>)
 800e078:	b954      	cbnz	r4, 800e090 <_dtoa_r+0x350>
 800e07a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e082:	f7f2 fbe3 	bl	800084c <__aeabi_ddiv>
 800e086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e08a:	e028      	b.n	800e0de <_dtoa_r+0x39e>
 800e08c:	2602      	movs	r6, #2
 800e08e:	e7f2      	b.n	800e076 <_dtoa_r+0x336>
 800e090:	07e1      	lsls	r1, r4, #31
 800e092:	d508      	bpl.n	800e0a6 <_dtoa_r+0x366>
 800e094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e09c:	f7f2 faac 	bl	80005f8 <__aeabi_dmul>
 800e0a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0a4:	3601      	adds	r6, #1
 800e0a6:	1064      	asrs	r4, r4, #1
 800e0a8:	3508      	adds	r5, #8
 800e0aa:	e7e5      	b.n	800e078 <_dtoa_r+0x338>
 800e0ac:	f000 80d2 	beq.w	800e254 <_dtoa_r+0x514>
 800e0b0:	427c      	negs	r4, r7
 800e0b2:	4b92      	ldr	r3, [pc, #584]	@ (800e2fc <_dtoa_r+0x5bc>)
 800e0b4:	4d92      	ldr	r5, [pc, #584]	@ (800e300 <_dtoa_r+0x5c0>)
 800e0b6:	f004 020f 	and.w	r2, r4, #15
 800e0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0c6:	f7f2 fa97 	bl	80005f8 <__aeabi_dmul>
 800e0ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0ce:	1124      	asrs	r4, r4, #4
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	2602      	movs	r6, #2
 800e0d4:	2c00      	cmp	r4, #0
 800e0d6:	f040 80b2 	bne.w	800e23e <_dtoa_r+0x4fe>
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1d3      	bne.n	800e086 <_dtoa_r+0x346>
 800e0de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 80b7 	beq.w	800e258 <_dtoa_r+0x518>
 800e0ea:	4b86      	ldr	r3, [pc, #536]	@ (800e304 <_dtoa_r+0x5c4>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7f2 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	f000 80ae 	beq.w	800e258 <_dtoa_r+0x518>
 800e0fc:	9b07      	ldr	r3, [sp, #28]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f000 80aa 	beq.w	800e258 <_dtoa_r+0x518>
 800e104:	9b00      	ldr	r3, [sp, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	dd37      	ble.n	800e17a <_dtoa_r+0x43a>
 800e10a:	1e7b      	subs	r3, r7, #1
 800e10c:	9304      	str	r3, [sp, #16]
 800e10e:	4620      	mov	r0, r4
 800e110:	4b7d      	ldr	r3, [pc, #500]	@ (800e308 <_dtoa_r+0x5c8>)
 800e112:	2200      	movs	r2, #0
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 fa6f 	bl	80005f8 <__aeabi_dmul>
 800e11a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e11e:	9c00      	ldr	r4, [sp, #0]
 800e120:	3601      	adds	r6, #1
 800e122:	4630      	mov	r0, r6
 800e124:	f7f2 f9fe 	bl	8000524 <__aeabi_i2d>
 800e128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e12c:	f7f2 fa64 	bl	80005f8 <__aeabi_dmul>
 800e130:	4b76      	ldr	r3, [pc, #472]	@ (800e30c <_dtoa_r+0x5cc>)
 800e132:	2200      	movs	r2, #0
 800e134:	f7f2 f8aa 	bl	800028c <__adddf3>
 800e138:	4605      	mov	r5, r0
 800e13a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e13e:	2c00      	cmp	r4, #0
 800e140:	f040 808d 	bne.w	800e25e <_dtoa_r+0x51e>
 800e144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e148:	4b71      	ldr	r3, [pc, #452]	@ (800e310 <_dtoa_r+0x5d0>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	f7f2 f89c 	bl	8000288 <__aeabi_dsub>
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e158:	462a      	mov	r2, r5
 800e15a:	4633      	mov	r3, r6
 800e15c:	f7f2 fcdc 	bl	8000b18 <__aeabi_dcmpgt>
 800e160:	2800      	cmp	r0, #0
 800e162:	f040 828b 	bne.w	800e67c <_dtoa_r+0x93c>
 800e166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e16a:	462a      	mov	r2, r5
 800e16c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e170:	f7f2 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800e174:	2800      	cmp	r0, #0
 800e176:	f040 8128 	bne.w	800e3ca <_dtoa_r+0x68a>
 800e17a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e17e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e182:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e184:	2b00      	cmp	r3, #0
 800e186:	f2c0 815a 	blt.w	800e43e <_dtoa_r+0x6fe>
 800e18a:	2f0e      	cmp	r7, #14
 800e18c:	f300 8157 	bgt.w	800e43e <_dtoa_r+0x6fe>
 800e190:	4b5a      	ldr	r3, [pc, #360]	@ (800e2fc <_dtoa_r+0x5bc>)
 800e192:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e196:	ed93 7b00 	vldr	d7, [r3]
 800e19a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	ed8d 7b00 	vstr	d7, [sp]
 800e1a2:	da03      	bge.n	800e1ac <_dtoa_r+0x46c>
 800e1a4:	9b07      	ldr	r3, [sp, #28]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f340 8101 	ble.w	800e3ae <_dtoa_r+0x66e>
 800e1ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e1b0:	4656      	mov	r6, sl
 800e1b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	4629      	mov	r1, r5
 800e1ba:	f7f2 fb47 	bl	800084c <__aeabi_ddiv>
 800e1be:	f7f2 fccb 	bl	8000b58 <__aeabi_d2iz>
 800e1c2:	4680      	mov	r8, r0
 800e1c4:	f7f2 f9ae 	bl	8000524 <__aeabi_i2d>
 800e1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1cc:	f7f2 fa14 	bl	80005f8 <__aeabi_dmul>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e1dc:	f7f2 f854 	bl	8000288 <__aeabi_dsub>
 800e1e0:	f806 4b01 	strb.w	r4, [r6], #1
 800e1e4:	9d07      	ldr	r5, [sp, #28]
 800e1e6:	eba6 040a 	sub.w	r4, r6, sl
 800e1ea:	42a5      	cmp	r5, r4
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	f040 8117 	bne.w	800e422 <_dtoa_r+0x6e2>
 800e1f4:	f7f2 f84a 	bl	800028c <__adddf3>
 800e1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	460d      	mov	r5, r1
 800e200:	f7f2 fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 800e204:	2800      	cmp	r0, #0
 800e206:	f040 80f9 	bne.w	800e3fc <_dtoa_r+0x6bc>
 800e20a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e20e:	4620      	mov	r0, r4
 800e210:	4629      	mov	r1, r5
 800e212:	f7f2 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 800e216:	b118      	cbz	r0, 800e220 <_dtoa_r+0x4e0>
 800e218:	f018 0f01 	tst.w	r8, #1
 800e21c:	f040 80ee 	bne.w	800e3fc <_dtoa_r+0x6bc>
 800e220:	4649      	mov	r1, r9
 800e222:	4658      	mov	r0, fp
 800e224:	f000 fc90 	bl	800eb48 <_Bfree>
 800e228:	2300      	movs	r3, #0
 800e22a:	7033      	strb	r3, [r6, #0]
 800e22c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e22e:	3701      	adds	r7, #1
 800e230:	601f      	str	r7, [r3, #0]
 800e232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e234:	2b00      	cmp	r3, #0
 800e236:	f000 831d 	beq.w	800e874 <_dtoa_r+0xb34>
 800e23a:	601e      	str	r6, [r3, #0]
 800e23c:	e31a      	b.n	800e874 <_dtoa_r+0xb34>
 800e23e:	07e2      	lsls	r2, r4, #31
 800e240:	d505      	bpl.n	800e24e <_dtoa_r+0x50e>
 800e242:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e246:	f7f2 f9d7 	bl	80005f8 <__aeabi_dmul>
 800e24a:	3601      	adds	r6, #1
 800e24c:	2301      	movs	r3, #1
 800e24e:	1064      	asrs	r4, r4, #1
 800e250:	3508      	adds	r5, #8
 800e252:	e73f      	b.n	800e0d4 <_dtoa_r+0x394>
 800e254:	2602      	movs	r6, #2
 800e256:	e742      	b.n	800e0de <_dtoa_r+0x39e>
 800e258:	9c07      	ldr	r4, [sp, #28]
 800e25a:	9704      	str	r7, [sp, #16]
 800e25c:	e761      	b.n	800e122 <_dtoa_r+0x3e2>
 800e25e:	4b27      	ldr	r3, [pc, #156]	@ (800e2fc <_dtoa_r+0x5bc>)
 800e260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e262:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e26a:	4454      	add	r4, sl
 800e26c:	2900      	cmp	r1, #0
 800e26e:	d053      	beq.n	800e318 <_dtoa_r+0x5d8>
 800e270:	4928      	ldr	r1, [pc, #160]	@ (800e314 <_dtoa_r+0x5d4>)
 800e272:	2000      	movs	r0, #0
 800e274:	f7f2 faea 	bl	800084c <__aeabi_ddiv>
 800e278:	4633      	mov	r3, r6
 800e27a:	462a      	mov	r2, r5
 800e27c:	f7f2 f804 	bl	8000288 <__aeabi_dsub>
 800e280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e284:	4656      	mov	r6, sl
 800e286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e28a:	f7f2 fc65 	bl	8000b58 <__aeabi_d2iz>
 800e28e:	4605      	mov	r5, r0
 800e290:	f7f2 f948 	bl	8000524 <__aeabi_i2d>
 800e294:	4602      	mov	r2, r0
 800e296:	460b      	mov	r3, r1
 800e298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e29c:	f7f1 fff4 	bl	8000288 <__aeabi_dsub>
 800e2a0:	3530      	adds	r5, #48	@ 0x30
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2aa:	f806 5b01 	strb.w	r5, [r6], #1
 800e2ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2b2:	f7f2 fc13 	bl	8000adc <__aeabi_dcmplt>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d171      	bne.n	800e39e <_dtoa_r+0x65e>
 800e2ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2be:	4911      	ldr	r1, [pc, #68]	@ (800e304 <_dtoa_r+0x5c4>)
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	f7f1 ffe1 	bl	8000288 <__aeabi_dsub>
 800e2c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2ca:	f7f2 fc07 	bl	8000adc <__aeabi_dcmplt>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f040 8095 	bne.w	800e3fe <_dtoa_r+0x6be>
 800e2d4:	42a6      	cmp	r6, r4
 800e2d6:	f43f af50 	beq.w	800e17a <_dtoa_r+0x43a>
 800e2da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2de:	4b0a      	ldr	r3, [pc, #40]	@ (800e308 <_dtoa_r+0x5c8>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f7f2 f989 	bl	80005f8 <__aeabi_dmul>
 800e2e6:	4b08      	ldr	r3, [pc, #32]	@ (800e308 <_dtoa_r+0x5c8>)
 800e2e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2f2:	f7f2 f981 	bl	80005f8 <__aeabi_dmul>
 800e2f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2fa:	e7c4      	b.n	800e286 <_dtoa_r+0x546>
 800e2fc:	08010388 	.word	0x08010388
 800e300:	08010360 	.word	0x08010360
 800e304:	3ff00000 	.word	0x3ff00000
 800e308:	40240000 	.word	0x40240000
 800e30c:	401c0000 	.word	0x401c0000
 800e310:	40140000 	.word	0x40140000
 800e314:	3fe00000 	.word	0x3fe00000
 800e318:	4631      	mov	r1, r6
 800e31a:	4628      	mov	r0, r5
 800e31c:	f7f2 f96c 	bl	80005f8 <__aeabi_dmul>
 800e320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e324:	9415      	str	r4, [sp, #84]	@ 0x54
 800e326:	4656      	mov	r6, sl
 800e328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e32c:	f7f2 fc14 	bl	8000b58 <__aeabi_d2iz>
 800e330:	4605      	mov	r5, r0
 800e332:	f7f2 f8f7 	bl	8000524 <__aeabi_i2d>
 800e336:	4602      	mov	r2, r0
 800e338:	460b      	mov	r3, r1
 800e33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e33e:	f7f1 ffa3 	bl	8000288 <__aeabi_dsub>
 800e342:	3530      	adds	r5, #48	@ 0x30
 800e344:	f806 5b01 	strb.w	r5, [r6], #1
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	42a6      	cmp	r6, r4
 800e34e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e352:	f04f 0200 	mov.w	r2, #0
 800e356:	d124      	bne.n	800e3a2 <_dtoa_r+0x662>
 800e358:	4bac      	ldr	r3, [pc, #688]	@ (800e60c <_dtoa_r+0x8cc>)
 800e35a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e35e:	f7f1 ff95 	bl	800028c <__adddf3>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e36a:	f7f2 fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d145      	bne.n	800e3fe <_dtoa_r+0x6be>
 800e372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e376:	49a5      	ldr	r1, [pc, #660]	@ (800e60c <_dtoa_r+0x8cc>)
 800e378:	2000      	movs	r0, #0
 800e37a:	f7f1 ff85 	bl	8000288 <__aeabi_dsub>
 800e37e:	4602      	mov	r2, r0
 800e380:	460b      	mov	r3, r1
 800e382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e386:	f7f2 fba9 	bl	8000adc <__aeabi_dcmplt>
 800e38a:	2800      	cmp	r0, #0
 800e38c:	f43f aef5 	beq.w	800e17a <_dtoa_r+0x43a>
 800e390:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e392:	1e73      	subs	r3, r6, #1
 800e394:	9315      	str	r3, [sp, #84]	@ 0x54
 800e396:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e39a:	2b30      	cmp	r3, #48	@ 0x30
 800e39c:	d0f8      	beq.n	800e390 <_dtoa_r+0x650>
 800e39e:	9f04      	ldr	r7, [sp, #16]
 800e3a0:	e73e      	b.n	800e220 <_dtoa_r+0x4e0>
 800e3a2:	4b9b      	ldr	r3, [pc, #620]	@ (800e610 <_dtoa_r+0x8d0>)
 800e3a4:	f7f2 f928 	bl	80005f8 <__aeabi_dmul>
 800e3a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3ac:	e7bc      	b.n	800e328 <_dtoa_r+0x5e8>
 800e3ae:	d10c      	bne.n	800e3ca <_dtoa_r+0x68a>
 800e3b0:	4b98      	ldr	r3, [pc, #608]	@ (800e614 <_dtoa_r+0x8d4>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3b8:	f7f2 f91e 	bl	80005f8 <__aeabi_dmul>
 800e3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3c0:	f7f2 fba0 	bl	8000b04 <__aeabi_dcmpge>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	f000 8157 	beq.w	800e678 <_dtoa_r+0x938>
 800e3ca:	2400      	movs	r4, #0
 800e3cc:	4625      	mov	r5, r4
 800e3ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3d0:	43db      	mvns	r3, r3
 800e3d2:	9304      	str	r3, [sp, #16]
 800e3d4:	4656      	mov	r6, sl
 800e3d6:	2700      	movs	r7, #0
 800e3d8:	4621      	mov	r1, r4
 800e3da:	4658      	mov	r0, fp
 800e3dc:	f000 fbb4 	bl	800eb48 <_Bfree>
 800e3e0:	2d00      	cmp	r5, #0
 800e3e2:	d0dc      	beq.n	800e39e <_dtoa_r+0x65e>
 800e3e4:	b12f      	cbz	r7, 800e3f2 <_dtoa_r+0x6b2>
 800e3e6:	42af      	cmp	r7, r5
 800e3e8:	d003      	beq.n	800e3f2 <_dtoa_r+0x6b2>
 800e3ea:	4639      	mov	r1, r7
 800e3ec:	4658      	mov	r0, fp
 800e3ee:	f000 fbab 	bl	800eb48 <_Bfree>
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	4658      	mov	r0, fp
 800e3f6:	f000 fba7 	bl	800eb48 <_Bfree>
 800e3fa:	e7d0      	b.n	800e39e <_dtoa_r+0x65e>
 800e3fc:	9704      	str	r7, [sp, #16]
 800e3fe:	4633      	mov	r3, r6
 800e400:	461e      	mov	r6, r3
 800e402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e406:	2a39      	cmp	r2, #57	@ 0x39
 800e408:	d107      	bne.n	800e41a <_dtoa_r+0x6da>
 800e40a:	459a      	cmp	sl, r3
 800e40c:	d1f8      	bne.n	800e400 <_dtoa_r+0x6c0>
 800e40e:	9a04      	ldr	r2, [sp, #16]
 800e410:	3201      	adds	r2, #1
 800e412:	9204      	str	r2, [sp, #16]
 800e414:	2230      	movs	r2, #48	@ 0x30
 800e416:	f88a 2000 	strb.w	r2, [sl]
 800e41a:	781a      	ldrb	r2, [r3, #0]
 800e41c:	3201      	adds	r2, #1
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e7bd      	b.n	800e39e <_dtoa_r+0x65e>
 800e422:	4b7b      	ldr	r3, [pc, #492]	@ (800e610 <_dtoa_r+0x8d0>)
 800e424:	2200      	movs	r2, #0
 800e426:	f7f2 f8e7 	bl	80005f8 <__aeabi_dmul>
 800e42a:	2200      	movs	r2, #0
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	460d      	mov	r5, r1
 800e432:	f7f2 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 800e436:	2800      	cmp	r0, #0
 800e438:	f43f aebb 	beq.w	800e1b2 <_dtoa_r+0x472>
 800e43c:	e6f0      	b.n	800e220 <_dtoa_r+0x4e0>
 800e43e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e440:	2a00      	cmp	r2, #0
 800e442:	f000 80db 	beq.w	800e5fc <_dtoa_r+0x8bc>
 800e446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e448:	2a01      	cmp	r2, #1
 800e44a:	f300 80bf 	bgt.w	800e5cc <_dtoa_r+0x88c>
 800e44e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e450:	2a00      	cmp	r2, #0
 800e452:	f000 80b7 	beq.w	800e5c4 <_dtoa_r+0x884>
 800e456:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e45a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e45c:	4646      	mov	r6, r8
 800e45e:	9a08      	ldr	r2, [sp, #32]
 800e460:	2101      	movs	r1, #1
 800e462:	441a      	add	r2, r3
 800e464:	4658      	mov	r0, fp
 800e466:	4498      	add	r8, r3
 800e468:	9208      	str	r2, [sp, #32]
 800e46a:	f000 fc21 	bl	800ecb0 <__i2b>
 800e46e:	4605      	mov	r5, r0
 800e470:	b15e      	cbz	r6, 800e48a <_dtoa_r+0x74a>
 800e472:	9b08      	ldr	r3, [sp, #32]
 800e474:	2b00      	cmp	r3, #0
 800e476:	dd08      	ble.n	800e48a <_dtoa_r+0x74a>
 800e478:	42b3      	cmp	r3, r6
 800e47a:	9a08      	ldr	r2, [sp, #32]
 800e47c:	bfa8      	it	ge
 800e47e:	4633      	movge	r3, r6
 800e480:	eba8 0803 	sub.w	r8, r8, r3
 800e484:	1af6      	subs	r6, r6, r3
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	9308      	str	r3, [sp, #32]
 800e48a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e48c:	b1f3      	cbz	r3, 800e4cc <_dtoa_r+0x78c>
 800e48e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 80b7 	beq.w	800e604 <_dtoa_r+0x8c4>
 800e496:	b18c      	cbz	r4, 800e4bc <_dtoa_r+0x77c>
 800e498:	4629      	mov	r1, r5
 800e49a:	4622      	mov	r2, r4
 800e49c:	4658      	mov	r0, fp
 800e49e:	f000 fcc7 	bl	800ee30 <__pow5mult>
 800e4a2:	464a      	mov	r2, r9
 800e4a4:	4601      	mov	r1, r0
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	4658      	mov	r0, fp
 800e4aa:	f000 fc17 	bl	800ecdc <__multiply>
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	9004      	str	r0, [sp, #16]
 800e4b2:	4658      	mov	r0, fp
 800e4b4:	f000 fb48 	bl	800eb48 <_Bfree>
 800e4b8:	9b04      	ldr	r3, [sp, #16]
 800e4ba:	4699      	mov	r9, r3
 800e4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4be:	1b1a      	subs	r2, r3, r4
 800e4c0:	d004      	beq.n	800e4cc <_dtoa_r+0x78c>
 800e4c2:	4649      	mov	r1, r9
 800e4c4:	4658      	mov	r0, fp
 800e4c6:	f000 fcb3 	bl	800ee30 <__pow5mult>
 800e4ca:	4681      	mov	r9, r0
 800e4cc:	2101      	movs	r1, #1
 800e4ce:	4658      	mov	r0, fp
 800e4d0:	f000 fbee 	bl	800ecb0 <__i2b>
 800e4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 81cf 	beq.w	800e87c <_dtoa_r+0xb3c>
 800e4de:	461a      	mov	r2, r3
 800e4e0:	4601      	mov	r1, r0
 800e4e2:	4658      	mov	r0, fp
 800e4e4:	f000 fca4 	bl	800ee30 <__pow5mult>
 800e4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	f300 8095 	bgt.w	800e61c <_dtoa_r+0x8dc>
 800e4f2:	9b02      	ldr	r3, [sp, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f040 8087 	bne.w	800e608 <_dtoa_r+0x8c8>
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e500:	2b00      	cmp	r3, #0
 800e502:	f040 8089 	bne.w	800e618 <_dtoa_r+0x8d8>
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e50c:	0d1b      	lsrs	r3, r3, #20
 800e50e:	051b      	lsls	r3, r3, #20
 800e510:	b12b      	cbz	r3, 800e51e <_dtoa_r+0x7de>
 800e512:	9b08      	ldr	r3, [sp, #32]
 800e514:	3301      	adds	r3, #1
 800e516:	9308      	str	r3, [sp, #32]
 800e518:	f108 0801 	add.w	r8, r8, #1
 800e51c:	2301      	movs	r3, #1
 800e51e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e522:	2b00      	cmp	r3, #0
 800e524:	f000 81b0 	beq.w	800e888 <_dtoa_r+0xb48>
 800e528:	6923      	ldr	r3, [r4, #16]
 800e52a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e52e:	6918      	ldr	r0, [r3, #16]
 800e530:	f000 fb72 	bl	800ec18 <__hi0bits>
 800e534:	f1c0 0020 	rsb	r0, r0, #32
 800e538:	9b08      	ldr	r3, [sp, #32]
 800e53a:	4418      	add	r0, r3
 800e53c:	f010 001f 	ands.w	r0, r0, #31
 800e540:	d077      	beq.n	800e632 <_dtoa_r+0x8f2>
 800e542:	f1c0 0320 	rsb	r3, r0, #32
 800e546:	2b04      	cmp	r3, #4
 800e548:	dd6b      	ble.n	800e622 <_dtoa_r+0x8e2>
 800e54a:	9b08      	ldr	r3, [sp, #32]
 800e54c:	f1c0 001c 	rsb	r0, r0, #28
 800e550:	4403      	add	r3, r0
 800e552:	4480      	add	r8, r0
 800e554:	4406      	add	r6, r0
 800e556:	9308      	str	r3, [sp, #32]
 800e558:	f1b8 0f00 	cmp.w	r8, #0
 800e55c:	dd05      	ble.n	800e56a <_dtoa_r+0x82a>
 800e55e:	4649      	mov	r1, r9
 800e560:	4642      	mov	r2, r8
 800e562:	4658      	mov	r0, fp
 800e564:	f000 fcbe 	bl	800eee4 <__lshift>
 800e568:	4681      	mov	r9, r0
 800e56a:	9b08      	ldr	r3, [sp, #32]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	dd05      	ble.n	800e57c <_dtoa_r+0x83c>
 800e570:	4621      	mov	r1, r4
 800e572:	461a      	mov	r2, r3
 800e574:	4658      	mov	r0, fp
 800e576:	f000 fcb5 	bl	800eee4 <__lshift>
 800e57a:	4604      	mov	r4, r0
 800e57c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d059      	beq.n	800e636 <_dtoa_r+0x8f6>
 800e582:	4621      	mov	r1, r4
 800e584:	4648      	mov	r0, r9
 800e586:	f000 fd19 	bl	800efbc <__mcmp>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	da53      	bge.n	800e636 <_dtoa_r+0x8f6>
 800e58e:	1e7b      	subs	r3, r7, #1
 800e590:	9304      	str	r3, [sp, #16]
 800e592:	4649      	mov	r1, r9
 800e594:	2300      	movs	r3, #0
 800e596:	220a      	movs	r2, #10
 800e598:	4658      	mov	r0, fp
 800e59a:	f000 faf7 	bl	800eb8c <__multadd>
 800e59e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5a0:	4681      	mov	r9, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f000 8172 	beq.w	800e88c <_dtoa_r+0xb4c>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	220a      	movs	r2, #10
 800e5ae:	4658      	mov	r0, fp
 800e5b0:	f000 faec 	bl	800eb8c <__multadd>
 800e5b4:	9b00      	ldr	r3, [sp, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	dc67      	bgt.n	800e68c <_dtoa_r+0x94c>
 800e5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5be:	2b02      	cmp	r3, #2
 800e5c0:	dc41      	bgt.n	800e646 <_dtoa_r+0x906>
 800e5c2:	e063      	b.n	800e68c <_dtoa_r+0x94c>
 800e5c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e5ca:	e746      	b.n	800e45a <_dtoa_r+0x71a>
 800e5cc:	9b07      	ldr	r3, [sp, #28]
 800e5ce:	1e5c      	subs	r4, r3, #1
 800e5d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	bfbf      	itttt	lt
 800e5d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e5d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e5da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e5dc:	1ae3      	sublt	r3, r4, r3
 800e5de:	bfb4      	ite	lt
 800e5e0:	18d2      	addlt	r2, r2, r3
 800e5e2:	1b1c      	subge	r4, r3, r4
 800e5e4:	9b07      	ldr	r3, [sp, #28]
 800e5e6:	bfbc      	itt	lt
 800e5e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e5ea:	2400      	movlt	r4, #0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	bfb5      	itete	lt
 800e5f0:	eba8 0603 	sublt.w	r6, r8, r3
 800e5f4:	9b07      	ldrge	r3, [sp, #28]
 800e5f6:	2300      	movlt	r3, #0
 800e5f8:	4646      	movge	r6, r8
 800e5fa:	e730      	b.n	800e45e <_dtoa_r+0x71e>
 800e5fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e600:	4646      	mov	r6, r8
 800e602:	e735      	b.n	800e470 <_dtoa_r+0x730>
 800e604:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e606:	e75c      	b.n	800e4c2 <_dtoa_r+0x782>
 800e608:	2300      	movs	r3, #0
 800e60a:	e788      	b.n	800e51e <_dtoa_r+0x7de>
 800e60c:	3fe00000 	.word	0x3fe00000
 800e610:	40240000 	.word	0x40240000
 800e614:	40140000 	.word	0x40140000
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	e780      	b.n	800e51e <_dtoa_r+0x7de>
 800e61c:	2300      	movs	r3, #0
 800e61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e620:	e782      	b.n	800e528 <_dtoa_r+0x7e8>
 800e622:	d099      	beq.n	800e558 <_dtoa_r+0x818>
 800e624:	9a08      	ldr	r2, [sp, #32]
 800e626:	331c      	adds	r3, #28
 800e628:	441a      	add	r2, r3
 800e62a:	4498      	add	r8, r3
 800e62c:	441e      	add	r6, r3
 800e62e:	9208      	str	r2, [sp, #32]
 800e630:	e792      	b.n	800e558 <_dtoa_r+0x818>
 800e632:	4603      	mov	r3, r0
 800e634:	e7f6      	b.n	800e624 <_dtoa_r+0x8e4>
 800e636:	9b07      	ldr	r3, [sp, #28]
 800e638:	9704      	str	r7, [sp, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	dc20      	bgt.n	800e680 <_dtoa_r+0x940>
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e642:	2b02      	cmp	r3, #2
 800e644:	dd1e      	ble.n	800e684 <_dtoa_r+0x944>
 800e646:	9b00      	ldr	r3, [sp, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f47f aec0 	bne.w	800e3ce <_dtoa_r+0x68e>
 800e64e:	4621      	mov	r1, r4
 800e650:	2205      	movs	r2, #5
 800e652:	4658      	mov	r0, fp
 800e654:	f000 fa9a 	bl	800eb8c <__multadd>
 800e658:	4601      	mov	r1, r0
 800e65a:	4604      	mov	r4, r0
 800e65c:	4648      	mov	r0, r9
 800e65e:	f000 fcad 	bl	800efbc <__mcmp>
 800e662:	2800      	cmp	r0, #0
 800e664:	f77f aeb3 	ble.w	800e3ce <_dtoa_r+0x68e>
 800e668:	4656      	mov	r6, sl
 800e66a:	2331      	movs	r3, #49	@ 0x31
 800e66c:	f806 3b01 	strb.w	r3, [r6], #1
 800e670:	9b04      	ldr	r3, [sp, #16]
 800e672:	3301      	adds	r3, #1
 800e674:	9304      	str	r3, [sp, #16]
 800e676:	e6ae      	b.n	800e3d6 <_dtoa_r+0x696>
 800e678:	9c07      	ldr	r4, [sp, #28]
 800e67a:	9704      	str	r7, [sp, #16]
 800e67c:	4625      	mov	r5, r4
 800e67e:	e7f3      	b.n	800e668 <_dtoa_r+0x928>
 800e680:	9b07      	ldr	r3, [sp, #28]
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e686:	2b00      	cmp	r3, #0
 800e688:	f000 8104 	beq.w	800e894 <_dtoa_r+0xb54>
 800e68c:	2e00      	cmp	r6, #0
 800e68e:	dd05      	ble.n	800e69c <_dtoa_r+0x95c>
 800e690:	4629      	mov	r1, r5
 800e692:	4632      	mov	r2, r6
 800e694:	4658      	mov	r0, fp
 800e696:	f000 fc25 	bl	800eee4 <__lshift>
 800e69a:	4605      	mov	r5, r0
 800e69c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d05a      	beq.n	800e758 <_dtoa_r+0xa18>
 800e6a2:	6869      	ldr	r1, [r5, #4]
 800e6a4:	4658      	mov	r0, fp
 800e6a6:	f000 fa0f 	bl	800eac8 <_Balloc>
 800e6aa:	4606      	mov	r6, r0
 800e6ac:	b928      	cbnz	r0, 800e6ba <_dtoa_r+0x97a>
 800e6ae:	4b84      	ldr	r3, [pc, #528]	@ (800e8c0 <_dtoa_r+0xb80>)
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6b6:	f7ff bb5a 	b.w	800dd6e <_dtoa_r+0x2e>
 800e6ba:	692a      	ldr	r2, [r5, #16]
 800e6bc:	3202      	adds	r2, #2
 800e6be:	0092      	lsls	r2, r2, #2
 800e6c0:	f105 010c 	add.w	r1, r5, #12
 800e6c4:	300c      	adds	r0, #12
 800e6c6:	f000 ffaf 	bl	800f628 <memcpy>
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	4658      	mov	r0, fp
 800e6d0:	f000 fc08 	bl	800eee4 <__lshift>
 800e6d4:	f10a 0301 	add.w	r3, sl, #1
 800e6d8:	9307      	str	r3, [sp, #28]
 800e6da:	9b00      	ldr	r3, [sp, #0]
 800e6dc:	4453      	add	r3, sl
 800e6de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6e0:	9b02      	ldr	r3, [sp, #8]
 800e6e2:	f003 0301 	and.w	r3, r3, #1
 800e6e6:	462f      	mov	r7, r5
 800e6e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	9b07      	ldr	r3, [sp, #28]
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	4648      	mov	r0, r9
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	f7ff fa9a 	bl	800dc2e <quorem>
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	9002      	str	r0, [sp, #8]
 800e6fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e702:	4648      	mov	r0, r9
 800e704:	f000 fc5a 	bl	800efbc <__mcmp>
 800e708:	462a      	mov	r2, r5
 800e70a:	9008      	str	r0, [sp, #32]
 800e70c:	4621      	mov	r1, r4
 800e70e:	4658      	mov	r0, fp
 800e710:	f000 fc70 	bl	800eff4 <__mdiff>
 800e714:	68c2      	ldr	r2, [r0, #12]
 800e716:	4606      	mov	r6, r0
 800e718:	bb02      	cbnz	r2, 800e75c <_dtoa_r+0xa1c>
 800e71a:	4601      	mov	r1, r0
 800e71c:	4648      	mov	r0, r9
 800e71e:	f000 fc4d 	bl	800efbc <__mcmp>
 800e722:	4602      	mov	r2, r0
 800e724:	4631      	mov	r1, r6
 800e726:	4658      	mov	r0, fp
 800e728:	920e      	str	r2, [sp, #56]	@ 0x38
 800e72a:	f000 fa0d 	bl	800eb48 <_Bfree>
 800e72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e730:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e732:	9e07      	ldr	r6, [sp, #28]
 800e734:	ea43 0102 	orr.w	r1, r3, r2
 800e738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e73a:	4319      	orrs	r1, r3
 800e73c:	d110      	bne.n	800e760 <_dtoa_r+0xa20>
 800e73e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e742:	d029      	beq.n	800e798 <_dtoa_r+0xa58>
 800e744:	9b08      	ldr	r3, [sp, #32]
 800e746:	2b00      	cmp	r3, #0
 800e748:	dd02      	ble.n	800e750 <_dtoa_r+0xa10>
 800e74a:	9b02      	ldr	r3, [sp, #8]
 800e74c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e750:	9b00      	ldr	r3, [sp, #0]
 800e752:	f883 8000 	strb.w	r8, [r3]
 800e756:	e63f      	b.n	800e3d8 <_dtoa_r+0x698>
 800e758:	4628      	mov	r0, r5
 800e75a:	e7bb      	b.n	800e6d4 <_dtoa_r+0x994>
 800e75c:	2201      	movs	r2, #1
 800e75e:	e7e1      	b.n	800e724 <_dtoa_r+0x9e4>
 800e760:	9b08      	ldr	r3, [sp, #32]
 800e762:	2b00      	cmp	r3, #0
 800e764:	db04      	blt.n	800e770 <_dtoa_r+0xa30>
 800e766:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e768:	430b      	orrs	r3, r1
 800e76a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e76c:	430b      	orrs	r3, r1
 800e76e:	d120      	bne.n	800e7b2 <_dtoa_r+0xa72>
 800e770:	2a00      	cmp	r2, #0
 800e772:	dded      	ble.n	800e750 <_dtoa_r+0xa10>
 800e774:	4649      	mov	r1, r9
 800e776:	2201      	movs	r2, #1
 800e778:	4658      	mov	r0, fp
 800e77a:	f000 fbb3 	bl	800eee4 <__lshift>
 800e77e:	4621      	mov	r1, r4
 800e780:	4681      	mov	r9, r0
 800e782:	f000 fc1b 	bl	800efbc <__mcmp>
 800e786:	2800      	cmp	r0, #0
 800e788:	dc03      	bgt.n	800e792 <_dtoa_r+0xa52>
 800e78a:	d1e1      	bne.n	800e750 <_dtoa_r+0xa10>
 800e78c:	f018 0f01 	tst.w	r8, #1
 800e790:	d0de      	beq.n	800e750 <_dtoa_r+0xa10>
 800e792:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e796:	d1d8      	bne.n	800e74a <_dtoa_r+0xa0a>
 800e798:	9a00      	ldr	r2, [sp, #0]
 800e79a:	2339      	movs	r3, #57	@ 0x39
 800e79c:	7013      	strb	r3, [r2, #0]
 800e79e:	4633      	mov	r3, r6
 800e7a0:	461e      	mov	r6, r3
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e7a8:	2a39      	cmp	r2, #57	@ 0x39
 800e7aa:	d052      	beq.n	800e852 <_dtoa_r+0xb12>
 800e7ac:	3201      	adds	r2, #1
 800e7ae:	701a      	strb	r2, [r3, #0]
 800e7b0:	e612      	b.n	800e3d8 <_dtoa_r+0x698>
 800e7b2:	2a00      	cmp	r2, #0
 800e7b4:	dd07      	ble.n	800e7c6 <_dtoa_r+0xa86>
 800e7b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7ba:	d0ed      	beq.n	800e798 <_dtoa_r+0xa58>
 800e7bc:	9a00      	ldr	r2, [sp, #0]
 800e7be:	f108 0301 	add.w	r3, r8, #1
 800e7c2:	7013      	strb	r3, [r2, #0]
 800e7c4:	e608      	b.n	800e3d8 <_dtoa_r+0x698>
 800e7c6:	9b07      	ldr	r3, [sp, #28]
 800e7c8:	9a07      	ldr	r2, [sp, #28]
 800e7ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d028      	beq.n	800e826 <_dtoa_r+0xae6>
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	220a      	movs	r2, #10
 800e7da:	4658      	mov	r0, fp
 800e7dc:	f000 f9d6 	bl	800eb8c <__multadd>
 800e7e0:	42af      	cmp	r7, r5
 800e7e2:	4681      	mov	r9, r0
 800e7e4:	f04f 0300 	mov.w	r3, #0
 800e7e8:	f04f 020a 	mov.w	r2, #10
 800e7ec:	4639      	mov	r1, r7
 800e7ee:	4658      	mov	r0, fp
 800e7f0:	d107      	bne.n	800e802 <_dtoa_r+0xac2>
 800e7f2:	f000 f9cb 	bl	800eb8c <__multadd>
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	9b07      	ldr	r3, [sp, #28]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	9307      	str	r3, [sp, #28]
 800e800:	e774      	b.n	800e6ec <_dtoa_r+0x9ac>
 800e802:	f000 f9c3 	bl	800eb8c <__multadd>
 800e806:	4629      	mov	r1, r5
 800e808:	4607      	mov	r7, r0
 800e80a:	2300      	movs	r3, #0
 800e80c:	220a      	movs	r2, #10
 800e80e:	4658      	mov	r0, fp
 800e810:	f000 f9bc 	bl	800eb8c <__multadd>
 800e814:	4605      	mov	r5, r0
 800e816:	e7f0      	b.n	800e7fa <_dtoa_r+0xaba>
 800e818:	9b00      	ldr	r3, [sp, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	bfcc      	ite	gt
 800e81e:	461e      	movgt	r6, r3
 800e820:	2601      	movle	r6, #1
 800e822:	4456      	add	r6, sl
 800e824:	2700      	movs	r7, #0
 800e826:	4649      	mov	r1, r9
 800e828:	2201      	movs	r2, #1
 800e82a:	4658      	mov	r0, fp
 800e82c:	f000 fb5a 	bl	800eee4 <__lshift>
 800e830:	4621      	mov	r1, r4
 800e832:	4681      	mov	r9, r0
 800e834:	f000 fbc2 	bl	800efbc <__mcmp>
 800e838:	2800      	cmp	r0, #0
 800e83a:	dcb0      	bgt.n	800e79e <_dtoa_r+0xa5e>
 800e83c:	d102      	bne.n	800e844 <_dtoa_r+0xb04>
 800e83e:	f018 0f01 	tst.w	r8, #1
 800e842:	d1ac      	bne.n	800e79e <_dtoa_r+0xa5e>
 800e844:	4633      	mov	r3, r6
 800e846:	461e      	mov	r6, r3
 800e848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e84c:	2a30      	cmp	r2, #48	@ 0x30
 800e84e:	d0fa      	beq.n	800e846 <_dtoa_r+0xb06>
 800e850:	e5c2      	b.n	800e3d8 <_dtoa_r+0x698>
 800e852:	459a      	cmp	sl, r3
 800e854:	d1a4      	bne.n	800e7a0 <_dtoa_r+0xa60>
 800e856:	9b04      	ldr	r3, [sp, #16]
 800e858:	3301      	adds	r3, #1
 800e85a:	9304      	str	r3, [sp, #16]
 800e85c:	2331      	movs	r3, #49	@ 0x31
 800e85e:	f88a 3000 	strb.w	r3, [sl]
 800e862:	e5b9      	b.n	800e3d8 <_dtoa_r+0x698>
 800e864:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e866:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e8c4 <_dtoa_r+0xb84>
 800e86a:	b11b      	cbz	r3, 800e874 <_dtoa_r+0xb34>
 800e86c:	f10a 0308 	add.w	r3, sl, #8
 800e870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e872:	6013      	str	r3, [r2, #0]
 800e874:	4650      	mov	r0, sl
 800e876:	b019      	add	sp, #100	@ 0x64
 800e878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e87e:	2b01      	cmp	r3, #1
 800e880:	f77f ae37 	ble.w	800e4f2 <_dtoa_r+0x7b2>
 800e884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e886:	930a      	str	r3, [sp, #40]	@ 0x28
 800e888:	2001      	movs	r0, #1
 800e88a:	e655      	b.n	800e538 <_dtoa_r+0x7f8>
 800e88c:	9b00      	ldr	r3, [sp, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f77f aed6 	ble.w	800e640 <_dtoa_r+0x900>
 800e894:	4656      	mov	r6, sl
 800e896:	4621      	mov	r1, r4
 800e898:	4648      	mov	r0, r9
 800e89a:	f7ff f9c8 	bl	800dc2e <quorem>
 800e89e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8a2:	f806 8b01 	strb.w	r8, [r6], #1
 800e8a6:	9b00      	ldr	r3, [sp, #0]
 800e8a8:	eba6 020a 	sub.w	r2, r6, sl
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	ddb3      	ble.n	800e818 <_dtoa_r+0xad8>
 800e8b0:	4649      	mov	r1, r9
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	220a      	movs	r2, #10
 800e8b6:	4658      	mov	r0, fp
 800e8b8:	f000 f968 	bl	800eb8c <__multadd>
 800e8bc:	4681      	mov	r9, r0
 800e8be:	e7ea      	b.n	800e896 <_dtoa_r+0xb56>
 800e8c0:	080102e8 	.word	0x080102e8
 800e8c4:	0801026c 	.word	0x0801026c

0800e8c8 <_free_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	2900      	cmp	r1, #0
 800e8ce:	d041      	beq.n	800e954 <_free_r+0x8c>
 800e8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d4:	1f0c      	subs	r4, r1, #4
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfb8      	it	lt
 800e8da:	18e4      	addlt	r4, r4, r3
 800e8dc:	f000 f8e8 	bl	800eab0 <__malloc_lock>
 800e8e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e958 <_free_r+0x90>)
 800e8e2:	6813      	ldr	r3, [r2, #0]
 800e8e4:	b933      	cbnz	r3, 800e8f4 <_free_r+0x2c>
 800e8e6:	6063      	str	r3, [r4, #4]
 800e8e8:	6014      	str	r4, [r2, #0]
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8f0:	f000 b8e4 	b.w	800eabc <__malloc_unlock>
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	d908      	bls.n	800e90a <_free_r+0x42>
 800e8f8:	6820      	ldr	r0, [r4, #0]
 800e8fa:	1821      	adds	r1, r4, r0
 800e8fc:	428b      	cmp	r3, r1
 800e8fe:	bf01      	itttt	eq
 800e900:	6819      	ldreq	r1, [r3, #0]
 800e902:	685b      	ldreq	r3, [r3, #4]
 800e904:	1809      	addeq	r1, r1, r0
 800e906:	6021      	streq	r1, [r4, #0]
 800e908:	e7ed      	b.n	800e8e6 <_free_r+0x1e>
 800e90a:	461a      	mov	r2, r3
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	b10b      	cbz	r3, 800e914 <_free_r+0x4c>
 800e910:	42a3      	cmp	r3, r4
 800e912:	d9fa      	bls.n	800e90a <_free_r+0x42>
 800e914:	6811      	ldr	r1, [r2, #0]
 800e916:	1850      	adds	r0, r2, r1
 800e918:	42a0      	cmp	r0, r4
 800e91a:	d10b      	bne.n	800e934 <_free_r+0x6c>
 800e91c:	6820      	ldr	r0, [r4, #0]
 800e91e:	4401      	add	r1, r0
 800e920:	1850      	adds	r0, r2, r1
 800e922:	4283      	cmp	r3, r0
 800e924:	6011      	str	r1, [r2, #0]
 800e926:	d1e0      	bne.n	800e8ea <_free_r+0x22>
 800e928:	6818      	ldr	r0, [r3, #0]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	6053      	str	r3, [r2, #4]
 800e92e:	4408      	add	r0, r1
 800e930:	6010      	str	r0, [r2, #0]
 800e932:	e7da      	b.n	800e8ea <_free_r+0x22>
 800e934:	d902      	bls.n	800e93c <_free_r+0x74>
 800e936:	230c      	movs	r3, #12
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	e7d6      	b.n	800e8ea <_free_r+0x22>
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	1821      	adds	r1, r4, r0
 800e940:	428b      	cmp	r3, r1
 800e942:	bf04      	itt	eq
 800e944:	6819      	ldreq	r1, [r3, #0]
 800e946:	685b      	ldreq	r3, [r3, #4]
 800e948:	6063      	str	r3, [r4, #4]
 800e94a:	bf04      	itt	eq
 800e94c:	1809      	addeq	r1, r1, r0
 800e94e:	6021      	streq	r1, [r4, #0]
 800e950:	6054      	str	r4, [r2, #4]
 800e952:	e7ca      	b.n	800e8ea <_free_r+0x22>
 800e954:	bd38      	pop	{r3, r4, r5, pc}
 800e956:	bf00      	nop
 800e958:	200022d0 	.word	0x200022d0

0800e95c <malloc>:
 800e95c:	4b02      	ldr	r3, [pc, #8]	@ (800e968 <malloc+0xc>)
 800e95e:	4601      	mov	r1, r0
 800e960:	6818      	ldr	r0, [r3, #0]
 800e962:	f000 b825 	b.w	800e9b0 <_malloc_r>
 800e966:	bf00      	nop
 800e968:	20000120 	.word	0x20000120

0800e96c <sbrk_aligned>:
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	4e0f      	ldr	r6, [pc, #60]	@ (800e9ac <sbrk_aligned+0x40>)
 800e970:	460c      	mov	r4, r1
 800e972:	6831      	ldr	r1, [r6, #0]
 800e974:	4605      	mov	r5, r0
 800e976:	b911      	cbnz	r1, 800e97e <sbrk_aligned+0x12>
 800e978:	f000 fe46 	bl	800f608 <_sbrk_r>
 800e97c:	6030      	str	r0, [r6, #0]
 800e97e:	4621      	mov	r1, r4
 800e980:	4628      	mov	r0, r5
 800e982:	f000 fe41 	bl	800f608 <_sbrk_r>
 800e986:	1c43      	adds	r3, r0, #1
 800e988:	d103      	bne.n	800e992 <sbrk_aligned+0x26>
 800e98a:	f04f 34ff 	mov.w	r4, #4294967295
 800e98e:	4620      	mov	r0, r4
 800e990:	bd70      	pop	{r4, r5, r6, pc}
 800e992:	1cc4      	adds	r4, r0, #3
 800e994:	f024 0403 	bic.w	r4, r4, #3
 800e998:	42a0      	cmp	r0, r4
 800e99a:	d0f8      	beq.n	800e98e <sbrk_aligned+0x22>
 800e99c:	1a21      	subs	r1, r4, r0
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f000 fe32 	bl	800f608 <_sbrk_r>
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	d1f2      	bne.n	800e98e <sbrk_aligned+0x22>
 800e9a8:	e7ef      	b.n	800e98a <sbrk_aligned+0x1e>
 800e9aa:	bf00      	nop
 800e9ac:	200022cc 	.word	0x200022cc

0800e9b0 <_malloc_r>:
 800e9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9b4:	1ccd      	adds	r5, r1, #3
 800e9b6:	f025 0503 	bic.w	r5, r5, #3
 800e9ba:	3508      	adds	r5, #8
 800e9bc:	2d0c      	cmp	r5, #12
 800e9be:	bf38      	it	cc
 800e9c0:	250c      	movcc	r5, #12
 800e9c2:	2d00      	cmp	r5, #0
 800e9c4:	4606      	mov	r6, r0
 800e9c6:	db01      	blt.n	800e9cc <_malloc_r+0x1c>
 800e9c8:	42a9      	cmp	r1, r5
 800e9ca:	d904      	bls.n	800e9d6 <_malloc_r+0x26>
 800e9cc:	230c      	movs	r3, #12
 800e9ce:	6033      	str	r3, [r6, #0]
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eaac <_malloc_r+0xfc>
 800e9da:	f000 f869 	bl	800eab0 <__malloc_lock>
 800e9de:	f8d8 3000 	ldr.w	r3, [r8]
 800e9e2:	461c      	mov	r4, r3
 800e9e4:	bb44      	cbnz	r4, 800ea38 <_malloc_r+0x88>
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f7ff ffbf 	bl	800e96c <sbrk_aligned>
 800e9ee:	1c43      	adds	r3, r0, #1
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	d158      	bne.n	800eaa6 <_malloc_r+0xf6>
 800e9f4:	f8d8 4000 	ldr.w	r4, [r8]
 800e9f8:	4627      	mov	r7, r4
 800e9fa:	2f00      	cmp	r7, #0
 800e9fc:	d143      	bne.n	800ea86 <_malloc_r+0xd6>
 800e9fe:	2c00      	cmp	r4, #0
 800ea00:	d04b      	beq.n	800ea9a <_malloc_r+0xea>
 800ea02:	6823      	ldr	r3, [r4, #0]
 800ea04:	4639      	mov	r1, r7
 800ea06:	4630      	mov	r0, r6
 800ea08:	eb04 0903 	add.w	r9, r4, r3
 800ea0c:	f000 fdfc 	bl	800f608 <_sbrk_r>
 800ea10:	4581      	cmp	r9, r0
 800ea12:	d142      	bne.n	800ea9a <_malloc_r+0xea>
 800ea14:	6821      	ldr	r1, [r4, #0]
 800ea16:	1a6d      	subs	r5, r5, r1
 800ea18:	4629      	mov	r1, r5
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	f7ff ffa6 	bl	800e96c <sbrk_aligned>
 800ea20:	3001      	adds	r0, #1
 800ea22:	d03a      	beq.n	800ea9a <_malloc_r+0xea>
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	442b      	add	r3, r5
 800ea28:	6023      	str	r3, [r4, #0]
 800ea2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ea2e:	685a      	ldr	r2, [r3, #4]
 800ea30:	bb62      	cbnz	r2, 800ea8c <_malloc_r+0xdc>
 800ea32:	f8c8 7000 	str.w	r7, [r8]
 800ea36:	e00f      	b.n	800ea58 <_malloc_r+0xa8>
 800ea38:	6822      	ldr	r2, [r4, #0]
 800ea3a:	1b52      	subs	r2, r2, r5
 800ea3c:	d420      	bmi.n	800ea80 <_malloc_r+0xd0>
 800ea3e:	2a0b      	cmp	r2, #11
 800ea40:	d917      	bls.n	800ea72 <_malloc_r+0xc2>
 800ea42:	1961      	adds	r1, r4, r5
 800ea44:	42a3      	cmp	r3, r4
 800ea46:	6025      	str	r5, [r4, #0]
 800ea48:	bf18      	it	ne
 800ea4a:	6059      	strne	r1, [r3, #4]
 800ea4c:	6863      	ldr	r3, [r4, #4]
 800ea4e:	bf08      	it	eq
 800ea50:	f8c8 1000 	streq.w	r1, [r8]
 800ea54:	5162      	str	r2, [r4, r5]
 800ea56:	604b      	str	r3, [r1, #4]
 800ea58:	4630      	mov	r0, r6
 800ea5a:	f000 f82f 	bl	800eabc <__malloc_unlock>
 800ea5e:	f104 000b 	add.w	r0, r4, #11
 800ea62:	1d23      	adds	r3, r4, #4
 800ea64:	f020 0007 	bic.w	r0, r0, #7
 800ea68:	1ac2      	subs	r2, r0, r3
 800ea6a:	bf1c      	itt	ne
 800ea6c:	1a1b      	subne	r3, r3, r0
 800ea6e:	50a3      	strne	r3, [r4, r2]
 800ea70:	e7af      	b.n	800e9d2 <_malloc_r+0x22>
 800ea72:	6862      	ldr	r2, [r4, #4]
 800ea74:	42a3      	cmp	r3, r4
 800ea76:	bf0c      	ite	eq
 800ea78:	f8c8 2000 	streq.w	r2, [r8]
 800ea7c:	605a      	strne	r2, [r3, #4]
 800ea7e:	e7eb      	b.n	800ea58 <_malloc_r+0xa8>
 800ea80:	4623      	mov	r3, r4
 800ea82:	6864      	ldr	r4, [r4, #4]
 800ea84:	e7ae      	b.n	800e9e4 <_malloc_r+0x34>
 800ea86:	463c      	mov	r4, r7
 800ea88:	687f      	ldr	r7, [r7, #4]
 800ea8a:	e7b6      	b.n	800e9fa <_malloc_r+0x4a>
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	42a3      	cmp	r3, r4
 800ea92:	d1fb      	bne.n	800ea8c <_malloc_r+0xdc>
 800ea94:	2300      	movs	r3, #0
 800ea96:	6053      	str	r3, [r2, #4]
 800ea98:	e7de      	b.n	800ea58 <_malloc_r+0xa8>
 800ea9a:	230c      	movs	r3, #12
 800ea9c:	6033      	str	r3, [r6, #0]
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f000 f80c 	bl	800eabc <__malloc_unlock>
 800eaa4:	e794      	b.n	800e9d0 <_malloc_r+0x20>
 800eaa6:	6005      	str	r5, [r0, #0]
 800eaa8:	e7d6      	b.n	800ea58 <_malloc_r+0xa8>
 800eaaa:	bf00      	nop
 800eaac:	200022d0 	.word	0x200022d0

0800eab0 <__malloc_lock>:
 800eab0:	4801      	ldr	r0, [pc, #4]	@ (800eab8 <__malloc_lock+0x8>)
 800eab2:	f7ff b8ba 	b.w	800dc2a <__retarget_lock_acquire_recursive>
 800eab6:	bf00      	nop
 800eab8:	200022c8 	.word	0x200022c8

0800eabc <__malloc_unlock>:
 800eabc:	4801      	ldr	r0, [pc, #4]	@ (800eac4 <__malloc_unlock+0x8>)
 800eabe:	f7ff b8b5 	b.w	800dc2c <__retarget_lock_release_recursive>
 800eac2:	bf00      	nop
 800eac4:	200022c8 	.word	0x200022c8

0800eac8 <_Balloc>:
 800eac8:	b570      	push	{r4, r5, r6, lr}
 800eaca:	69c6      	ldr	r6, [r0, #28]
 800eacc:	4604      	mov	r4, r0
 800eace:	460d      	mov	r5, r1
 800ead0:	b976      	cbnz	r6, 800eaf0 <_Balloc+0x28>
 800ead2:	2010      	movs	r0, #16
 800ead4:	f7ff ff42 	bl	800e95c <malloc>
 800ead8:	4602      	mov	r2, r0
 800eada:	61e0      	str	r0, [r4, #28]
 800eadc:	b920      	cbnz	r0, 800eae8 <_Balloc+0x20>
 800eade:	4b18      	ldr	r3, [pc, #96]	@ (800eb40 <_Balloc+0x78>)
 800eae0:	4818      	ldr	r0, [pc, #96]	@ (800eb44 <_Balloc+0x7c>)
 800eae2:	216b      	movs	r1, #107	@ 0x6b
 800eae4:	f000 fdae 	bl	800f644 <__assert_func>
 800eae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaec:	6006      	str	r6, [r0, #0]
 800eaee:	60c6      	str	r6, [r0, #12]
 800eaf0:	69e6      	ldr	r6, [r4, #28]
 800eaf2:	68f3      	ldr	r3, [r6, #12]
 800eaf4:	b183      	cbz	r3, 800eb18 <_Balloc+0x50>
 800eaf6:	69e3      	ldr	r3, [r4, #28]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eafe:	b9b8      	cbnz	r0, 800eb30 <_Balloc+0x68>
 800eb00:	2101      	movs	r1, #1
 800eb02:	fa01 f605 	lsl.w	r6, r1, r5
 800eb06:	1d72      	adds	r2, r6, #5
 800eb08:	0092      	lsls	r2, r2, #2
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f000 fdb8 	bl	800f680 <_calloc_r>
 800eb10:	b160      	cbz	r0, 800eb2c <_Balloc+0x64>
 800eb12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb16:	e00e      	b.n	800eb36 <_Balloc+0x6e>
 800eb18:	2221      	movs	r2, #33	@ 0x21
 800eb1a:	2104      	movs	r1, #4
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 fdaf 	bl	800f680 <_calloc_r>
 800eb22:	69e3      	ldr	r3, [r4, #28]
 800eb24:	60f0      	str	r0, [r6, #12]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1e4      	bne.n	800eaf6 <_Balloc+0x2e>
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	6802      	ldr	r2, [r0, #0]
 800eb32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb36:	2300      	movs	r3, #0
 800eb38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb3c:	e7f7      	b.n	800eb2e <_Balloc+0x66>
 800eb3e:	bf00      	nop
 800eb40:	08010279 	.word	0x08010279
 800eb44:	080102f9 	.word	0x080102f9

0800eb48 <_Bfree>:
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	69c6      	ldr	r6, [r0, #28]
 800eb4c:	4605      	mov	r5, r0
 800eb4e:	460c      	mov	r4, r1
 800eb50:	b976      	cbnz	r6, 800eb70 <_Bfree+0x28>
 800eb52:	2010      	movs	r0, #16
 800eb54:	f7ff ff02 	bl	800e95c <malloc>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	61e8      	str	r0, [r5, #28]
 800eb5c:	b920      	cbnz	r0, 800eb68 <_Bfree+0x20>
 800eb5e:	4b09      	ldr	r3, [pc, #36]	@ (800eb84 <_Bfree+0x3c>)
 800eb60:	4809      	ldr	r0, [pc, #36]	@ (800eb88 <_Bfree+0x40>)
 800eb62:	218f      	movs	r1, #143	@ 0x8f
 800eb64:	f000 fd6e 	bl	800f644 <__assert_func>
 800eb68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb6c:	6006      	str	r6, [r0, #0]
 800eb6e:	60c6      	str	r6, [r0, #12]
 800eb70:	b13c      	cbz	r4, 800eb82 <_Bfree+0x3a>
 800eb72:	69eb      	ldr	r3, [r5, #28]
 800eb74:	6862      	ldr	r2, [r4, #4]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb7c:	6021      	str	r1, [r4, #0]
 800eb7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb82:	bd70      	pop	{r4, r5, r6, pc}
 800eb84:	08010279 	.word	0x08010279
 800eb88:	080102f9 	.word	0x080102f9

0800eb8c <__multadd>:
 800eb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb90:	690d      	ldr	r5, [r1, #16]
 800eb92:	4607      	mov	r7, r0
 800eb94:	460c      	mov	r4, r1
 800eb96:	461e      	mov	r6, r3
 800eb98:	f101 0c14 	add.w	ip, r1, #20
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	f8dc 3000 	ldr.w	r3, [ip]
 800eba2:	b299      	uxth	r1, r3
 800eba4:	fb02 6101 	mla	r1, r2, r1, r6
 800eba8:	0c1e      	lsrs	r6, r3, #16
 800ebaa:	0c0b      	lsrs	r3, r1, #16
 800ebac:	fb02 3306 	mla	r3, r2, r6, r3
 800ebb0:	b289      	uxth	r1, r1
 800ebb2:	3001      	adds	r0, #1
 800ebb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebb8:	4285      	cmp	r5, r0
 800ebba:	f84c 1b04 	str.w	r1, [ip], #4
 800ebbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebc2:	dcec      	bgt.n	800eb9e <__multadd+0x12>
 800ebc4:	b30e      	cbz	r6, 800ec0a <__multadd+0x7e>
 800ebc6:	68a3      	ldr	r3, [r4, #8]
 800ebc8:	42ab      	cmp	r3, r5
 800ebca:	dc19      	bgt.n	800ec00 <__multadd+0x74>
 800ebcc:	6861      	ldr	r1, [r4, #4]
 800ebce:	4638      	mov	r0, r7
 800ebd0:	3101      	adds	r1, #1
 800ebd2:	f7ff ff79 	bl	800eac8 <_Balloc>
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	b928      	cbnz	r0, 800ebe6 <__multadd+0x5a>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ec10 <__multadd+0x84>)
 800ebde:	480d      	ldr	r0, [pc, #52]	@ (800ec14 <__multadd+0x88>)
 800ebe0:	21ba      	movs	r1, #186	@ 0xba
 800ebe2:	f000 fd2f 	bl	800f644 <__assert_func>
 800ebe6:	6922      	ldr	r2, [r4, #16]
 800ebe8:	3202      	adds	r2, #2
 800ebea:	f104 010c 	add.w	r1, r4, #12
 800ebee:	0092      	lsls	r2, r2, #2
 800ebf0:	300c      	adds	r0, #12
 800ebf2:	f000 fd19 	bl	800f628 <memcpy>
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	f7ff ffa5 	bl	800eb48 <_Bfree>
 800ebfe:	4644      	mov	r4, r8
 800ec00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec04:	3501      	adds	r5, #1
 800ec06:	615e      	str	r6, [r3, #20]
 800ec08:	6125      	str	r5, [r4, #16]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec10:	080102e8 	.word	0x080102e8
 800ec14:	080102f9 	.word	0x080102f9

0800ec18 <__hi0bits>:
 800ec18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	bf36      	itet	cc
 800ec20:	0403      	lslcc	r3, r0, #16
 800ec22:	2000      	movcs	r0, #0
 800ec24:	2010      	movcc	r0, #16
 800ec26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec2a:	bf3c      	itt	cc
 800ec2c:	021b      	lslcc	r3, r3, #8
 800ec2e:	3008      	addcc	r0, #8
 800ec30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec34:	bf3c      	itt	cc
 800ec36:	011b      	lslcc	r3, r3, #4
 800ec38:	3004      	addcc	r0, #4
 800ec3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec3e:	bf3c      	itt	cc
 800ec40:	009b      	lslcc	r3, r3, #2
 800ec42:	3002      	addcc	r0, #2
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	db05      	blt.n	800ec54 <__hi0bits+0x3c>
 800ec48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec4c:	f100 0001 	add.w	r0, r0, #1
 800ec50:	bf08      	it	eq
 800ec52:	2020      	moveq	r0, #32
 800ec54:	4770      	bx	lr

0800ec56 <__lo0bits>:
 800ec56:	6803      	ldr	r3, [r0, #0]
 800ec58:	4602      	mov	r2, r0
 800ec5a:	f013 0007 	ands.w	r0, r3, #7
 800ec5e:	d00b      	beq.n	800ec78 <__lo0bits+0x22>
 800ec60:	07d9      	lsls	r1, r3, #31
 800ec62:	d421      	bmi.n	800eca8 <__lo0bits+0x52>
 800ec64:	0798      	lsls	r0, r3, #30
 800ec66:	bf49      	itett	mi
 800ec68:	085b      	lsrmi	r3, r3, #1
 800ec6a:	089b      	lsrpl	r3, r3, #2
 800ec6c:	2001      	movmi	r0, #1
 800ec6e:	6013      	strmi	r3, [r2, #0]
 800ec70:	bf5c      	itt	pl
 800ec72:	6013      	strpl	r3, [r2, #0]
 800ec74:	2002      	movpl	r0, #2
 800ec76:	4770      	bx	lr
 800ec78:	b299      	uxth	r1, r3
 800ec7a:	b909      	cbnz	r1, 800ec80 <__lo0bits+0x2a>
 800ec7c:	0c1b      	lsrs	r3, r3, #16
 800ec7e:	2010      	movs	r0, #16
 800ec80:	b2d9      	uxtb	r1, r3
 800ec82:	b909      	cbnz	r1, 800ec88 <__lo0bits+0x32>
 800ec84:	3008      	adds	r0, #8
 800ec86:	0a1b      	lsrs	r3, r3, #8
 800ec88:	0719      	lsls	r1, r3, #28
 800ec8a:	bf04      	itt	eq
 800ec8c:	091b      	lsreq	r3, r3, #4
 800ec8e:	3004      	addeq	r0, #4
 800ec90:	0799      	lsls	r1, r3, #30
 800ec92:	bf04      	itt	eq
 800ec94:	089b      	lsreq	r3, r3, #2
 800ec96:	3002      	addeq	r0, #2
 800ec98:	07d9      	lsls	r1, r3, #31
 800ec9a:	d403      	bmi.n	800eca4 <__lo0bits+0x4e>
 800ec9c:	085b      	lsrs	r3, r3, #1
 800ec9e:	f100 0001 	add.w	r0, r0, #1
 800eca2:	d003      	beq.n	800ecac <__lo0bits+0x56>
 800eca4:	6013      	str	r3, [r2, #0]
 800eca6:	4770      	bx	lr
 800eca8:	2000      	movs	r0, #0
 800ecaa:	4770      	bx	lr
 800ecac:	2020      	movs	r0, #32
 800ecae:	4770      	bx	lr

0800ecb0 <__i2b>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	f7ff ff07 	bl	800eac8 <_Balloc>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	b928      	cbnz	r0, 800ecca <__i2b+0x1a>
 800ecbe:	4b05      	ldr	r3, [pc, #20]	@ (800ecd4 <__i2b+0x24>)
 800ecc0:	4805      	ldr	r0, [pc, #20]	@ (800ecd8 <__i2b+0x28>)
 800ecc2:	f240 1145 	movw	r1, #325	@ 0x145
 800ecc6:	f000 fcbd 	bl	800f644 <__assert_func>
 800ecca:	2301      	movs	r3, #1
 800eccc:	6144      	str	r4, [r0, #20]
 800ecce:	6103      	str	r3, [r0, #16]
 800ecd0:	bd10      	pop	{r4, pc}
 800ecd2:	bf00      	nop
 800ecd4:	080102e8 	.word	0x080102e8
 800ecd8:	080102f9 	.word	0x080102f9

0800ecdc <__multiply>:
 800ecdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece0:	4614      	mov	r4, r2
 800ece2:	690a      	ldr	r2, [r1, #16]
 800ece4:	6923      	ldr	r3, [r4, #16]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	bfa8      	it	ge
 800ecea:	4623      	movge	r3, r4
 800ecec:	460f      	mov	r7, r1
 800ecee:	bfa4      	itt	ge
 800ecf0:	460c      	movge	r4, r1
 800ecf2:	461f      	movge	r7, r3
 800ecf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ecf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ecfc:	68a3      	ldr	r3, [r4, #8]
 800ecfe:	6861      	ldr	r1, [r4, #4]
 800ed00:	eb0a 0609 	add.w	r6, sl, r9
 800ed04:	42b3      	cmp	r3, r6
 800ed06:	b085      	sub	sp, #20
 800ed08:	bfb8      	it	lt
 800ed0a:	3101      	addlt	r1, #1
 800ed0c:	f7ff fedc 	bl	800eac8 <_Balloc>
 800ed10:	b930      	cbnz	r0, 800ed20 <__multiply+0x44>
 800ed12:	4602      	mov	r2, r0
 800ed14:	4b44      	ldr	r3, [pc, #272]	@ (800ee28 <__multiply+0x14c>)
 800ed16:	4845      	ldr	r0, [pc, #276]	@ (800ee2c <__multiply+0x150>)
 800ed18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ed1c:	f000 fc92 	bl	800f644 <__assert_func>
 800ed20:	f100 0514 	add.w	r5, r0, #20
 800ed24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed28:	462b      	mov	r3, r5
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	4543      	cmp	r3, r8
 800ed2e:	d321      	bcc.n	800ed74 <__multiply+0x98>
 800ed30:	f107 0114 	add.w	r1, r7, #20
 800ed34:	f104 0214 	add.w	r2, r4, #20
 800ed38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ed3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ed40:	9302      	str	r3, [sp, #8]
 800ed42:	1b13      	subs	r3, r2, r4
 800ed44:	3b15      	subs	r3, #21
 800ed46:	f023 0303 	bic.w	r3, r3, #3
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	f104 0715 	add.w	r7, r4, #21
 800ed50:	42ba      	cmp	r2, r7
 800ed52:	bf38      	it	cc
 800ed54:	2304      	movcc	r3, #4
 800ed56:	9301      	str	r3, [sp, #4]
 800ed58:	9b02      	ldr	r3, [sp, #8]
 800ed5a:	9103      	str	r1, [sp, #12]
 800ed5c:	428b      	cmp	r3, r1
 800ed5e:	d80c      	bhi.n	800ed7a <__multiply+0x9e>
 800ed60:	2e00      	cmp	r6, #0
 800ed62:	dd03      	ble.n	800ed6c <__multiply+0x90>
 800ed64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d05b      	beq.n	800ee24 <__multiply+0x148>
 800ed6c:	6106      	str	r6, [r0, #16]
 800ed6e:	b005      	add	sp, #20
 800ed70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed74:	f843 2b04 	str.w	r2, [r3], #4
 800ed78:	e7d8      	b.n	800ed2c <__multiply+0x50>
 800ed7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed7e:	f1ba 0f00 	cmp.w	sl, #0
 800ed82:	d024      	beq.n	800edce <__multiply+0xf2>
 800ed84:	f104 0e14 	add.w	lr, r4, #20
 800ed88:	46a9      	mov	r9, r5
 800ed8a:	f04f 0c00 	mov.w	ip, #0
 800ed8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed92:	f8d9 3000 	ldr.w	r3, [r9]
 800ed96:	fa1f fb87 	uxth.w	fp, r7
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800eda0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eda4:	f8d9 7000 	ldr.w	r7, [r9]
 800eda8:	4463      	add	r3, ip
 800edaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edae:	fb0a c70b 	mla	r7, sl, fp, ip
 800edb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800edbc:	4572      	cmp	r2, lr
 800edbe:	f849 3b04 	str.w	r3, [r9], #4
 800edc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edc6:	d8e2      	bhi.n	800ed8e <__multiply+0xb2>
 800edc8:	9b01      	ldr	r3, [sp, #4]
 800edca:	f845 c003 	str.w	ip, [r5, r3]
 800edce:	9b03      	ldr	r3, [sp, #12]
 800edd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800edd4:	3104      	adds	r1, #4
 800edd6:	f1b9 0f00 	cmp.w	r9, #0
 800edda:	d021      	beq.n	800ee20 <__multiply+0x144>
 800eddc:	682b      	ldr	r3, [r5, #0]
 800edde:	f104 0c14 	add.w	ip, r4, #20
 800ede2:	46ae      	mov	lr, r5
 800ede4:	f04f 0a00 	mov.w	sl, #0
 800ede8:	f8bc b000 	ldrh.w	fp, [ip]
 800edec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800edf0:	fb09 770b 	mla	r7, r9, fp, r7
 800edf4:	4457      	add	r7, sl
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800edfc:	f84e 3b04 	str.w	r3, [lr], #4
 800ee00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee08:	f8be 3000 	ldrh.w	r3, [lr]
 800ee0c:	fb09 330a 	mla	r3, r9, sl, r3
 800ee10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ee14:	4562      	cmp	r2, ip
 800ee16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee1a:	d8e5      	bhi.n	800ede8 <__multiply+0x10c>
 800ee1c:	9f01      	ldr	r7, [sp, #4]
 800ee1e:	51eb      	str	r3, [r5, r7]
 800ee20:	3504      	adds	r5, #4
 800ee22:	e799      	b.n	800ed58 <__multiply+0x7c>
 800ee24:	3e01      	subs	r6, #1
 800ee26:	e79b      	b.n	800ed60 <__multiply+0x84>
 800ee28:	080102e8 	.word	0x080102e8
 800ee2c:	080102f9 	.word	0x080102f9

0800ee30 <__pow5mult>:
 800ee30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee34:	4615      	mov	r5, r2
 800ee36:	f012 0203 	ands.w	r2, r2, #3
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	460e      	mov	r6, r1
 800ee3e:	d007      	beq.n	800ee50 <__pow5mult+0x20>
 800ee40:	4c25      	ldr	r4, [pc, #148]	@ (800eed8 <__pow5mult+0xa8>)
 800ee42:	3a01      	subs	r2, #1
 800ee44:	2300      	movs	r3, #0
 800ee46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee4a:	f7ff fe9f 	bl	800eb8c <__multadd>
 800ee4e:	4606      	mov	r6, r0
 800ee50:	10ad      	asrs	r5, r5, #2
 800ee52:	d03d      	beq.n	800eed0 <__pow5mult+0xa0>
 800ee54:	69fc      	ldr	r4, [r7, #28]
 800ee56:	b97c      	cbnz	r4, 800ee78 <__pow5mult+0x48>
 800ee58:	2010      	movs	r0, #16
 800ee5a:	f7ff fd7f 	bl	800e95c <malloc>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	61f8      	str	r0, [r7, #28]
 800ee62:	b928      	cbnz	r0, 800ee70 <__pow5mult+0x40>
 800ee64:	4b1d      	ldr	r3, [pc, #116]	@ (800eedc <__pow5mult+0xac>)
 800ee66:	481e      	ldr	r0, [pc, #120]	@ (800eee0 <__pow5mult+0xb0>)
 800ee68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee6c:	f000 fbea 	bl	800f644 <__assert_func>
 800ee70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee74:	6004      	str	r4, [r0, #0]
 800ee76:	60c4      	str	r4, [r0, #12]
 800ee78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee80:	b94c      	cbnz	r4, 800ee96 <__pow5mult+0x66>
 800ee82:	f240 2171 	movw	r1, #625	@ 0x271
 800ee86:	4638      	mov	r0, r7
 800ee88:	f7ff ff12 	bl	800ecb0 <__i2b>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee92:	4604      	mov	r4, r0
 800ee94:	6003      	str	r3, [r0, #0]
 800ee96:	f04f 0900 	mov.w	r9, #0
 800ee9a:	07eb      	lsls	r3, r5, #31
 800ee9c:	d50a      	bpl.n	800eeb4 <__pow5mult+0x84>
 800ee9e:	4631      	mov	r1, r6
 800eea0:	4622      	mov	r2, r4
 800eea2:	4638      	mov	r0, r7
 800eea4:	f7ff ff1a 	bl	800ecdc <__multiply>
 800eea8:	4631      	mov	r1, r6
 800eeaa:	4680      	mov	r8, r0
 800eeac:	4638      	mov	r0, r7
 800eeae:	f7ff fe4b 	bl	800eb48 <_Bfree>
 800eeb2:	4646      	mov	r6, r8
 800eeb4:	106d      	asrs	r5, r5, #1
 800eeb6:	d00b      	beq.n	800eed0 <__pow5mult+0xa0>
 800eeb8:	6820      	ldr	r0, [r4, #0]
 800eeba:	b938      	cbnz	r0, 800eecc <__pow5mult+0x9c>
 800eebc:	4622      	mov	r2, r4
 800eebe:	4621      	mov	r1, r4
 800eec0:	4638      	mov	r0, r7
 800eec2:	f7ff ff0b 	bl	800ecdc <__multiply>
 800eec6:	6020      	str	r0, [r4, #0]
 800eec8:	f8c0 9000 	str.w	r9, [r0]
 800eecc:	4604      	mov	r4, r0
 800eece:	e7e4      	b.n	800ee9a <__pow5mult+0x6a>
 800eed0:	4630      	mov	r0, r6
 800eed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eed6:	bf00      	nop
 800eed8:	08010354 	.word	0x08010354
 800eedc:	08010279 	.word	0x08010279
 800eee0:	080102f9 	.word	0x080102f9

0800eee4 <__lshift>:
 800eee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eee8:	460c      	mov	r4, r1
 800eeea:	6849      	ldr	r1, [r1, #4]
 800eeec:	6923      	ldr	r3, [r4, #16]
 800eeee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	4607      	mov	r7, r0
 800eef6:	4691      	mov	r9, r2
 800eef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eefc:	f108 0601 	add.w	r6, r8, #1
 800ef00:	42b3      	cmp	r3, r6
 800ef02:	db0b      	blt.n	800ef1c <__lshift+0x38>
 800ef04:	4638      	mov	r0, r7
 800ef06:	f7ff fddf 	bl	800eac8 <_Balloc>
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	b948      	cbnz	r0, 800ef22 <__lshift+0x3e>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	4b28      	ldr	r3, [pc, #160]	@ (800efb4 <__lshift+0xd0>)
 800ef12:	4829      	ldr	r0, [pc, #164]	@ (800efb8 <__lshift+0xd4>)
 800ef14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ef18:	f000 fb94 	bl	800f644 <__assert_func>
 800ef1c:	3101      	adds	r1, #1
 800ef1e:	005b      	lsls	r3, r3, #1
 800ef20:	e7ee      	b.n	800ef00 <__lshift+0x1c>
 800ef22:	2300      	movs	r3, #0
 800ef24:	f100 0114 	add.w	r1, r0, #20
 800ef28:	f100 0210 	add.w	r2, r0, #16
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	4553      	cmp	r3, sl
 800ef30:	db33      	blt.n	800ef9a <__lshift+0xb6>
 800ef32:	6920      	ldr	r0, [r4, #16]
 800ef34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef38:	f104 0314 	add.w	r3, r4, #20
 800ef3c:	f019 091f 	ands.w	r9, r9, #31
 800ef40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef48:	d02b      	beq.n	800efa2 <__lshift+0xbe>
 800ef4a:	f1c9 0e20 	rsb	lr, r9, #32
 800ef4e:	468a      	mov	sl, r1
 800ef50:	2200      	movs	r2, #0
 800ef52:	6818      	ldr	r0, [r3, #0]
 800ef54:	fa00 f009 	lsl.w	r0, r0, r9
 800ef58:	4310      	orrs	r0, r2
 800ef5a:	f84a 0b04 	str.w	r0, [sl], #4
 800ef5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef62:	459c      	cmp	ip, r3
 800ef64:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef68:	d8f3      	bhi.n	800ef52 <__lshift+0x6e>
 800ef6a:	ebac 0304 	sub.w	r3, ip, r4
 800ef6e:	3b15      	subs	r3, #21
 800ef70:	f023 0303 	bic.w	r3, r3, #3
 800ef74:	3304      	adds	r3, #4
 800ef76:	f104 0015 	add.w	r0, r4, #21
 800ef7a:	4584      	cmp	ip, r0
 800ef7c:	bf38      	it	cc
 800ef7e:	2304      	movcc	r3, #4
 800ef80:	50ca      	str	r2, [r1, r3]
 800ef82:	b10a      	cbz	r2, 800ef88 <__lshift+0xa4>
 800ef84:	f108 0602 	add.w	r6, r8, #2
 800ef88:	3e01      	subs	r6, #1
 800ef8a:	4638      	mov	r0, r7
 800ef8c:	612e      	str	r6, [r5, #16]
 800ef8e:	4621      	mov	r1, r4
 800ef90:	f7ff fdda 	bl	800eb48 <_Bfree>
 800ef94:	4628      	mov	r0, r5
 800ef96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef9e:	3301      	adds	r3, #1
 800efa0:	e7c5      	b.n	800ef2e <__lshift+0x4a>
 800efa2:	3904      	subs	r1, #4
 800efa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efa8:	f841 2f04 	str.w	r2, [r1, #4]!
 800efac:	459c      	cmp	ip, r3
 800efae:	d8f9      	bhi.n	800efa4 <__lshift+0xc0>
 800efb0:	e7ea      	b.n	800ef88 <__lshift+0xa4>
 800efb2:	bf00      	nop
 800efb4:	080102e8 	.word	0x080102e8
 800efb8:	080102f9 	.word	0x080102f9

0800efbc <__mcmp>:
 800efbc:	690a      	ldr	r2, [r1, #16]
 800efbe:	4603      	mov	r3, r0
 800efc0:	6900      	ldr	r0, [r0, #16]
 800efc2:	1a80      	subs	r0, r0, r2
 800efc4:	b530      	push	{r4, r5, lr}
 800efc6:	d10e      	bne.n	800efe6 <__mcmp+0x2a>
 800efc8:	3314      	adds	r3, #20
 800efca:	3114      	adds	r1, #20
 800efcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800efd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800efd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800efd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800efdc:	4295      	cmp	r5, r2
 800efde:	d003      	beq.n	800efe8 <__mcmp+0x2c>
 800efe0:	d205      	bcs.n	800efee <__mcmp+0x32>
 800efe2:	f04f 30ff 	mov.w	r0, #4294967295
 800efe6:	bd30      	pop	{r4, r5, pc}
 800efe8:	42a3      	cmp	r3, r4
 800efea:	d3f3      	bcc.n	800efd4 <__mcmp+0x18>
 800efec:	e7fb      	b.n	800efe6 <__mcmp+0x2a>
 800efee:	2001      	movs	r0, #1
 800eff0:	e7f9      	b.n	800efe6 <__mcmp+0x2a>
	...

0800eff4 <__mdiff>:
 800eff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff8:	4689      	mov	r9, r1
 800effa:	4606      	mov	r6, r0
 800effc:	4611      	mov	r1, r2
 800effe:	4648      	mov	r0, r9
 800f000:	4614      	mov	r4, r2
 800f002:	f7ff ffdb 	bl	800efbc <__mcmp>
 800f006:	1e05      	subs	r5, r0, #0
 800f008:	d112      	bne.n	800f030 <__mdiff+0x3c>
 800f00a:	4629      	mov	r1, r5
 800f00c:	4630      	mov	r0, r6
 800f00e:	f7ff fd5b 	bl	800eac8 <_Balloc>
 800f012:	4602      	mov	r2, r0
 800f014:	b928      	cbnz	r0, 800f022 <__mdiff+0x2e>
 800f016:	4b3f      	ldr	r3, [pc, #252]	@ (800f114 <__mdiff+0x120>)
 800f018:	f240 2137 	movw	r1, #567	@ 0x237
 800f01c:	483e      	ldr	r0, [pc, #248]	@ (800f118 <__mdiff+0x124>)
 800f01e:	f000 fb11 	bl	800f644 <__assert_func>
 800f022:	2301      	movs	r3, #1
 800f024:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f028:	4610      	mov	r0, r2
 800f02a:	b003      	add	sp, #12
 800f02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f030:	bfbc      	itt	lt
 800f032:	464b      	movlt	r3, r9
 800f034:	46a1      	movlt	r9, r4
 800f036:	4630      	mov	r0, r6
 800f038:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f03c:	bfba      	itte	lt
 800f03e:	461c      	movlt	r4, r3
 800f040:	2501      	movlt	r5, #1
 800f042:	2500      	movge	r5, #0
 800f044:	f7ff fd40 	bl	800eac8 <_Balloc>
 800f048:	4602      	mov	r2, r0
 800f04a:	b918      	cbnz	r0, 800f054 <__mdiff+0x60>
 800f04c:	4b31      	ldr	r3, [pc, #196]	@ (800f114 <__mdiff+0x120>)
 800f04e:	f240 2145 	movw	r1, #581	@ 0x245
 800f052:	e7e3      	b.n	800f01c <__mdiff+0x28>
 800f054:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f058:	6926      	ldr	r6, [r4, #16]
 800f05a:	60c5      	str	r5, [r0, #12]
 800f05c:	f109 0310 	add.w	r3, r9, #16
 800f060:	f109 0514 	add.w	r5, r9, #20
 800f064:	f104 0e14 	add.w	lr, r4, #20
 800f068:	f100 0b14 	add.w	fp, r0, #20
 800f06c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f070:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	46d9      	mov	r9, fp
 800f078:	f04f 0c00 	mov.w	ip, #0
 800f07c:	9b01      	ldr	r3, [sp, #4]
 800f07e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f082:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f086:	9301      	str	r3, [sp, #4]
 800f088:	fa1f f38a 	uxth.w	r3, sl
 800f08c:	4619      	mov	r1, r3
 800f08e:	b283      	uxth	r3, r0
 800f090:	1acb      	subs	r3, r1, r3
 800f092:	0c00      	lsrs	r0, r0, #16
 800f094:	4463      	add	r3, ip
 800f096:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f09a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f0a4:	4576      	cmp	r6, lr
 800f0a6:	f849 3b04 	str.w	r3, [r9], #4
 800f0aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0ae:	d8e5      	bhi.n	800f07c <__mdiff+0x88>
 800f0b0:	1b33      	subs	r3, r6, r4
 800f0b2:	3b15      	subs	r3, #21
 800f0b4:	f023 0303 	bic.w	r3, r3, #3
 800f0b8:	3415      	adds	r4, #21
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	42a6      	cmp	r6, r4
 800f0be:	bf38      	it	cc
 800f0c0:	2304      	movcc	r3, #4
 800f0c2:	441d      	add	r5, r3
 800f0c4:	445b      	add	r3, fp
 800f0c6:	461e      	mov	r6, r3
 800f0c8:	462c      	mov	r4, r5
 800f0ca:	4544      	cmp	r4, r8
 800f0cc:	d30e      	bcc.n	800f0ec <__mdiff+0xf8>
 800f0ce:	f108 0103 	add.w	r1, r8, #3
 800f0d2:	1b49      	subs	r1, r1, r5
 800f0d4:	f021 0103 	bic.w	r1, r1, #3
 800f0d8:	3d03      	subs	r5, #3
 800f0da:	45a8      	cmp	r8, r5
 800f0dc:	bf38      	it	cc
 800f0de:	2100      	movcc	r1, #0
 800f0e0:	440b      	add	r3, r1
 800f0e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0e6:	b191      	cbz	r1, 800f10e <__mdiff+0x11a>
 800f0e8:	6117      	str	r7, [r2, #16]
 800f0ea:	e79d      	b.n	800f028 <__mdiff+0x34>
 800f0ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800f0f0:	46e6      	mov	lr, ip
 800f0f2:	0c08      	lsrs	r0, r1, #16
 800f0f4:	fa1c fc81 	uxtah	ip, ip, r1
 800f0f8:	4471      	add	r1, lr
 800f0fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f0fe:	b289      	uxth	r1, r1
 800f100:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f104:	f846 1b04 	str.w	r1, [r6], #4
 800f108:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f10c:	e7dd      	b.n	800f0ca <__mdiff+0xd6>
 800f10e:	3f01      	subs	r7, #1
 800f110:	e7e7      	b.n	800f0e2 <__mdiff+0xee>
 800f112:	bf00      	nop
 800f114:	080102e8 	.word	0x080102e8
 800f118:	080102f9 	.word	0x080102f9

0800f11c <__d2b>:
 800f11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f120:	460f      	mov	r7, r1
 800f122:	2101      	movs	r1, #1
 800f124:	ec59 8b10 	vmov	r8, r9, d0
 800f128:	4616      	mov	r6, r2
 800f12a:	f7ff fccd 	bl	800eac8 <_Balloc>
 800f12e:	4604      	mov	r4, r0
 800f130:	b930      	cbnz	r0, 800f140 <__d2b+0x24>
 800f132:	4602      	mov	r2, r0
 800f134:	4b23      	ldr	r3, [pc, #140]	@ (800f1c4 <__d2b+0xa8>)
 800f136:	4824      	ldr	r0, [pc, #144]	@ (800f1c8 <__d2b+0xac>)
 800f138:	f240 310f 	movw	r1, #783	@ 0x30f
 800f13c:	f000 fa82 	bl	800f644 <__assert_func>
 800f140:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f144:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f148:	b10d      	cbz	r5, 800f14e <__d2b+0x32>
 800f14a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f14e:	9301      	str	r3, [sp, #4]
 800f150:	f1b8 0300 	subs.w	r3, r8, #0
 800f154:	d023      	beq.n	800f19e <__d2b+0x82>
 800f156:	4668      	mov	r0, sp
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	f7ff fd7c 	bl	800ec56 <__lo0bits>
 800f15e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f162:	b1d0      	cbz	r0, 800f19a <__d2b+0x7e>
 800f164:	f1c0 0320 	rsb	r3, r0, #32
 800f168:	fa02 f303 	lsl.w	r3, r2, r3
 800f16c:	430b      	orrs	r3, r1
 800f16e:	40c2      	lsrs	r2, r0
 800f170:	6163      	str	r3, [r4, #20]
 800f172:	9201      	str	r2, [sp, #4]
 800f174:	9b01      	ldr	r3, [sp, #4]
 800f176:	61a3      	str	r3, [r4, #24]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	bf0c      	ite	eq
 800f17c:	2201      	moveq	r2, #1
 800f17e:	2202      	movne	r2, #2
 800f180:	6122      	str	r2, [r4, #16]
 800f182:	b1a5      	cbz	r5, 800f1ae <__d2b+0x92>
 800f184:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f188:	4405      	add	r5, r0
 800f18a:	603d      	str	r5, [r7, #0]
 800f18c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f190:	6030      	str	r0, [r6, #0]
 800f192:	4620      	mov	r0, r4
 800f194:	b003      	add	sp, #12
 800f196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f19a:	6161      	str	r1, [r4, #20]
 800f19c:	e7ea      	b.n	800f174 <__d2b+0x58>
 800f19e:	a801      	add	r0, sp, #4
 800f1a0:	f7ff fd59 	bl	800ec56 <__lo0bits>
 800f1a4:	9b01      	ldr	r3, [sp, #4]
 800f1a6:	6163      	str	r3, [r4, #20]
 800f1a8:	3020      	adds	r0, #32
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	e7e8      	b.n	800f180 <__d2b+0x64>
 800f1ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f1b6:	6038      	str	r0, [r7, #0]
 800f1b8:	6918      	ldr	r0, [r3, #16]
 800f1ba:	f7ff fd2d 	bl	800ec18 <__hi0bits>
 800f1be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1c2:	e7e5      	b.n	800f190 <__d2b+0x74>
 800f1c4:	080102e8 	.word	0x080102e8
 800f1c8:	080102f9 	.word	0x080102f9

0800f1cc <__ssputs_r>:
 800f1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1d0:	688e      	ldr	r6, [r1, #8]
 800f1d2:	461f      	mov	r7, r3
 800f1d4:	42be      	cmp	r6, r7
 800f1d6:	680b      	ldr	r3, [r1, #0]
 800f1d8:	4682      	mov	sl, r0
 800f1da:	460c      	mov	r4, r1
 800f1dc:	4690      	mov	r8, r2
 800f1de:	d82d      	bhi.n	800f23c <__ssputs_r+0x70>
 800f1e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1e8:	d026      	beq.n	800f238 <__ssputs_r+0x6c>
 800f1ea:	6965      	ldr	r5, [r4, #20]
 800f1ec:	6909      	ldr	r1, [r1, #16]
 800f1ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1f2:	eba3 0901 	sub.w	r9, r3, r1
 800f1f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1fa:	1c7b      	adds	r3, r7, #1
 800f1fc:	444b      	add	r3, r9
 800f1fe:	106d      	asrs	r5, r5, #1
 800f200:	429d      	cmp	r5, r3
 800f202:	bf38      	it	cc
 800f204:	461d      	movcc	r5, r3
 800f206:	0553      	lsls	r3, r2, #21
 800f208:	d527      	bpl.n	800f25a <__ssputs_r+0x8e>
 800f20a:	4629      	mov	r1, r5
 800f20c:	f7ff fbd0 	bl	800e9b0 <_malloc_r>
 800f210:	4606      	mov	r6, r0
 800f212:	b360      	cbz	r0, 800f26e <__ssputs_r+0xa2>
 800f214:	6921      	ldr	r1, [r4, #16]
 800f216:	464a      	mov	r2, r9
 800f218:	f000 fa06 	bl	800f628 <memcpy>
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f226:	81a3      	strh	r3, [r4, #12]
 800f228:	6126      	str	r6, [r4, #16]
 800f22a:	6165      	str	r5, [r4, #20]
 800f22c:	444e      	add	r6, r9
 800f22e:	eba5 0509 	sub.w	r5, r5, r9
 800f232:	6026      	str	r6, [r4, #0]
 800f234:	60a5      	str	r5, [r4, #8]
 800f236:	463e      	mov	r6, r7
 800f238:	42be      	cmp	r6, r7
 800f23a:	d900      	bls.n	800f23e <__ssputs_r+0x72>
 800f23c:	463e      	mov	r6, r7
 800f23e:	6820      	ldr	r0, [r4, #0]
 800f240:	4632      	mov	r2, r6
 800f242:	4641      	mov	r1, r8
 800f244:	f000 f9c6 	bl	800f5d4 <memmove>
 800f248:	68a3      	ldr	r3, [r4, #8]
 800f24a:	1b9b      	subs	r3, r3, r6
 800f24c:	60a3      	str	r3, [r4, #8]
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	4433      	add	r3, r6
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	2000      	movs	r0, #0
 800f256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f25a:	462a      	mov	r2, r5
 800f25c:	f000 fa36 	bl	800f6cc <_realloc_r>
 800f260:	4606      	mov	r6, r0
 800f262:	2800      	cmp	r0, #0
 800f264:	d1e0      	bne.n	800f228 <__ssputs_r+0x5c>
 800f266:	6921      	ldr	r1, [r4, #16]
 800f268:	4650      	mov	r0, sl
 800f26a:	f7ff fb2d 	bl	800e8c8 <_free_r>
 800f26e:	230c      	movs	r3, #12
 800f270:	f8ca 3000 	str.w	r3, [sl]
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f27a:	81a3      	strh	r3, [r4, #12]
 800f27c:	f04f 30ff 	mov.w	r0, #4294967295
 800f280:	e7e9      	b.n	800f256 <__ssputs_r+0x8a>
	...

0800f284 <_svfiprintf_r>:
 800f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	4698      	mov	r8, r3
 800f28a:	898b      	ldrh	r3, [r1, #12]
 800f28c:	061b      	lsls	r3, r3, #24
 800f28e:	b09d      	sub	sp, #116	@ 0x74
 800f290:	4607      	mov	r7, r0
 800f292:	460d      	mov	r5, r1
 800f294:	4614      	mov	r4, r2
 800f296:	d510      	bpl.n	800f2ba <_svfiprintf_r+0x36>
 800f298:	690b      	ldr	r3, [r1, #16]
 800f29a:	b973      	cbnz	r3, 800f2ba <_svfiprintf_r+0x36>
 800f29c:	2140      	movs	r1, #64	@ 0x40
 800f29e:	f7ff fb87 	bl	800e9b0 <_malloc_r>
 800f2a2:	6028      	str	r0, [r5, #0]
 800f2a4:	6128      	str	r0, [r5, #16]
 800f2a6:	b930      	cbnz	r0, 800f2b6 <_svfiprintf_r+0x32>
 800f2a8:	230c      	movs	r3, #12
 800f2aa:	603b      	str	r3, [r7, #0]
 800f2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b0:	b01d      	add	sp, #116	@ 0x74
 800f2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b6:	2340      	movs	r3, #64	@ 0x40
 800f2b8:	616b      	str	r3, [r5, #20]
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2be:	2320      	movs	r3, #32
 800f2c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2c8:	2330      	movs	r3, #48	@ 0x30
 800f2ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f468 <_svfiprintf_r+0x1e4>
 800f2ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2d2:	f04f 0901 	mov.w	r9, #1
 800f2d6:	4623      	mov	r3, r4
 800f2d8:	469a      	mov	sl, r3
 800f2da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2de:	b10a      	cbz	r2, 800f2e4 <_svfiprintf_r+0x60>
 800f2e0:	2a25      	cmp	r2, #37	@ 0x25
 800f2e2:	d1f9      	bne.n	800f2d8 <_svfiprintf_r+0x54>
 800f2e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f2e8:	d00b      	beq.n	800f302 <_svfiprintf_r+0x7e>
 800f2ea:	465b      	mov	r3, fp
 800f2ec:	4622      	mov	r2, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	f7ff ff6b 	bl	800f1cc <__ssputs_r>
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	f000 80a7 	beq.w	800f44a <_svfiprintf_r+0x1c6>
 800f2fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2fe:	445a      	add	r2, fp
 800f300:	9209      	str	r2, [sp, #36]	@ 0x24
 800f302:	f89a 3000 	ldrb.w	r3, [sl]
 800f306:	2b00      	cmp	r3, #0
 800f308:	f000 809f 	beq.w	800f44a <_svfiprintf_r+0x1c6>
 800f30c:	2300      	movs	r3, #0
 800f30e:	f04f 32ff 	mov.w	r2, #4294967295
 800f312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f316:	f10a 0a01 	add.w	sl, sl, #1
 800f31a:	9304      	str	r3, [sp, #16]
 800f31c:	9307      	str	r3, [sp, #28]
 800f31e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f322:	931a      	str	r3, [sp, #104]	@ 0x68
 800f324:	4654      	mov	r4, sl
 800f326:	2205      	movs	r2, #5
 800f328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32c:	484e      	ldr	r0, [pc, #312]	@ (800f468 <_svfiprintf_r+0x1e4>)
 800f32e:	f7f0 ff4f 	bl	80001d0 <memchr>
 800f332:	9a04      	ldr	r2, [sp, #16]
 800f334:	b9d8      	cbnz	r0, 800f36e <_svfiprintf_r+0xea>
 800f336:	06d0      	lsls	r0, r2, #27
 800f338:	bf44      	itt	mi
 800f33a:	2320      	movmi	r3, #32
 800f33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f340:	0711      	lsls	r1, r2, #28
 800f342:	bf44      	itt	mi
 800f344:	232b      	movmi	r3, #43	@ 0x2b
 800f346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f34a:	f89a 3000 	ldrb.w	r3, [sl]
 800f34e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f350:	d015      	beq.n	800f37e <_svfiprintf_r+0xfa>
 800f352:	9a07      	ldr	r2, [sp, #28]
 800f354:	4654      	mov	r4, sl
 800f356:	2000      	movs	r0, #0
 800f358:	f04f 0c0a 	mov.w	ip, #10
 800f35c:	4621      	mov	r1, r4
 800f35e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f362:	3b30      	subs	r3, #48	@ 0x30
 800f364:	2b09      	cmp	r3, #9
 800f366:	d94b      	bls.n	800f400 <_svfiprintf_r+0x17c>
 800f368:	b1b0      	cbz	r0, 800f398 <_svfiprintf_r+0x114>
 800f36a:	9207      	str	r2, [sp, #28]
 800f36c:	e014      	b.n	800f398 <_svfiprintf_r+0x114>
 800f36e:	eba0 0308 	sub.w	r3, r0, r8
 800f372:	fa09 f303 	lsl.w	r3, r9, r3
 800f376:	4313      	orrs	r3, r2
 800f378:	9304      	str	r3, [sp, #16]
 800f37a:	46a2      	mov	sl, r4
 800f37c:	e7d2      	b.n	800f324 <_svfiprintf_r+0xa0>
 800f37e:	9b03      	ldr	r3, [sp, #12]
 800f380:	1d19      	adds	r1, r3, #4
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	9103      	str	r1, [sp, #12]
 800f386:	2b00      	cmp	r3, #0
 800f388:	bfbb      	ittet	lt
 800f38a:	425b      	neglt	r3, r3
 800f38c:	f042 0202 	orrlt.w	r2, r2, #2
 800f390:	9307      	strge	r3, [sp, #28]
 800f392:	9307      	strlt	r3, [sp, #28]
 800f394:	bfb8      	it	lt
 800f396:	9204      	strlt	r2, [sp, #16]
 800f398:	7823      	ldrb	r3, [r4, #0]
 800f39a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f39c:	d10a      	bne.n	800f3b4 <_svfiprintf_r+0x130>
 800f39e:	7863      	ldrb	r3, [r4, #1]
 800f3a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3a2:	d132      	bne.n	800f40a <_svfiprintf_r+0x186>
 800f3a4:	9b03      	ldr	r3, [sp, #12]
 800f3a6:	1d1a      	adds	r2, r3, #4
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	9203      	str	r2, [sp, #12]
 800f3ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3b0:	3402      	adds	r4, #2
 800f3b2:	9305      	str	r3, [sp, #20]
 800f3b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f478 <_svfiprintf_r+0x1f4>
 800f3b8:	7821      	ldrb	r1, [r4, #0]
 800f3ba:	2203      	movs	r2, #3
 800f3bc:	4650      	mov	r0, sl
 800f3be:	f7f0 ff07 	bl	80001d0 <memchr>
 800f3c2:	b138      	cbz	r0, 800f3d4 <_svfiprintf_r+0x150>
 800f3c4:	9b04      	ldr	r3, [sp, #16]
 800f3c6:	eba0 000a 	sub.w	r0, r0, sl
 800f3ca:	2240      	movs	r2, #64	@ 0x40
 800f3cc:	4082      	lsls	r2, r0
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	3401      	adds	r4, #1
 800f3d2:	9304      	str	r3, [sp, #16]
 800f3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3d8:	4824      	ldr	r0, [pc, #144]	@ (800f46c <_svfiprintf_r+0x1e8>)
 800f3da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3de:	2206      	movs	r2, #6
 800f3e0:	f7f0 fef6 	bl	80001d0 <memchr>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d036      	beq.n	800f456 <_svfiprintf_r+0x1d2>
 800f3e8:	4b21      	ldr	r3, [pc, #132]	@ (800f470 <_svfiprintf_r+0x1ec>)
 800f3ea:	bb1b      	cbnz	r3, 800f434 <_svfiprintf_r+0x1b0>
 800f3ec:	9b03      	ldr	r3, [sp, #12]
 800f3ee:	3307      	adds	r3, #7
 800f3f0:	f023 0307 	bic.w	r3, r3, #7
 800f3f4:	3308      	adds	r3, #8
 800f3f6:	9303      	str	r3, [sp, #12]
 800f3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3fa:	4433      	add	r3, r6
 800f3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3fe:	e76a      	b.n	800f2d6 <_svfiprintf_r+0x52>
 800f400:	fb0c 3202 	mla	r2, ip, r2, r3
 800f404:	460c      	mov	r4, r1
 800f406:	2001      	movs	r0, #1
 800f408:	e7a8      	b.n	800f35c <_svfiprintf_r+0xd8>
 800f40a:	2300      	movs	r3, #0
 800f40c:	3401      	adds	r4, #1
 800f40e:	9305      	str	r3, [sp, #20]
 800f410:	4619      	mov	r1, r3
 800f412:	f04f 0c0a 	mov.w	ip, #10
 800f416:	4620      	mov	r0, r4
 800f418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f41c:	3a30      	subs	r2, #48	@ 0x30
 800f41e:	2a09      	cmp	r2, #9
 800f420:	d903      	bls.n	800f42a <_svfiprintf_r+0x1a6>
 800f422:	2b00      	cmp	r3, #0
 800f424:	d0c6      	beq.n	800f3b4 <_svfiprintf_r+0x130>
 800f426:	9105      	str	r1, [sp, #20]
 800f428:	e7c4      	b.n	800f3b4 <_svfiprintf_r+0x130>
 800f42a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f42e:	4604      	mov	r4, r0
 800f430:	2301      	movs	r3, #1
 800f432:	e7f0      	b.n	800f416 <_svfiprintf_r+0x192>
 800f434:	ab03      	add	r3, sp, #12
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	462a      	mov	r2, r5
 800f43a:	4b0e      	ldr	r3, [pc, #56]	@ (800f474 <_svfiprintf_r+0x1f0>)
 800f43c:	a904      	add	r1, sp, #16
 800f43e:	4638      	mov	r0, r7
 800f440:	f7fd fe84 	bl	800d14c <_printf_float>
 800f444:	1c42      	adds	r2, r0, #1
 800f446:	4606      	mov	r6, r0
 800f448:	d1d6      	bne.n	800f3f8 <_svfiprintf_r+0x174>
 800f44a:	89ab      	ldrh	r3, [r5, #12]
 800f44c:	065b      	lsls	r3, r3, #25
 800f44e:	f53f af2d 	bmi.w	800f2ac <_svfiprintf_r+0x28>
 800f452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f454:	e72c      	b.n	800f2b0 <_svfiprintf_r+0x2c>
 800f456:	ab03      	add	r3, sp, #12
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	462a      	mov	r2, r5
 800f45c:	4b05      	ldr	r3, [pc, #20]	@ (800f474 <_svfiprintf_r+0x1f0>)
 800f45e:	a904      	add	r1, sp, #16
 800f460:	4638      	mov	r0, r7
 800f462:	f7fe f90b 	bl	800d67c <_printf_i>
 800f466:	e7ed      	b.n	800f444 <_svfiprintf_r+0x1c0>
 800f468:	08010450 	.word	0x08010450
 800f46c:	0801045a 	.word	0x0801045a
 800f470:	0800d14d 	.word	0x0800d14d
 800f474:	0800f1cd 	.word	0x0800f1cd
 800f478:	08010456 	.word	0x08010456

0800f47c <__sflush_r>:
 800f47c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	0716      	lsls	r6, r2, #28
 800f486:	4605      	mov	r5, r0
 800f488:	460c      	mov	r4, r1
 800f48a:	d454      	bmi.n	800f536 <__sflush_r+0xba>
 800f48c:	684b      	ldr	r3, [r1, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	dc02      	bgt.n	800f498 <__sflush_r+0x1c>
 800f492:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f494:	2b00      	cmp	r3, #0
 800f496:	dd48      	ble.n	800f52a <__sflush_r+0xae>
 800f498:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f49a:	2e00      	cmp	r6, #0
 800f49c:	d045      	beq.n	800f52a <__sflush_r+0xae>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4a4:	682f      	ldr	r7, [r5, #0]
 800f4a6:	6a21      	ldr	r1, [r4, #32]
 800f4a8:	602b      	str	r3, [r5, #0]
 800f4aa:	d030      	beq.n	800f50e <__sflush_r+0x92>
 800f4ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4ae:	89a3      	ldrh	r3, [r4, #12]
 800f4b0:	0759      	lsls	r1, r3, #29
 800f4b2:	d505      	bpl.n	800f4c0 <__sflush_r+0x44>
 800f4b4:	6863      	ldr	r3, [r4, #4]
 800f4b6:	1ad2      	subs	r2, r2, r3
 800f4b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4ba:	b10b      	cbz	r3, 800f4c0 <__sflush_r+0x44>
 800f4bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4be:	1ad2      	subs	r2, r2, r3
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4c4:	6a21      	ldr	r1, [r4, #32]
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	47b0      	blx	r6
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	d106      	bne.n	800f4de <__sflush_r+0x62>
 800f4d0:	6829      	ldr	r1, [r5, #0]
 800f4d2:	291d      	cmp	r1, #29
 800f4d4:	d82b      	bhi.n	800f52e <__sflush_r+0xb2>
 800f4d6:	4a2a      	ldr	r2, [pc, #168]	@ (800f580 <__sflush_r+0x104>)
 800f4d8:	410a      	asrs	r2, r1
 800f4da:	07d6      	lsls	r6, r2, #31
 800f4dc:	d427      	bmi.n	800f52e <__sflush_r+0xb2>
 800f4de:	2200      	movs	r2, #0
 800f4e0:	6062      	str	r2, [r4, #4]
 800f4e2:	04d9      	lsls	r1, r3, #19
 800f4e4:	6922      	ldr	r2, [r4, #16]
 800f4e6:	6022      	str	r2, [r4, #0]
 800f4e8:	d504      	bpl.n	800f4f4 <__sflush_r+0x78>
 800f4ea:	1c42      	adds	r2, r0, #1
 800f4ec:	d101      	bne.n	800f4f2 <__sflush_r+0x76>
 800f4ee:	682b      	ldr	r3, [r5, #0]
 800f4f0:	b903      	cbnz	r3, 800f4f4 <__sflush_r+0x78>
 800f4f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4f6:	602f      	str	r7, [r5, #0]
 800f4f8:	b1b9      	cbz	r1, 800f52a <__sflush_r+0xae>
 800f4fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4fe:	4299      	cmp	r1, r3
 800f500:	d002      	beq.n	800f508 <__sflush_r+0x8c>
 800f502:	4628      	mov	r0, r5
 800f504:	f7ff f9e0 	bl	800e8c8 <_free_r>
 800f508:	2300      	movs	r3, #0
 800f50a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f50c:	e00d      	b.n	800f52a <__sflush_r+0xae>
 800f50e:	2301      	movs	r3, #1
 800f510:	4628      	mov	r0, r5
 800f512:	47b0      	blx	r6
 800f514:	4602      	mov	r2, r0
 800f516:	1c50      	adds	r0, r2, #1
 800f518:	d1c9      	bne.n	800f4ae <__sflush_r+0x32>
 800f51a:	682b      	ldr	r3, [r5, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d0c6      	beq.n	800f4ae <__sflush_r+0x32>
 800f520:	2b1d      	cmp	r3, #29
 800f522:	d001      	beq.n	800f528 <__sflush_r+0xac>
 800f524:	2b16      	cmp	r3, #22
 800f526:	d11e      	bne.n	800f566 <__sflush_r+0xea>
 800f528:	602f      	str	r7, [r5, #0]
 800f52a:	2000      	movs	r0, #0
 800f52c:	e022      	b.n	800f574 <__sflush_r+0xf8>
 800f52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f532:	b21b      	sxth	r3, r3
 800f534:	e01b      	b.n	800f56e <__sflush_r+0xf2>
 800f536:	690f      	ldr	r7, [r1, #16]
 800f538:	2f00      	cmp	r7, #0
 800f53a:	d0f6      	beq.n	800f52a <__sflush_r+0xae>
 800f53c:	0793      	lsls	r3, r2, #30
 800f53e:	680e      	ldr	r6, [r1, #0]
 800f540:	bf08      	it	eq
 800f542:	694b      	ldreq	r3, [r1, #20]
 800f544:	600f      	str	r7, [r1, #0]
 800f546:	bf18      	it	ne
 800f548:	2300      	movne	r3, #0
 800f54a:	eba6 0807 	sub.w	r8, r6, r7
 800f54e:	608b      	str	r3, [r1, #8]
 800f550:	f1b8 0f00 	cmp.w	r8, #0
 800f554:	dde9      	ble.n	800f52a <__sflush_r+0xae>
 800f556:	6a21      	ldr	r1, [r4, #32]
 800f558:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f55a:	4643      	mov	r3, r8
 800f55c:	463a      	mov	r2, r7
 800f55e:	4628      	mov	r0, r5
 800f560:	47b0      	blx	r6
 800f562:	2800      	cmp	r0, #0
 800f564:	dc08      	bgt.n	800f578 <__sflush_r+0xfc>
 800f566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f56a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f56e:	81a3      	strh	r3, [r4, #12]
 800f570:	f04f 30ff 	mov.w	r0, #4294967295
 800f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f578:	4407      	add	r7, r0
 800f57a:	eba8 0800 	sub.w	r8, r8, r0
 800f57e:	e7e7      	b.n	800f550 <__sflush_r+0xd4>
 800f580:	dfbffffe 	.word	0xdfbffffe

0800f584 <_fflush_r>:
 800f584:	b538      	push	{r3, r4, r5, lr}
 800f586:	690b      	ldr	r3, [r1, #16]
 800f588:	4605      	mov	r5, r0
 800f58a:	460c      	mov	r4, r1
 800f58c:	b913      	cbnz	r3, 800f594 <_fflush_r+0x10>
 800f58e:	2500      	movs	r5, #0
 800f590:	4628      	mov	r0, r5
 800f592:	bd38      	pop	{r3, r4, r5, pc}
 800f594:	b118      	cbz	r0, 800f59e <_fflush_r+0x1a>
 800f596:	6a03      	ldr	r3, [r0, #32]
 800f598:	b90b      	cbnz	r3, 800f59e <_fflush_r+0x1a>
 800f59a:	f7fe fa1b 	bl	800d9d4 <__sinit>
 800f59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0f3      	beq.n	800f58e <_fflush_r+0xa>
 800f5a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5a8:	07d0      	lsls	r0, r2, #31
 800f5aa:	d404      	bmi.n	800f5b6 <_fflush_r+0x32>
 800f5ac:	0599      	lsls	r1, r3, #22
 800f5ae:	d402      	bmi.n	800f5b6 <_fflush_r+0x32>
 800f5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5b2:	f7fe fb3a 	bl	800dc2a <__retarget_lock_acquire_recursive>
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	f7ff ff5f 	bl	800f47c <__sflush_r>
 800f5be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5c0:	07da      	lsls	r2, r3, #31
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	d4e4      	bmi.n	800f590 <_fflush_r+0xc>
 800f5c6:	89a3      	ldrh	r3, [r4, #12]
 800f5c8:	059b      	lsls	r3, r3, #22
 800f5ca:	d4e1      	bmi.n	800f590 <_fflush_r+0xc>
 800f5cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ce:	f7fe fb2d 	bl	800dc2c <__retarget_lock_release_recursive>
 800f5d2:	e7dd      	b.n	800f590 <_fflush_r+0xc>

0800f5d4 <memmove>:
 800f5d4:	4288      	cmp	r0, r1
 800f5d6:	b510      	push	{r4, lr}
 800f5d8:	eb01 0402 	add.w	r4, r1, r2
 800f5dc:	d902      	bls.n	800f5e4 <memmove+0x10>
 800f5de:	4284      	cmp	r4, r0
 800f5e0:	4623      	mov	r3, r4
 800f5e2:	d807      	bhi.n	800f5f4 <memmove+0x20>
 800f5e4:	1e43      	subs	r3, r0, #1
 800f5e6:	42a1      	cmp	r1, r4
 800f5e8:	d008      	beq.n	800f5fc <memmove+0x28>
 800f5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5f2:	e7f8      	b.n	800f5e6 <memmove+0x12>
 800f5f4:	4402      	add	r2, r0
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	428a      	cmp	r2, r1
 800f5fa:	d100      	bne.n	800f5fe <memmove+0x2a>
 800f5fc:	bd10      	pop	{r4, pc}
 800f5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f606:	e7f7      	b.n	800f5f8 <memmove+0x24>

0800f608 <_sbrk_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d06      	ldr	r5, [pc, #24]	@ (800f624 <_sbrk_r+0x1c>)
 800f60c:	2300      	movs	r3, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	602b      	str	r3, [r5, #0]
 800f614:	f7f3 ffbe 	bl	8003594 <_sbrk>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	d102      	bne.n	800f622 <_sbrk_r+0x1a>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	b103      	cbz	r3, 800f622 <_sbrk_r+0x1a>
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	bd38      	pop	{r3, r4, r5, pc}
 800f624:	200022c4 	.word	0x200022c4

0800f628 <memcpy>:
 800f628:	440a      	add	r2, r1
 800f62a:	4291      	cmp	r1, r2
 800f62c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f630:	d100      	bne.n	800f634 <memcpy+0xc>
 800f632:	4770      	bx	lr
 800f634:	b510      	push	{r4, lr}
 800f636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f63a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f63e:	4291      	cmp	r1, r2
 800f640:	d1f9      	bne.n	800f636 <memcpy+0xe>
 800f642:	bd10      	pop	{r4, pc}

0800f644 <__assert_func>:
 800f644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f646:	4614      	mov	r4, r2
 800f648:	461a      	mov	r2, r3
 800f64a:	4b09      	ldr	r3, [pc, #36]	@ (800f670 <__assert_func+0x2c>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4605      	mov	r5, r0
 800f650:	68d8      	ldr	r0, [r3, #12]
 800f652:	b954      	cbnz	r4, 800f66a <__assert_func+0x26>
 800f654:	4b07      	ldr	r3, [pc, #28]	@ (800f674 <__assert_func+0x30>)
 800f656:	461c      	mov	r4, r3
 800f658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f65c:	9100      	str	r1, [sp, #0]
 800f65e:	462b      	mov	r3, r5
 800f660:	4905      	ldr	r1, [pc, #20]	@ (800f678 <__assert_func+0x34>)
 800f662:	f000 f86f 	bl	800f744 <fiprintf>
 800f666:	f000 f87f 	bl	800f768 <abort>
 800f66a:	4b04      	ldr	r3, [pc, #16]	@ (800f67c <__assert_func+0x38>)
 800f66c:	e7f4      	b.n	800f658 <__assert_func+0x14>
 800f66e:	bf00      	nop
 800f670:	20000120 	.word	0x20000120
 800f674:	080104a6 	.word	0x080104a6
 800f678:	08010478 	.word	0x08010478
 800f67c:	0801046b 	.word	0x0801046b

0800f680 <_calloc_r>:
 800f680:	b570      	push	{r4, r5, r6, lr}
 800f682:	fba1 5402 	umull	r5, r4, r1, r2
 800f686:	b93c      	cbnz	r4, 800f698 <_calloc_r+0x18>
 800f688:	4629      	mov	r1, r5
 800f68a:	f7ff f991 	bl	800e9b0 <_malloc_r>
 800f68e:	4606      	mov	r6, r0
 800f690:	b928      	cbnz	r0, 800f69e <_calloc_r+0x1e>
 800f692:	2600      	movs	r6, #0
 800f694:	4630      	mov	r0, r6
 800f696:	bd70      	pop	{r4, r5, r6, pc}
 800f698:	220c      	movs	r2, #12
 800f69a:	6002      	str	r2, [r0, #0]
 800f69c:	e7f9      	b.n	800f692 <_calloc_r+0x12>
 800f69e:	462a      	mov	r2, r5
 800f6a0:	4621      	mov	r1, r4
 800f6a2:	f7fe fa44 	bl	800db2e <memset>
 800f6a6:	e7f5      	b.n	800f694 <_calloc_r+0x14>

0800f6a8 <__ascii_mbtowc>:
 800f6a8:	b082      	sub	sp, #8
 800f6aa:	b901      	cbnz	r1, 800f6ae <__ascii_mbtowc+0x6>
 800f6ac:	a901      	add	r1, sp, #4
 800f6ae:	b142      	cbz	r2, 800f6c2 <__ascii_mbtowc+0x1a>
 800f6b0:	b14b      	cbz	r3, 800f6c6 <__ascii_mbtowc+0x1e>
 800f6b2:	7813      	ldrb	r3, [r2, #0]
 800f6b4:	600b      	str	r3, [r1, #0]
 800f6b6:	7812      	ldrb	r2, [r2, #0]
 800f6b8:	1e10      	subs	r0, r2, #0
 800f6ba:	bf18      	it	ne
 800f6bc:	2001      	movne	r0, #1
 800f6be:	b002      	add	sp, #8
 800f6c0:	4770      	bx	lr
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	e7fb      	b.n	800f6be <__ascii_mbtowc+0x16>
 800f6c6:	f06f 0001 	mvn.w	r0, #1
 800f6ca:	e7f8      	b.n	800f6be <__ascii_mbtowc+0x16>

0800f6cc <_realloc_r>:
 800f6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d0:	4680      	mov	r8, r0
 800f6d2:	4615      	mov	r5, r2
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	b921      	cbnz	r1, 800f6e2 <_realloc_r+0x16>
 800f6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6dc:	4611      	mov	r1, r2
 800f6de:	f7ff b967 	b.w	800e9b0 <_malloc_r>
 800f6e2:	b92a      	cbnz	r2, 800f6f0 <_realloc_r+0x24>
 800f6e4:	f7ff f8f0 	bl	800e8c8 <_free_r>
 800f6e8:	2400      	movs	r4, #0
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f0:	f000 f841 	bl	800f776 <_malloc_usable_size_r>
 800f6f4:	4285      	cmp	r5, r0
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	d802      	bhi.n	800f700 <_realloc_r+0x34>
 800f6fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f6fe:	d8f4      	bhi.n	800f6ea <_realloc_r+0x1e>
 800f700:	4629      	mov	r1, r5
 800f702:	4640      	mov	r0, r8
 800f704:	f7ff f954 	bl	800e9b0 <_malloc_r>
 800f708:	4607      	mov	r7, r0
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d0ec      	beq.n	800f6e8 <_realloc_r+0x1c>
 800f70e:	42b5      	cmp	r5, r6
 800f710:	462a      	mov	r2, r5
 800f712:	4621      	mov	r1, r4
 800f714:	bf28      	it	cs
 800f716:	4632      	movcs	r2, r6
 800f718:	f7ff ff86 	bl	800f628 <memcpy>
 800f71c:	4621      	mov	r1, r4
 800f71e:	4640      	mov	r0, r8
 800f720:	f7ff f8d2 	bl	800e8c8 <_free_r>
 800f724:	463c      	mov	r4, r7
 800f726:	e7e0      	b.n	800f6ea <_realloc_r+0x1e>

0800f728 <__ascii_wctomb>:
 800f728:	4603      	mov	r3, r0
 800f72a:	4608      	mov	r0, r1
 800f72c:	b141      	cbz	r1, 800f740 <__ascii_wctomb+0x18>
 800f72e:	2aff      	cmp	r2, #255	@ 0xff
 800f730:	d904      	bls.n	800f73c <__ascii_wctomb+0x14>
 800f732:	228a      	movs	r2, #138	@ 0x8a
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	f04f 30ff 	mov.w	r0, #4294967295
 800f73a:	4770      	bx	lr
 800f73c:	700a      	strb	r2, [r1, #0]
 800f73e:	2001      	movs	r0, #1
 800f740:	4770      	bx	lr
	...

0800f744 <fiprintf>:
 800f744:	b40e      	push	{r1, r2, r3}
 800f746:	b503      	push	{r0, r1, lr}
 800f748:	4601      	mov	r1, r0
 800f74a:	ab03      	add	r3, sp, #12
 800f74c:	4805      	ldr	r0, [pc, #20]	@ (800f764 <fiprintf+0x20>)
 800f74e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f752:	6800      	ldr	r0, [r0, #0]
 800f754:	9301      	str	r3, [sp, #4]
 800f756:	f000 f83f 	bl	800f7d8 <_vfiprintf_r>
 800f75a:	b002      	add	sp, #8
 800f75c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f760:	b003      	add	sp, #12
 800f762:	4770      	bx	lr
 800f764:	20000120 	.word	0x20000120

0800f768 <abort>:
 800f768:	b508      	push	{r3, lr}
 800f76a:	2006      	movs	r0, #6
 800f76c:	f000 fa08 	bl	800fb80 <raise>
 800f770:	2001      	movs	r0, #1
 800f772:	f7f3 fe97 	bl	80034a4 <_exit>

0800f776 <_malloc_usable_size_r>:
 800f776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f77a:	1f18      	subs	r0, r3, #4
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	bfbc      	itt	lt
 800f780:	580b      	ldrlt	r3, [r1, r0]
 800f782:	18c0      	addlt	r0, r0, r3
 800f784:	4770      	bx	lr

0800f786 <__sfputc_r>:
 800f786:	6893      	ldr	r3, [r2, #8]
 800f788:	3b01      	subs	r3, #1
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	b410      	push	{r4}
 800f78e:	6093      	str	r3, [r2, #8]
 800f790:	da08      	bge.n	800f7a4 <__sfputc_r+0x1e>
 800f792:	6994      	ldr	r4, [r2, #24]
 800f794:	42a3      	cmp	r3, r4
 800f796:	db01      	blt.n	800f79c <__sfputc_r+0x16>
 800f798:	290a      	cmp	r1, #10
 800f79a:	d103      	bne.n	800f7a4 <__sfputc_r+0x1e>
 800f79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7a0:	f000 b932 	b.w	800fa08 <__swbuf_r>
 800f7a4:	6813      	ldr	r3, [r2, #0]
 800f7a6:	1c58      	adds	r0, r3, #1
 800f7a8:	6010      	str	r0, [r2, #0]
 800f7aa:	7019      	strb	r1, [r3, #0]
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <__sfputs_r>:
 800f7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	460f      	mov	r7, r1
 800f7ba:	4614      	mov	r4, r2
 800f7bc:	18d5      	adds	r5, r2, r3
 800f7be:	42ac      	cmp	r4, r5
 800f7c0:	d101      	bne.n	800f7c6 <__sfputs_r+0x12>
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	e007      	b.n	800f7d6 <__sfputs_r+0x22>
 800f7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ca:	463a      	mov	r2, r7
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	f7ff ffda 	bl	800f786 <__sfputc_r>
 800f7d2:	1c43      	adds	r3, r0, #1
 800f7d4:	d1f3      	bne.n	800f7be <__sfputs_r+0xa>
 800f7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f7d8 <_vfiprintf_r>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	460d      	mov	r5, r1
 800f7de:	b09d      	sub	sp, #116	@ 0x74
 800f7e0:	4614      	mov	r4, r2
 800f7e2:	4698      	mov	r8, r3
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	b118      	cbz	r0, 800f7f0 <_vfiprintf_r+0x18>
 800f7e8:	6a03      	ldr	r3, [r0, #32]
 800f7ea:	b90b      	cbnz	r3, 800f7f0 <_vfiprintf_r+0x18>
 800f7ec:	f7fe f8f2 	bl	800d9d4 <__sinit>
 800f7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7f2:	07d9      	lsls	r1, r3, #31
 800f7f4:	d405      	bmi.n	800f802 <_vfiprintf_r+0x2a>
 800f7f6:	89ab      	ldrh	r3, [r5, #12]
 800f7f8:	059a      	lsls	r2, r3, #22
 800f7fa:	d402      	bmi.n	800f802 <_vfiprintf_r+0x2a>
 800f7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7fe:	f7fe fa14 	bl	800dc2a <__retarget_lock_acquire_recursive>
 800f802:	89ab      	ldrh	r3, [r5, #12]
 800f804:	071b      	lsls	r3, r3, #28
 800f806:	d501      	bpl.n	800f80c <_vfiprintf_r+0x34>
 800f808:	692b      	ldr	r3, [r5, #16]
 800f80a:	b99b      	cbnz	r3, 800f834 <_vfiprintf_r+0x5c>
 800f80c:	4629      	mov	r1, r5
 800f80e:	4630      	mov	r0, r6
 800f810:	f000 f938 	bl	800fa84 <__swsetup_r>
 800f814:	b170      	cbz	r0, 800f834 <_vfiprintf_r+0x5c>
 800f816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f818:	07dc      	lsls	r4, r3, #31
 800f81a:	d504      	bpl.n	800f826 <_vfiprintf_r+0x4e>
 800f81c:	f04f 30ff 	mov.w	r0, #4294967295
 800f820:	b01d      	add	sp, #116	@ 0x74
 800f822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f826:	89ab      	ldrh	r3, [r5, #12]
 800f828:	0598      	lsls	r0, r3, #22
 800f82a:	d4f7      	bmi.n	800f81c <_vfiprintf_r+0x44>
 800f82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f82e:	f7fe f9fd 	bl	800dc2c <__retarget_lock_release_recursive>
 800f832:	e7f3      	b.n	800f81c <_vfiprintf_r+0x44>
 800f834:	2300      	movs	r3, #0
 800f836:	9309      	str	r3, [sp, #36]	@ 0x24
 800f838:	2320      	movs	r3, #32
 800f83a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f842:	2330      	movs	r3, #48	@ 0x30
 800f844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f9f4 <_vfiprintf_r+0x21c>
 800f848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f84c:	f04f 0901 	mov.w	r9, #1
 800f850:	4623      	mov	r3, r4
 800f852:	469a      	mov	sl, r3
 800f854:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f858:	b10a      	cbz	r2, 800f85e <_vfiprintf_r+0x86>
 800f85a:	2a25      	cmp	r2, #37	@ 0x25
 800f85c:	d1f9      	bne.n	800f852 <_vfiprintf_r+0x7a>
 800f85e:	ebba 0b04 	subs.w	fp, sl, r4
 800f862:	d00b      	beq.n	800f87c <_vfiprintf_r+0xa4>
 800f864:	465b      	mov	r3, fp
 800f866:	4622      	mov	r2, r4
 800f868:	4629      	mov	r1, r5
 800f86a:	4630      	mov	r0, r6
 800f86c:	f7ff ffa2 	bl	800f7b4 <__sfputs_r>
 800f870:	3001      	adds	r0, #1
 800f872:	f000 80a7 	beq.w	800f9c4 <_vfiprintf_r+0x1ec>
 800f876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f878:	445a      	add	r2, fp
 800f87a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f87c:	f89a 3000 	ldrb.w	r3, [sl]
 800f880:	2b00      	cmp	r3, #0
 800f882:	f000 809f 	beq.w	800f9c4 <_vfiprintf_r+0x1ec>
 800f886:	2300      	movs	r3, #0
 800f888:	f04f 32ff 	mov.w	r2, #4294967295
 800f88c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f890:	f10a 0a01 	add.w	sl, sl, #1
 800f894:	9304      	str	r3, [sp, #16]
 800f896:	9307      	str	r3, [sp, #28]
 800f898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f89c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f89e:	4654      	mov	r4, sl
 800f8a0:	2205      	movs	r2, #5
 800f8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a6:	4853      	ldr	r0, [pc, #332]	@ (800f9f4 <_vfiprintf_r+0x21c>)
 800f8a8:	f7f0 fc92 	bl	80001d0 <memchr>
 800f8ac:	9a04      	ldr	r2, [sp, #16]
 800f8ae:	b9d8      	cbnz	r0, 800f8e8 <_vfiprintf_r+0x110>
 800f8b0:	06d1      	lsls	r1, r2, #27
 800f8b2:	bf44      	itt	mi
 800f8b4:	2320      	movmi	r3, #32
 800f8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8ba:	0713      	lsls	r3, r2, #28
 800f8bc:	bf44      	itt	mi
 800f8be:	232b      	movmi	r3, #43	@ 0x2b
 800f8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8ca:	d015      	beq.n	800f8f8 <_vfiprintf_r+0x120>
 800f8cc:	9a07      	ldr	r2, [sp, #28]
 800f8ce:	4654      	mov	r4, sl
 800f8d0:	2000      	movs	r0, #0
 800f8d2:	f04f 0c0a 	mov.w	ip, #10
 800f8d6:	4621      	mov	r1, r4
 800f8d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8dc:	3b30      	subs	r3, #48	@ 0x30
 800f8de:	2b09      	cmp	r3, #9
 800f8e0:	d94b      	bls.n	800f97a <_vfiprintf_r+0x1a2>
 800f8e2:	b1b0      	cbz	r0, 800f912 <_vfiprintf_r+0x13a>
 800f8e4:	9207      	str	r2, [sp, #28]
 800f8e6:	e014      	b.n	800f912 <_vfiprintf_r+0x13a>
 800f8e8:	eba0 0308 	sub.w	r3, r0, r8
 800f8ec:	fa09 f303 	lsl.w	r3, r9, r3
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	9304      	str	r3, [sp, #16]
 800f8f4:	46a2      	mov	sl, r4
 800f8f6:	e7d2      	b.n	800f89e <_vfiprintf_r+0xc6>
 800f8f8:	9b03      	ldr	r3, [sp, #12]
 800f8fa:	1d19      	adds	r1, r3, #4
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	9103      	str	r1, [sp, #12]
 800f900:	2b00      	cmp	r3, #0
 800f902:	bfbb      	ittet	lt
 800f904:	425b      	neglt	r3, r3
 800f906:	f042 0202 	orrlt.w	r2, r2, #2
 800f90a:	9307      	strge	r3, [sp, #28]
 800f90c:	9307      	strlt	r3, [sp, #28]
 800f90e:	bfb8      	it	lt
 800f910:	9204      	strlt	r2, [sp, #16]
 800f912:	7823      	ldrb	r3, [r4, #0]
 800f914:	2b2e      	cmp	r3, #46	@ 0x2e
 800f916:	d10a      	bne.n	800f92e <_vfiprintf_r+0x156>
 800f918:	7863      	ldrb	r3, [r4, #1]
 800f91a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f91c:	d132      	bne.n	800f984 <_vfiprintf_r+0x1ac>
 800f91e:	9b03      	ldr	r3, [sp, #12]
 800f920:	1d1a      	adds	r2, r3, #4
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	9203      	str	r2, [sp, #12]
 800f926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f92a:	3402      	adds	r4, #2
 800f92c:	9305      	str	r3, [sp, #20]
 800f92e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa04 <_vfiprintf_r+0x22c>
 800f932:	7821      	ldrb	r1, [r4, #0]
 800f934:	2203      	movs	r2, #3
 800f936:	4650      	mov	r0, sl
 800f938:	f7f0 fc4a 	bl	80001d0 <memchr>
 800f93c:	b138      	cbz	r0, 800f94e <_vfiprintf_r+0x176>
 800f93e:	9b04      	ldr	r3, [sp, #16]
 800f940:	eba0 000a 	sub.w	r0, r0, sl
 800f944:	2240      	movs	r2, #64	@ 0x40
 800f946:	4082      	lsls	r2, r0
 800f948:	4313      	orrs	r3, r2
 800f94a:	3401      	adds	r4, #1
 800f94c:	9304      	str	r3, [sp, #16]
 800f94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f952:	4829      	ldr	r0, [pc, #164]	@ (800f9f8 <_vfiprintf_r+0x220>)
 800f954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f958:	2206      	movs	r2, #6
 800f95a:	f7f0 fc39 	bl	80001d0 <memchr>
 800f95e:	2800      	cmp	r0, #0
 800f960:	d03f      	beq.n	800f9e2 <_vfiprintf_r+0x20a>
 800f962:	4b26      	ldr	r3, [pc, #152]	@ (800f9fc <_vfiprintf_r+0x224>)
 800f964:	bb1b      	cbnz	r3, 800f9ae <_vfiprintf_r+0x1d6>
 800f966:	9b03      	ldr	r3, [sp, #12]
 800f968:	3307      	adds	r3, #7
 800f96a:	f023 0307 	bic.w	r3, r3, #7
 800f96e:	3308      	adds	r3, #8
 800f970:	9303      	str	r3, [sp, #12]
 800f972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f974:	443b      	add	r3, r7
 800f976:	9309      	str	r3, [sp, #36]	@ 0x24
 800f978:	e76a      	b.n	800f850 <_vfiprintf_r+0x78>
 800f97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f97e:	460c      	mov	r4, r1
 800f980:	2001      	movs	r0, #1
 800f982:	e7a8      	b.n	800f8d6 <_vfiprintf_r+0xfe>
 800f984:	2300      	movs	r3, #0
 800f986:	3401      	adds	r4, #1
 800f988:	9305      	str	r3, [sp, #20]
 800f98a:	4619      	mov	r1, r3
 800f98c:	f04f 0c0a 	mov.w	ip, #10
 800f990:	4620      	mov	r0, r4
 800f992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f996:	3a30      	subs	r2, #48	@ 0x30
 800f998:	2a09      	cmp	r2, #9
 800f99a:	d903      	bls.n	800f9a4 <_vfiprintf_r+0x1cc>
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d0c6      	beq.n	800f92e <_vfiprintf_r+0x156>
 800f9a0:	9105      	str	r1, [sp, #20]
 800f9a2:	e7c4      	b.n	800f92e <_vfiprintf_r+0x156>
 800f9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e7f0      	b.n	800f990 <_vfiprintf_r+0x1b8>
 800f9ae:	ab03      	add	r3, sp, #12
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	462a      	mov	r2, r5
 800f9b4:	4b12      	ldr	r3, [pc, #72]	@ (800fa00 <_vfiprintf_r+0x228>)
 800f9b6:	a904      	add	r1, sp, #16
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	f7fd fbc7 	bl	800d14c <_printf_float>
 800f9be:	4607      	mov	r7, r0
 800f9c0:	1c78      	adds	r0, r7, #1
 800f9c2:	d1d6      	bne.n	800f972 <_vfiprintf_r+0x19a>
 800f9c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9c6:	07d9      	lsls	r1, r3, #31
 800f9c8:	d405      	bmi.n	800f9d6 <_vfiprintf_r+0x1fe>
 800f9ca:	89ab      	ldrh	r3, [r5, #12]
 800f9cc:	059a      	lsls	r2, r3, #22
 800f9ce:	d402      	bmi.n	800f9d6 <_vfiprintf_r+0x1fe>
 800f9d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9d2:	f7fe f92b 	bl	800dc2c <__retarget_lock_release_recursive>
 800f9d6:	89ab      	ldrh	r3, [r5, #12]
 800f9d8:	065b      	lsls	r3, r3, #25
 800f9da:	f53f af1f 	bmi.w	800f81c <_vfiprintf_r+0x44>
 800f9de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9e0:	e71e      	b.n	800f820 <_vfiprintf_r+0x48>
 800f9e2:	ab03      	add	r3, sp, #12
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	462a      	mov	r2, r5
 800f9e8:	4b05      	ldr	r3, [pc, #20]	@ (800fa00 <_vfiprintf_r+0x228>)
 800f9ea:	a904      	add	r1, sp, #16
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7fd fe45 	bl	800d67c <_printf_i>
 800f9f2:	e7e4      	b.n	800f9be <_vfiprintf_r+0x1e6>
 800f9f4:	08010450 	.word	0x08010450
 800f9f8:	0801045a 	.word	0x0801045a
 800f9fc:	0800d14d 	.word	0x0800d14d
 800fa00:	0800f7b5 	.word	0x0800f7b5
 800fa04:	08010456 	.word	0x08010456

0800fa08 <__swbuf_r>:
 800fa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa0a:	460e      	mov	r6, r1
 800fa0c:	4614      	mov	r4, r2
 800fa0e:	4605      	mov	r5, r0
 800fa10:	b118      	cbz	r0, 800fa1a <__swbuf_r+0x12>
 800fa12:	6a03      	ldr	r3, [r0, #32]
 800fa14:	b90b      	cbnz	r3, 800fa1a <__swbuf_r+0x12>
 800fa16:	f7fd ffdd 	bl	800d9d4 <__sinit>
 800fa1a:	69a3      	ldr	r3, [r4, #24]
 800fa1c:	60a3      	str	r3, [r4, #8]
 800fa1e:	89a3      	ldrh	r3, [r4, #12]
 800fa20:	071a      	lsls	r2, r3, #28
 800fa22:	d501      	bpl.n	800fa28 <__swbuf_r+0x20>
 800fa24:	6923      	ldr	r3, [r4, #16]
 800fa26:	b943      	cbnz	r3, 800fa3a <__swbuf_r+0x32>
 800fa28:	4621      	mov	r1, r4
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f000 f82a 	bl	800fa84 <__swsetup_r>
 800fa30:	b118      	cbz	r0, 800fa3a <__swbuf_r+0x32>
 800fa32:	f04f 37ff 	mov.w	r7, #4294967295
 800fa36:	4638      	mov	r0, r7
 800fa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	6922      	ldr	r2, [r4, #16]
 800fa3e:	1a98      	subs	r0, r3, r2
 800fa40:	6963      	ldr	r3, [r4, #20]
 800fa42:	b2f6      	uxtb	r6, r6
 800fa44:	4283      	cmp	r3, r0
 800fa46:	4637      	mov	r7, r6
 800fa48:	dc05      	bgt.n	800fa56 <__swbuf_r+0x4e>
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f7ff fd99 	bl	800f584 <_fflush_r>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d1ed      	bne.n	800fa32 <__swbuf_r+0x2a>
 800fa56:	68a3      	ldr	r3, [r4, #8]
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	60a3      	str	r3, [r4, #8]
 800fa5c:	6823      	ldr	r3, [r4, #0]
 800fa5e:	1c5a      	adds	r2, r3, #1
 800fa60:	6022      	str	r2, [r4, #0]
 800fa62:	701e      	strb	r6, [r3, #0]
 800fa64:	6962      	ldr	r2, [r4, #20]
 800fa66:	1c43      	adds	r3, r0, #1
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d004      	beq.n	800fa76 <__swbuf_r+0x6e>
 800fa6c:	89a3      	ldrh	r3, [r4, #12]
 800fa6e:	07db      	lsls	r3, r3, #31
 800fa70:	d5e1      	bpl.n	800fa36 <__swbuf_r+0x2e>
 800fa72:	2e0a      	cmp	r6, #10
 800fa74:	d1df      	bne.n	800fa36 <__swbuf_r+0x2e>
 800fa76:	4621      	mov	r1, r4
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f7ff fd83 	bl	800f584 <_fflush_r>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d0d9      	beq.n	800fa36 <__swbuf_r+0x2e>
 800fa82:	e7d6      	b.n	800fa32 <__swbuf_r+0x2a>

0800fa84 <__swsetup_r>:
 800fa84:	b538      	push	{r3, r4, r5, lr}
 800fa86:	4b29      	ldr	r3, [pc, #164]	@ (800fb2c <__swsetup_r+0xa8>)
 800fa88:	4605      	mov	r5, r0
 800fa8a:	6818      	ldr	r0, [r3, #0]
 800fa8c:	460c      	mov	r4, r1
 800fa8e:	b118      	cbz	r0, 800fa98 <__swsetup_r+0x14>
 800fa90:	6a03      	ldr	r3, [r0, #32]
 800fa92:	b90b      	cbnz	r3, 800fa98 <__swsetup_r+0x14>
 800fa94:	f7fd ff9e 	bl	800d9d4 <__sinit>
 800fa98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa9c:	0719      	lsls	r1, r3, #28
 800fa9e:	d422      	bmi.n	800fae6 <__swsetup_r+0x62>
 800faa0:	06da      	lsls	r2, r3, #27
 800faa2:	d407      	bmi.n	800fab4 <__swsetup_r+0x30>
 800faa4:	2209      	movs	r2, #9
 800faa6:	602a      	str	r2, [r5, #0]
 800faa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800faac:	81a3      	strh	r3, [r4, #12]
 800faae:	f04f 30ff 	mov.w	r0, #4294967295
 800fab2:	e033      	b.n	800fb1c <__swsetup_r+0x98>
 800fab4:	0758      	lsls	r0, r3, #29
 800fab6:	d512      	bpl.n	800fade <__swsetup_r+0x5a>
 800fab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800faba:	b141      	cbz	r1, 800face <__swsetup_r+0x4a>
 800fabc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fac0:	4299      	cmp	r1, r3
 800fac2:	d002      	beq.n	800faca <__swsetup_r+0x46>
 800fac4:	4628      	mov	r0, r5
 800fac6:	f7fe feff 	bl	800e8c8 <_free_r>
 800faca:	2300      	movs	r3, #0
 800facc:	6363      	str	r3, [r4, #52]	@ 0x34
 800face:	89a3      	ldrh	r3, [r4, #12]
 800fad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fad4:	81a3      	strh	r3, [r4, #12]
 800fad6:	2300      	movs	r3, #0
 800fad8:	6063      	str	r3, [r4, #4]
 800fada:	6923      	ldr	r3, [r4, #16]
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	89a3      	ldrh	r3, [r4, #12]
 800fae0:	f043 0308 	orr.w	r3, r3, #8
 800fae4:	81a3      	strh	r3, [r4, #12]
 800fae6:	6923      	ldr	r3, [r4, #16]
 800fae8:	b94b      	cbnz	r3, 800fafe <__swsetup_r+0x7a>
 800faea:	89a3      	ldrh	r3, [r4, #12]
 800faec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800faf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faf4:	d003      	beq.n	800fafe <__swsetup_r+0x7a>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4628      	mov	r0, r5
 800fafa:	f000 f883 	bl	800fc04 <__smakebuf_r>
 800fafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb02:	f013 0201 	ands.w	r2, r3, #1
 800fb06:	d00a      	beq.n	800fb1e <__swsetup_r+0x9a>
 800fb08:	2200      	movs	r2, #0
 800fb0a:	60a2      	str	r2, [r4, #8]
 800fb0c:	6962      	ldr	r2, [r4, #20]
 800fb0e:	4252      	negs	r2, r2
 800fb10:	61a2      	str	r2, [r4, #24]
 800fb12:	6922      	ldr	r2, [r4, #16]
 800fb14:	b942      	cbnz	r2, 800fb28 <__swsetup_r+0xa4>
 800fb16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb1a:	d1c5      	bne.n	800faa8 <__swsetup_r+0x24>
 800fb1c:	bd38      	pop	{r3, r4, r5, pc}
 800fb1e:	0799      	lsls	r1, r3, #30
 800fb20:	bf58      	it	pl
 800fb22:	6962      	ldrpl	r2, [r4, #20]
 800fb24:	60a2      	str	r2, [r4, #8]
 800fb26:	e7f4      	b.n	800fb12 <__swsetup_r+0x8e>
 800fb28:	2000      	movs	r0, #0
 800fb2a:	e7f7      	b.n	800fb1c <__swsetup_r+0x98>
 800fb2c:	20000120 	.word	0x20000120

0800fb30 <_raise_r>:
 800fb30:	291f      	cmp	r1, #31
 800fb32:	b538      	push	{r3, r4, r5, lr}
 800fb34:	4605      	mov	r5, r0
 800fb36:	460c      	mov	r4, r1
 800fb38:	d904      	bls.n	800fb44 <_raise_r+0x14>
 800fb3a:	2316      	movs	r3, #22
 800fb3c:	6003      	str	r3, [r0, #0]
 800fb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb42:	bd38      	pop	{r3, r4, r5, pc}
 800fb44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb46:	b112      	cbz	r2, 800fb4e <_raise_r+0x1e>
 800fb48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb4c:	b94b      	cbnz	r3, 800fb62 <_raise_r+0x32>
 800fb4e:	4628      	mov	r0, r5
 800fb50:	f000 f830 	bl	800fbb4 <_getpid_r>
 800fb54:	4622      	mov	r2, r4
 800fb56:	4601      	mov	r1, r0
 800fb58:	4628      	mov	r0, r5
 800fb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb5e:	f000 b817 	b.w	800fb90 <_kill_r>
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d00a      	beq.n	800fb7c <_raise_r+0x4c>
 800fb66:	1c59      	adds	r1, r3, #1
 800fb68:	d103      	bne.n	800fb72 <_raise_r+0x42>
 800fb6a:	2316      	movs	r3, #22
 800fb6c:	6003      	str	r3, [r0, #0]
 800fb6e:	2001      	movs	r0, #1
 800fb70:	e7e7      	b.n	800fb42 <_raise_r+0x12>
 800fb72:	2100      	movs	r1, #0
 800fb74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb78:	4620      	mov	r0, r4
 800fb7a:	4798      	blx	r3
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	e7e0      	b.n	800fb42 <_raise_r+0x12>

0800fb80 <raise>:
 800fb80:	4b02      	ldr	r3, [pc, #8]	@ (800fb8c <raise+0xc>)
 800fb82:	4601      	mov	r1, r0
 800fb84:	6818      	ldr	r0, [r3, #0]
 800fb86:	f7ff bfd3 	b.w	800fb30 <_raise_r>
 800fb8a:	bf00      	nop
 800fb8c:	20000120 	.word	0x20000120

0800fb90 <_kill_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4d07      	ldr	r5, [pc, #28]	@ (800fbb0 <_kill_r+0x20>)
 800fb94:	2300      	movs	r3, #0
 800fb96:	4604      	mov	r4, r0
 800fb98:	4608      	mov	r0, r1
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	602b      	str	r3, [r5, #0]
 800fb9e:	f7f3 fc71 	bl	8003484 <_kill>
 800fba2:	1c43      	adds	r3, r0, #1
 800fba4:	d102      	bne.n	800fbac <_kill_r+0x1c>
 800fba6:	682b      	ldr	r3, [r5, #0]
 800fba8:	b103      	cbz	r3, 800fbac <_kill_r+0x1c>
 800fbaa:	6023      	str	r3, [r4, #0]
 800fbac:	bd38      	pop	{r3, r4, r5, pc}
 800fbae:	bf00      	nop
 800fbb0:	200022c4 	.word	0x200022c4

0800fbb4 <_getpid_r>:
 800fbb4:	f7f3 bc5e 	b.w	8003474 <_getpid>

0800fbb8 <__swhatbuf_r>:
 800fbb8:	b570      	push	{r4, r5, r6, lr}
 800fbba:	460c      	mov	r4, r1
 800fbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc0:	2900      	cmp	r1, #0
 800fbc2:	b096      	sub	sp, #88	@ 0x58
 800fbc4:	4615      	mov	r5, r2
 800fbc6:	461e      	mov	r6, r3
 800fbc8:	da0d      	bge.n	800fbe6 <__swhatbuf_r+0x2e>
 800fbca:	89a3      	ldrh	r3, [r4, #12]
 800fbcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fbd0:	f04f 0100 	mov.w	r1, #0
 800fbd4:	bf14      	ite	ne
 800fbd6:	2340      	movne	r3, #64	@ 0x40
 800fbd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fbdc:	2000      	movs	r0, #0
 800fbde:	6031      	str	r1, [r6, #0]
 800fbe0:	602b      	str	r3, [r5, #0]
 800fbe2:	b016      	add	sp, #88	@ 0x58
 800fbe4:	bd70      	pop	{r4, r5, r6, pc}
 800fbe6:	466a      	mov	r2, sp
 800fbe8:	f000 f848 	bl	800fc7c <_fstat_r>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	dbec      	blt.n	800fbca <__swhatbuf_r+0x12>
 800fbf0:	9901      	ldr	r1, [sp, #4]
 800fbf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fbf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fbfa:	4259      	negs	r1, r3
 800fbfc:	4159      	adcs	r1, r3
 800fbfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc02:	e7eb      	b.n	800fbdc <__swhatbuf_r+0x24>

0800fc04 <__smakebuf_r>:
 800fc04:	898b      	ldrh	r3, [r1, #12]
 800fc06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc08:	079d      	lsls	r5, r3, #30
 800fc0a:	4606      	mov	r6, r0
 800fc0c:	460c      	mov	r4, r1
 800fc0e:	d507      	bpl.n	800fc20 <__smakebuf_r+0x1c>
 800fc10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc14:	6023      	str	r3, [r4, #0]
 800fc16:	6123      	str	r3, [r4, #16]
 800fc18:	2301      	movs	r3, #1
 800fc1a:	6163      	str	r3, [r4, #20]
 800fc1c:	b003      	add	sp, #12
 800fc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc20:	ab01      	add	r3, sp, #4
 800fc22:	466a      	mov	r2, sp
 800fc24:	f7ff ffc8 	bl	800fbb8 <__swhatbuf_r>
 800fc28:	9f00      	ldr	r7, [sp, #0]
 800fc2a:	4605      	mov	r5, r0
 800fc2c:	4639      	mov	r1, r7
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7fe febe 	bl	800e9b0 <_malloc_r>
 800fc34:	b948      	cbnz	r0, 800fc4a <__smakebuf_r+0x46>
 800fc36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc3a:	059a      	lsls	r2, r3, #22
 800fc3c:	d4ee      	bmi.n	800fc1c <__smakebuf_r+0x18>
 800fc3e:	f023 0303 	bic.w	r3, r3, #3
 800fc42:	f043 0302 	orr.w	r3, r3, #2
 800fc46:	81a3      	strh	r3, [r4, #12]
 800fc48:	e7e2      	b.n	800fc10 <__smakebuf_r+0xc>
 800fc4a:	89a3      	ldrh	r3, [r4, #12]
 800fc4c:	6020      	str	r0, [r4, #0]
 800fc4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc52:	81a3      	strh	r3, [r4, #12]
 800fc54:	9b01      	ldr	r3, [sp, #4]
 800fc56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc5a:	b15b      	cbz	r3, 800fc74 <__smakebuf_r+0x70>
 800fc5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc60:	4630      	mov	r0, r6
 800fc62:	f000 f81d 	bl	800fca0 <_isatty_r>
 800fc66:	b128      	cbz	r0, 800fc74 <__smakebuf_r+0x70>
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	f023 0303 	bic.w	r3, r3, #3
 800fc6e:	f043 0301 	orr.w	r3, r3, #1
 800fc72:	81a3      	strh	r3, [r4, #12]
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	431d      	orrs	r5, r3
 800fc78:	81a5      	strh	r5, [r4, #12]
 800fc7a:	e7cf      	b.n	800fc1c <__smakebuf_r+0x18>

0800fc7c <_fstat_r>:
 800fc7c:	b538      	push	{r3, r4, r5, lr}
 800fc7e:	4d07      	ldr	r5, [pc, #28]	@ (800fc9c <_fstat_r+0x20>)
 800fc80:	2300      	movs	r3, #0
 800fc82:	4604      	mov	r4, r0
 800fc84:	4608      	mov	r0, r1
 800fc86:	4611      	mov	r1, r2
 800fc88:	602b      	str	r3, [r5, #0]
 800fc8a:	f7f3 fc5b 	bl	8003544 <_fstat>
 800fc8e:	1c43      	adds	r3, r0, #1
 800fc90:	d102      	bne.n	800fc98 <_fstat_r+0x1c>
 800fc92:	682b      	ldr	r3, [r5, #0]
 800fc94:	b103      	cbz	r3, 800fc98 <_fstat_r+0x1c>
 800fc96:	6023      	str	r3, [r4, #0]
 800fc98:	bd38      	pop	{r3, r4, r5, pc}
 800fc9a:	bf00      	nop
 800fc9c:	200022c4 	.word	0x200022c4

0800fca0 <_isatty_r>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	4d06      	ldr	r5, [pc, #24]	@ (800fcbc <_isatty_r+0x1c>)
 800fca4:	2300      	movs	r3, #0
 800fca6:	4604      	mov	r4, r0
 800fca8:	4608      	mov	r0, r1
 800fcaa:	602b      	str	r3, [r5, #0]
 800fcac:	f7f3 fc5a 	bl	8003564 <_isatty>
 800fcb0:	1c43      	adds	r3, r0, #1
 800fcb2:	d102      	bne.n	800fcba <_isatty_r+0x1a>
 800fcb4:	682b      	ldr	r3, [r5, #0]
 800fcb6:	b103      	cbz	r3, 800fcba <_isatty_r+0x1a>
 800fcb8:	6023      	str	r3, [r4, #0]
 800fcba:	bd38      	pop	{r3, r4, r5, pc}
 800fcbc:	200022c4 	.word	0x200022c4

0800fcc0 <log>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	ed2d 8b02 	vpush	{d8}
 800fcc6:	ec55 4b10 	vmov	r4, r5, d0
 800fcca:	f000 f841 	bl	800fd50 <__ieee754_log>
 800fcce:	4622      	mov	r2, r4
 800fcd0:	462b      	mov	r3, r5
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	eeb0 8a40 	vmov.f32	s16, s0
 800fcda:	eef0 8a60 	vmov.f32	s17, s1
 800fcde:	f7f0 ff25 	bl	8000b2c <__aeabi_dcmpun>
 800fce2:	b998      	cbnz	r0, 800fd0c <log+0x4c>
 800fce4:	2200      	movs	r2, #0
 800fce6:	2300      	movs	r3, #0
 800fce8:	4620      	mov	r0, r4
 800fcea:	4629      	mov	r1, r5
 800fcec:	f7f0 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 800fcf0:	b960      	cbnz	r0, 800fd0c <log+0x4c>
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	f7f0 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcfe:	b160      	cbz	r0, 800fd1a <log+0x5a>
 800fd00:	f7fd ff68 	bl	800dbd4 <__errno>
 800fd04:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fd30 <log+0x70>
 800fd08:	2322      	movs	r3, #34	@ 0x22
 800fd0a:	6003      	str	r3, [r0, #0]
 800fd0c:	eeb0 0a48 	vmov.f32	s0, s16
 800fd10:	eef0 0a68 	vmov.f32	s1, s17
 800fd14:	ecbd 8b02 	vpop	{d8}
 800fd18:	bd38      	pop	{r3, r4, r5, pc}
 800fd1a:	f7fd ff5b 	bl	800dbd4 <__errno>
 800fd1e:	ecbd 8b02 	vpop	{d8}
 800fd22:	2321      	movs	r3, #33	@ 0x21
 800fd24:	6003      	str	r3, [r0, #0]
 800fd26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd2a:	4803      	ldr	r0, [pc, #12]	@ (800fd38 <log+0x78>)
 800fd2c:	f000 b808 	b.w	800fd40 <nan>
 800fd30:	00000000 	.word	0x00000000
 800fd34:	fff00000 	.word	0xfff00000
 800fd38:	080104a6 	.word	0x080104a6
 800fd3c:	00000000 	.word	0x00000000

0800fd40 <nan>:
 800fd40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fd48 <nan+0x8>
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop
 800fd48:	00000000 	.word	0x00000000
 800fd4c:	7ff80000 	.word	0x7ff80000

0800fd50 <__ieee754_log>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	ec51 0b10 	vmov	r0, r1, d0
 800fd58:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800fd5c:	b087      	sub	sp, #28
 800fd5e:	460d      	mov	r5, r1
 800fd60:	da26      	bge.n	800fdb0 <__ieee754_log+0x60>
 800fd62:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fd66:	4303      	orrs	r3, r0
 800fd68:	4602      	mov	r2, r0
 800fd6a:	d10a      	bne.n	800fd82 <__ieee754_log+0x32>
 800fd6c:	49ce      	ldr	r1, [pc, #824]	@ (80100a8 <__ieee754_log+0x358>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	2300      	movs	r3, #0
 800fd72:	2000      	movs	r0, #0
 800fd74:	f7f0 fd6a 	bl	800084c <__aeabi_ddiv>
 800fd78:	ec41 0b10 	vmov	d0, r0, r1
 800fd7c:	b007      	add	sp, #28
 800fd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd82:	2900      	cmp	r1, #0
 800fd84:	da05      	bge.n	800fd92 <__ieee754_log+0x42>
 800fd86:	460b      	mov	r3, r1
 800fd88:	f7f0 fa7e 	bl	8000288 <__aeabi_dsub>
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	2300      	movs	r3, #0
 800fd90:	e7f0      	b.n	800fd74 <__ieee754_log+0x24>
 800fd92:	4bc6      	ldr	r3, [pc, #792]	@ (80100ac <__ieee754_log+0x35c>)
 800fd94:	2200      	movs	r2, #0
 800fd96:	f7f0 fc2f 	bl	80005f8 <__aeabi_dmul>
 800fd9a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800fd9e:	460d      	mov	r5, r1
 800fda0:	4ac3      	ldr	r2, [pc, #780]	@ (80100b0 <__ieee754_log+0x360>)
 800fda2:	4295      	cmp	r5, r2
 800fda4:	dd06      	ble.n	800fdb4 <__ieee754_log+0x64>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	f7f0 fa6f 	bl	800028c <__adddf3>
 800fdae:	e7e3      	b.n	800fd78 <__ieee754_log+0x28>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	e7f5      	b.n	800fda0 <__ieee754_log+0x50>
 800fdb4:	152c      	asrs	r4, r5, #20
 800fdb6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800fdba:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fdbe:	441c      	add	r4, r3
 800fdc0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800fdc4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800fdc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fdcc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800fdd0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800fdd4:	ea42 0105 	orr.w	r1, r2, r5
 800fdd8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800fddc:	2200      	movs	r2, #0
 800fdde:	4bb5      	ldr	r3, [pc, #724]	@ (80100b4 <__ieee754_log+0x364>)
 800fde0:	f7f0 fa52 	bl	8000288 <__aeabi_dsub>
 800fde4:	1cab      	adds	r3, r5, #2
 800fde6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	4682      	mov	sl, r0
 800fdee:	468b      	mov	fp, r1
 800fdf0:	f04f 0200 	mov.w	r2, #0
 800fdf4:	dc53      	bgt.n	800fe9e <__ieee754_log+0x14e>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	f7f0 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdfc:	b1d0      	cbz	r0, 800fe34 <__ieee754_log+0xe4>
 800fdfe:	2c00      	cmp	r4, #0
 800fe00:	f000 8120 	beq.w	8010044 <__ieee754_log+0x2f4>
 800fe04:	4620      	mov	r0, r4
 800fe06:	f7f0 fb8d 	bl	8000524 <__aeabi_i2d>
 800fe0a:	a391      	add	r3, pc, #580	@ (adr r3, 8010050 <__ieee754_log+0x300>)
 800fe0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe10:	4606      	mov	r6, r0
 800fe12:	460f      	mov	r7, r1
 800fe14:	f7f0 fbf0 	bl	80005f8 <__aeabi_dmul>
 800fe18:	a38f      	add	r3, pc, #572	@ (adr r3, 8010058 <__ieee754_log+0x308>)
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	4604      	mov	r4, r0
 800fe20:	460d      	mov	r5, r1
 800fe22:	4630      	mov	r0, r6
 800fe24:	4639      	mov	r1, r7
 800fe26:	f7f0 fbe7 	bl	80005f8 <__aeabi_dmul>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	4620      	mov	r0, r4
 800fe30:	4629      	mov	r1, r5
 800fe32:	e7ba      	b.n	800fdaa <__ieee754_log+0x5a>
 800fe34:	a38a      	add	r3, pc, #552	@ (adr r3, 8010060 <__ieee754_log+0x310>)
 800fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3a:	4650      	mov	r0, sl
 800fe3c:	4659      	mov	r1, fp
 800fe3e:	f7f0 fbdb 	bl	80005f8 <__aeabi_dmul>
 800fe42:	4602      	mov	r2, r0
 800fe44:	460b      	mov	r3, r1
 800fe46:	2000      	movs	r0, #0
 800fe48:	499b      	ldr	r1, [pc, #620]	@ (80100b8 <__ieee754_log+0x368>)
 800fe4a:	f7f0 fa1d 	bl	8000288 <__aeabi_dsub>
 800fe4e:	4652      	mov	r2, sl
 800fe50:	4606      	mov	r6, r0
 800fe52:	460f      	mov	r7, r1
 800fe54:	465b      	mov	r3, fp
 800fe56:	4650      	mov	r0, sl
 800fe58:	4659      	mov	r1, fp
 800fe5a:	f7f0 fbcd 	bl	80005f8 <__aeabi_dmul>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	460b      	mov	r3, r1
 800fe62:	4630      	mov	r0, r6
 800fe64:	4639      	mov	r1, r7
 800fe66:	f7f0 fbc7 	bl	80005f8 <__aeabi_dmul>
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	460f      	mov	r7, r1
 800fe6e:	b914      	cbnz	r4, 800fe76 <__ieee754_log+0x126>
 800fe70:	4632      	mov	r2, r6
 800fe72:	463b      	mov	r3, r7
 800fe74:	e0a0      	b.n	800ffb8 <__ieee754_log+0x268>
 800fe76:	4620      	mov	r0, r4
 800fe78:	f7f0 fb54 	bl	8000524 <__aeabi_i2d>
 800fe7c:	a374      	add	r3, pc, #464	@ (adr r3, 8010050 <__ieee754_log+0x300>)
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	4680      	mov	r8, r0
 800fe84:	4689      	mov	r9, r1
 800fe86:	f7f0 fbb7 	bl	80005f8 <__aeabi_dmul>
 800fe8a:	a373      	add	r3, pc, #460	@ (adr r3, 8010058 <__ieee754_log+0x308>)
 800fe8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe90:	4604      	mov	r4, r0
 800fe92:	460d      	mov	r5, r1
 800fe94:	4640      	mov	r0, r8
 800fe96:	4649      	mov	r1, r9
 800fe98:	f7f0 fbae 	bl	80005f8 <__aeabi_dmul>
 800fe9c:	e0a5      	b.n	800ffea <__ieee754_log+0x29a>
 800fe9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fea2:	f7f0 f9f3 	bl	800028c <__adddf3>
 800fea6:	4602      	mov	r2, r0
 800fea8:	460b      	mov	r3, r1
 800feaa:	4650      	mov	r0, sl
 800feac:	4659      	mov	r1, fp
 800feae:	f7f0 fccd 	bl	800084c <__aeabi_ddiv>
 800feb2:	e9cd 0100 	strd	r0, r1, [sp]
 800feb6:	4620      	mov	r0, r4
 800feb8:	f7f0 fb34 	bl	8000524 <__aeabi_i2d>
 800febc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fec4:	4610      	mov	r0, r2
 800fec6:	4619      	mov	r1, r3
 800fec8:	f7f0 fb96 	bl	80005f8 <__aeabi_dmul>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fed4:	f7f0 fb90 	bl	80005f8 <__aeabi_dmul>
 800fed8:	a363      	add	r3, pc, #396	@ (adr r3, 8010068 <__ieee754_log+0x318>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	4680      	mov	r8, r0
 800fee0:	4689      	mov	r9, r1
 800fee2:	f7f0 fb89 	bl	80005f8 <__aeabi_dmul>
 800fee6:	a362      	add	r3, pc, #392	@ (adr r3, 8010070 <__ieee754_log+0x320>)
 800fee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feec:	f7f0 f9ce 	bl	800028c <__adddf3>
 800fef0:	4642      	mov	r2, r8
 800fef2:	464b      	mov	r3, r9
 800fef4:	f7f0 fb80 	bl	80005f8 <__aeabi_dmul>
 800fef8:	a35f      	add	r3, pc, #380	@ (adr r3, 8010078 <__ieee754_log+0x328>)
 800fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefe:	f7f0 f9c5 	bl	800028c <__adddf3>
 800ff02:	4642      	mov	r2, r8
 800ff04:	464b      	mov	r3, r9
 800ff06:	f7f0 fb77 	bl	80005f8 <__aeabi_dmul>
 800ff0a:	a35d      	add	r3, pc, #372	@ (adr r3, 8010080 <__ieee754_log+0x330>)
 800ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff10:	f7f0 f9bc 	bl	800028c <__adddf3>
 800ff14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff18:	f7f0 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ff1c:	a35a      	add	r3, pc, #360	@ (adr r3, 8010088 <__ieee754_log+0x338>)
 800ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff26:	4640      	mov	r0, r8
 800ff28:	4649      	mov	r1, r9
 800ff2a:	f7f0 fb65 	bl	80005f8 <__aeabi_dmul>
 800ff2e:	a358      	add	r3, pc, #352	@ (adr r3, 8010090 <__ieee754_log+0x340>)
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	f7f0 f9aa 	bl	800028c <__adddf3>
 800ff38:	4642      	mov	r2, r8
 800ff3a:	464b      	mov	r3, r9
 800ff3c:	f7f0 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ff40:	a355      	add	r3, pc, #340	@ (adr r3, 8010098 <__ieee754_log+0x348>)
 800ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff46:	f7f0 f9a1 	bl	800028c <__adddf3>
 800ff4a:	4642      	mov	r2, r8
 800ff4c:	464b      	mov	r3, r9
 800ff4e:	f7f0 fb53 	bl	80005f8 <__aeabi_dmul>
 800ff52:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800ff5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff62:	f7f0 f993 	bl	800028c <__adddf3>
 800ff66:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800ff6a:	3551      	adds	r5, #81	@ 0x51
 800ff6c:	4335      	orrs	r5, r6
 800ff6e:	2d00      	cmp	r5, #0
 800ff70:	4680      	mov	r8, r0
 800ff72:	4689      	mov	r9, r1
 800ff74:	dd48      	ble.n	8010008 <__ieee754_log+0x2b8>
 800ff76:	4b50      	ldr	r3, [pc, #320]	@ (80100b8 <__ieee754_log+0x368>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	4650      	mov	r0, sl
 800ff7c:	4659      	mov	r1, fp
 800ff7e:	f7f0 fb3b 	bl	80005f8 <__aeabi_dmul>
 800ff82:	4652      	mov	r2, sl
 800ff84:	465b      	mov	r3, fp
 800ff86:	f7f0 fb37 	bl	80005f8 <__aeabi_dmul>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	4606      	mov	r6, r0
 800ff90:	460f      	mov	r7, r1
 800ff92:	4640      	mov	r0, r8
 800ff94:	4649      	mov	r1, r9
 800ff96:	f7f0 f979 	bl	800028c <__adddf3>
 800ff9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff9e:	f7f0 fb2b 	bl	80005f8 <__aeabi_dmul>
 800ffa2:	4680      	mov	r8, r0
 800ffa4:	4689      	mov	r9, r1
 800ffa6:	b964      	cbnz	r4, 800ffc2 <__ieee754_log+0x272>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	4630      	mov	r0, r6
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f7f0 f96a 	bl	8000288 <__aeabi_dsub>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	4650      	mov	r0, sl
 800ffba:	4659      	mov	r1, fp
 800ffbc:	f7f0 f964 	bl	8000288 <__aeabi_dsub>
 800ffc0:	e6da      	b.n	800fd78 <__ieee754_log+0x28>
 800ffc2:	a323      	add	r3, pc, #140	@ (adr r3, 8010050 <__ieee754_log+0x300>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffcc:	f7f0 fb14 	bl	80005f8 <__aeabi_dmul>
 800ffd0:	a321      	add	r3, pc, #132	@ (adr r3, 8010058 <__ieee754_log+0x308>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	460d      	mov	r5, r1
 800ffda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffde:	f7f0 fb0b 	bl	80005f8 <__aeabi_dmul>
 800ffe2:	4642      	mov	r2, r8
 800ffe4:	464b      	mov	r3, r9
 800ffe6:	f7f0 f951 	bl	800028c <__adddf3>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	4630      	mov	r0, r6
 800fff0:	4639      	mov	r1, r7
 800fff2:	f7f0 f949 	bl	8000288 <__aeabi_dsub>
 800fff6:	4652      	mov	r2, sl
 800fff8:	465b      	mov	r3, fp
 800fffa:	f7f0 f945 	bl	8000288 <__aeabi_dsub>
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	4620      	mov	r0, r4
 8010004:	4629      	mov	r1, r5
 8010006:	e7d9      	b.n	800ffbc <__ieee754_log+0x26c>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	4650      	mov	r0, sl
 801000e:	4659      	mov	r1, fp
 8010010:	f7f0 f93a 	bl	8000288 <__aeabi_dsub>
 8010014:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010018:	f7f0 faee 	bl	80005f8 <__aeabi_dmul>
 801001c:	4606      	mov	r6, r0
 801001e:	460f      	mov	r7, r1
 8010020:	2c00      	cmp	r4, #0
 8010022:	f43f af25 	beq.w	800fe70 <__ieee754_log+0x120>
 8010026:	a30a      	add	r3, pc, #40	@ (adr r3, 8010050 <__ieee754_log+0x300>)
 8010028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010030:	f7f0 fae2 	bl	80005f8 <__aeabi_dmul>
 8010034:	a308      	add	r3, pc, #32	@ (adr r3, 8010058 <__ieee754_log+0x308>)
 8010036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003a:	4604      	mov	r4, r0
 801003c:	460d      	mov	r5, r1
 801003e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010042:	e729      	b.n	800fe98 <__ieee754_log+0x148>
 8010044:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80100a0 <__ieee754_log+0x350>
 8010048:	e698      	b.n	800fd7c <__ieee754_log+0x2c>
 801004a:	bf00      	nop
 801004c:	f3af 8000 	nop.w
 8010050:	fee00000 	.word	0xfee00000
 8010054:	3fe62e42 	.word	0x3fe62e42
 8010058:	35793c76 	.word	0x35793c76
 801005c:	3dea39ef 	.word	0x3dea39ef
 8010060:	55555555 	.word	0x55555555
 8010064:	3fd55555 	.word	0x3fd55555
 8010068:	df3e5244 	.word	0xdf3e5244
 801006c:	3fc2f112 	.word	0x3fc2f112
 8010070:	96cb03de 	.word	0x96cb03de
 8010074:	3fc74664 	.word	0x3fc74664
 8010078:	94229359 	.word	0x94229359
 801007c:	3fd24924 	.word	0x3fd24924
 8010080:	55555593 	.word	0x55555593
 8010084:	3fe55555 	.word	0x3fe55555
 8010088:	d078c69f 	.word	0xd078c69f
 801008c:	3fc39a09 	.word	0x3fc39a09
 8010090:	1d8e78af 	.word	0x1d8e78af
 8010094:	3fcc71c5 	.word	0x3fcc71c5
 8010098:	9997fa04 	.word	0x9997fa04
 801009c:	3fd99999 	.word	0x3fd99999
	...
 80100a8:	c3500000 	.word	0xc3500000
 80100ac:	43500000 	.word	0x43500000
 80100b0:	7fefffff 	.word	0x7fefffff
 80100b4:	3ff00000 	.word	0x3ff00000
 80100b8:	3fe00000 	.word	0x3fe00000

080100bc <_init>:
 80100bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100be:	bf00      	nop
 80100c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100c2:	bc08      	pop	{r3}
 80100c4:	469e      	mov	lr, r3
 80100c6:	4770      	bx	lr

080100c8 <_fini>:
 80100c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ca:	bf00      	nop
 80100cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ce:	bc08      	pop	{r3}
 80100d0:	469e      	mov	lr, r3
 80100d2:	4770      	bx	lr
