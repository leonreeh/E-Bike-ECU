
BLDC-ESC-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800fb78  0800fb78  00010b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010048  08010048  000122dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010048  08010048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010050  08010050  000122dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010050  08010050  00011050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010054  08010054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08010058  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122dc  2**0
                  CONTENTS
 10 .bss          00001ff8  200002dc  200002dc  000122dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022d4  200022d4  000122dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df85  00000000  00000000  0001230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004763  00000000  00000000  00030291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  000349f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ec  00000000  00000000  000364e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002609c  00000000  00000000  000379d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002373e  00000000  00000000  0005da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7071  00000000  00000000  000811ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015821f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082fc  00000000  00000000  00158264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00160560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb60 	.word	0x0800fb60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	0800fb60 	.word	0x0800fb60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <hallState>:
  *				110		180° - 240°		4320° - 5760°
  *				010		240° - 300°		5760° - 7200°
  *				011		300° - 360°		7200° - 8640°
  *
  */
uint16_t hallState(uint16_t hall[]){
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	uint16_t commutatorState = -1;
 8000f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f44:	81fb      	strh	r3, [r7, #14]
	  if ((hall[0] == 1) && (hall[1] == 0) && (hall[2] == 1)) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10c      	bne.n	8000f68 <hallState+0x30>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3302      	adds	r3, #2
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d107      	bne.n	8000f68 <hallState+0x30>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <hallState+0x30>
		//Mechanical Angle 0°-60°
		  commutatorState = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	81fb      	strh	r3, [r7, #14]
 8000f66:	e053      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 0) && (hall[2] == 1)) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10c      	bne.n	8000f8a <hallState+0x52>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3302      	adds	r3, #2
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d107      	bne.n	8000f8a <hallState+0x52>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <hallState+0x52>
		//Mechanical Angle 60°-120°
		  commutatorState = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	e042      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 1) && (hall[2] == 1)) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <hallState+0x74>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3302      	adds	r3, #2
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d107      	bne.n	8000fac <hallState+0x74>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <hallState+0x74>
		//Mechanical Angle 120°-180°
		  commutatorState = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	81fb      	strh	r3, [r7, #14]
 8000faa:	e031      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 0) && (hall[1] == 1) && (hall[2] == 0)) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10c      	bne.n	8000fce <hallState+0x96>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <hallState+0x96>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <hallState+0x96>
		//Mechanical Angle 180°-240°
		  commutatorState = 3;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	81fb      	strh	r3, [r7, #14]
 8000fcc:	e020      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 1) && (hall[1] == 1) && (hall[2] == 0)) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10c      	bne.n	8000ff0 <hallState+0xb8>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <hallState+0xb8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <hallState+0xb8>
		//Mechanical Angle 240°-300°
		  commutatorState = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	81fb      	strh	r3, [r7, #14]
 8000fee:	e00f      	b.n	8001010 <hallState+0xd8>
	  }
	  else if  ((hall[0] == 1) && (hall[1] == 0) && (hall[2] == 0)) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10b      	bne.n	8001010 <hallState+0xd8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <hallState+0xd8>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3304      	adds	r3, #4
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <hallState+0xd8>
		//Mechanical Angle 300°-360°
		  commutatorState = 5;
 800100c:	2305      	movs	r3, #5
 800100e:	81fb      	strh	r3, [r7, #14]
	  }
	  return commutatorState;
 8001010:	89fb      	ldrh	r3, [r7, #14]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <commutator>:
  * @param commutatorStep 		= 0-5 determined by FOC hall sensor position
  * @param duty					= PWM duty cycle 0-100
  * @param dir					= motor direction: 1 = fwr; -1= rws
  * @retval			= void
  */
void commutator(int commutatorStep, int duty, int dir){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]

	if(dir ==1){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	f040 80d8 	bne.w	80011e4 <commutator+0x1c4>
		switch(commutatorStep){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b05      	cmp	r3, #5
 8001038:	f200 80b8 	bhi.w	80011ac <commutator+0x18c>
 800103c:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <commutator+0x24>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001095 	.word	0x08001095
 800104c:	080010cd 	.word	0x080010cd
 8001050:	08001105 	.word	0x08001105
 8001054:	0800113d 	.word	0x0800113d
 8001058:	08001175 	.word	0x08001175
		//Phase Current:	U = I		V =	-I		W = 0
		//High Side			U = PWM		V = OFF		W = OFF
		//Low Side			U = OFF		V = ON		W = OFF
		case 0:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001062:	4871      	ldr	r0, [pc, #452]	@ (8001228 <commutator+0x208>)
 8001064:	f003 fb66 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106e:	486e      	ldr	r0, [pc, #440]	@ (8001228 <commutator+0x208>)
 8001070:	f003 fb60 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107a:	486b      	ldr	r0, [pc, #428]	@ (8001228 <commutator+0x208>)
 800107c:	f003 fb5a 	bl	8004734 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = duty;
 8001080:	4a6a      	ldr	r2, [pc, #424]	@ (800122c <commutator+0x20c>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = 0;
 8001086:	4b69      	ldr	r3, [pc, #420]	@ (800122c <commutator+0x20c>)
 8001088:	2200      	movs	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 800108c:	4b67      	ldr	r3, [pc, #412]	@ (800122c <commutator+0x20c>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 8001092:	e0a7      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = 0		V =	-I		W = I
		//High Side			U = OFF		V = OFF		W = PWM
		//Low Side			U = OFF		V = ON		W = OFF
		case 1:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109a:	4863      	ldr	r0, [pc, #396]	@ (8001228 <commutator+0x208>)
 800109c:	f003 fb4a 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a6:	4860      	ldr	r0, [pc, #384]	@ (8001228 <commutator+0x208>)
 80010a8:	f003 fb44 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b2:	485d      	ldr	r0, [pc, #372]	@ (8001228 <commutator+0x208>)
 80010b4:	f003 fb3e 	bl	8004734 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 80010b8:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <commutator+0x20c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80010be:	4b5b      	ldr	r3, [pc, #364]	@ (800122c <commutator+0x20c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = duty;
 80010c4:	4a59      	ldr	r2, [pc, #356]	@ (800122c <commutator+0x20c>)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	63d3      	str	r3, [r2, #60]	@ 0x3c

			break;
 80010ca:	e08b      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = -I		V =	0		W = I
		//High Side			U = OFF		V = OFF		W = PWM
		//Low Side			U = ON		V = OFF		W = OFF
		case 2:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d2:	4855      	ldr	r0, [pc, #340]	@ (8001228 <commutator+0x208>)
 80010d4:	f003 fb2e 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010de:	4852      	ldr	r0, [pc, #328]	@ (8001228 <commutator+0x208>)
 80010e0:	f003 fb28 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ea:	484f      	ldr	r0, [pc, #316]	@ (8001228 <commutator+0x208>)
 80010ec:	f003 fb22 	bl	8004734 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 80010f0:	4b4e      	ldr	r3, [pc, #312]	@ (800122c <commutator+0x20c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <commutator+0x20c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = duty;
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <commutator+0x20c>)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	63d3      	str	r3, [r2, #60]	@ 0x3c

			break;
 8001102:	e06f      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = -I		V =	I		W = 0
		//High Side			U = OFF		V = PWM		W = OFF
		//Low Side			U = ON		V = OFF		W = OFF
		case 3:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	4847      	ldr	r0, [pc, #284]	@ (8001228 <commutator+0x208>)
 800110c:	f003 fb12 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001116:	4844      	ldr	r0, [pc, #272]	@ (8001228 <commutator+0x208>)
 8001118:	f003 fb0c 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001122:	4841      	ldr	r0, [pc, #260]	@ (8001228 <commutator+0x208>)
 8001124:	f003 fb06 	bl	8004734 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 8001128:	4b40      	ldr	r3, [pc, #256]	@ (800122c <commutator+0x20c>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = duty;
 800112e:	4a3f      	ldr	r2, [pc, #252]	@ (800122c <commutator+0x20c>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM1->CCR3 = 0;
 8001134:	4b3d      	ldr	r3, [pc, #244]	@ (800122c <commutator+0x20c>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 800113a:	e053      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = 0		V =	I		W = -I
		//High Side			U = OFF		V = PWM		W = OFF
		//Low Side			U = OFF		V = OFF		W = ON
		case 4:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	4839      	ldr	r0, [pc, #228]	@ (8001228 <commutator+0x208>)
 8001144:	f003 faf6 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800114e:	4836      	ldr	r0, [pc, #216]	@ (8001228 <commutator+0x208>)
 8001150:	f003 faf0 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800115a:	4833      	ldr	r0, [pc, #204]	@ (8001228 <commutator+0x208>)
 800115c:	f003 faea 	bl	8004734 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = 0;
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <commutator+0x20c>)
 8001162:	2200      	movs	r2, #0
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = duty;
 8001166:	4a31      	ldr	r2, [pc, #196]	@ (800122c <commutator+0x20c>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM1->CCR3 = 0;
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <commutator+0x20c>)
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 8001172:	e037      	b.n	80011e4 <commutator+0x1c4>
		//Phase Current:	U = I		V =	0		W = -I
		//High Side			U = PWM		V = OFF		W = OFF
		//Low Side			U = OFF		V = OFF		W = ON
		case 5:
			//Low Side
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117a:	482b      	ldr	r0, [pc, #172]	@ (8001228 <commutator+0x208>)
 800117c:	f003 fada 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001186:	4828      	ldr	r0, [pc, #160]	@ (8001228 <commutator+0x208>)
 8001188:	f003 fad4 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001192:	4825      	ldr	r0, [pc, #148]	@ (8001228 <commutator+0x208>)
 8001194:	f003 face 	bl	8004734 <HAL_GPIO_WritePin>
			//High Side
			TIM1->CCR1 = duty;
 8001198:	4a24      	ldr	r2, [pc, #144]	@ (800122c <commutator+0x20c>)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM1->CCR2 = 0;
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <commutator+0x20c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <commutator+0x20c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	@ 0x3c

			break;
 80011aa:	e01b      	b.n	80011e4 <commutator+0x1c4>

		//i have no idea how you ended up here pls stop motor
		//High Side			U = OFF		V = OFF		W = OFF
		//Low Side			U = HIGH	V = HIGH	W = HIGH
		default:
			HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	481d      	ldr	r0, [pc, #116]	@ (8001228 <commutator+0x208>)
 80011b4:	f003 fabe 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011be:	481a      	ldr	r0, [pc, #104]	@ (8001228 <commutator+0x208>)
 80011c0:	f003 fab8 	bl	8004734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ca:	4817      	ldr	r0, [pc, #92]	@ (8001228 <commutator+0x208>)
 80011cc:	f003 fab2 	bl	8004734 <HAL_GPIO_WritePin>

			TIM1->CCR1 = 0;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <commutator+0x20c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <commutator+0x20c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR3 = 0;
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <commutator+0x20c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80011e2:	bf00      	nop
		}
	}
	if(dir !=1){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d01a      	beq.n	8001220 <commutator+0x200>
		//not implimented yet just break
		HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <commutator+0x208>)
 80011f2:	f003 fa9f 	bl	8004734 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011fc:	480a      	ldr	r0, [pc, #40]	@ (8001228 <commutator+0x208>)
 80011fe:	f003 fa99 	bl	8004734 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001208:	4807      	ldr	r0, [pc, #28]	@ (8001228 <commutator+0x208>)
 800120a:	f003 fa93 	bl	8004734 <HAL_GPIO_WritePin>

		TIM1->CCR1 = 0;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <commutator+0x20c>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <commutator+0x20c>)
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <commutator+0x20c>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020400 	.word	0x40020400
 800122c:	40010000 	.word	0x40010000

08001230 <initBLDC>:
/**
  * @brief Initializes the BLDC motor by reading hall sensor values and setting the commutator step
  * @param None
  * @retval void
  */
void initBLDC(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
	uint16_t hall[3];
	hall[0]= (GPIOC->IDR & GPIO_IDR_ID6)? 0x0001 : 0x0000; // Sensor A
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <initBLDC+0x60>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	80bb      	strh	r3, [r7, #4]
	hall[1]= (GPIOC->IDR & GPIO_IDR_ID7)? 0x0001 : 0x0000; // Sensor B
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <initBLDC+0x60>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	80fb      	strh	r3, [r7, #6]
	hall[2]= (GPIOC->IDR & GPIO_IDR_ID8)? 0x0001 : 0x0000; // Sensor C
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <initBLDC+0x60>)
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	813b      	strh	r3, [r7, #8]

	int step= hallState(hall);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe5f 	bl	8000f38 <hallState>
 800127a:	4603      	mov	r3, r0
 800127c:	60fb      	str	r3, [r7, #12]
	commutator(step, 15,1);
 800127e:	2201      	movs	r2, #1
 8001280:	210f      	movs	r1, #15
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fecc 	bl	8001020 <commutator>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020800 	.word	0x40020800

08001294 <map>:
  * @param in_max	= The upper bound of the value’s current range.
  * @param out_min	= The lower bound of the value’s target range.
  * @param out_max	= The upper bound of the value’s target range.
  * @retval			= The mapped value
  */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001294:	b490      	push	{r4, r7}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	4603      	mov	r3, r0
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
 80012ae:	4613      	mov	r3, r2
 80012b0:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	8a39      	ldrh	r1, [r7, #16]
 80012ba:	883a      	ldrh	r2, [r7, #0]
 80012bc:	1a8a      	subs	r2, r1, r2
 80012be:	fb03 f202 	mul.w	r2, r3, r2
 80012c2:	8879      	ldrh	r1, [r7, #2]
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	1acb      	subs	r3, r1, r3
 80012c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b29b      	uxth	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <adc_volt>:
/**
  * @brief Converts a raw ADC value to the corresponding input voltage
  * @param val    = Raw 12-bit ADC value (0-4095)
  * @retval float = Calculated input voltage
  */
float adc_volt(uint16_t val){
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	//((val/(39000+2200))*2200) /12bitADC
    float Vcc = 3.3;
 80012ea:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <adc_volt+0x90>)
 80012ec:	61fb      	str	r3, [r7, #28]
    float R1 = 37000.0;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <adc_volt+0x94>)
 80012f0:	61bb      	str	r3, [r7, #24]
    float R2 = 2200.0;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <adc_volt+0x98>)
 80012f4:	617b      	str	r3, [r7, #20]
    // Convert ADC value to voltage across R2
    float Vout = (val / 4095.0) * Vcc;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f913 	bl	8000524 <__aeabi_i2d>
 80012fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8001368 <adc_volt+0x88>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff faa2 	bl	800084c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4614      	mov	r4, r2
 800130e:	461d      	mov	r5, r3
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f7ff f919 	bl	8000548 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff f96b 	bl	80005f8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc3d 	bl	8000ba8 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	613b      	str	r3, [r7, #16]

    // Calculate the total voltage across R1 and R2
    float Vin = Vout * (R1 + R2) / R2;
 8001332:	ed97 7a06 	vldr	s14, [r7, #24]
 8001336:	edd7 7a05 	vldr	s15, [r7, #20]
 800133a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001342:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001346:	ed97 7a05 	vldr	s14, [r7, #20]
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	edc7 7a03 	vstr	s15, [r7, #12]

    return Vin;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	ee07 3a90 	vmov	s15, r3
}
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40affe00 	.word	0x40affe00
 8001370:	40533333 	.word	0x40533333
 8001374:	47108800 	.word	0x47108800
 8001378:	45098000 	.word	0x45098000

0800137c <rpm_tokmh>:
/**
  * @brief Converts motor RPM to speed in kilometers per hour (km/h) based on wheel circumference
  * @param rpm    = Motor RPM (revolutions per minute)
  * @retval float = Calculated speed in kilometers per hour (km/h)
  */
float rpm_tokmh(float rpm){
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	ed87 0a01 	vstr	s0, [r7, #4]
	//36inch wheel
	//91,44 cm wheel
	//U = 2·π·r
	//U = 287,267cm
	//U = 2,87267m
	float circumference = 2.87267;
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <rpm_tokmh+0x4c>)
 8001388:	617b      	str	r3, [r7, #20]
    // distance traveled per minute in meters
    float distance_per_minute = rpm * circumference;
 800138a:	ed97 7a01 	vldr	s14, [r7, #4]
 800138e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	edc7 7a04 	vstr	s15, [r7, #16]
    // Convert distance to kilometers per hour
    float speed_kmh = distance_per_minute * 60 / 1000;
 800139a:	edd7 7a04 	vldr	s15, [r7, #16]
 800139e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80013cc <rpm_tokmh+0x50>
 80013a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80013d0 <rpm_tokmh+0x54>
 80013aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ae:	edc7 7a03 	vstr	s15, [r7, #12]
    return speed_kmh;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	ee07 3a90 	vmov	s15, r3
}
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	4037d9d3 	.word	0x4037d9d3
 80013cc:	42700000 	.word	0x42700000
 80013d0:	447a0000 	.word	0x447a0000

080013d4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80013de:	4a38      	ldr	r2, [pc, #224]	@ (80014c0 <HD44780_Init+0xec>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80013e4:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <HD44780_Init+0xf0>)
 80013e6:	2208      	movs	r2, #8
 80013e8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <HD44780_Init+0xf4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <HD44780_Init+0xec>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d907      	bls.n	8001408 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80013f8:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <HD44780_Init+0xf4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b31      	ldr	r3, [pc, #196]	@ (80014c8 <HD44780_Init+0xf4>)
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e006      	b.n	8001416 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001408:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <HD44780_Init+0xf4>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HD44780_Init+0xf4>)
 8001414:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001416:	f000 f985 	bl	8001724 <DelayInit>
  HAL_Delay(50);
 800141a:	2032      	movs	r0, #50	@ 0x32
 800141c:	f002 f8ee 	bl	80035fc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <HD44780_Init+0xf0>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f943 	bl	80016b0 <ExpanderWrite>
  HAL_Delay(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142e:	f002 f8e5 	bl	80035fc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001432:	2030      	movs	r0, #48	@ 0x30
 8001434:	f000 f92b 	bl	800168e <Write4Bits>
  DelayUS(4500);
 8001438:	f241 1094 	movw	r0, #4500	@ 0x1194
 800143c:	f000 f99c 	bl	8001778 <DelayUS>

  Write4Bits(0x03 << 4);
 8001440:	2030      	movs	r0, #48	@ 0x30
 8001442:	f000 f924 	bl	800168e <Write4Bits>
  DelayUS(4500);
 8001446:	f241 1094 	movw	r0, #4500	@ 0x1194
 800144a:	f000 f995 	bl	8001778 <DelayUS>

  Write4Bits(0x03 << 4);
 800144e:	2030      	movs	r0, #48	@ 0x30
 8001450:	f000 f91d 	bl	800168e <Write4Bits>
  DelayUS(4500);
 8001454:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001458:	f000 f98e 	bl	8001778 <DelayUS>

  Write4Bits(0x02 << 4);
 800145c:	2020      	movs	r0, #32
 800145e:	f000 f916 	bl	800168e <Write4Bits>
  DelayUS(100);
 8001462:	2064      	movs	r0, #100	@ 0x64
 8001464:	f000 f988 	bl	8001778 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001468:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <HD44780_Init+0xf4>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8ce 	bl	8001614 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <HD44780_Init+0xf8>)
 800147a:	2204      	movs	r2, #4
 800147c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800147e:	f000 f875 	bl	800156c <HD44780_Display>
  HD44780_Clear();
 8001482:	f000 f82b 	bl	80014dc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HD44780_Init+0xfc>)
 8001488:	2202      	movs	r2, #2
 800148a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HD44780_Init+0xfc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f8bc 	bl	8001614 <SendCommand>
  DelayUS(4500);
 800149c:	f241 1094 	movw	r0, #4500	@ 0x1194
 80014a0:	f000 f96a 	bl	8001778 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80014a4:	490b      	ldr	r1, [pc, #44]	@ (80014d4 <HD44780_Init+0x100>)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f876 	bl	8001598 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80014ac:	490a      	ldr	r1, [pc, #40]	@ (80014d8 <HD44780_Init+0x104>)
 80014ae:	2001      	movs	r0, #1
 80014b0:	f000 f872 	bl	8001598 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80014b4:	f000 f81d 	bl	80014f2 <HD44780_Home>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002fb 	.word	0x200002fb
 80014c4:	200002fc 	.word	0x200002fc
 80014c8:	200002f8 	.word	0x200002f8
 80014cc:	200002f9 	.word	0x200002f9
 80014d0:	200002fa 	.word	0x200002fa
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000008 	.word	0x20000008

080014dc <HD44780_Clear>:

void HD44780_Clear()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f000 f897 	bl	8001614 <SendCommand>
  DelayUS(2000);
 80014e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014ea:	f000 f945 	bl	8001778 <DelayUS>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HD44780_Home>:

void HD44780_Home()
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80014f6:	2002      	movs	r0, #2
 80014f8:	f000 f88c 	bl	8001614 <SendCommand>
  DelayUS(2000);
 80014fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001500:	f000 f93a 	bl	8001778 <DelayUS>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <HD44780_SetCursor>:
  * @param col    = Column position (0-based)
  * @param row    = Row position (0-based)
  * @retval void
  */
void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HD44780_SetCursor+0x5c>)
 800151a:	f107 0408 	add.w	r4, r7, #8
 800151e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001524:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <HD44780_SetCursor+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	79ba      	ldrb	r2, [r7, #6]
 800152a:	429a      	cmp	r2, r3
 800152c:	d303      	bcc.n	8001536 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HD44780_SetCursor+0x60>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	3318      	adds	r3, #24
 800153c:	443b      	add	r3, r7
 800153e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4413      	add	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	b25b      	sxtb	r3, r3
 800154c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001550:	b25b      	sxtb	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f85d 	bl	8001614 <SendCommand>
}
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	0800fb78 	.word	0x0800fb78
 8001568:	200002fb 	.word	0x200002fb

0800156c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <HD44780_Display+0x28>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HD44780_Display+0x28>)
 800157c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800157e:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HD44780_Display+0x28>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f843 	bl	8001614 <SendCommand>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002f9 	.word	0x200002f9

08001598 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f82a 	bl	8001614 <SendCommand>
  for (int i=0; i<8; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e009      	b.n	80015da <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f82e 	bl	8001630 <SendChar>
  for (int i=0; i<8; i++)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b07      	cmp	r3, #7
 80015de:	ddf2      	ble.n	80015c6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HD44780_PrintStr>:
  * @brief Prints a string to the HD44780 LCD display
  * @param c    = Pointer to a null-terminated string to display
  * @retval void
  */
void HD44780_PrintStr(const char c[])
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80015f2:	e006      	b.n	8001602 <HD44780_PrintStr+0x18>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f817 	bl	8001630 <SendChar>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f4      	bne.n	80015f4 <HD44780_PrintStr+0xa>
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f812 	bl	800164c <Send>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2101      	movs	r1, #1
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f804 	bl	800164c <Send>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f023 030f 	bic.w	r3, r3, #15
 8001662:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	4313      	orrs	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f80b 	bl	800168e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001678:	7bba      	ldrb	r2, [r7, #14]
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	4313      	orrs	r3, r2
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f804 	bl	800168e <Write4Bits>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f808 	bl	80016b0 <ExpanderWrite>
  PulseEnable(value);
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f820 	bl	80016e8 <PulseEnable>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <ExpanderWrite+0x30>)
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80016c6:	f107 020f 	add.w	r2, r7, #15
 80016ca:	230a      	movs	r3, #10
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	214e      	movs	r1, #78	@ 0x4e
 80016d2:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <ExpanderWrite+0x34>)
 80016d4:	f003 f9be 	bl	8004a54 <HAL_I2C_Master_Transmit>
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200002fc 	.word	0x200002fc
 80016e4:	200003d8 	.word	0x200003d8

080016e8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffd8 	bl	80016b0 <ExpanderWrite>
  DelayUS(20);
 8001700:	2014      	movs	r0, #20
 8001702:	f000 f839 	bl	8001778 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ffce 	bl	80016b0 <ExpanderWrite>
  DelayUS(20);
 8001714:	2014      	movs	r0, #20
 8001716:	f000 f82f 	bl	8001778 <DelayUS>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <DelayInit>:

static void DelayInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <DelayInit+0x4c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <DelayInit+0x4c>)
 800172e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001732:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <DelayInit+0x4c>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <DelayInit+0x4c>)
 800173a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <DelayInit+0x50>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <DelayInit+0x50>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <DelayInit+0x50>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a08      	ldr	r2, [pc, #32]	@ (8001774 <DelayInit+0x50>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <DelayInit+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800175e:	bf00      	nop
  __ASM volatile ("NOP");
 8001760:	bf00      	nop
  __ASM volatile ("NOP");
 8001762:	bf00      	nop
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000edf0 	.word	0xe000edf0
 8001774:	e0001000 	.word	0xe0001000

08001778 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <DelayUS+0x44>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0e      	ldr	r2, [pc, #56]	@ (80017c0 <DelayUS+0x48>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9a      	lsrs	r2, r3, #18
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <DelayUS+0x4c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <DelayUS+0x4c>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f6      	bhi.n	800179a <DelayUS+0x22>
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000018 	.word	0x20000018
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	e0001000 	.word	0xe0001000

080017c8 <Init_lcd_ar>:
/**
  * @brief Initializes the lcd_ar struct with default cursor positions and display values
  * @param lcd    = Pointer to an lcd_ar struct to initialize
  * @retval void
  */
void Init_lcd_ar(lcd_ar* lcd){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	//Load cursor positions
	lcd ->cur_volt[0] =15;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	220f      	movs	r2, #15
 80017d4:	74da      	strb	r2, [r3, #19]
	lcd ->cur_volt[1] =0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	751a      	strb	r2, [r3, #20]

	lcd ->cur_temp[0]=0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	755a      	strb	r2, [r3, #21]
	lcd ->cur_temp[1]=0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	759a      	strb	r2, [r3, #22]

	lcd ->cur_amp[0] =15;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	220f      	movs	r2, #15
 80017ec:	75da      	strb	r2, [r3, #23]
	lcd ->cur_amp[1] =1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	761a      	strb	r2, [r3, #24]

	lcd ->cur_speed[0]=9;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2209      	movs	r2, #9
 80017f8:	765a      	strb	r2, [r3, #25]
	lcd ->cur_speed[1]=3;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	769a      	strb	r2, [r3, #26]

	lcd ->cur_erpm[0]=0;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	76da      	strb	r2, [r3, #27]
	lcd ->cur_erpm[1]=3;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2203      	movs	r2, #3
 800180a:	771a      	strb	r2, [r3, #28]

	lcd ->cur_pwm[0]=1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	775a      	strb	r2, [r3, #29]
	lcd ->cur_pwm[1]=2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	779a      	strb	r2, [r3, #30]

	//Set up Display for array mode
	//Init Volt
	HD44780_SetCursor(15,0);
 8001818:	2100      	movs	r1, #0
 800181a:	200f      	movs	r0, #15
 800181c:	f7ff fe74 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr("42.0V");
 8001820:	4811      	ldr	r0, [pc, #68]	@ (8001868 <Init_lcd_ar+0xa0>)
 8001822:	f7ff fee2 	bl	80015ea <HD44780_PrintStr>
	//Init Temp
	HD44780_SetCursor(0,0);
 8001826:	2100      	movs	r1, #0
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fe6d 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr("069C");
 800182e:	480f      	ldr	r0, [pc, #60]	@ (800186c <Init_lcd_ar+0xa4>)
 8001830:	f7ff fedb 	bl	80015ea <HD44780_PrintStr>
	//Init Current
	HD44780_SetCursor(15,1);
 8001834:	2101      	movs	r1, #1
 8001836:	200f      	movs	r0, #15
 8001838:	f7ff fe66 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr("02.5A");
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <Init_lcd_ar+0xa8>)
 800183e:	f7ff fed4 	bl	80015ea <HD44780_PrintStr>
	//Init Speed
	HD44780_SetCursor(9,3);
 8001842:	2103      	movs	r1, #3
 8001844:	2009      	movs	r0, #9
 8001846:	f7ff fe5f 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr("10KM/H");
 800184a:	480a      	ldr	r0, [pc, #40]	@ (8001874 <Init_lcd_ar+0xac>)
 800184c:	f7ff fecd 	bl	80015ea <HD44780_PrintStr>
	//Init ERPM
	HD44780_SetCursor(0,3);
 8001850:	2103      	movs	r1, #3
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fe58 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr("4000");
 8001858:	4807      	ldr	r0, [pc, #28]	@ (8001878 <Init_lcd_ar+0xb0>)
 800185a:	f7ff fec6 	bl	80015ea <HD44780_PrintStr>
	//Iinit PWM
	//HD44780_SetCursor(1,2);
	//HD44780_PrintStr("00%");
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	0800fb88 	.word	0x0800fb88
 800186c:	0800fb90 	.word	0x0800fb90
 8001870:	0800fb98 	.word	0x0800fb98
 8001874:	0800fba0 	.word	0x0800fba0
 8001878:	0800fba8 	.word	0x0800fba8

0800187c <update_lcd_val>:
  * @brief Updates the lcd_ar struct and LCD display with new sensor values
  * @param ar     = Pointer to an lcd_ar struct containing cursor positions
  * @param val    = Array of float values to update [Voltage, Current, Temperature, Speed, (optional: PWM)]
  * @retval void
  */
void update_lcd_val(lcd_ar* ar, float val[]){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af02      	add	r7, sp, #8
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	//Set Voltage
	snprintf(ar->volt, 5, "%04.1f", val[0]);
 8001886:	687c      	ldr	r4, [r7, #4]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe5b 	bl	8000548 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	e9cd 2300 	strd	r2, r3, [sp]
 800189a:	4a47      	ldr	r2, [pc, #284]	@ (80019b8 <update_lcd_val+0x13c>)
 800189c:	2105      	movs	r1, #5
 800189e:	4620      	mov	r0, r4
 80018a0:	f00c f81e 	bl	800d8e0 <sniprintf>
	HD44780_SetCursor(ar->cur_volt[0],ar->cur_volt[1]);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7cda      	ldrb	r2, [r3, #19]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7d1b      	ldrb	r3, [r3, #20]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff fe2a 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr(ar->volt);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fe97 	bl	80015ea <HD44780_PrintStr>
	//Set Current
	snprintf(ar->amp, 5, "%04.1f", val[1]);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	1ddc      	adds	r4, r3, #7
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	3304      	adds	r3, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe3e 	bl	8000548 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	e9cd 2300 	strd	r2, r3, [sp]
 80018d4:	4a38      	ldr	r2, [pc, #224]	@ (80019b8 <update_lcd_val+0x13c>)
 80018d6:	2105      	movs	r1, #5
 80018d8:	4620      	mov	r0, r4
 80018da:	f00c f801 	bl	800d8e0 <sniprintf>
	HD44780_SetCursor(ar->cur_amp[0],ar->cur_amp[1]);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7dda      	ldrb	r2, [r3, #23]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e1b      	ldrb	r3, [r3, #24]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4610      	mov	r0, r2
 80018ea:	f7ff fe0d 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr(ar->amp);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3307      	adds	r3, #7
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe79 	bl	80015ea <HD44780_PrintStr>
	//Set Temp
	snprintf(ar->temp, 4, "%03.0f", val[2]);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1d1c      	adds	r4, r3, #4
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	3308      	adds	r3, #8
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe20 	bl	8000548 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9cd 2300 	strd	r2, r3, [sp]
 8001910:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <update_lcd_val+0x140>)
 8001912:	2104      	movs	r1, #4
 8001914:	4620      	mov	r0, r4
 8001916:	f00b ffe3 	bl	800d8e0 <sniprintf>
	HD44780_SetCursor(ar->cur_temp[0],ar->cur_temp[1]);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7d5a      	ldrb	r2, [r3, #21]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7d9b      	ldrb	r3, [r3, #22]
 8001922:	4619      	mov	r1, r3
 8001924:	4610      	mov	r0, r2
 8001926:	f7ff fdef 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr(ar->temp);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe5b 	bl	80015ea <HD44780_PrintStr>
	//Set Speed
	snprintf(ar->speed, 3, "%02.0f",val[3] );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f103 040b 	add.w	r4, r3, #11
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	330c      	adds	r3, #12
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe01 	bl	8000548 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	e9cd 2300 	strd	r2, r3, [sp]
 800194e:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <update_lcd_val+0x144>)
 8001950:	2103      	movs	r1, #3
 8001952:	4620      	mov	r0, r4
 8001954:	f00b ffc4 	bl	800d8e0 <sniprintf>
	HD44780_SetCursor(ar->cur_speed[0],ar->cur_speed[1]);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7e5a      	ldrb	r2, [r3, #25]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e9b      	ldrb	r3, [r3, #26]
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f7ff fdd0 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr(ar->speed);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	330b      	adds	r3, #11
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe3c 	bl	80015ea <HD44780_PrintStr>
	//Set ERPM
	snprintf(ar->erpm, 5, "%04.0f",rpm);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 040d 	add.w	r4, r3, #13
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <update_lcd_val+0x148>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fde3 	bl	8000548 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9cd 2300 	strd	r2, r3, [sp]
 800198a:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <update_lcd_val+0x14c>)
 800198c:	2105      	movs	r1, #5
 800198e:	4620      	mov	r0, r4
 8001990:	f00b ffa6 	bl	800d8e0 <sniprintf>
	HD44780_SetCursor(ar->cur_erpm[0],ar->cur_erpm[1]);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7eda      	ldrb	r2, [r3, #27]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7f1b      	ldrb	r3, [r3, #28]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff fdb2 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr(ar->erpm);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	330d      	adds	r3, #13
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe1e 	bl	80015ea <HD44780_PrintStr>
	//Set PWm
	//snprintf(ar->pwm,3,"%02.0f",val[4] );
	//HD44780_SetCursor(ar->cur_pwm[0],ar->cur_pwm[1]);
	//HD44780_PrintStr(ar->pwm);

}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	0800fbb0 	.word	0x0800fbb0
 80019bc:	0800fbb8 	.word	0x0800fbb8
 80019c0:	0800fbc0 	.word	0x0800fbc0
 80019c4:	20000554 	.word	0x20000554
 80019c8:	0800fbc8 	.word	0x0800fbc8

080019cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	//init button array
	but[0]=1;
 80019d0:	4b61      	ldr	r3, [pc, #388]	@ (8001b58 <main+0x18c>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	801a      	strh	r2, [r3, #0]
	but[1]=1;
 80019d6:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <main+0x18c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	805a      	strh	r2, [r3, #2]
	but[2]=1;
 80019dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b58 <main+0x18c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	809a      	strh	r2, [r3, #4]
	but[3]=1;
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <main+0x18c>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e8:	f001 fd96 	bl	8003518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ec:	f000 f8ce 	bl	8001b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f0:	f000 fc28 	bl	8002244 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019f4:	f000 f936 	bl	8001c64 <MX_ADC1_Init>
  MX_ADC2_Init();
 80019f8:	f000 f986 	bl	8001d08 <MX_ADC2_Init>
  MX_ADC3_Init();
 80019fc:	f000 f9d6 	bl	8001dac <MX_ADC3_Init>
  MX_I2C1_Init();
 8001a00:	f000 fa42 	bl	8001e88 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a04:	f000 fb72 	bl	80020ec <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001a08:	f000 fbf2 	bl	80021f0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001a0c:	f00a fd5a 	bl	800c4c4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001a10:	f000 fa68 	bl	8001ee4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a14:	f000 fb1e 	bl	8002054 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Start 100ms AUX Timer
   */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001a18:	4850      	ldr	r0, [pc, #320]	@ (8001b5c <main+0x190>)
 8001a1a:	f005 faaf 	bl	8006f7c <HAL_TIM_Base_Start_IT>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <main+0x5c>
  {
    /* Starting Error */
    Error_Handler();
 8001a24:	f001 f956 	bl	8002cd4 <Error_Handler>
  }

  //Close Relay
  HAL_GPIO_WritePin(GPIOB,PB5_DO_DC_ON_Pin,GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	484c      	ldr	r0, [pc, #304]	@ (8001b60 <main+0x194>)
 8001a2e:	f002 fe81 	bl	8004734 <HAL_GPIO_WritePin>
  //Init Blinker
  TIM3->CCR1 = 250;
 8001a32:	4b4c      	ldr	r3, [pc, #304]	@ (8001b64 <main+0x198>)
 8001a34:	22fa      	movs	r2, #250	@ 0xfa
 8001a36:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	484b      	ldr	r0, [pc, #300]	@ (8001b68 <main+0x19c>)
 8001a3c:	f005 fb68 	bl	8007110 <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 250;
 8001a40:	4b48      	ldr	r3, [pc, #288]	@ (8001b64 <main+0x198>)
 8001a42:	22fa      	movs	r2, #250	@ 0xfa
 8001a44:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a46:	2104      	movs	r1, #4
 8001a48:	4847      	ldr	r0, [pc, #284]	@ (8001b68 <main+0x19c>)
 8001a4a:	f005 fb61 	bl	8007110 <HAL_TIM_PWM_Start>

   HD44780_Init(4);
 8001a4e:	2004      	movs	r0, #4
 8001a50:	f7ff fcc0 	bl	80013d4 <HD44780_Init>
   HD44780_Clear();
 8001a54:	f7ff fd42 	bl	80014dc <HD44780_Clear>

   HD44780_SetCursor(6,0);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2006      	movs	r0, #6
 8001a5c:	f7ff fd54 	bl	8001508 <HD44780_SetCursor>
   HD44780_PrintStr("Init...");
 8001a60:	4842      	ldr	r0, [pc, #264]	@ (8001b6c <main+0x1a0>)
 8001a62:	f7ff fdc2 	bl	80015ea <HD44780_PrintStr>
   HAL_Delay(250);
 8001a66:	20fa      	movs	r0, #250	@ 0xfa
 8001a68:	f001 fdc8 	bl	80035fc <HAL_Delay>

   HD44780_SetCursor(5,1);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2005      	movs	r0, #5
 8001a70:	f7ff fd4a 	bl	8001508 <HD44780_SetCursor>
   HD44780_PrintStr("BLDC DRIVE");
 8001a74:	483e      	ldr	r0, [pc, #248]	@ (8001b70 <main+0x1a4>)
 8001a76:	f7ff fdb8 	bl	80015ea <HD44780_PrintStr>
   HAL_Delay(250);
 8001a7a:	20fa      	movs	r0, #250	@ 0xfa
 8001a7c:	f001 fdbe 	bl	80035fc <HAL_Delay>

   HD44780_SetCursor(8,2);
 8001a80:	2102      	movs	r1, #2
 8001a82:	2008      	movs	r0, #8
 8001a84:	f7ff fd40 	bl	8001508 <HD44780_SetCursor>
   HD44780_PrintStr("By:");
 8001a88:	483a      	ldr	r0, [pc, #232]	@ (8001b74 <main+0x1a8>)
 8001a8a:	f7ff fdae 	bl	80015ea <HD44780_PrintStr>
   HAL_Delay(250);
 8001a8e:	20fa      	movs	r0, #250	@ 0xfa
 8001a90:	f001 fdb4 	bl	80035fc <HAL_Delay>

   HD44780_SetCursor(5,3);
 8001a94:	2103      	movs	r1, #3
 8001a96:	2005      	movs	r0, #5
 8001a98:	f7ff fd36 	bl	8001508 <HD44780_SetCursor>
   HD44780_PrintStr("LEON REEH");
 8001a9c:	4836      	ldr	r0, [pc, #216]	@ (8001b78 <main+0x1ac>)
 8001a9e:	f7ff fda4 	bl	80015ea <HD44780_PrintStr>
   HAL_Delay(800);
 8001aa2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001aa6:	f001 fda9 	bl	80035fc <HAL_Delay>
   HD44780_Clear();
 8001aaa:	f7ff fd17 	bl	80014dc <HD44780_Clear>

   Init_lcd_ar(&lcd_val);
 8001aae:	4833      	ldr	r0, [pc, #204]	@ (8001b7c <main+0x1b0>)
 8001ab0:	f7ff fe8a 	bl	80017c8 <Init_lcd_ar>
   resetDO();
 8001ab4:	f000 ff90 	bl	80029d8 <resetDO>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Read inputs
	  readADCs();
 8001ab8:	f000 fd36 	bl	8002528 <readADCs>
	  readDI();
 8001abc:	f000 ff06 	bl	80028cc <readDI>
	  doADCs();
 8001ac0:	f000 fe02 	bl	80026c8 <doADCs>
	  /* STATE MACHINE */
	  switch(STATE){
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <main+0x1b4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b06      	cmp	r3, #6
 8001aca:	d82f      	bhi.n	8001b2c <main+0x160>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <main+0x108>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001af1 	.word	0x08001af1
 8001ad8:	08001afb 	.word	0x08001afb
 8001adc:	08001b05 	.word	0x08001b05
 8001ae0:	08001b0f 	.word	0x08001b0f
 8001ae4:	08001b19 	.word	0x08001b19
 8001ae8:	08001b2d 	.word	0x08001b2d
 8001aec:	08001b23 	.word	0x08001b23
	  	  case READY:
	  		  ready();
 8001af0:	f000 ff88 	bl	8002a04 <ready>
	  		  setDO();
 8001af4:	f000 ff34 	bl	8002960 <setDO>
	  		  break;
 8001af8:	e01d      	b.n	8001b36 <main+0x16a>

	  	  case DRIVE:
	  		  drive();
 8001afa:	f000 ffd1 	bl	8002aa0 <drive>
	  		  setDO();
 8001afe:	f000 ff2f 	bl	8002960 <setDO>
	  		  break;
 8001b02:	e018      	b.n	8001b36 <main+0x16a>

	  	  case BREAK:
	  		  breaking();
 8001b04:	f001 f804 	bl	8002b10 <breaking>
	  		  setDO();
 8001b08:	f000 ff2a 	bl	8002960 <setDO>
	  		  break;
 8001b0c:	e013      	b.n	8001b36 <main+0x16a>

	  	  case SWFAULT:
	  		  resetDO();
 8001b0e:	f000 ff63 	bl	80029d8 <resetDO>
	  		  swfault();
 8001b12:	f001 f833 	bl	8002b7c <swfault>
	  		  break;
 8001b16:	e00e      	b.n	8001b36 <main+0x16a>

	  	  case HWFAULT:
	  		  resetDO();
 8001b18:	f000 ff5e 	bl	80029d8 <resetDO>
	  		  hwfault();
 8001b1c:	f001 f840 	bl	8002ba0 <hwfault>
	  		  break;
 8001b20:	e009      	b.n	8001b36 <main+0x16a>

	  	  case DEBUGST:
	  		  debug();
 8001b22:	f001 f853 	bl	8002bcc <debug>
	  		  setDO();
 8001b26:	f000 ff1b 	bl	8002960 <setDO>
	  		  break;
 8001b2a:	e004      	b.n	8001b36 <main+0x16a>

	  	  default:
	  		  resetDO();
 8001b2c:	f000 ff54 	bl	80029d8 <resetDO>
	  		  hwfault();
 8001b30:	f001 f836 	bl	8002ba0 <hwfault>
	  		  break;
 8001b34:	bf00      	nop
	  	  }

	  //Update LCD every 500ms
	  if(timcc>=5){
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <main+0x1b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	dd08      	ble.n	8001b50 <main+0x184>
		  update_lcd_val(&lcd_val,ADC_VAL);
 8001b3e:	4912      	ldr	r1, [pc, #72]	@ (8001b88 <main+0x1bc>)
 8001b40:	480e      	ldr	r0, [pc, #56]	@ (8001b7c <main+0x1b0>)
 8001b42:	f7ff fe9b 	bl	800187c <update_lcd_val>
		  writeState();
 8001b46:	f000 fe79 	bl	800283c <writeState>
		  timcc =0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <main+0x1b8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(25);
 8001b50:	2019      	movs	r0, #25
 8001b52:	f001 fd53 	bl	80035fc <HAL_Delay>
	  readADCs();
 8001b56:	e7af      	b.n	8001ab8 <main+0xec>
 8001b58:	2000056c 	.word	0x2000056c
 8001b5c:	20000474 	.word	0x20000474
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40000400 	.word	0x40000400
 8001b68:	200004bc 	.word	0x200004bc
 8001b6c:	0800fbd0 	.word	0x0800fbd0
 8001b70:	0800fbd8 	.word	0x0800fbd8
 8001b74:	0800fbe4 	.word	0x0800fbe4
 8001b78:	0800fbe8 	.word	0x0800fbe8
 8001b7c:	20000578 	.word	0x20000578
 8001b80:	20000010 	.word	0x20000010
 8001b84:	20000598 	.word	0x20000598
 8001b88:	2000055c 	.word	0x2000055c

08001b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b094      	sub	sp, #80	@ 0x50
 8001b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	2230      	movs	r2, #48	@ 0x30
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f00b ff17 	bl	800d9ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <SystemClock_Config+0xd0>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	4a28      	ldr	r2, [pc, #160]	@ (8001c5c <SystemClock_Config+0xd0>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc0:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <SystemClock_Config+0xd0>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <SystemClock_Config+0xd4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <SystemClock_Config+0xd4>)
 8001bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <SystemClock_Config+0xd4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c04:	2304      	movs	r3, #4
 8001c06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c08:	2348      	movs	r3, #72	@ 0x48
 8001c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c10:	2303      	movs	r3, #3
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fcc7 	bl	80065ac <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c24:	f001 f856 	bl	8002cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 ff2a 	bl	8006a9c <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c4e:	f001 f841 	bl	8002cd4 <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3750      	adds	r7, #80	@ 0x50
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001c78:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <MX_ADC1_Init+0x9c>)
 8001c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c82:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001c90:	2204      	movs	r2, #4
 8001c92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001ca4:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <MX_ADC1_Init+0xa0>)
 8001ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cc2:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001cc4:	f001 fcbe 	bl	8003644 <HAL_ADC_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f001 f801 	bl	8002cd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cde:	463b      	mov	r3, r7
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4806      	ldr	r0, [pc, #24]	@ (8001cfc <MX_ADC1_Init+0x98>)
 8001ce4:	f001 ffbe 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001cee:	f000 fff1 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000300 	.word	0x20000300
 8001d00:	40012000 	.word	0x40012000
 8001d04:	0f000001 	.word	0x0f000001

08001d08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <MX_ADC2_Init+0x9c>)
 8001d1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d48:	4a17      	ldr	r2, [pc, #92]	@ (8001da8 <MX_ADC2_Init+0xa0>)
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d66:	480e      	ldr	r0, [pc, #56]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d68:	f001 fc6c 	bl	8003644 <HAL_ADC_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001d72:	f000 ffaf 	bl	8002cd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d76:	230a      	movs	r3, #10
 8001d78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d82:	463b      	mov	r3, r7
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	@ (8001da0 <MX_ADC2_Init+0x98>)
 8001d88:	f001 ff6c 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001d92:	f000 ff9f 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000348 	.word	0x20000348
 8001da4:	40012100 	.word	0x40012100
 8001da8:	0f000001 	.word	0x0f000001

08001dac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001db2:	463b      	mov	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e80 <MX_ADC3_Init+0xd4>)
 8001dc2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001dca:	4b2c      	ldr	r3, [pc, #176]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001dd6:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dd8:	2204      	movs	r2, #4
 8001dda:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dea:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <MX_ADC3_Init+0xd8>)
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001df0:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001df8:	2203      	movs	r2, #3
 8001dfa:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e0a:	481c      	ldr	r0, [pc, #112]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001e0c:	f001 fc1a 	bl	8003644 <HAL_ADC_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001e16:	f000 ff5d 	bl	8002cd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001e22:	2302      	movs	r3, #2
 8001e24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4814      	ldr	r0, [pc, #80]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001e2c:	f001 ff1a 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001e36:	f000 ff4d 	bl	8002cd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e42:	463b      	mov	r3, r7
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001e48:	f001 ff0c 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8001e52:	f000 ff3f 	bl	8002cd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001e56:	230d      	movs	r3, #13
 8001e58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4619      	mov	r1, r3
 8001e62:	4806      	ldr	r0, [pc, #24]	@ (8001e7c <MX_ADC3_Init+0xd0>)
 8001e64:	f001 fefe 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8001e6e:	f000 ff31 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000390 	.word	0x20000390
 8001e80:	40012200 	.word	0x40012200
 8001e84:	0f000001 	.word	0x0f000001

08001e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001e8e:	4a13      	ldr	r2, [pc, #76]	@ (8001edc <MX_I2C1_Init+0x54>)
 8001e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001e94:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <MX_I2C1_Init+0x58>)
 8001e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001ea6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eb8:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ec4:	4804      	ldr	r0, [pc, #16]	@ (8001ed8 <MX_I2C1_Init+0x50>)
 8001ec6:	f002 fc81 	bl	80047cc <HAL_I2C_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ed0:	f000 ff00 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200003d8 	.word	0x200003d8
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	000186a0 	.word	0x000186a0

08001ee4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b096      	sub	sp, #88	@ 0x58
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2220      	movs	r2, #32
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00b fd56 	bl	800d9ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f24:	4a4a      	ldr	r2, [pc, #296]	@ (8002050 <MX_TIM1_Init+0x16c>)
 8001f26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001f28:	4b48      	ldr	r3, [pc, #288]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001f34:	4b45      	ldr	r3, [pc, #276]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f36:	2263      	movs	r2, #99	@ 0x63
 8001f38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3a:	4b44      	ldr	r3, [pc, #272]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f40:	4b42      	ldr	r3, [pc, #264]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f4c:	483f      	ldr	r0, [pc, #252]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f4e:	f004 ffc5 	bl	8006edc <HAL_TIM_Base_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001f58:	f000 febc 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f66:	4619      	mov	r1, r3
 8001f68:	4838      	ldr	r0, [pc, #224]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f6a:	f005 fbbb 	bl	80076e4 <HAL_TIM_ConfigClockSource>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f74:	f000 feae 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f78:	4834      	ldr	r0, [pc, #208]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f7a:	f005 f86f 	bl	800705c <HAL_TIM_PWM_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001f84:	f000 fea6 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f94:	4619      	mov	r1, r3
 8001f96:	482d      	ldr	r0, [pc, #180]	@ (800204c <MX_TIM1_Init+0x168>)
 8001f98:	f005 ffba 	bl	8007f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001fa2:	f000 fe97 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa6:	2360      	movs	r3, #96	@ 0x60
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4820      	ldr	r0, [pc, #128]	@ (800204c <MX_TIM1_Init+0x168>)
 8001fcc:	f005 fac8 	bl	8007560 <HAL_TIM_PWM_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001fd6:	f000 fe7d 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481a      	ldr	r0, [pc, #104]	@ (800204c <MX_TIM1_Init+0x168>)
 8001fe4:	f005 fabc 	bl	8007560 <HAL_TIM_PWM_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001fee:	f000 fe71 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4814      	ldr	r0, [pc, #80]	@ (800204c <MX_TIM1_Init+0x168>)
 8001ffc:	f005 fab0 	bl	8007560 <HAL_TIM_PWM_ConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002006:	f000 fe65 	bl	8002cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800201e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002022:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4619      	mov	r1, r3
 800202c:	4807      	ldr	r0, [pc, #28]	@ (800204c <MX_TIM1_Init+0x168>)
 800202e:	f005 ffeb 	bl	8008008 <HAL_TIMEx_ConfigBreakDeadTime>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002038:	f000 fe4c 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800203c:	4803      	ldr	r0, [pc, #12]	@ (800204c <MX_TIM1_Init+0x168>)
 800203e:	f000 ffe9 	bl	8003014 <HAL_TIM_MspPostInit>

}
 8002042:	bf00      	nop
 8002044:	3758      	adds	r7, #88	@ 0x58
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000042c 	.word	0x2000042c
 8002050:	40010000 	.word	0x40010000

08002054 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800207a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800207e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002086:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002088:	2263      	movs	r2, #99	@ 0x63
 800208a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002098:	4813      	ldr	r0, [pc, #76]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800209a:	f004 ff1f 	bl	8006edc <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020a4:	f000 fe16 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <MX_TIM2_Init+0x94>)
 80020b6:	f005 fb15 	bl	80076e4 <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020c0:	f000 fe08 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	@ (80020e8 <MX_TIM2_Init+0x94>)
 80020d2:	f005 ff1d 	bl	8007f10 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020dc:	f000 fdfa 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000474 	.word	0x20000474

080020ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	@ 0x38
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
 8002118:	615a      	str	r2, [r3, #20]
 800211a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800211c:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 800211e:	4a33      	ldr	r2, [pc, #204]	@ (80021ec <MX_TIM3_Init+0x100>)
 8002120:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8002122:	4b31      	ldr	r3, [pc, #196]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 8002124:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002128:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002130:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 8002132:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002136:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002144:	4828      	ldr	r0, [pc, #160]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 8002146:	f004 fec9 	bl	8006edc <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002150:	f000 fdc0 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002158:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800215a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800215e:	4619      	mov	r1, r3
 8002160:	4821      	ldr	r0, [pc, #132]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 8002162:	f005 fabf 	bl	80076e4 <HAL_TIM_ConfigClockSource>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800216c:	f000 fdb2 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002170:	481d      	ldr	r0, [pc, #116]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 8002172:	f004 ff73 	bl	800705c <HAL_TIM_PWM_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800217c:	f000 fdaa 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002188:	f107 0320 	add.w	r3, r7, #32
 800218c:	4619      	mov	r1, r3
 800218e:	4816      	ldr	r0, [pc, #88]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 8002190:	f005 febe 	bl	8007f10 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800219a:	f000 fd9b 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800219e:	2360      	movs	r3, #96	@ 0x60
 80021a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2200      	movs	r2, #0
 80021b2:	4619      	mov	r1, r3
 80021b4:	480c      	ldr	r0, [pc, #48]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 80021b6:	f005 f9d3 	bl	8007560 <HAL_TIM_PWM_ConfigChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80021c0:	f000 fd88 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2204      	movs	r2, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4807      	ldr	r0, [pc, #28]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 80021cc:	f005 f9c8 	bl	8007560 <HAL_TIM_PWM_ConfigChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80021d6:	f000 fd7d 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021da:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <MX_TIM3_Init+0xfc>)
 80021dc:	f000 ff1a 	bl	8003014 <HAL_TIM_MspPostInit>

}
 80021e0:	bf00      	nop
 80021e2:	3738      	adds	r7, #56	@ 0x38
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200004bc 	.word	0x200004bc
 80021ec:	40000400 	.word	0x40000400

080021f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <MX_USART2_UART_Init+0x50>)
 80021f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 80021fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 8002216:	220c      	movs	r2, #12
 8002218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002226:	4805      	ldr	r0, [pc, #20]	@ (800223c <MX_USART2_UART_Init+0x4c>)
 8002228:	f005 ff54 	bl	80080d4 <HAL_UART_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002232:	f000 fd4f 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000504 	.word	0x20000504
 8002240:	40004400 	.word	0x40004400

08002244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b4a      	ldr	r3, [pc, #296]	@ (8002388 <MX_GPIO_Init+0x144>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a49      	ldr	r2, [pc, #292]	@ (8002388 <MX_GPIO_Init+0x144>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <MX_GPIO_Init+0x144>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <MX_GPIO_Init+0x144>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a42      	ldr	r2, [pc, #264]	@ (8002388 <MX_GPIO_Init+0x144>)
 8002280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b40      	ldr	r3, [pc, #256]	@ (8002388 <MX_GPIO_Init+0x144>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b3c      	ldr	r3, [pc, #240]	@ (8002388 <MX_GPIO_Init+0x144>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a3b      	ldr	r2, [pc, #236]	@ (8002388 <MX_GPIO_Init+0x144>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b39      	ldr	r3, [pc, #228]	@ (8002388 <MX_GPIO_Init+0x144>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b35      	ldr	r3, [pc, #212]	@ (8002388 <MX_GPIO_Init+0x144>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a34      	ldr	r2, [pc, #208]	@ (8002388 <MX_GPIO_Init+0x144>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <MX_GPIO_Init+0x144>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB1_LED_RED_Pin|PB0_LED_GREEN_Pin|PB13_U_Pin|PB14_V_Pin
 80022ca:	2200      	movs	r2, #0
 80022cc:	f24e 110b 	movw	r1, #57611	@ 0xe10b
 80022d0:	482e      	ldr	r0, [pc, #184]	@ (800238c <MX_GPIO_Init+0x148>)
 80022d2:	f002 fa2f 	bl	8004734 <HAL_GPIO_WritePin>
                          |PB15_W_Pin|PB3_DO_LIGHT_Pin|PB8_DO_FAN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_DO_DC_ON_GPIO_Port, PB5_DO_DC_ON_Pin, GPIO_PIN_SET);
 80022d6:	2201      	movs	r2, #1
 80022d8:	2120      	movs	r1, #32
 80022da:	482c      	ldr	r0, [pc, #176]	@ (800238c <MX_GPIO_Init+0x148>)
 80022dc:	f002 fa2a 	bl	8004734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_DI_AUX_Pin PC10_DI_LIGHT_Pin PC11_DI_BLINKER_L_Pin PC12_DI_BLINKER_R_Pin */
  GPIO_InitStruct.Pin = PC13_DI_AUX_Pin|PC10_DI_LIGHT_Pin|PC11_DI_BLINKER_L_Pin|PC12_DI_BLINKER_R_Pin;
 80022e0:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80022e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4826      	ldr	r0, [pc, #152]	@ (8002390 <MX_GPIO_Init+0x14c>)
 80022f6:	f002 f881 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI5_Break_Pin EXTI6_HALL_U_Pin EXTI7_HALL_V_Pin EXTI8_HALL_W_Pin */
  GPIO_InitStruct.Pin = EXTI5_Break_Pin|EXTI6_HALL_U_Pin|EXTI7_HALL_V_Pin|EXTI8_HALL_W_Pin;
 80022fa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80022fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002300:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	481f      	ldr	r0, [pc, #124]	@ (8002390 <MX_GPIO_Init+0x14c>)
 8002312:	f002 f873 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_LED_RED_Pin PB0_LED_GREEN_Pin PB3_DO_LIGHT_Pin PB5_DO_DC_ON_Pin
                           PB8_DO_FAN_Pin */
  GPIO_InitStruct.Pin = PB1_LED_RED_Pin|PB0_LED_GREEN_Pin|PB3_DO_LIGHT_Pin|PB5_DO_DC_ON_Pin
 8002316:	f240 132b 	movw	r3, #299	@ 0x12b
 800231a:	617b      	str	r3, [r7, #20]
                          |PB8_DO_FAN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800231c:	2311      	movs	r3, #17
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002320:	2301      	movs	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4817      	ldr	r0, [pc, #92]	@ (800238c <MX_GPIO_Init+0x148>)
 8002330:	f002 f864 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13_U_Pin PB14_V_Pin PB15_W_Pin */
  GPIO_InitStruct.Pin = PB13_U_Pin|PB14_V_Pin|PB15_W_Pin;
 8002334:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	480f      	ldr	r0, [pc, #60]	@ (800238c <MX_GPIO_Init+0x148>)
 800234e:	f002 f855 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI9_FAULT_Pin */
  GPIO_InitStruct.Pin = EXTI9_FAULT_Pin;
 8002352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002358:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800235c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI9_FAULT_GPIO_Port, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4809      	ldr	r0, [pc, #36]	@ (8002390 <MX_GPIO_Init+0x14c>)
 800236a:	f002 f847 	bl	80043fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2017      	movs	r0, #23
 8002374:	f001 ff79 	bl	800426a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002378:	2017      	movs	r0, #23
 800237a:	f001 ff92 	bl	80042a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	@ 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800

08002394 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//Interrupt Pin Function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
    // Handle Break Signal Interrupt
    if (GPIO_Pin == EXTI5_Break_Pin) {
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d102      	bne.n	80023aa <HAL_GPIO_EXTI_Callback+0x16>
    	handleBreakInterrupt();
 80023a4:	f000 f828 	bl	80023f8 <handleBreakInterrupt>
        }
    } else {
        // No operation for other states
        __NOP();
    }
}
 80023a8:	e020      	b.n	80023ec <HAL_GPIO_EXTI_Callback+0x58>
    else if (GPIO_Pin == EXTI9_FAULT_Pin) {
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023b0:	d102      	bne.n	80023b8 <HAL_GPIO_EXTI_Callback+0x24>
    	handleHardwareFaultInterrupt();
 80023b2:	f000 f867 	bl	8002484 <handleHardwareFaultInterrupt>
}
 80023b6:	e019      	b.n	80023ec <HAL_GPIO_EXTI_Callback+0x58>
    else if (STATE == DRIVE || STATE == READY) {
 80023b8:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_EXTI_Callback+0x34>
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10e      	bne.n	80023e6 <HAL_GPIO_EXTI_Callback+0x52>
        if (GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin) {
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	2b40      	cmp	r3, #64	@ 0x40
 80023cc:	d006      	beq.n	80023dc <HAL_GPIO_EXTI_Callback+0x48>
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b80      	cmp	r3, #128	@ 0x80
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_EXTI_Callback+0x48>
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023da:	d106      	bne.n	80023ea <HAL_GPIO_EXTI_Callback+0x56>
        	handleHallSensorInterrupt(GPIO_Pin);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f85c 	bl	800249c <handleHallSensorInterrupt>
        if (GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin) {
 80023e4:	e001      	b.n	80023ea <HAL_GPIO_EXTI_Callback+0x56>
        __NOP();
 80023e6:	bf00      	nop
}
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_EXTI_Callback+0x58>
        if (GPIO_Pin == EXTI6_HALL_U_Pin || GPIO_Pin == EXTI7_HALL_V_Pin || GPIO_Pin == EXTI8_HALL_W_Pin) {
 80023ea:	bf00      	nop
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000010 	.word	0x20000010

080023f8 <handleBreakInterrupt>:
/**
  * @brief Handles the brake interrupt signal, transitioning motor state between BREAK and READY
  * @param None
  * @retval void
  */
void handleBreakInterrupt() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
    uint16_t breakSignal = (GPIOC->IDR & GPIO_IDR_ID5) ? 0x0001 : 0x0000;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002474 <handleBreakInterrupt+0x7c>)
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	80fb      	strh	r3, [r7, #6]
    if (breakSignal == 0) {
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <handleBreakInterrupt+0x3c>
        // Transition to BREAK state
        STATE = BREAK;
 8002418:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <handleBreakInterrupt+0x80>)
 800241a:	2202      	movs	r2, #2
 800241c:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port, PB0_LED_GREEN_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2102      	movs	r1, #2
 8002422:	4816      	ldr	r0, [pc, #88]	@ (800247c <handleBreakInterrupt+0x84>)
 8002424:	f002 f986 	bl	8004734 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin, GPIO_PIN_SET);
 8002428:	2201      	movs	r2, #1
 800242a:	2101      	movs	r1, #1
 800242c:	4813      	ldr	r0, [pc, #76]	@ (800247c <handleBreakInterrupt+0x84>)
 800242e:	f002 f981 	bl	8004734 <HAL_GPIO_WritePin>
    		STATE = READY;
    	}
        HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port, PB0_LED_GREEN_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin, GPIO_PIN_RESET);
    }
}
 8002432:	e01a      	b.n	800246a <handleBreakInterrupt+0x72>
    	if(rpm >=5){
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <handleBreakInterrupt+0x88>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800243e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	db03      	blt.n	8002450 <handleBreakInterrupt+0x58>
    		STATE = DRIVE;
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <handleBreakInterrupt+0x80>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e002      	b.n	8002456 <handleBreakInterrupt+0x5e>
    		STATE = READY;
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <handleBreakInterrupt+0x80>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(PB0_LED_GREEN_GPIO_Port, PB0_LED_GREEN_Pin, GPIO_PIN_SET);
 8002456:	2201      	movs	r2, #1
 8002458:	2102      	movs	r1, #2
 800245a:	4808      	ldr	r0, [pc, #32]	@ (800247c <handleBreakInterrupt+0x84>)
 800245c:	f002 f96a 	bl	8004734 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	2101      	movs	r1, #1
 8002464:	4805      	ldr	r0, [pc, #20]	@ (800247c <handleBreakInterrupt+0x84>)
 8002466:	f002 f965 	bl	8004734 <HAL_GPIO_WritePin>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40020800 	.word	0x40020800
 8002478:	20000010 	.word	0x20000010
 800247c:	40020400 	.word	0x40020400
 8002480:	20000554 	.word	0x20000554

08002484 <handleHardwareFaultInterrupt>:
/**
  * @brief Handles hardware fault interrupts, transitioning motor state to HWFAULT
  * @param None
  * @retval void
  */
void handleHardwareFaultInterrupt() {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	STATE = HWFAULT;
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <handleHardwareFaultInterrupt+0x14>)
 800248a:	2204      	movs	r2, #4
 800248c:	601a      	str	r2, [r3, #0]
    // Optional: Implement hardware fault handling
    // Example readADCs() and determine fault cause;
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	20000010 	.word	0x20000010

0800249c <handleHallSensorInterrupt>:
/**
  * @brief Handles hall sensor interrupts, updates commutator step for motor control
  * @param GPIO_Pin      = Pin number that triggered the interrupt
  * @retval void
  */
void handleHallSensorInterrupt(uint16_t GPIO_Pin) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
    hallCC++; // Increment hall sensor counter
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <handleHallSensorInterrupt+0x78>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	4a19      	ldr	r2, [pc, #100]	@ (8002514 <handleHallSensorInterrupt+0x78>)
 80024ae:	6013      	str	r3, [r2, #0]

    // Read hall sensor states
    uint16_t hall[3];
    hall[0] = (GPIOC->IDR & GPIO_IDR_ID6) ? 0x0001 : 0x0000; // Sensor U
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <handleHallSensorInterrupt+0x7c>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	813b      	strh	r3, [r7, #8]
    hall[1] = (GPIOC->IDR & GPIO_IDR_ID7) ? 0x0001 : 0x0000; // Sensor V
 80024c4:	4b14      	ldr	r3, [pc, #80]	@ (8002518 <handleHallSensorInterrupt+0x7c>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	817b      	strh	r3, [r7, #10]
    hall[2] = (GPIOC->IDR & GPIO_IDR_ID8) ? 0x0001 : 0x0000; // Sensor W
 80024d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <handleHallSensorInterrupt+0x7c>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	81bb      	strh	r3, [r7, #12]

    // Trapazoidal control
    uint16_t commutatorStep = hallState(hall);
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fd21 	bl	8000f38 <hallState>
 80024f6:	4603      	mov	r3, r0
 80024f8:	81fb      	strh	r3, [r7, #14]
    commutator(commutatorStep, duty, dir);
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	4a07      	ldr	r2, [pc, #28]	@ (800251c <handleHallSensorInterrupt+0x80>)
 80024fe:	6811      	ldr	r1, [r2, #0]
 8002500:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <handleHallSensorInterrupt+0x84>)
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fd8b 	bl	8001020 <commutator>
    /*
     * uint16_t commutatorStep = hallState(hall);
     * uint16_t phaseAngle = electricalAngle(commutatorStep);
     * FOCcommutator(phaseAngle, duty);
     */
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000550 	.word	0x20000550
 8002518:	40020800 	.word	0x40020800
 800251c:	2000054c 	.word	0x2000054c
 8002520:	20000014 	.word	0x20000014
 8002524:	00000000 	.word	0x00000000

08002528 <readADCs>:
/**
  * @brief Reads ADC values for voltage, current, and temperature, and updates corresponding variables
  * @param None
  * @retval void
  */
void readADCs(){
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
	uint16_t a =0;  //Int dump for ADC
 800252e:	2300      	movs	r3, #0
 8002530:	80fb      	strh	r3, [r7, #6]
	float x = 0.0;
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	603b      	str	r3, [r7, #0]
	//READ Voltage
	ADC3_Select_CH(0);
 8002538:	2000      	movs	r0, #0
 800253a:	f000 fb7d 	bl	8002c38 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 800253e:	4860      	ldr	r0, [pc, #384]	@ (80026c0 <readADCs+0x198>)
 8002540:	f001 f8c4 	bl	80036cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, ADC_TIMEOUT);
 8002544:	2114      	movs	r1, #20
 8002546:	485e      	ldr	r0, [pc, #376]	@ (80026c0 <readADCs+0x198>)
 8002548:	f001 f9c5 	bl	80038d6 <HAL_ADC_PollForConversion>
	a =HAL_ADC_GetValue(&hadc3);
 800254c:	485c      	ldr	r0, [pc, #368]	@ (80026c0 <readADCs+0x198>)
 800254e:	f001 fb5d 	bl	8003c0c <HAL_ADC_GetValue>
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 8002556:	485a      	ldr	r0, [pc, #360]	@ (80026c0 <readADCs+0x198>)
 8002558:	f001 f98a 	bl	8003870 <HAL_ADC_Stop>
	x = adc_volt(a);
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe febe 	bl	80012e0 <adc_volt>
 8002564:	ed87 0a00 	vstr	s0, [r7]
	ADC_VAL[0] = 0.15 * x + (1.0- 0.15)*ADC_VAL[0];
 8002568:	6838      	ldr	r0, [r7, #0]
 800256a:	f7fd ffed 	bl	8000548 <__aeabi_f2d>
 800256e:	a350      	add	r3, pc, #320	@ (adr r3, 80026b0 <readADCs+0x188>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fe f840 	bl	80005f8 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	4b50      	ldr	r3, [pc, #320]	@ (80026c4 <readADCs+0x19c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ffdf 	bl	8000548 <__aeabi_f2d>
 800258a:	a34b      	add	r3, pc, #300	@ (adr r3, 80026b8 <readADCs+0x190>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fe f832 	bl	80005f8 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4620      	mov	r0, r4
 800259a:	4629      	mov	r1, r5
 800259c:	f7fd fe76 	bl	800028c <__adddf3>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7fe fafe 	bl	8000ba8 <__aeabi_d2f>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a45      	ldr	r2, [pc, #276]	@ (80026c4 <readADCs+0x19c>)
 80025b0:	6013      	str	r3, [r2, #0]

	//READ Current
	ADC3_Select_CH(1);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f000 fb40 	bl	8002c38 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 80025b8:	4841      	ldr	r0, [pc, #260]	@ (80026c0 <readADCs+0x198>)
 80025ba:	f001 f887 	bl	80036cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, ADC_TIMEOUT);
 80025be:	2114      	movs	r1, #20
 80025c0:	483f      	ldr	r0, [pc, #252]	@ (80026c0 <readADCs+0x198>)
 80025c2:	f001 f988 	bl	80038d6 <HAL_ADC_PollForConversion>
	a =HAL_ADC_GetValue(&hadc3);
 80025c6:	483e      	ldr	r0, [pc, #248]	@ (80026c0 <readADCs+0x198>)
 80025c8:	f001 fb20 	bl	8003c0c <HAL_ADC_GetValue>
 80025cc:	4603      	mov	r3, r0
 80025ce:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 80025d0:	483b      	ldr	r0, [pc, #236]	@ (80026c0 <readADCs+0x198>)
 80025d2:	f001 f94d 	bl	8003870 <HAL_ADC_Stop>
	x = adc_volt(a);
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fe81 	bl	80012e0 <adc_volt>
 80025de:	ed87 0a00 	vstr	s0, [r7]
	ADC_VAL[1] = 0.15 * x + (1.0- 0.15)*ADC_VAL[1];
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f7fd ffb0 	bl	8000548 <__aeabi_f2d>
 80025e8:	a331      	add	r3, pc, #196	@ (adr r3, 80026b0 <readADCs+0x188>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fe f803 	bl	80005f8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	4b32      	ldr	r3, [pc, #200]	@ (80026c4 <readADCs+0x19c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ffa2 	bl	8000548 <__aeabi_f2d>
 8002604:	a32c      	add	r3, pc, #176	@ (adr r3, 80026b8 <readADCs+0x190>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fd fff5 	bl	80005f8 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7fd fe39 	bl	800028c <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fac1 	bl	8000ba8 <__aeabi_d2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4a26      	ldr	r2, [pc, #152]	@ (80026c4 <readADCs+0x19c>)
 800262a:	6053      	str	r3, [r2, #4]

	//READ Temperature
	ADC3_Select_CH(2);
 800262c:	2002      	movs	r0, #2
 800262e:	f000 fb03 	bl	8002c38 <ADC3_Select_CH>
	HAL_ADC_Start(&hadc3);
 8002632:	4823      	ldr	r0, [pc, #140]	@ (80026c0 <readADCs+0x198>)
 8002634:	f001 f84a 	bl	80036cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, ADC_TIMEOUT);
 8002638:	2114      	movs	r1, #20
 800263a:	4821      	ldr	r0, [pc, #132]	@ (80026c0 <readADCs+0x198>)
 800263c:	f001 f94b 	bl	80038d6 <HAL_ADC_PollForConversion>
	a =HAL_ADC_GetValue(&hadc3);
 8002640:	481f      	ldr	r0, [pc, #124]	@ (80026c0 <readADCs+0x198>)
 8002642:	f001 fae3 	bl	8003c0c <HAL_ADC_GetValue>
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc3);
 800264a:	481d      	ldr	r0, [pc, #116]	@ (80026c0 <readADCs+0x198>)
 800264c:	f001 f910 	bl	8003870 <HAL_ADC_Stop>
	x = adc_volt(a);
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fe44 	bl	80012e0 <adc_volt>
 8002658:	ed87 0a00 	vstr	s0, [r7]
	ADC_VAL[2] = 0.15 * x + (1.0- 0.15)*ADC_VAL[2];
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f7fd ff73 	bl	8000548 <__aeabi_f2d>
 8002662:	a313      	add	r3, pc, #76	@ (adr r3, 80026b0 <readADCs+0x188>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fd ffc6 	bl	80005f8 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <readADCs+0x19c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff65 	bl	8000548 <__aeabi_f2d>
 800267e:	a30e      	add	r3, pc, #56	@ (adr r3, 80026b8 <readADCs+0x190>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd ffb8 	bl	80005f8 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4620      	mov	r0, r4
 800268e:	4629      	mov	r1, r5
 8002690:	f7fd fdfc 	bl	800028c <__adddf3>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f7fe fa84 	bl	8000ba8 <__aeabi_d2f>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <readADCs+0x19c>)
 80026a4:	6093      	str	r3, [r2, #8]

}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	33333333 	.word	0x33333333
 80026b4:	3fc33333 	.word	0x3fc33333
 80026b8:	33333333 	.word	0x33333333
 80026bc:	3feb3333 	.word	0x3feb3333
 80026c0:	20000390 	.word	0x20000390
 80026c4:	2000055c 	.word	0x2000055c

080026c8 <doADCs>:
/**
  * @brief Processes ADC values to monitor and control system states, including fault detection and fan control
  * @param None
  * @retval void
  */
void doADCs() {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
        HD44780_PrintStr("ERR:ADC VAL SIZE");
        return;
    }

    // Release SW_FAULT if all conditions are normal
    if (STATE == SWFAULT) {
 80026cc:	4b45      	ldr	r3, [pc, #276]	@ (80027e4 <doADCs+0x11c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d12a      	bne.n	800272a <doADCs+0x62>
        if (ADC_VAL[0] < SW_OV && ADC_VAL[0] > SW_UV + 2 &&  // Voltage OK
 80026d4:	4b44      	ldr	r3, [pc, #272]	@ (80027e8 <doADCs+0x120>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80027ec <doADCs+0x124>
 80026de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	d520      	bpl.n	800272a <doADCs+0x62>
 80026e8:	4b3f      	ldr	r3, [pc, #252]	@ (80027e8 <doADCs+0x120>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80027f0 <doADCs+0x128>
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd16      	ble.n	800272a <doADCs+0x62>
            ADC_VAL[1] <= 1 &&                              // Current OK
 80026fc:	4b3a      	ldr	r3, [pc, #232]	@ (80027e8 <doADCs+0x120>)
 80026fe:	edd3 7a01 	vldr	s15, [r3, #4]
        if (ADC_VAL[0] < SW_OV && ADC_VAL[0] > SW_UV + 2 &&  // Voltage OK
 8002702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d80c      	bhi.n	800272a <doADCs+0x62>
            ADC_VAL[2] <= Temp_FAN_ON) {                    // Temperature OK
 8002710:	4b35      	ldr	r3, [pc, #212]	@ (80027e8 <doADCs+0x120>)
 8002712:	edd3 7a02 	vldr	s15, [r3, #8]
            ADC_VAL[1] <= 1 &&                              // Current OK
 8002716:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80027f4 <doADCs+0x12c>
 800271a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d802      	bhi.n	800272a <doADCs+0x62>
            STATE = BREAK;
 8002724:	4b2f      	ldr	r3, [pc, #188]	@ (80027e4 <doADCs+0x11c>)
 8002726:	2202      	movs	r2, #2
 8002728:	601a      	str	r2, [r3, #0]
        }
    }
    // Device is in normal condition
    if (STATE !=SWFAULT){
 800272a:	4b2e      	ldr	r3, [pc, #184]	@ (80027e4 <doADCs+0x11c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d057      	beq.n	80027e2 <doADCs+0x11a>
        // Control the fan based on temperature
        if (ADC_VAL[2] >= Temp_FAN_ON) {
 8002732:	4b2d      	ldr	r3, [pc, #180]	@ (80027e8 <doADCs+0x120>)
 8002734:	edd3 7a02 	vldr	s15, [r3, #8]
 8002738:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80027f4 <doADCs+0x12c>
 800273c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	db06      	blt.n	8002754 <doADCs+0x8c>
            HAL_GPIO_WritePin(GPIOB, PB8_DO_FAN_Pin, GPIO_PIN_RESET); // FAN ON
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800274c:	482a      	ldr	r0, [pc, #168]	@ (80027f8 <doADCs+0x130>)
 800274e:	f001 fff1 	bl	8004734 <HAL_GPIO_WritePin>
 8002752:	e00f      	b.n	8002774 <doADCs+0xac>
        } else if (ADC_VAL[2] <= Temp_FAN_OFF) {
 8002754:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <doADCs+0x120>)
 8002756:	edd3 7a02 	vldr	s15, [r3, #8]
 800275a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80027ec <doADCs+0x124>
 800275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d805      	bhi.n	8002774 <doADCs+0xac>
            HAL_GPIO_WritePin(GPIOB, PB8_DO_FAN_Pin, GPIO_PIN_SET);   // FAN OFF
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800276e:	4822      	ldr	r0, [pc, #136]	@ (80027f8 <doADCs+0x130>)
 8002770:	f001 ffe0 	bl	8004734 <HAL_GPIO_WritePin>
        }

        // Check for software faults and set error messages
        if (ADC_VAL[0] >= SW_OV) {
 8002774:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <doADCs+0x120>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80027ec <doADCs+0x124>
 800277e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	db03      	blt.n	8002790 <doADCs+0xc8>
            setFaultState("ERR:SW OV");
 8002788:	481c      	ldr	r0, [pc, #112]	@ (80027fc <doADCs+0x134>)
 800278a:	f000 f843 	bl	8002814 <setFaultState>
 800278e:	e028      	b.n	80027e2 <doADCs+0x11a>
        } else if (ADC_VAL[0] <= SW_UV) {
 8002790:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <doADCs+0x120>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002800 <doADCs+0x138>
 800279a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	d803      	bhi.n	80027ac <doADCs+0xe4>
            setFaultState("ERR:SW UV");
 80027a4:	4817      	ldr	r0, [pc, #92]	@ (8002804 <doADCs+0x13c>)
 80027a6:	f000 f835 	bl	8002814 <setFaultState>
 80027aa:	e01a      	b.n	80027e2 <doADCs+0x11a>
        } else if (ADC_VAL[1] >= SW_OC) {
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <doADCs+0x120>)
 80027ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b2:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 80027b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027be:	db03      	blt.n	80027c8 <doADCs+0x100>
            setFaultState("ERR:SW OC");
 80027c0:	4811      	ldr	r0, [pc, #68]	@ (8002808 <doADCs+0x140>)
 80027c2:	f000 f827 	bl	8002814 <setFaultState>
 80027c6:	e00c      	b.n	80027e2 <doADCs+0x11a>
        } else if (ADC_VAL[2] >= SW_OT) {
 80027c8:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <doADCs+0x120>)
 80027ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800280c <doADCs+0x144>
 80027d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	db02      	blt.n	80027e2 <doADCs+0x11a>
            setFaultState("ERR:SW OT");
 80027dc:	480c      	ldr	r0, [pc, #48]	@ (8002810 <doADCs+0x148>)
 80027de:	f000 f819 	bl	8002814 <setFaultState>
        }
    }
}
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000010 	.word	0x20000010
 80027e8:	2000055c 	.word	0x2000055c
 80027ec:	42700000 	.word	0x42700000
 80027f0:	423c0000 	.word	0x423c0000
 80027f4:	42a00000 	.word	0x42a00000
 80027f8:	40020400 	.word	0x40020400
 80027fc:	0800fbf4 	.word	0x0800fbf4
 8002800:	42340000 	.word	0x42340000
 8002804:	0800fc00 	.word	0x0800fc00
 8002808:	0800fc0c 	.word	0x0800fc0c
 800280c:	42c80000 	.word	0x42c80000
 8002810:	0800fc18 	.word	0x0800fc18

08002814 <setFaultState>:
/**
  * @brief Sets the system state to SWFAULT and displays the provided error message
  * @param errorMessage    = Pointer to a string containing the fault error message
  * @retval void
  */
void setFaultState(const char* errorMessage) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    STATE = SWFAULT;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <setFaultState+0x24>)
 800281e:	2203      	movs	r2, #3
 8002820:	601a      	str	r2, [r3, #0]
    HD44780_SetCursor(0, 1);
 8002822:	2101      	movs	r1, #1
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe fe6f 	bl	8001508 <HD44780_SetCursor>
    HD44780_PrintStr(errorMessage);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fedd 	bl	80015ea <HD44780_PrintStr>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000010 	.word	0x20000010

0800283c <writeState>:

/**
  * @brief Write the Hardware state to the corresponding position onto the display
  * @retval void
  */
void writeState() {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
    const char *state; // String to hold the text corresponding to the state

    switch (STATE) {
 8002842:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <writeState+0x70>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b06      	cmp	r3, #6
 8002848:	d822      	bhi.n	8002890 <writeState+0x54>
 800284a:	a201      	add	r2, pc, #4	@ (adr r2, 8002850 <writeState+0x14>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	0800286d 	.word	0x0800286d
 8002854:	08002873 	.word	0x08002873
 8002858:	08002879 	.word	0x08002879
 800285c:	0800287f 	.word	0x0800287f
 8002860:	08002885 	.word	0x08002885
 8002864:	08002891 	.word	0x08002891
 8002868:	0800288b 	.word	0x0800288b
        case READY:
            state = "READY";
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <writeState+0x74>)
 800286e:	607b      	str	r3, [r7, #4]
            break;
 8002870:	e011      	b.n	8002896 <writeState+0x5a>
        case DRIVE:
            state = "DRIVE";
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <writeState+0x78>)
 8002874:	607b      	str	r3, [r7, #4]
            break;
 8002876:	e00e      	b.n	8002896 <writeState+0x5a>
        case BREAK:
            state = "BREAK";
 8002878:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <writeState+0x7c>)
 800287a:	607b      	str	r3, [r7, #4]
            break;
 800287c:	e00b      	b.n	8002896 <writeState+0x5a>
        case SWFAULT:
            state = "SWFAULT";
 800287e:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <writeState+0x80>)
 8002880:	607b      	str	r3, [r7, #4]
            break;
 8002882:	e008      	b.n	8002896 <writeState+0x5a>
        case HWFAULT:
            state = "HWFAULT";
 8002884:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <writeState+0x84>)
 8002886:	607b      	str	r3, [r7, #4]
            break;
 8002888:	e005      	b.n	8002896 <writeState+0x5a>
        case DEBUGST:
        	state = "DEBUG";
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <writeState+0x88>)
 800288c:	607b      	str	r3, [r7, #4]
            break;
 800288e:	e002      	b.n	8002896 <writeState+0x5a>
        default:
            state = "UNKNOWN"; // Fallback for undefined states
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <writeState+0x8c>)
 8002892:	607b      	str	r3, [r7, #4]
            break;
 8002894:	bf00      	nop
    }

    // Set the cursor to position (0, 2)
    HD44780_SetCursor(0, 2);
 8002896:	2102      	movs	r1, #2
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe fe35 	bl	8001508 <HD44780_SetCursor>

    // Write the corresponding state string to the display
    HD44780_PrintStr(state);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fea3 	bl	80015ea <HD44780_PrintStr>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000010 	.word	0x20000010
 80028b0:	0800fc24 	.word	0x0800fc24
 80028b4:	0800fc2c 	.word	0x0800fc2c
 80028b8:	0800fc34 	.word	0x0800fc34
 80028bc:	0800fc3c 	.word	0x0800fc3c
 80028c0:	0800fc44 	.word	0x0800fc44
 80028c4:	0800fc4c 	.word	0x0800fc4c
 80028c8:	0800fc54 	.word	0x0800fc54

080028cc <readDI>:
/**
  * @brief Reads digital input values from GPIO pins and updates button states
  * @param None
  * @retval void
  */
void readDI(){
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
    // Button data[Light, Blinker L, Blinker R, Aux]
    uint16_t but_new[4];
    but_new[0] = (GPIOC->IDR & GPIO_IDR_ID10) ? 0x0001 : 0x0000;
 80028d2:	4b21      	ldr	r3, [pc, #132]	@ (8002958 <readDI+0x8c>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	80bb      	strh	r3, [r7, #4]
    but_new[1] = (GPIOC->IDR & GPIO_IDR_ID11) ? 0x0001 : 0x0000;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002958 <readDI+0x8c>)
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	80fb      	strh	r3, [r7, #6]
    but_new[2] = (GPIOC->IDR & GPIO_IDR_ID12) ? 0x0001 : 0x0000;
 80028fa:	4b17      	ldr	r3, [pc, #92]	@ (8002958 <readDI+0x8c>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	813b      	strh	r3, [r7, #8]
    but_new[3] = (GPIOC->IDR & GPIO_IDR_ID13) ? 0x0001 : 0x0000;
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <readDI+0x8c>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < 4; i++) {
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e00c      	b.n	8002942 <readDI+0x76>
    	but[i] = but_new[i];
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	3310      	adds	r3, #16
 800292e:	443b      	add	r3, r7
 8002930:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8002934:	4a09      	ldr	r2, [pc, #36]	@ (800295c <readDI+0x90>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3301      	adds	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b03      	cmp	r3, #3
 8002946:	ddef      	ble.n	8002928 <readDI+0x5c>
        }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40020800 	.word	0x40020800
 800295c:	2000056c 	.word	0x2000056c

08002960 <setDO>:
/**
  * @brief Sets digital output states based on button inputs and updates system behavior accordingly
  * @param None
  * @retval void
  */
void setDO() {
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
		setFaultState("ERR: DO SIZE");
	}

    // Button data: [Light, Blinker L, Blinker R, Aux]
    // Toggle lights based on button state
    HAL_GPIO_WritePin(GPIOB, PB3_DO_LIGHT_Pin, but[0] == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <setDO+0x68>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	2108      	movs	r1, #8
 8002976:	4815      	ldr	r0, [pc, #84]	@ (80029cc <setDO+0x6c>)
 8002978:	f001 fedc 	bl	8004734 <HAL_GPIO_WritePin>

    // Handle Blinker Left (PWM Control)
    if (but[1] == 1) {
 800297c:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <setDO+0x68>)
 800297e:	885b      	ldrh	r3, [r3, #2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d103      	bne.n	800298c <setDO+0x2c>
        TIM3->CCR2 = BLINKER_START;  // Start PWM
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <setDO+0x70>)
 8002986:	22fa      	movs	r2, #250	@ 0xfa
 8002988:	639a      	str	r2, [r3, #56]	@ 0x38
 800298a:	e003      	b.n	8002994 <setDO+0x34>
    } else {
        TIM3->CCR2 = BLINKER_STOP;  // Stop PWM
 800298c:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <setDO+0x70>)
 800298e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Handle Blinker Right (PWM Control)
    if (but[2] == 1) {
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <setDO+0x68>)
 8002996:	889b      	ldrh	r3, [r3, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d103      	bne.n	80029a4 <setDO+0x44>
        TIM3->CCR1 = BLINKER_START;  // Start PWM
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <setDO+0x70>)
 800299e:	22fa      	movs	r2, #250	@ 0xfa
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029a2:	e003      	b.n	80029ac <setDO+0x4c>
    } else {
        TIM3->CCR1 = BLINKER_STOP;  // Stop PWM
 80029a4:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <setDO+0x70>)
 80029a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80029aa:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Handle Aux button action
    if (but[3] == 0) {
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <setDO+0x68>)
 80029ae:	88db      	ldrh	r3, [r3, #6]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <setDO+0x62>
        HAL_GPIO_TogglePin(PB1_LED_RED_GPIO_Port, PB1_LED_RED_Pin); // Toggle LED
 80029b4:	2101      	movs	r1, #1
 80029b6:	4805      	ldr	r0, [pc, #20]	@ (80029cc <setDO+0x6c>)
 80029b8:	f001 fed5 	bl	8004766 <HAL_GPIO_TogglePin>
        STATE = DRIVE;                                             // Set state to DRIVE
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <setDO+0x74>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    }
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000056c 	.word	0x2000056c
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40000400 	.word	0x40000400
 80029d4:	20000010 	.word	0x20000010

080029d8 <resetDO>:
/**
  * @brief Resets digital output states into off state
  * @param None
  * @retval void
  */
void resetDO(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	//main light off
	HAL_GPIO_WritePin(GPIOB, PB3_DO_LIGHT_Pin,GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	2108      	movs	r1, #8
 80029e0:	4806      	ldr	r0, [pc, #24]	@ (80029fc <resetDO+0x24>)
 80029e2:	f001 fea7 	bl	8004734 <HAL_GPIO_WritePin>
	TIM3->CCR2 = BLINKER_STOP;  // Stop Blinker Left PWM
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <resetDO+0x28>)
 80029e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80029ec:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR1 = BLINKER_STOP;  // Stop Blinker Right PWM
 80029ee:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <resetDO+0x28>)
 80029f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80029f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40000400 	.word	0x40000400

08002a04 <ready>:
/**
  * @brief Prepares the system for motor operation by initializing throttle input and PWM control
  * @param None
  * @retval void
  */
void ready() {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af02      	add	r7, sp, #8
    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8002a0a:	481f      	ldr	r0, [pc, #124]	@ (8002a88 <ready+0x84>)
 8002a0c:	f000 fe5e 	bl	80036cc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 20);
 8002a10:	2114      	movs	r1, #20
 8002a12:	481d      	ldr	r0, [pc, #116]	@ (8002a88 <ready+0x84>)
 8002a14:	f000 ff5f 	bl	80038d6 <HAL_ADC_PollForConversion>

    // Get throttle raw value
    rawThrot = HAL_ADC_GetValue(&hadc1);
 8002a18:	481b      	ldr	r0, [pc, #108]	@ (8002a88 <ready+0x84>)
 8002a1a:	f001 f8f7 	bl	8003c0c <HAL_ADC_GetValue>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <ready+0x88>)
 8002a24:	801a      	strh	r2, [r3, #0]

    // Map throttle value to duty cycle range
    int THrotduty = map(rawThrot, MINADC, MAXADC, MINDUTY, MAXDUTY);
 8002a26:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <ready+0x88>)
 8002a28:	8818      	ldrh	r0, [r3, #0]
 8002a2a:	233c      	movs	r3, #60	@ 0x3c
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f640 4262 	movw	r2, #3170	@ 0xc62
 8002a34:	f240 411f 	movw	r1, #1055	@ 0x41f
 8002a38:	f7fe fc2c 	bl	8001294 <map>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	607b      	str	r3, [r7, #4]

    // Check if throttle duty cycle exceeds the threshold
    if (THrotduty >= THROTTLE_THRESHOLD) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b1d      	cmp	r3, #29
 8002a44:	dd1c      	ble.n	8002a80 <ready+0x7c>
        // Initialize PWM outputs to zero
        TIM1->CCR1 = 0;
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <ready+0x8c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM1->CCR2 = 0;
 8002a4c:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <ready+0x8c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM1->CCR3 = 0;
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <ready+0x8c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	63da      	str	r2, [r3, #60]	@ 0x3c

        // Start PWM for all three channels
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	480e      	ldr	r0, [pc, #56]	@ (8002a94 <ready+0x90>)
 8002a5c:	f004 fb58 	bl	8007110 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002a60:	2104      	movs	r1, #4
 8002a62:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <ready+0x90>)
 8002a64:	f004 fb54 	bl	8007110 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002a68:	2108      	movs	r1, #8
 8002a6a:	480a      	ldr	r0, [pc, #40]	@ (8002a94 <ready+0x90>)
 8002a6c:	f004 fb50 	bl	8007110 <HAL_TIM_PWM_Start>

        // Initialize BLDC motor
        initBLDC();
 8002a70:	f7fe fbde 	bl	8001230 <initBLDC>

        // Set initial duty cycle
        duty = 10; // Set initial duty cycle; modify as needed
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <ready+0x94>)
 8002a76:	220a      	movs	r2, #10
 8002a78:	601a      	str	r2, [r3, #0]

        // Change state to DRIVE
        STATE = DRIVE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <ready+0x98>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000300 	.word	0x20000300
 8002a8c:	20000558 	.word	0x20000558
 8002a90:	40010000 	.word	0x40010000
 8002a94:	2000042c 	.word	0x2000042c
 8002a98:	2000054c 	.word	0x2000054c
 8002a9c:	20000010 	.word	0x20000010

08002aa0 <drive>:
/**
  * @brief Controls the motor drive by reading throttle input and updating the PWM duty cycle
  * @param None
  * @retval void
  */
void drive() {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af02      	add	r7, sp, #8
    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8002aa6:	4816      	ldr	r0, [pc, #88]	@ (8002b00 <drive+0x60>)
 8002aa8:	f000 fe10 	bl	80036cc <HAL_ADC_Start>

    // Wait for ADC conversion to complete with a timeout
    if (HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT) == HAL_OK) {
 8002aac:	2114      	movs	r1, #20
 8002aae:	4814      	ldr	r0, [pc, #80]	@ (8002b00 <drive+0x60>)
 8002ab0:	f000 ff11 	bl	80038d6 <HAL_ADC_PollForConversion>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d117      	bne.n	8002aea <drive+0x4a>
        // Get raw throttle value
        rawThrot = HAL_ADC_GetValue(&hadc1);
 8002aba:	4811      	ldr	r0, [pc, #68]	@ (8002b00 <drive+0x60>)
 8002abc:	f001 f8a6 	bl	8003c0c <HAL_ADC_GetValue>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <drive+0x64>)
 8002ac6:	801a      	strh	r2, [r3, #0]

        // Map the raw throttle value to a duty cycle range
        int THrotduty = map(rawThrot, MINADC, MAXADC, MINDUTY, MAXDUTY);
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <drive+0x64>)
 8002aca:	8818      	ldrh	r0, [r3, #0]
 8002acc:	233c      	movs	r3, #60	@ 0x3c
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f640 4262 	movw	r2, #3170	@ 0xc62
 8002ad6:	f240 411f 	movw	r1, #1055	@ 0x41f
 8002ada:	f7fe fbdb 	bl	8001294 <map>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	607b      	str	r3, [r7, #4]

        // Update the duty cycle
        duty = THrotduty;
 8002ae2:	4a09      	ldr	r2, [pc, #36]	@ (8002b08 <drive+0x68>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6013      	str	r3, [r2, #0]
        // Handle ADC conversion error (optional)
        duty = 0; // Set duty to a safe value in case of failure
        setFaultState("ERR: ADC");
        // Optionally log or display an error message
    }
}
 8002ae8:	e005      	b.n	8002af6 <drive+0x56>
        duty = 0; // Set duty to a safe value in case of failure
 8002aea:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <drive+0x68>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
        setFaultState("ERR: ADC");
 8002af0:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <drive+0x6c>)
 8002af2:	f7ff fe8f 	bl	8002814 <setFaultState>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000300 	.word	0x20000300
 8002b04:	20000558 	.word	0x20000558
 8002b08:	2000054c 	.word	0x2000054c
 8002b0c:	0800fc5c 	.word	0x0800fc5c

08002b10 <breaking>:
/**
  * @brief Engages the braking mechanism by stopping PWM outputs and activating braking GPIO pins
  * @param None
  * @retval void
  */
void breaking() {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    TIM1->CCR1 = 0;
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <breaking+0x5c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <breaking+0x5c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = 0;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <breaking+0x5c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	63da      	str	r2, [r3, #60]	@ 0x3c
    duty = 0; // Reset duty cycle to zero
 8002b26:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <breaking+0x60>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4811      	ldr	r0, [pc, #68]	@ (8002b74 <breaking+0x64>)
 8002b30:	f004 fbb6 	bl	80072a0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002b34:	2104      	movs	r1, #4
 8002b36:	480f      	ldr	r0, [pc, #60]	@ (8002b74 <breaking+0x64>)
 8002b38:	f004 fbb2 	bl	80072a0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002b3c:	2108      	movs	r1, #8
 8002b3e:	480d      	ldr	r0, [pc, #52]	@ (8002b74 <breaking+0x64>)
 8002b40:	f004 fbae 	bl	80072a0 <HAL_TIM_PWM_Stop>

    // Set GPIO pins for braking mode
    HAL_GPIO_WritePin(GPIOB, PB13_U_Pin, GPIO_PIN_SET);
 8002b44:	2201      	movs	r2, #1
 8002b46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b4a:	480b      	ldr	r0, [pc, #44]	@ (8002b78 <breaking+0x68>)
 8002b4c:	f001 fdf2 	bl	8004734 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, PB14_V_Pin, GPIO_PIN_SET);
 8002b50:	2201      	movs	r2, #1
 8002b52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b56:	4808      	ldr	r0, [pc, #32]	@ (8002b78 <breaking+0x68>)
 8002b58:	f001 fdec 	bl	8004734 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, PB15_W_Pin, GPIO_PIN_SET);
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b62:	4805      	ldr	r0, [pc, #20]	@ (8002b78 <breaking+0x68>)
 8002b64:	f001 fde6 	bl	8004734 <HAL_GPIO_WritePin>
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	2000054c 	.word	0x2000054c
 8002b74:	2000042c 	.word	0x2000042c
 8002b78:	40020400 	.word	0x40020400

08002b7c <swfault>:
/**
  * @brief Handles the software fault state by engaging braking and transitioning to HWFAULT after a timeout
  * @param None
  * @retval void
  */
void swfault() {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
    // Perform breaking to ensure the system is in a safe state
    breaking();
 8002b80:	f7ff ffc6 	bl	8002b10 <breaking>

    // Check if the timeout for SWFAULT has elapsed (30s = 300 units of 100ms)
    if (swfault_time_counter >= SWFAULT_TIMOUT) {
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <swfault+0x1c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002b8c:	d302      	bcc.n	8002b94 <swfault+0x18>
        // Transition to HWFAULT state
        STATE = HWFAULT;
 8002b8e:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <swfault+0x20>)
 8002b90:	2204      	movs	r2, #4
 8002b92:	601a      	str	r2, [r3, #0]
    }
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000574 	.word	0x20000574
 8002b9c:	20000010 	.word	0x20000010

08002ba0 <hwfault>:
/**
  * @brief Handles hardware faults by engaging braking, displaying an error message, and halting execution
  * @param None
  * @retval void
  */
void hwfault(){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	STATE = HWFAULT;
 8002ba4:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <hwfault+0x24>)
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	601a      	str	r2, [r3, #0]
	breaking();
 8002baa:	f7ff ffb1 	bl	8002b10 <breaking>
	HD44780_SetCursor(0,1);
 8002bae:	2101      	movs	r1, #1
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fe fca9 	bl	8001508 <HD44780_SetCursor>
	HD44780_PrintStr("ERROR:HW FAULT");
 8002bb6:	4804      	ldr	r0, [pc, #16]	@ (8002bc8 <hwfault+0x28>)
 8002bb8:	f7fe fd17 	bl	80015ea <HD44780_PrintStr>
	//Stuck untill Power on reset
	while(1){
		HAL_Delay(100);
 8002bbc:	2064      	movs	r0, #100	@ 0x64
 8002bbe:	f000 fd1d 	bl	80035fc <HAL_Delay>
 8002bc2:	e7fb      	b.n	8002bbc <hwfault+0x1c>
 8002bc4:	20000010 	.word	0x20000010
 8002bc8:	0800fc68 	.word	0x0800fc68

08002bcc <debug>:

	}
}

void debug(){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <debug+0x5c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <debug+0x5c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <debug+0x5c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	duty = 0;
 8002be2:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <debug+0x60>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002be8:	2100      	movs	r1, #0
 8002bea:	4811      	ldr	r0, [pc, #68]	@ (8002c30 <debug+0x64>)
 8002bec:	f004 fb58 	bl	80072a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	480f      	ldr	r0, [pc, #60]	@ (8002c30 <debug+0x64>)
 8002bf4:	f004 fb54 	bl	80072a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002bf8:	2108      	movs	r1, #8
 8002bfa:	480d      	ldr	r0, [pc, #52]	@ (8002c30 <debug+0x64>)
 8002bfc:	f004 fb50 	bl	80072a0 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOB,PB13_U_Pin,GPIO_PIN_RESET);
 8002c00:	2200      	movs	r2, #0
 8002c02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c06:	480b      	ldr	r0, [pc, #44]	@ (8002c34 <debug+0x68>)
 8002c08:	f001 fd94 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,PB14_V_Pin,GPIO_PIN_RESET);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c12:	4808      	ldr	r0, [pc, #32]	@ (8002c34 <debug+0x68>)
 8002c14:	f001 fd8e 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,PB15_W_Pin,GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c1e:	4805      	ldr	r0, [pc, #20]	@ (8002c34 <debug+0x68>)
 8002c20:	f001 fd88 	bl	8004734 <HAL_GPIO_WritePin>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	2000054c 	.word	0x2000054c
 8002c30:	2000042c 	.word	0x2000042c
 8002c34:	40020400 	.word	0x40020400

08002c38 <ADC3_Select_CH>:
/**
  * @brief Configures the ADC3 channel for the selected input
  * @param ch    = Channel number to configure (0, 1, or 2)
  * @retval void
  */
void ADC3_Select_CH(int ch){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
	if(ch ==0){
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d110      	bne.n	8002c76 <ADC3_Select_CH+0x3e>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c60:	f107 0308 	add.w	r3, r7, #8
 8002c64:	4619      	mov	r1, r3
 8002c66:	481a      	ldr	r0, [pc, #104]	@ (8002cd0 <ADC3_Select_CH+0x98>)
 8002c68:	f000 fffc 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <ADC3_Select_CH+0x3e>
		  {
		    Error_Handler();
 8002c72:	f000 f82f 	bl	8002cd4 <Error_Handler>
		  }
	}

	if(ch==1){
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d110      	bne.n	8002c9e <ADC3_Select_CH+0x66>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_1;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002c84:	2302      	movs	r3, #2
 8002c86:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4810      	ldr	r0, [pc, #64]	@ (8002cd0 <ADC3_Select_CH+0x98>)
 8002c90:	f000 ffe8 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <ADC3_Select_CH+0x66>
		  {
		    Error_Handler();
 8002c9a:	f000 f81b 	bl	8002cd4 <Error_Handler>
		  }
	}
	if(ch==2){
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d110      	bne.n	8002cc6 <ADC3_Select_CH+0x8e>
		  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_13;
 8002ca4:	230d      	movs	r3, #13
 8002ca6:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002cac:	2302      	movs	r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4806      	ldr	r0, [pc, #24]	@ (8002cd0 <ADC3_Select_CH+0x98>)
 8002cb8:	f000 ffd4 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <ADC3_Select_CH+0x8e>
		  {
		    Error_Handler();
 8002cc2:	f000 f807 	bl	8002cd4 <Error_Handler>
		  }
	}
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000390 	.word	0x20000390

08002cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
}
 8002cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <Error_Handler+0x8>

08002ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4a0f      	ldr	r2, [pc, #60]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800

08002d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	@ 0x38
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec8 <HAL_ADC_MspInit+0x198>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d130      	bne.n	8002db4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d62:	4b5a      	ldr	r3, [pc, #360]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	4b56      	ldr	r3, [pc, #344]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4a55      	ldr	r2, [pc, #340]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN5_Throttle_Pin;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC1_IN5_Throttle_GPIO_Port, &GPIO_InitStruct);
 8002d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	484c      	ldr	r0, [pc, #304]	@ (8002ed0 <HAL_ADC_MspInit+0x1a0>)
 8002d9e:	f001 fb2d 	bl	80043fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	2012      	movs	r0, #18
 8002da8:	f001 fa5f 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002dac:	2012      	movs	r0, #18
 8002dae:	f001 fa78 	bl	80042a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002db2:	e084      	b.n	8002ebe <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a46      	ldr	r2, [pc, #280]	@ (8002ed4 <HAL_ADC_MspInit+0x1a4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d130      	bne.n	8002e20 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	4a41      	ldr	r2, [pc, #260]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002dc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	4a3a      	ldr	r2, [pc, #232]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ADC2_IN10_U_CUR_Pin|ADC2_IN11_V_CUR_Pin|ADC2_IN12_W_CUR_Pin;
 8002df6:	2307      	movs	r3, #7
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e06:	4619      	mov	r1, r3
 8002e08:	4833      	ldr	r0, [pc, #204]	@ (8002ed8 <HAL_ADC_MspInit+0x1a8>)
 8002e0a:	f001 faf7 	bl	80043fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	2012      	movs	r0, #18
 8002e14:	f001 fa29 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e18:	2012      	movs	r0, #18
 8002e1a:	f001 fa42 	bl	80042a2 <HAL_NVIC_EnableIRQ>
}
 8002e1e:	e04e      	b.n	8002ebe <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC3)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a2d      	ldr	r2, [pc, #180]	@ (8002edc <HAL_ADC_MspInit+0x1ac>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d149      	bne.n	8002ebe <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	4b27      	ldr	r3, [pc, #156]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	4a26      	ldr	r2, [pc, #152]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e72:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <HAL_ADC_MspInit+0x19c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC3_IN13_TEMP_Pin;
 8002e7e:	2308      	movs	r3, #8
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e82:	2303      	movs	r3, #3
 8002e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC3_IN13_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4811      	ldr	r0, [pc, #68]	@ (8002ed8 <HAL_ADC_MspInit+0x1a8>)
 8002e92:	f001 fab3 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC3_IN0_BUS_VOLT_Pin|ADC3_IN1_BUS_CUR_Pin;
 8002e96:	2303      	movs	r3, #3
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4809      	ldr	r0, [pc, #36]	@ (8002ed0 <HAL_ADC_MspInit+0x1a0>)
 8002eaa:	f001 faa7 	bl	80043fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2012      	movs	r0, #18
 8002eb4:	f001 f9d9 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002eb8:	2012      	movs	r0, #18
 8002eba:	f001 f9f2 	bl	80042a2 <HAL_NVIC_EnableIRQ>
}
 8002ebe:	bf00      	nop
 8002ec0:	3738      	adds	r7, #56	@ 0x38
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40012000 	.word	0x40012000
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40012100 	.word	0x40012100
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40012200 	.word	0x40012200

08002ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a19      	ldr	r2, [pc, #100]	@ (8002f64 <HAL_I2C_MspInit+0x84>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12b      	bne.n	8002f5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1e:	23c0      	movs	r3, #192	@ 0xc0
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f22:	2312      	movs	r3, #18
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <HAL_I2C_MspInit+0x8c>)
 8002f3a:	f001 fa5f 	bl	80043fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a08      	ldr	r2, [pc, #32]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	@ 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40005400 	.word	0x40005400
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020400 	.word	0x40020400

08002f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <HAL_TIM_Base_MspInit+0x98>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8a:	4a20      	ldr	r2, [pc, #128]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f92:	4b1e      	ldr	r3, [pc, #120]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f9e:	e02e      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa8:	d116      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b17      	ldr	r3, [pc, #92]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	4a16      	ldr	r2, [pc, #88]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	201c      	movs	r0, #28
 8002fcc:	f001 f94d 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fd0:	201c      	movs	r0, #28
 8002fd2:	f001 f966 	bl	80042a2 <HAL_NVIC_EnableIRQ>
}
 8002fd6:	e012      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8003010 <HAL_TIM_Base_MspInit+0xa0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10d      	bne.n	8002ffe <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_TIM_Base_MspInit+0x9c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40023800 	.word	0x40023800
 8003010:	40000400 	.word	0x40000400

08003014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	@ 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <HAL_TIM_MspPostInit+0xb0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d11f      	bne.n	8003076 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b23      	ldr	r3, [pc, #140]	@ (80030c8 <HAL_TIM_MspPostInit+0xb4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <HAL_TIM_MspPostInit+0xb4>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	@ 0x30
 8003046:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_TIM_MspPostInit+0xb4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_U_Pin|TIM1_CH2_V_Pin|TIM1_CH3_W_Pin;
 8003052:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4817      	ldr	r0, [pc, #92]	@ (80030cc <HAL_TIM_MspPostInit+0xb8>)
 8003070:	f001 f9c4 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003074:	e022      	b.n	80030bc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a15      	ldr	r2, [pc, #84]	@ (80030d0 <HAL_TIM_MspPostInit+0xbc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d11d      	bne.n	80030bc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <HAL_TIM_MspPostInit+0xb4>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	4a0f      	ldr	r2, [pc, #60]	@ (80030c8 <HAL_TIM_MspPostInit+0xb4>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003090:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <HAL_TIM_MspPostInit+0xb4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_Blinker_R_Pin|TIM3_CH2_Blinker_L_Pin;
 800309c:	23c0      	movs	r3, #192	@ 0xc0
 800309e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ac:	2302      	movs	r3, #2
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	4619      	mov	r1, r3
 80030b6:	4805      	ldr	r0, [pc, #20]	@ (80030cc <HAL_TIM_MspPostInit+0xb8>)
 80030b8:	f001 f9a0 	bl	80043fc <HAL_GPIO_Init>
}
 80030bc:	bf00      	nop
 80030be:	3728      	adds	r7, #40	@ 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40000400 	.word	0x40000400

080030d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	@ 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <HAL_UART_MspInit+0x94>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d133      	bne.n	800315e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <HAL_UART_MspInit+0x98>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <HAL_UART_MspInit+0x98>)
 8003100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003104:	6413      	str	r3, [r2, #64]	@ 0x40
 8003106:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_UART_MspInit+0x98>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_UART_MspInit+0x98>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	4a14      	ldr	r2, [pc, #80]	@ (800316c <HAL_UART_MspInit+0x98>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6313      	str	r3, [r2, #48]	@ 0x30
 8003122:	4b12      	ldr	r3, [pc, #72]	@ (800316c <HAL_UART_MspInit+0x98>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800312e:	230c      	movs	r3, #12
 8003130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800313e:	2307      	movs	r3, #7
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	4809      	ldr	r0, [pc, #36]	@ (8003170 <HAL_UART_MspInit+0x9c>)
 800314a:	f001 f957 	bl	80043fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	2026      	movs	r0, #38	@ 0x26
 8003154:	f001 f889 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003158:	2026      	movs	r0, #38	@ 0x26
 800315a:	f001 f8a2 	bl	80042a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800315e:	bf00      	nop
 8003160:	3728      	adds	r7, #40	@ 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40004400 	.word	0x40004400
 800316c:	40023800 	.word	0x40023800
 8003170:	40020000 	.word	0x40020000

08003174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <NMI_Handler+0x4>

0800317c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <HardFault_Handler+0x4>

08003184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <MemManage_Handler+0x4>

0800318c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <BusFault_Handler+0x4>

08003194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <UsageFault_Handler+0x4>

0800319c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ca:	f000 f9f7 	bl	80035bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80031d8:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <ADC_IRQHandler+0x1c>)
 80031da:	f000 fc07 	bl	80039ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80031de:	4805      	ldr	r0, [pc, #20]	@ (80031f4 <ADC_IRQHandler+0x20>)
 80031e0:	f000 fc04 	bl	80039ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80031e4:	4804      	ldr	r0, [pc, #16]	@ (80031f8 <ADC_IRQHandler+0x24>)
 80031e6:	f000 fc01 	bl	80039ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000300 	.word	0x20000300
 80031f4:	20000348 	.word	0x20000348
 80031f8:	20000390 	.word	0x20000390

080031fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI5_Break_Pin);
 8003200:	2020      	movs	r0, #32
 8003202:	f001 facb 	bl	800479c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI6_HALL_U_Pin);
 8003206:	2040      	movs	r0, #64	@ 0x40
 8003208:	f001 fac8 	bl	800479c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI7_HALL_V_Pin);
 800320c:	2080      	movs	r0, #128	@ 0x80
 800320e:	f001 fac5 	bl	800479c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI8_HALL_W_Pin);
 8003212:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003216:	f001 fac1 	bl	800479c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI9_FAULT_Pin);
 800321a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800321e:	f001 fabd 	bl	800479c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	int x = hallCC*10;
 800322e:	4b26      	ldr	r3, [pc, #152]	@ (80032c8 <TIM2_IRQHandler+0xa0>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	607b      	str	r3, [r7, #4]
	float rev = x/24;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <TIM2_IRQHandler+0xa4>)
 8003240:	fb82 1203 	smull	r1, r2, r2, r3
 8003244:	1092      	asrs	r2, r2, #2
 8003246:	17db      	asrs	r3, r3, #31
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003252:	edc7 7a00 	vstr	s15, [r7]
	rpm = rev*60;
 8003256:	edd7 7a00 	vldr	s15, [r7]
 800325a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80032d0 <TIM2_IRQHandler+0xa8>
 800325e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003262:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <TIM2_IRQHandler+0xac>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
	hallCC = 0;
 8003268:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <TIM2_IRQHandler+0xa0>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
	ADC_VAL[3] = rpm_tokmh(rpm);
 800326e:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <TIM2_IRQHandler+0xac>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	eeb0 0a67 	vmov.f32	s0, s15
 8003278:	f7fe f880 	bl	800137c <rpm_tokmh>
 800327c:	eef0 7a40 	vmov.f32	s15, s0
 8003280:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <TIM2_IRQHandler+0xb0>)
 8003282:	edc3 7a03 	vstr	s15, [r3, #12]
	//HAL_GPIO_TogglePin(PB1_LED_RED_GPIO_Port,PB1_LED_RED_Pin);
	if(timcc >= 10){
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <TIM2_IRQHandler+0xb4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b09      	cmp	r3, #9
 800328c:	dd03      	ble.n	8003296 <TIM2_IRQHandler+0x6e>
		timcc = 0;
 800328e:	4b13      	ldr	r3, [pc, #76]	@ (80032dc <TIM2_IRQHandler+0xb4>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e004      	b.n	80032a0 <TIM2_IRQHandler+0x78>
	}else{
		timcc++;
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <TIM2_IRQHandler+0xb4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a0f      	ldr	r2, [pc, #60]	@ (80032dc <TIM2_IRQHandler+0xb4>)
 800329e:	6013      	str	r3, [r2, #0]
	}
	 // Increment counter only if in SWFAULT state
	if (STATE == SWFAULT) {
 80032a0:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <TIM2_IRQHandler+0xb8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d105      	bne.n	80032b4 <TIM2_IRQHandler+0x8c>
		swfault_time_counter++;
 80032a8:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <TIM2_IRQHandler+0xbc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a0d      	ldr	r2, [pc, #52]	@ (80032e4 <TIM2_IRQHandler+0xbc>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e002      	b.n	80032ba <TIM2_IRQHandler+0x92>
	} else {
		// Reset the counter if leaving SWFAULT state
        swfault_time_counter = 0;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <TIM2_IRQHandler+0xbc>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032ba:	480b      	ldr	r0, [pc, #44]	@ (80032e8 <TIM2_IRQHandler+0xc0>)
 80032bc:	f004 f860 	bl	8007380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000550 	.word	0x20000550
 80032cc:	2aaaaaab 	.word	0x2aaaaaab
 80032d0:	42700000 	.word	0x42700000
 80032d4:	20000554 	.word	0x20000554
 80032d8:	2000055c 	.word	0x2000055c
 80032dc:	20000598 	.word	0x20000598
 80032e0:	20000010 	.word	0x20000010
 80032e4:	20000574 	.word	0x20000574
 80032e8:	20000474 	.word	0x20000474

080032ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <USART2_IRQHandler+0x10>)
 80032f2:	f004 ff3f 	bl	8008174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000504 	.word	0x20000504

08003300 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003304:	4802      	ldr	r0, [pc, #8]	@ (8003310 <OTG_FS_IRQHandler+0x10>)
 8003306:	f002 f842 	bl	800538e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20001a84 	.word	0x20001a84

08003314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return 1;
 8003318:	2301      	movs	r3, #1
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_kill>:

int _kill(int pid, int sig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800332e:	f00a fba1 	bl	800da74 <__errno>
 8003332:	4603      	mov	r3, r0
 8003334:	2216      	movs	r2, #22
 8003336:	601a      	str	r2, [r3, #0]
  return -1;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_exit>:

void _exit (int status)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ffe7 	bl	8003324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003356:	bf00      	nop
 8003358:	e7fd      	b.n	8003356 <_exit+0x12>

0800335a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e00a      	b.n	8003382 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800336c:	f3af 8000 	nop.w
 8003370:	4601      	mov	r1, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	60ba      	str	r2, [r7, #8]
 8003378:	b2ca      	uxtb	r2, r1
 800337a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3301      	adds	r3, #1
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	dbf0      	blt.n	800336c <_read+0x12>
  }

  return len;
 800338a:	687b      	ldr	r3, [r7, #4]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e009      	b.n	80033ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	60ba      	str	r2, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3301      	adds	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	dbf1      	blt.n	80033a6 <_write+0x12>
  }
  return len;
 80033c2:	687b      	ldr	r3, [r7, #4]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_close>:

int _close(int file)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033f4:	605a      	str	r2, [r3, #4]
  return 0;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <_isatty>:

int _isatty(int file)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800343c:	4a14      	ldr	r2, [pc, #80]	@ (8003490 <_sbrk+0x5c>)
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <_sbrk+0x60>)
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003448:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <_sbrk+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <_sbrk+0x64>)
 8003452:	4a12      	ldr	r2, [pc, #72]	@ (800349c <_sbrk+0x68>)
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <_sbrk+0x64>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d207      	bcs.n	8003474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003464:	f00a fb06 	bl	800da74 <__errno>
 8003468:	4603      	mov	r3, r0
 800346a:	220c      	movs	r2, #12
 800346c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	e009      	b.n	8003488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003474:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <_sbrk+0x64>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <_sbrk+0x64>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <_sbrk+0x64>)
 8003484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20020000 	.word	0x20020000
 8003494:	00000400 	.word	0x00000400
 8003498:	2000059c 	.word	0x2000059c
 800349c:	200022d8 	.word	0x200022d8

080034a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <SystemInit+0x20>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	4a05      	ldr	r2, [pc, #20]	@ (80034c0 <SystemInit+0x20>)
 80034ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80034c8:	f7ff ffea 	bl	80034a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034cc:	480c      	ldr	r0, [pc, #48]	@ (8003500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034ce:	490d      	ldr	r1, [pc, #52]	@ (8003504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d4:	e002      	b.n	80034dc <LoopCopyDataInit>

080034d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034da:	3304      	adds	r3, #4

080034dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e0:	d3f9      	bcc.n	80034d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034e2:	4a0a      	ldr	r2, [pc, #40]	@ (800350c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e8:	e001      	b.n	80034ee <LoopFillZerobss>

080034ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034ec:	3204      	adds	r2, #4

080034ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f0:	d3fb      	bcc.n	80034ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80034f2:	f00a fac5 	bl	800da80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034f6:	f7fe fa69 	bl	80019cc <main>
  bx  lr    
 80034fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003504:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8003508:	08010058 	.word	0x08010058
  ldr r2, =_sbss
 800350c:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8003510:	200022d4 	.word	0x200022d4

08003514 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <CAN1_RX0_IRQHandler>
	...

08003518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800351c:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <HAL_Init+0x40>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <HAL_Init+0x40>)
 8003522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_Init+0x40>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <HAL_Init+0x40>)
 800352e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <HAL_Init+0x40>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a07      	ldr	r2, [pc, #28]	@ (8003558 <HAL_Init+0x40>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003540:	2003      	movs	r0, #3
 8003542:	f000 fe87 	bl	8004254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003546:	200f      	movs	r0, #15
 8003548:	f000 f808 	bl	800355c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800354c:	f7ff fbc8 	bl	8002ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00

0800355c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_InitTick+0x54>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <HAL_InitTick+0x58>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	4619      	mov	r1, r3
 800356e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003572:	fbb3 f3f1 	udiv	r3, r3, r1
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fe9f 	bl	80042be <HAL_SYSTICK_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e00e      	b.n	80035a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b0f      	cmp	r3, #15
 800358e:	d80a      	bhi.n	80035a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003590:	2200      	movs	r2, #0
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f000 fe67 	bl	800426a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800359c:	4a06      	ldr	r2, [pc, #24]	@ (80035b8 <HAL_InitTick+0x5c>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000018 	.word	0x20000018
 80035b4:	20000020 	.word	0x20000020
 80035b8:	2000001c 	.word	0x2000001c

080035bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_IncTick+0x20>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_IncTick+0x24>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <HAL_IncTick+0x24>)
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000020 	.word	0x20000020
 80035e0:	200005a0 	.word	0x200005a0

080035e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return uwTick;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_GetTick+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	200005a0 	.word	0x200005a0

080035fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff ffee 	bl	80035e4 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d005      	beq.n	8003622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003616:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <HAL_Delay+0x44>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003622:	bf00      	nop
 8003624:	f7ff ffde 	bl	80035e4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	429a      	cmp	r2, r3
 8003632:	d8f7      	bhi.n	8003624 <HAL_Delay+0x28>
  {
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000020 	.word	0x20000020

08003644 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e033      	b.n	80036c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fb64 	bl	8002d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800368a:	f023 0302 	bic.w	r3, r3, #2
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fc06 	bl	8003ea8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80036b2:	e001      	b.n	80036b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_Start+0x1a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0b2      	b.n	800384c <HAL_ADC_Start+0x180>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d018      	beq.n	800372e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800370c:	4b52      	ldr	r3, [pc, #328]	@ (8003858 <HAL_ADC_Start+0x18c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a52      	ldr	r2, [pc, #328]	@ (800385c <HAL_ADC_Start+0x190>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9a      	lsrs	r2, r3, #18
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003720:	e002      	b.n	8003728 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3b01      	subs	r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f9      	bne.n	8003722 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d17a      	bne.n	8003832 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003766:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377a:	d106      	bne.n	800378a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003780:	f023 0206 	bic.w	r2, r3, #6
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44
 8003788:	e002      	b.n	8003790 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003798:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <HAL_ADC_Start+0x194>)
 800379a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80037a4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d12a      	bne.n	8003808 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <HAL_ADC_Start+0x198>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d015      	beq.n	80037e8 <HAL_ADC_Start+0x11c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a29      	ldr	r2, [pc, #164]	@ (8003868 <HAL_ADC_Start+0x19c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d105      	bne.n	80037d2 <HAL_ADC_Start+0x106>
 80037c6:	4b26      	ldr	r3, [pc, #152]	@ (8003860 <HAL_ADC_Start+0x194>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a25      	ldr	r2, [pc, #148]	@ (800386c <HAL_ADC_Start+0x1a0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d136      	bne.n	800384a <HAL_ADC_Start+0x17e>
 80037dc:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_ADC_Start+0x194>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d130      	bne.n	800384a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d129      	bne.n	800384a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	e020      	b.n	800384a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a15      	ldr	r2, [pc, #84]	@ (8003864 <HAL_ADC_Start+0x198>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d11b      	bne.n	800384a <HAL_ADC_Start+0x17e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d114      	bne.n	800384a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	e00b      	b.n	800384a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f043 0210 	orr.w	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000018 	.word	0x20000018
 800385c:	431bde83 	.word	0x431bde83
 8003860:	40012300 	.word	0x40012300
 8003864:	40012000 	.word	0x40012000
 8003868:	40012100 	.word	0x40012100
 800386c:	40012200 	.word	0x40012200

08003870 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_ADC_Stop+0x16>
 8003882:	2302      	movs	r3, #2
 8003884:	e021      	b.n	80038ca <HAL_ADC_Stop+0x5a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f2:	d113      	bne.n	800391c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003902:	d10b      	bne.n	800391c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e063      	b.n	80039e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800391c:	f7ff fe62 	bl	80035e4 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003922:	e021      	b.n	8003968 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d01d      	beq.n	8003968 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_ADC_PollForConversion+0x6c>
 8003932:	f7ff fe57 	bl	80035e4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d212      	bcs.n	8003968 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b02      	cmp	r3, #2
 800394e:	d00b      	beq.n	8003968 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e03d      	b.n	80039e4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d1d6      	bne.n	8003924 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0212 	mvn.w	r2, #18
 800397e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d123      	bne.n	80039e2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11f      	bne.n	80039e2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d111      	bne.n	80039e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d049      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0xca>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d046      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d12b      	bne.n	8003aa6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d127      	bne.n	8003aa6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d006      	beq.n	8003a72 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d119      	bne.n	8003aa6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0220 	bic.w	r2, r2, #32
 8003a80:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8bd 	bl	8003c26 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0212 	mvn.w	r2, #18
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d057      	beq.n	8003b7c <HAL_ADC_IRQHandler+0x190>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d054      	beq.n	8003b7c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d105      	bne.n	8003aea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d139      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d12b      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d124      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11d      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d119      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fa97 	bl	80040a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 020c 	mvn.w	r2, #12
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d017      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x1d6>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d014      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10d      	bne.n	8003bc2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f841 	bl	8003c3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0201 	mvn.w	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bd0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x218>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f043 0202 	orr.w	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0220 	mvn.w	r2, #32
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f82a 	bl	8003c4e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0220 	mvn.w	r2, #32
 8003c02:	601a      	str	r2, [r3, #0]
  }
}
 8003c04:	bf00      	nop
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x1c>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e105      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x228>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b09      	cmp	r3, #9
 8003c8e:	d925      	bls.n	8003cdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68d9      	ldr	r1, [r3, #12]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3b1e      	subs	r3, #30
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43da      	mvns	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68d9      	ldr	r1, [r3, #12]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4603      	mov	r3, r0
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4403      	add	r3, r0
 8003cce:	3b1e      	subs	r3, #30
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	e022      	b.n	8003d22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6919      	ldr	r1, [r3, #16]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6919      	ldr	r1, [r3, #16]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4618      	mov	r0, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4403      	add	r3, r0
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d824      	bhi.n	8003d74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	3b05      	subs	r3, #5
 8003d3c:	221f      	movs	r2, #31
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	400a      	ands	r2, r1
 8003d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4618      	mov	r0, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	3b05      	subs	r3, #5
 8003d66:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d72:	e04c      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	d824      	bhi.n	8003dc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3b23      	subs	r3, #35	@ 0x23
 8003d8e:	221f      	movs	r2, #31
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43da      	mvns	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	4618      	mov	r0, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	3b23      	subs	r3, #35	@ 0x23
 8003db8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dc4:	e023      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3b41      	subs	r3, #65	@ 0x41
 8003dd8:	221f      	movs	r2, #31
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	400a      	ands	r2, r1
 8003de6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4618      	mov	r0, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b41      	subs	r3, #65	@ 0x41
 8003e02:	fa00 f203 	lsl.w	r2, r0, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e0e:	4b22      	ldr	r3, [pc, #136]	@ (8003e98 <HAL_ADC_ConfigChannel+0x234>)
 8003e10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a21      	ldr	r2, [pc, #132]	@ (8003e9c <HAL_ADC_ConfigChannel+0x238>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d109      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x1cc>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b12      	cmp	r3, #18
 8003e22:	d105      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	@ (8003e9c <HAL_ADC_ConfigChannel+0x238>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d123      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x21e>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d003      	beq.n	8003e4a <HAL_ADC_ConfigChannel+0x1e6>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b11      	cmp	r3, #17
 8003e48:	d11b      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d111      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x23c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a10      	ldr	r2, [pc, #64]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x240>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	0c9a      	lsrs	r2, r3, #18
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e74:	e002      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f9      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40012300 	.word	0x40012300
 8003e9c:	40012000 	.word	0x40012000
 8003ea0:	20000018 	.word	0x20000018
 8003ea4:	431bde83 	.word	0x431bde83

08003ea8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb0:	4b79      	ldr	r3, [pc, #484]	@ (8004098 <ADC_Init+0x1f0>)
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	021a      	lsls	r2, r3, #8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6899      	ldr	r1, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	4a58      	ldr	r2, [pc, #352]	@ (800409c <ADC_Init+0x1f4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d022      	beq.n	8003f86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6899      	ldr	r1, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	e00f      	b.n	8003fa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0202 	bic.w	r2, r2, #2
 8003fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7e1b      	ldrb	r3, [r3, #24]
 8003fc0:	005a      	lsls	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01b      	beq.n	800400c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ff2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	3b01      	subs	r3, #1
 8004000:	035a      	lsls	r2, r3, #13
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e007      	b.n	800401c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800401a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800402a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	3b01      	subs	r3, #1
 8004038:	051a      	lsls	r2, r3, #20
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800405e:	025a      	lsls	r2, r3, #9
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	029a      	lsls	r2, r3, #10
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40012300 	.word	0x40012300
 800409c:	0f000001 	.word	0x0f000001

080040a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c4:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e6:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	60d3      	str	r3, [r2, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004100:	4b04      	ldr	r3, [pc, #16]	@ (8004114 <__NVIC_GetPriorityGrouping+0x18>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0307 	and.w	r3, r3, #7
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db0b      	blt.n	8004142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4907      	ldr	r1, [pc, #28]	@ (8004150 <__NVIC_EnableIRQ+0x38>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e100 	.word	0xe000e100

08004154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	2b00      	cmp	r3, #0
 8004166:	db0a      	blt.n	800417e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	490c      	ldr	r1, [pc, #48]	@ (80041a0 <__NVIC_SetPriority+0x4c>)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	0112      	lsls	r2, r2, #4
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	440b      	add	r3, r1
 8004178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800417c:	e00a      	b.n	8004194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4908      	ldr	r1, [pc, #32]	@ (80041a4 <__NVIC_SetPriority+0x50>)
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3b04      	subs	r3, #4
 800418c:	0112      	lsls	r2, r2, #4
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	440b      	add	r3, r1
 8004192:	761a      	strb	r2, [r3, #24]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	@ 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f1c3 0307 	rsb	r3, r3, #7
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf28      	it	cs
 80041c6:	2304      	movcs	r3, #4
 80041c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d902      	bls.n	80041d8 <NVIC_EncodePriority+0x30>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3b03      	subs	r3, #3
 80041d6:	e000      	b.n	80041da <NVIC_EncodePriority+0x32>
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	401a      	ands	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f0:	f04f 31ff 	mov.w	r1, #4294967295
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004200:	4313      	orrs	r3, r2
         );
}
 8004202:	4618      	mov	r0, r3
 8004204:	3724      	adds	r7, #36	@ 0x24
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004220:	d301      	bcc.n	8004226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004222:	2301      	movs	r3, #1
 8004224:	e00f      	b.n	8004246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <SysTick_Config+0x40>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800422e:	210f      	movs	r1, #15
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	f7ff ff8e 	bl	8004154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <SysTick_Config+0x40>)
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423e:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <SysTick_Config+0x40>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010

08004254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff29 	bl	80040b4 <__NVIC_SetPriorityGrouping>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	4603      	mov	r3, r0
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800427c:	f7ff ff3e 	bl	80040fc <__NVIC_GetPriorityGrouping>
 8004280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	6978      	ldr	r0, [r7, #20]
 8004288:	f7ff ff8e 	bl	80041a8 <NVIC_EncodePriority>
 800428c:	4602      	mov	r2, r0
 800428e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff5d 	bl	8004154 <__NVIC_SetPriority>
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff31 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ffa2 	bl	8004210 <SysTick_Config>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042e4:	f7ff f97e 	bl	80035e4 <HAL_GetTick>
 80042e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d008      	beq.n	8004308 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e052      	b.n	80043ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0216 	bic.w	r2, r2, #22
 8004316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004326:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <HAL_DMA_Abort+0x62>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0208 	bic.w	r2, r2, #8
 8004346:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004358:	e013      	b.n	8004382 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800435a:	f7ff f943 	bl	80035e4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b05      	cmp	r3, #5
 8004366:	d90c      	bls.n	8004382 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e015      	b.n	80043ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e4      	bne.n	800435a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	223f      	movs	r2, #63	@ 0x3f
 8004396:	409a      	lsls	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2280      	movs	r2, #128	@ 0x80
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e00c      	b.n	80043ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2205      	movs	r2, #5
 80043d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	@ 0x24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e16b      	b.n	80046f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004418:	2201      	movs	r2, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	429a      	cmp	r2, r3
 8004432:	f040 815a 	bne.w	80046ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d005      	beq.n	800444e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800444a:	2b02      	cmp	r3, #2
 800444c:	d130      	bne.n	80044b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	2203      	movs	r2, #3
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004484:	2201      	movs	r2, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 0201 	and.w	r2, r3, #1
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d017      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d123      	bne.n	8004540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	08da      	lsrs	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3208      	adds	r2, #8
 8004500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	220f      	movs	r2, #15
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	08da      	lsrs	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3208      	adds	r2, #8
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0203 	and.w	r2, r3, #3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80b4 	beq.w	80046ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	4b60      	ldr	r3, [pc, #384]	@ (8004708 <HAL_GPIO_Init+0x30c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	4a5f      	ldr	r2, [pc, #380]	@ (8004708 <HAL_GPIO_Init+0x30c>)
 800458c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004590:	6453      	str	r3, [r2, #68]	@ 0x44
 8004592:	4b5d      	ldr	r3, [pc, #372]	@ (8004708 <HAL_GPIO_Init+0x30c>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800459e:	4a5b      	ldr	r2, [pc, #364]	@ (800470c <HAL_GPIO_Init+0x310>)
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3302      	adds	r3, #2
 80045a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	220f      	movs	r2, #15
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a52      	ldr	r2, [pc, #328]	@ (8004710 <HAL_GPIO_Init+0x314>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02b      	beq.n	8004622 <HAL_GPIO_Init+0x226>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a51      	ldr	r2, [pc, #324]	@ (8004714 <HAL_GPIO_Init+0x318>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d025      	beq.n	800461e <HAL_GPIO_Init+0x222>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a50      	ldr	r2, [pc, #320]	@ (8004718 <HAL_GPIO_Init+0x31c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01f      	beq.n	800461a <HAL_GPIO_Init+0x21e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4f      	ldr	r2, [pc, #316]	@ (800471c <HAL_GPIO_Init+0x320>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d019      	beq.n	8004616 <HAL_GPIO_Init+0x21a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004720 <HAL_GPIO_Init+0x324>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_GPIO_Init+0x216>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004724 <HAL_GPIO_Init+0x328>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00d      	beq.n	800460e <HAL_GPIO_Init+0x212>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004728 <HAL_GPIO_Init+0x32c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <HAL_GPIO_Init+0x20e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4b      	ldr	r2, [pc, #300]	@ (800472c <HAL_GPIO_Init+0x330>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_GPIO_Init+0x20a>
 8004602:	2307      	movs	r3, #7
 8004604:	e00e      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004606:	2308      	movs	r3, #8
 8004608:	e00c      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800460a:	2306      	movs	r3, #6
 800460c:	e00a      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800460e:	2305      	movs	r3, #5
 8004610:	e008      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004612:	2304      	movs	r3, #4
 8004614:	e006      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004616:	2303      	movs	r3, #3
 8004618:	e004      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800461a:	2302      	movs	r3, #2
 800461c:	e002      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004622:	2300      	movs	r3, #0
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f002 0203 	and.w	r2, r2, #3
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	4093      	lsls	r3, r2
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004634:	4935      	ldr	r1, [pc, #212]	@ (800470c <HAL_GPIO_Init+0x310>)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	3302      	adds	r3, #2
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004642:	4b3b      	ldr	r3, [pc, #236]	@ (8004730 <HAL_GPIO_Init+0x334>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004666:	4a32      	ldr	r2, [pc, #200]	@ (8004730 <HAL_GPIO_Init+0x334>)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800466c:	4b30      	ldr	r3, [pc, #192]	@ (8004730 <HAL_GPIO_Init+0x334>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004690:	4a27      	ldr	r2, [pc, #156]	@ (8004730 <HAL_GPIO_Init+0x334>)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004696:	4b26      	ldr	r3, [pc, #152]	@ (8004730 <HAL_GPIO_Init+0x334>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004730 <HAL_GPIO_Init+0x334>)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <HAL_GPIO_Init+0x334>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046e4:	4a12      	ldr	r2, [pc, #72]	@ (8004730 <HAL_GPIO_Init+0x334>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	f67f ae90 	bls.w	8004418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	@ 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800
 800470c:	40013800 	.word	0x40013800
 8004710:	40020000 	.word	0x40020000
 8004714:	40020400 	.word	0x40020400
 8004718:	40020800 	.word	0x40020800
 800471c:	40020c00 	.word	0x40020c00
 8004720:	40021000 	.word	0x40021000
 8004724:	40021400 	.word	0x40021400
 8004728:	40021800 	.word	0x40021800
 800472c:	40021c00 	.word	0x40021c00
 8004730:	40013c00 	.word	0x40013c00

08004734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
 8004740:	4613      	mov	r3, r2
 8004742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004744:	787b      	ldrb	r3, [r7, #1]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800474a:	887a      	ldrh	r2, [r7, #2]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004750:	e003      	b.n	800475a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	041a      	lsls	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	619a      	str	r2, [r3, #24]
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004778:	887a      	ldrh	r2, [r7, #2]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	041a      	lsls	r2, r3, #16
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43d9      	mvns	r1, r3
 8004784:	887b      	ldrh	r3, [r7, #2]
 8004786:	400b      	ands	r3, r1
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	619a      	str	r2, [r3, #24]
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047a6:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b2:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd fdea 	bl	8002394 <HAL_GPIO_EXTI_Callback>
  }
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40013c00 	.word	0x40013c00

080047cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e12b      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe fb74 	bl	8002ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	@ 0x24
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800481e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800482e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004830:	f002 fb2c 	bl	8006e8c <HAL_RCC_GetPCLK1Freq>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a81      	ldr	r2, [pc, #516]	@ (8004a40 <HAL_I2C_Init+0x274>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d807      	bhi.n	8004850 <HAL_I2C_Init+0x84>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a80      	ldr	r2, [pc, #512]	@ (8004a44 <HAL_I2C_Init+0x278>)
 8004844:	4293      	cmp	r3, r2
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e006      	b.n	800485e <HAL_I2C_Init+0x92>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a7d      	ldr	r2, [pc, #500]	@ (8004a48 <HAL_I2C_Init+0x27c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0e7      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a78      	ldr	r2, [pc, #480]	@ (8004a4c <HAL_I2C_Init+0x280>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0c9b      	lsrs	r3, r3, #18
 8004870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a6a      	ldr	r2, [pc, #424]	@ (8004a40 <HAL_I2C_Init+0x274>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d802      	bhi.n	80048a0 <HAL_I2C_Init+0xd4>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	e009      	b.n	80048b4 <HAL_I2C_Init+0xe8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	4a69      	ldr	r2, [pc, #420]	@ (8004a50 <HAL_I2C_Init+0x284>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	3301      	adds	r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	495c      	ldr	r1, [pc, #368]	@ (8004a40 <HAL_I2C_Init+0x274>)
 80048d0:	428b      	cmp	r3, r1
 80048d2:	d819      	bhi.n	8004908 <HAL_I2C_Init+0x13c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e59      	subs	r1, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048e8:	400b      	ands	r3, r1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_I2C_Init+0x138>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e59      	subs	r1, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004902:	e051      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004904:	2304      	movs	r3, #4
 8004906:	e04f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d111      	bne.n	8004934 <HAL_I2C_Init+0x168>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e012      	b.n	800495a <HAL_I2C_Init+0x18e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e58      	subs	r0, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	0099      	lsls	r1, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x196>
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10e      	bne.n	8004988 <HAL_I2C_Init+0x1bc>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e58      	subs	r0, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	440b      	add	r3, r1
 8004978:	fbb0 f3f3 	udiv	r3, r0, r3
 800497c:	3301      	adds	r3, #1
 800497e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004986:	e00f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e58      	subs	r0, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	0099      	lsls	r1, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	fbb0 f3f3 	udiv	r3, r0, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	6809      	ldr	r1, [r1, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6911      	ldr	r1, [r2, #16]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	000186a0 	.word	0x000186a0
 8004a44:	001e847f 	.word	0x001e847f
 8004a48:	003d08ff 	.word	0x003d08ff
 8004a4c:	431bde83 	.word	0x431bde83
 8004a50:	10624dd3 	.word	0x10624dd3

08004a54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	460b      	mov	r3, r1
 8004a62:	817b      	strh	r3, [r7, #10]
 8004a64:	4613      	mov	r3, r2
 8004a66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a68:	f7fe fdbc 	bl	80035e4 <HAL_GetTick>
 8004a6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	f040 80e0 	bne.w	8004c3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	2319      	movs	r3, #25
 8004a82:	2201      	movs	r2, #1
 8004a84:	4970      	ldr	r1, [pc, #448]	@ (8004c48 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f964 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0d3      	b.n	8004c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_I2C_Master_Transmit+0x50>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0cc      	b.n	8004c3e <HAL_I2C_Master_Transmit+0x1ea>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d007      	beq.n	8004aca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ad8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2221      	movs	r2, #33	@ 0x21
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	893a      	ldrh	r2, [r7, #8]
 8004afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a50      	ldr	r2, [pc, #320]	@ (8004c4c <HAL_I2C_Master_Transmit+0x1f8>)
 8004b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b0c:	8979      	ldrh	r1, [r7, #10]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f89c 	bl	8004c50 <I2C_MasterRequestWrite>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e08d      	b.n	8004c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b38:	e066      	b.n	8004c08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	6a39      	ldr	r1, [r7, #32]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fa22 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d107      	bne.n	8004b62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e06b      	b.n	8004c3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	781a      	ldrb	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d11b      	bne.n	8004bdc <HAL_I2C_Master_Transmit+0x188>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d017      	beq.n	8004bdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	6a39      	ldr	r1, [r7, #32]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fa19 	bl	8005018 <I2C_WaitOnBTFFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d107      	bne.n	8004c04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e01a      	b.n	8004c3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d194      	bne.n	8004b3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	00100002 	.word	0x00100002
 8004c4c:	ffff0000 	.word	0xffff0000

08004c50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d006      	beq.n	8004c7a <I2C_MasterRequestWrite+0x2a>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d003      	beq.n	8004c7a <I2C_MasterRequestWrite+0x2a>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c78:	d108      	bne.n	8004c8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e00b      	b.n	8004ca4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	2b12      	cmp	r3, #18
 8004c92:	d107      	bne.n	8004ca4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f84f 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cca:	d103      	bne.n	8004cd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e035      	b.n	8004d44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ce0:	d108      	bne.n	8004cf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ce2:	897b      	ldrh	r3, [r7, #10]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cf0:	611a      	str	r2, [r3, #16]
 8004cf2:	e01b      	b.n	8004d2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cf4:	897b      	ldrh	r3, [r7, #10]
 8004cf6:	11db      	asrs	r3, r3, #7
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f003 0306 	and.w	r3, r3, #6
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f063 030f 	orn	r3, r3, #15
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	490e      	ldr	r1, [pc, #56]	@ (8004d4c <I2C_MasterRequestWrite+0xfc>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f898 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e010      	b.n	8004d44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d22:	897b      	ldrh	r3, [r7, #10]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4907      	ldr	r1, [pc, #28]	@ (8004d50 <I2C_MasterRequestWrite+0x100>)
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f888 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	00010008 	.word	0x00010008
 8004d50:	00010002 	.word	0x00010002

08004d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d64:	e048      	b.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d044      	beq.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fe fc39 	bl	80035e4 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d139      	bne.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	43da      	mvns	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	e00c      	b.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d116      	bne.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e023      	b.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d10d      	bne.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	e00c      	b.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	43da      	mvns	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d093      	beq.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e56:	e071      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e66:	d123      	bne.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e067      	b.n	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d041      	beq.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7fe fb94 	bl	80035e4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d136      	bne.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d10c      	bne.n	8004ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e00b      	b.n	8004f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e021      	b.n	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10c      	bne.n	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e00b      	b.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f af6d 	bne.w	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f94:	e034      	b.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f886 	bl	80050a8 <I2C_IsAcknowledgeFailed>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e034      	b.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d028      	beq.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fe fb19 	bl	80035e4 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	d016      	beq.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e007      	b.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b80      	cmp	r3, #128	@ 0x80
 800500c:	d1c3      	bne.n	8004f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005024:	e034      	b.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f83e 	bl	80050a8 <I2C_IsAcknowledgeFailed>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e034      	b.n	80050a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d028      	beq.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fe fad1 	bl	80035e4 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11d      	bne.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b04      	cmp	r3, #4
 8005060:	d016      	beq.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e007      	b.n	80050a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d1c3      	bne.n	8005026 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050be:	d11b      	bne.n	80050f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	f043 0204 	orr.w	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af02      	add	r7, sp, #8
 800510c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e101      	b.n	800531c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f007 fba6 	bl	800c884 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2203      	movs	r2, #3
 800513c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005146:	d102      	bne.n	800514e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f003 fff3 	bl	800913e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7c1a      	ldrb	r2, [r3, #16]
 8005160:	f88d 2000 	strb.w	r2, [sp]
 8005164:	3304      	adds	r3, #4
 8005166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005168:	f003 fed2 	bl	8008f10 <USB_CoreInit>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0ce      	b.n	800531c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f003 ffeb 	bl	8009160 <USB_SetCurrentMode>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0bf      	b.n	800531c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e04a      	b.n	8005238 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051a2:	7bfa      	ldrb	r2, [r7, #15]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3315      	adds	r3, #21
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051b6:	7bfa      	ldrb	r2, [r7, #15]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	3314      	adds	r3, #20
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051ca:	7bfa      	ldrb	r2, [r7, #15]
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	b298      	uxth	r0, r3
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	332e      	adds	r3, #46	@ 0x2e
 80051de:	4602      	mov	r2, r0
 80051e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3318      	adds	r3, #24
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	331c      	adds	r3, #28
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3320      	adds	r3, #32
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	3324      	adds	r3, #36	@ 0x24
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	3301      	adds	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	791b      	ldrb	r3, [r3, #4]
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	429a      	cmp	r2, r3
 8005240:	d3af      	bcc.n	80051a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005242:	2300      	movs	r3, #0
 8005244:	73fb      	strb	r3, [r7, #15]
 8005246:	e044      	b.n	80052d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800528a:	7bfa      	ldrb	r2, [r7, #15]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	3301      	adds	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	791b      	ldrb	r3, [r3, #4]
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3b5      	bcc.n	8005248 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7c1a      	ldrb	r2, [r3, #16]
 80052e4:	f88d 2000 	strb.w	r2, [sp]
 80052e8:	3304      	adds	r3, #4
 80052ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052ec:	f003 ff84 	bl	80091f8 <USB_DevInit>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e00c      	b.n	800531c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f004 ffce 	bl	800a2b6 <USB_DevDisconnect>

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_PCD_Start+0x1c>
 800533c:	2302      	movs	r3, #2
 800533e:	e022      	b.n	8005386 <HAL_PCD_Start+0x62>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005358:	2b01      	cmp	r3, #1
 800535a:	d105      	bne.n	8005368 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f003 fed5 	bl	800911c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f004 ff7c 	bl	800a274 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800538e:	b590      	push	{r4, r7, lr}
 8005390:	b08d      	sub	sp, #52	@ 0x34
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f005 f83a 	bl	800a41e <USB_GetMode>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f040 848c 	bne.w	8005cca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 ff9e 	bl	800a2f8 <USB_ReadInterrupts>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8482 	beq.w	8005cc8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f004 ff8b 	bl	800a2f8 <USB_ReadInterrupts>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d107      	bne.n	80053fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f002 0202 	and.w	r2, r2, #2
 80053fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f004 ff79 	bl	800a2f8 <USB_ReadInterrupts>
 8005406:	4603      	mov	r3, r0
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b10      	cmp	r3, #16
 800540e:	d161      	bne.n	80054d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0210 	bic.w	r2, r2, #16
 800541e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f003 020f 	and.w	r2, r3, #15
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	3304      	adds	r3, #4
 800543e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	0c5b      	lsrs	r3, r3, #17
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	2b02      	cmp	r3, #2
 800544a:	d124      	bne.n	8005496 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d035      	beq.n	80054c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	6a38      	ldr	r0, [r7, #32]
 800546c:	f004 fdb0 	bl	8009fd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800547c:	441a      	add	r2, r3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800548e:	441a      	add	r2, r3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	615a      	str	r2, [r3, #20]
 8005494:	e016      	b.n	80054c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	0c5b      	lsrs	r3, r3, #17
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	2b06      	cmp	r3, #6
 80054a0:	d110      	bne.n	80054c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054a8:	2208      	movs	r2, #8
 80054aa:	4619      	mov	r1, r3
 80054ac:	6a38      	ldr	r0, [r7, #32]
 80054ae:	f004 fd8f 	bl	8009fd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054be:	441a      	add	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0210 	orr.w	r2, r2, #16
 80054d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f004 ff0d 	bl	800a2f8 <USB_ReadInterrupts>
 80054de:	4603      	mov	r3, r0
 80054e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054e8:	f040 80a7 	bne.w	800563a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f004 ff12 	bl	800a31e <USB_ReadDevAllOutEpInterrupt>
 80054fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80054fc:	e099      	b.n	8005632 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80054fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 808e 	beq.w	8005626 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f004 ff36 	bl	800a386 <USB_ReadDevOutEPInterrupt>
 800551a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00c      	beq.n	8005540 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	2301      	movs	r3, #1
 8005536:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005538:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fea4 	bl	8006288 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00c      	beq.n	8005564 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005556:	461a      	mov	r2, r3
 8005558:	2308      	movs	r3, #8
 800555a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800555c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 ff7a 	bl	8006458 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	d008      	beq.n	8005580 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	2310      	movs	r3, #16
 800557e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d030      	beq.n	80055ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005592:	2b80      	cmp	r3, #128	@ 0x80
 8005594:	d109      	bne.n	80055aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	78db      	ldrb	r3, [r3, #3]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d108      	bne.n	80055da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f007 fa5b 	bl	800ca90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e6:	461a      	mov	r2, r3
 80055e8:	2302      	movs	r3, #2
 80055ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005602:	461a      	mov	r2, r3
 8005604:	2320      	movs	r3, #32
 8005606:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561e:	461a      	mov	r2, r3
 8005620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005624:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	3301      	adds	r3, #1
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	f47f af62 	bne.w	80054fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f004 fe5a 	bl	800a2f8 <USB_ReadInterrupts>
 8005644:	4603      	mov	r3, r0
 8005646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800564a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800564e:	f040 80db 	bne.w	8005808 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f004 fe7b 	bl	800a352 <USB_ReadDevAllInEpInterrupt>
 800565c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005662:	e0cd      	b.n	8005800 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80c2 	beq.w	80057f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f004 fea1 	bl	800a3c2 <USB_ReadDevInEPInterrupt>
 8005680:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d057      	beq.n	800573c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	2201      	movs	r2, #1
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69f9      	ldr	r1, [r7, #28]
 80056a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056ac:	4013      	ands	r3, r2
 80056ae:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	2301      	movs	r3, #1
 80056c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	799b      	ldrb	r3, [r3, #6]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d132      	bne.n	8005730 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	3320      	adds	r3, #32
 80056da:	6819      	ldr	r1, [r3, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4403      	add	r3, r0
 80056ea:	331c      	adds	r3, #28
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4419      	add	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4403      	add	r3, r0
 80056fe:	3320      	adds	r3, #32
 8005700:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d113      	bne.n	8005730 <HAL_PCD_IRQHandler+0x3a2>
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3324      	adds	r3, #36	@ 0x24
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d108      	bne.n	8005730 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005728:	461a      	mov	r2, r3
 800572a:	2101      	movs	r1, #1
 800572c:	f004 fea8 	bl	800a480 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	b2db      	uxtb	r3, r3
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f007 f925 	bl	800c986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005752:	461a      	mov	r2, r3
 8005754:	2308      	movs	r3, #8
 8005756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576e:	461a      	mov	r2, r3
 8005770:	2310      	movs	r3, #16
 8005772:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578a:	461a      	mov	r2, r3
 800578c:	2340      	movs	r3, #64	@ 0x40
 800578e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d023      	beq.n	80057e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800579a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800579c:	6a38      	ldr	r0, [r7, #32]
 800579e:	f003 fe8f 	bl	80094c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	3310      	adds	r3, #16
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	3304      	adds	r3, #4
 80057b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	78db      	ldrb	r3, [r3, #3]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d108      	bne.n	80057d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2200      	movs	r2, #0
 80057c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f007 f972 	bl	800cab4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057dc:	461a      	mov	r2, r3
 80057de:	2302      	movs	r3, #2
 80057e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80057ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fcbd 	bl	800616e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	3301      	adds	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	f47f af2e 	bne.w	8005664 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f004 fd73 	bl	800a2f8 <USB_ReadInterrupts>
 8005812:	4603      	mov	r3, r0
 8005814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800581c:	d122      	bne.n	8005864 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005838:	2b01      	cmp	r3, #1
 800583a:	d108      	bne.n	800584e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005844:	2100      	movs	r1, #0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fea4 	bl	8006594 <HAL_PCDEx_LPM_Callback>
 800584c:	e002      	b.n	8005854 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f007 f910 	bl	800ca74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f004 fd45 	bl	800a2f8 <USB_ReadInterrupts>
 800586e:	4603      	mov	r3, r0
 8005870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005878:	d112      	bne.n	80058a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f007 f8cc 	bl	800ca28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695a      	ldr	r2, [r3, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800589e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f004 fd27 	bl	800a2f8 <USB_ReadInterrupts>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b4:	f040 80b7 	bne.w	8005a26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2110      	movs	r1, #16
 80058d2:	4618      	mov	r0, r3
 80058d4:	f003 fdf4 	bl	80094c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d8:	2300      	movs	r3, #0
 80058da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058dc:	e046      	b.n	800596c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80058de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ea:	461a      	mov	r2, r3
 80058ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800590c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005910:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591e:	461a      	mov	r2, r3
 8005920:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005924:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005940:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005944:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005960:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005964:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005968:	3301      	adds	r3, #1
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	791b      	ldrb	r3, [r3, #4]
 8005970:	461a      	mov	r2, r3
 8005972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005974:	4293      	cmp	r3, r2
 8005976:	d3b2      	bcc.n	80058de <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005986:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800598a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7bdb      	ldrb	r3, [r3, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d016      	beq.n	80059c2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a4:	f043 030b 	orr.w	r3, r3, #11
 80059a8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059ba:	f043 030b 	orr.w	r3, r3, #11
 80059be:	6453      	str	r3, [r2, #68]	@ 0x44
 80059c0:	e015      	b.n	80059ee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80059d4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80059d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e8:	f043 030b 	orr.w	r3, r3, #11
 80059ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059fc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a10:	461a      	mov	r2, r3
 8005a12:	f004 fd35 	bl	800a480 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f004 fc64 	bl	800a2f8 <USB_ReadInterrupts>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a3a:	d123      	bne.n	8005a84 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f004 fcfa 	bl	800a43a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f003 fdb1 	bl	80095b2 <USB_GetDevSpeed>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681c      	ldr	r4, [r3, #0]
 8005a5c:	f001 fa0a 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8005a60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a66:	461a      	mov	r2, r3
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f003 fab5 	bl	8008fd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f006 ffb1 	bl	800c9d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f004 fc35 	bl	800a2f8 <USB_ReadInterrupts>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d10a      	bne.n	8005aae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f006 ff8e 	bl	800c9ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f002 0208 	and.w	r2, r2, #8
 8005aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f004 fc20 	bl	800a2f8 <USB_ReadInterrupts>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	2b80      	cmp	r3, #128	@ 0x80
 8005ac0:	d123      	bne.n	8005b0a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ace:	2301      	movs	r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ad2:	e014      	b.n	8005afe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad8:	4613      	mov	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb0a 	bl	800610c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	3301      	adds	r3, #1
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	791b      	ldrb	r3, [r3, #4]
 8005b02:	461a      	mov	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d3e4      	bcc.n	8005ad4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f004 fbf2 	bl	800a2f8 <USB_ReadInterrupts>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b1e:	d13c      	bne.n	8005b9a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b20:	2301      	movs	r3, #1
 8005b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b24:	e02b      	b.n	8005b7e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3318      	adds	r3, #24
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d115      	bne.n	8005b78 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da12      	bge.n	8005b78 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3317      	adds	r3, #23
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 faca 	bl	800610c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	791b      	ldrb	r3, [r3, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d3cd      	bcc.n	8005b26 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f004 fbaa 	bl	800a2f8 <USB_ReadInterrupts>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bae:	d156      	bne.n	8005c5e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb4:	e045      	b.n	8005c42 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d12e      	bne.n	8005c3c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005bde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	da2b      	bge.n	8005c3c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005bf0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d121      	bne.n	8005c3c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c38:	6053      	str	r3, [r2, #4]
            break;
 8005c3a:	e008      	b.n	8005c4e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	3301      	adds	r3, #1
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	791b      	ldrb	r3, [r3, #4]
 8005c46:	461a      	mov	r2, r3
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d3b3      	bcc.n	8005bb6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f004 fb48 	bl	800a2f8 <USB_ReadInterrupts>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c72:	d10a      	bne.n	8005c8a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f006 ff2f 	bl	800cad8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f004 fb32 	bl	800a2f8 <USB_ReadInterrupts>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d115      	bne.n	8005cca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f006 ff1f 	bl	800caf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	e000      	b.n	8005cca <HAL_PCD_IRQHandler+0x93c>
      return;
 8005cc8:	bf00      	nop
    }
  }
}
 8005cca:	3734      	adds	r7, #52	@ 0x34
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd90      	pop	{r4, r7, pc}

08005cd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_PCD_SetAddress+0x1a>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e012      	b.n	8005d10 <HAL_PCD_SetAddress+0x40>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	78fa      	ldrb	r2, [r7, #3]
 8005cf6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f004 fa91 	bl	800a228 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	70fb      	strb	r3, [r7, #3]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	803b      	strh	r3, [r7, #0]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da0f      	bge.n	8005d5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	4613      	mov	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	3310      	adds	r3, #16
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	3304      	adds	r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	705a      	strb	r2, [r3, #1]
 8005d5c:	e00f      	b.n	8005d7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	4613      	mov	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	3304      	adds	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005d8a:	883b      	ldrh	r3, [r7, #0]
 8005d8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	78ba      	ldrb	r2, [r7, #2]
 8005d98:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005dac:	78bb      	ldrb	r3, [r7, #2]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d102      	bne.n	8005db8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_PCD_EP_Open+0xae>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e00e      	b.n	8005de4 <HAL_PCD_EP_Open+0xcc>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f003 fc11 	bl	80095fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005de2:	7afb      	ldrb	r3, [r7, #11]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	da0f      	bge.n	8005e20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	3310      	adds	r3, #16
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	3304      	adds	r3, #4
 8005e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	705a      	strb	r2, [r3, #1]
 8005e1e:	e00f      	b.n	8005e40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	f003 020f 	and.w	r2, r3, #15
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4413      	add	r3, r2
 8005e36:	3304      	adds	r3, #4
 8005e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_PCD_EP_Close+0x6e>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e00e      	b.n	8005e78 <HAL_PCD_EP_Close+0x8c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f003 fc4f 	bl	800970c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	799b      	ldrb	r3, [r3, #6]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d102      	bne.n	8005edc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	799b      	ldrb	r3, [r3, #6]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6979      	ldr	r1, [r7, #20]
 8005ee8:	f003 fcec 	bl	80098c4 <USB_EPStartXfer>

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005f18:	681b      	ldr	r3, [r3, #0]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	460b      	mov	r3, r1
 8005f34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	f003 020f 	and.w	r2, r3, #15
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	3310      	adds	r3, #16
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2201      	movs	r2, #1
 8005f64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	799b      	ldrb	r3, [r3, #6]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d102      	bne.n	8005f80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	799b      	ldrb	r3, [r3, #6]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	f003 fc9a 	bl	80098c4 <USB_EPStartXfer>

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	7912      	ldrb	r2, [r2, #4]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e04f      	b.n	8006058 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	da0f      	bge.n	8005fe0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	f003 020f 	and.w	r2, r3, #15
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	3310      	adds	r3, #16
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	705a      	strb	r2, [r3, #1]
 8005fde:	e00d      	b.n	8005ffc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	b2da      	uxtb	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_PCD_EP_SetStall+0x82>
 8006018:	2302      	movs	r3, #2
 800601a:	e01d      	b.n	8006058 <HAL_PCD_EP_SetStall+0xbe>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68f9      	ldr	r1, [r7, #12]
 800602a:	4618      	mov	r0, r3
 800602c:	f004 f828 	bl	800a080 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7999      	ldrb	r1, [r3, #6]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006048:	461a      	mov	r2, r3
 800604a:	f004 fa19 	bl	800a480 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	7912      	ldrb	r2, [r2, #4]
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e042      	b.n	8006104 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800607e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006082:	2b00      	cmp	r3, #0
 8006084:	da0f      	bge.n	80060a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	3310      	adds	r3, #16
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	3304      	adds	r3, #4
 800609c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	705a      	strb	r2, [r3, #1]
 80060a4:	e00f      	b.n	80060c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	4613      	mov	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	4413      	add	r3, r2
 80060bc:	3304      	adds	r3, #4
 80060be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_PCD_EP_ClrStall+0x86>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e00e      	b.n	8006104 <HAL_PCD_EP_ClrStall+0xa4>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f004 f831 	bl	800a15c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	da0c      	bge.n	800613a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	f003 020f 	and.w	r2, r3, #15
 8006126:	4613      	mov	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	3310      	adds	r3, #16
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e00c      	b.n	8006154 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	f003 020f 	and.w	r2, r3, #15
 8006140:	4613      	mov	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4413      	add	r3, r2
 8006150:	3304      	adds	r3, #4
 8006152:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68f9      	ldr	r1, [r7, #12]
 800615a:	4618      	mov	r0, r3
 800615c:	f003 fe50 	bl	8009e00 <USB_EPStopXfer>
 8006160:	4603      	mov	r3, r0
 8006162:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006164:	7afb      	ldrb	r3, [r7, #11]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b08a      	sub	sp, #40	@ 0x28
 8006172:	af02      	add	r7, sp, #8
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	3310      	adds	r3, #16
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4413      	add	r3, r2
 8006192:	3304      	adds	r3, #4
 8006194:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d901      	bls.n	80061a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e06b      	b.n	800627e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d902      	bls.n	80061c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3303      	adds	r3, #3
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061ca:	e02a      	b.n	8006222 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d902      	bls.n	80061e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	3303      	adds	r3, #3
 80061ec:	089b      	lsrs	r3, r3, #2
 80061ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	68d9      	ldr	r1, [r3, #12]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	4603      	mov	r3, r0
 8006204:	6978      	ldr	r0, [r7, #20]
 8006206:	f003 fea5 	bl	8009f54 <USB_WritePacket>

    ep->xfer_buff  += len;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	441a      	add	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	441a      	add	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	d809      	bhi.n	800624c <PCD_WriteEmptyTxFifo+0xde>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	695a      	ldr	r2, [r3, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006240:	429a      	cmp	r2, r3
 8006242:	d203      	bcs.n	800624c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1bf      	bne.n	80061cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	429a      	cmp	r2, r3
 8006256:	d811      	bhi.n	800627c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	2201      	movs	r2, #1
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800626c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	43db      	mvns	r3, r3
 8006272:	6939      	ldr	r1, [r7, #16]
 8006274:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006278:	4013      	ands	r3, r2
 800627a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	333c      	adds	r3, #60	@ 0x3c
 80062a0:	3304      	adds	r3, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	799b      	ldrb	r3, [r3, #6]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d17b      	bne.n	80063b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d015      	beq.n	80062f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4a61      	ldr	r2, [pc, #388]	@ (8006450 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	f240 80b9 	bls.w	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80b3 	beq.w	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062f0:	6093      	str	r3, [r2, #8]
 80062f2:	e0a7      	b.n	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630a:	461a      	mov	r2, r3
 800630c:	2320      	movs	r3, #32
 800630e:	6093      	str	r3, [r2, #8]
 8006310:	e098      	b.n	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	f040 8093 	bne.w	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4a4b      	ldr	r2, [pc, #300]	@ (8006450 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d90f      	bls.n	8006346 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006342:	6093      	str	r3, [r2, #8]
 8006344:	e07e      	b.n	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	3304      	adds	r3, #4
 800635a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1a      	ldr	r2, [r3, #32]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	0159      	lsls	r1, r3, #5
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	440b      	add	r3, r1
 8006368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006372:	1ad2      	subs	r2, r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d114      	bne.n	80063a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006390:	461a      	mov	r2, r3
 8006392:	2101      	movs	r1, #1
 8006394:	f004 f874 	bl	800a480 <USB_EP0_OutStart>
 8006398:	e006      	b.n	80063a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	441a      	add	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f006 face 	bl	800c950 <HAL_PCD_DataOutStageCallback>
 80063b4:	e046      	b.n	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4a26      	ldr	r2, [pc, #152]	@ (8006454 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d124      	bne.n	8006408 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	461a      	mov	r2, r3
 80063d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063da:	6093      	str	r3, [r2, #8]
 80063dc:	e032      	b.n	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f4:	461a      	mov	r2, r3
 80063f6:	2320      	movs	r3, #32
 80063f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f006 faa5 	bl	800c950 <HAL_PCD_DataOutStageCallback>
 8006406:	e01d      	b.n	8006444 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d114      	bne.n	8006438 <PCD_EP_OutXfrComplete_int+0x1b0>
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d108      	bne.n	8006438 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006430:	461a      	mov	r2, r3
 8006432:	2100      	movs	r1, #0
 8006434:	f004 f824 	bl	800a480 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f006 fa86 	bl	800c950 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	4f54300a 	.word	0x4f54300a
 8006454:	4f54310a 	.word	0x4f54310a

08006458 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	333c      	adds	r3, #60	@ 0x3c
 8006470:	3304      	adds	r3, #4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d90e      	bls.n	80064ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a4:	461a      	mov	r2, r3
 80064a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f006 fa3d 	bl	800c92c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a0a      	ldr	r2, [pc, #40]	@ (80064e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d90c      	bls.n	80064d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	799b      	ldrb	r3, [r3, #6]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d108      	bne.n	80064d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064cc:	461a      	mov	r2, r3
 80064ce:	2101      	movs	r1, #1
 80064d0:	f003 ffd6 	bl	800a480 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	4f54300a 	.word	0x4f54300a

080064e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
 80064f0:	4613      	mov	r3, r2
 80064f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006502:	883b      	ldrh	r3, [r7, #0]
 8006504:	0419      	lsls	r1, r3, #16
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	430a      	orrs	r2, r1
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006510:	e028      	b.n	8006564 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4413      	add	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e00d      	b.n	8006542 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	3340      	adds	r3, #64	@ 0x40
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4413      	add	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	3301      	adds	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	3b01      	subs	r3, #1
 8006548:	429a      	cmp	r2, r3
 800654a:	d3ec      	bcc.n	8006526 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800654c:	883b      	ldrh	r3, [r7, #0]
 800654e:	0418      	lsls	r0, r3, #16
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	3b01      	subs	r3, #1
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4302      	orrs	r2, r0
 800655c:	3340      	adds	r3, #64	@ 0x40
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e267      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d075      	beq.n	80066b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065ca:	4b88      	ldr	r3, [pc, #544]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00c      	beq.n	80065f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065d6:	4b85      	ldr	r3, [pc, #532]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d112      	bne.n	8006608 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065e2:	4b82      	ldr	r3, [pc, #520]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ee:	d10b      	bne.n	8006608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f0:	4b7e      	ldr	r3, [pc, #504]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05b      	beq.n	80066b4 <HAL_RCC_OscConfig+0x108>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d157      	bne.n	80066b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e242      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006610:	d106      	bne.n	8006620 <HAL_RCC_OscConfig+0x74>
 8006612:	4b76      	ldr	r3, [pc, #472]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a75      	ldr	r2, [pc, #468]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e01d      	b.n	800665c <HAL_RCC_OscConfig+0xb0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006628:	d10c      	bne.n	8006644 <HAL_RCC_OscConfig+0x98>
 800662a:	4b70      	ldr	r3, [pc, #448]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6f      	ldr	r2, [pc, #444]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4b6d      	ldr	r3, [pc, #436]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6c      	ldr	r2, [pc, #432]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e00b      	b.n	800665c <HAL_RCC_OscConfig+0xb0>
 8006644:	4b69      	ldr	r3, [pc, #420]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a68      	ldr	r2, [pc, #416]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800664a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4b66      	ldr	r3, [pc, #408]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a65      	ldr	r2, [pc, #404]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800665a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d013      	beq.n	800668c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fc ffbe 	bl	80035e4 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fc ffba 	bl	80035e4 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	@ 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e207      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667e:	4b5b      	ldr	r3, [pc, #364]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0xc0>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668c:	f7fc ffaa 	bl	80035e4 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006694:	f7fc ffa6 	bl	80035e4 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	@ 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e1f3      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a6:	4b51      	ldr	r3, [pc, #324]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0xe8>
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d063      	beq.n	800678a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066c2:	4b4a      	ldr	r3, [pc, #296]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ce:	4b47      	ldr	r3, [pc, #284]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d11c      	bne.n	8006714 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066da:	4b44      	ldr	r3, [pc, #272]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d116      	bne.n	8006714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e6:	4b41      	ldr	r3, [pc, #260]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_RCC_OscConfig+0x152>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d001      	beq.n	80066fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e1c7      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fe:	4b3b      	ldr	r3, [pc, #236]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4937      	ldr	r1, [pc, #220]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006712:	e03a      	b.n	800678a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d020      	beq.n	800675e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800671c:	4b34      	ldr	r3, [pc, #208]	@ (80067f0 <HAL_RCC_OscConfig+0x244>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006722:	f7fc ff5f 	bl	80035e4 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800672a:	f7fc ff5b 	bl	80035e4 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e1a8      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673c:	4b2b      	ldr	r3, [pc, #172]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006748:	4b28      	ldr	r3, [pc, #160]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4925      	ldr	r1, [pc, #148]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006758:	4313      	orrs	r3, r2
 800675a:	600b      	str	r3, [r1, #0]
 800675c:	e015      	b.n	800678a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800675e:	4b24      	ldr	r3, [pc, #144]	@ (80067f0 <HAL_RCC_OscConfig+0x244>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fc ff3e 	bl	80035e4 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676c:	f7fc ff3a 	bl	80035e4 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e187      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677e:	4b1b      	ldr	r3, [pc, #108]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d036      	beq.n	8006804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d016      	beq.n	80067cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679e:	4b15      	ldr	r3, [pc, #84]	@ (80067f4 <HAL_RCC_OscConfig+0x248>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fc ff1e 	bl	80035e4 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ac:	f7fc ff1a 	bl	80035e4 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e167      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80067c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f0      	beq.n	80067ac <HAL_RCC_OscConfig+0x200>
 80067ca:	e01b      	b.n	8006804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067cc:	4b09      	ldr	r3, [pc, #36]	@ (80067f4 <HAL_RCC_OscConfig+0x248>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d2:	f7fc ff07 	bl	80035e4 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	e00e      	b.n	80067f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067da:	f7fc ff03 	bl	80035e4 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d907      	bls.n	80067f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e150      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
 80067ec:	40023800 	.word	0x40023800
 80067f0:	42470000 	.word	0x42470000
 80067f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f8:	4b88      	ldr	r3, [pc, #544]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80067fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1ea      	bne.n	80067da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8097 	beq.w	8006940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006816:	4b81      	ldr	r3, [pc, #516]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10f      	bne.n	8006842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	4b7d      	ldr	r3, [pc, #500]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800682c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006830:	6413      	str	r3, [r2, #64]	@ 0x40
 8006832:	4b7a      	ldr	r3, [pc, #488]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006842:	4b77      	ldr	r3, [pc, #476]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684a:	2b00      	cmp	r3, #0
 800684c:	d118      	bne.n	8006880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800684e:	4b74      	ldr	r3, [pc, #464]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a73      	ldr	r2, [pc, #460]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800685a:	f7fc fec3 	bl	80035e4 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006862:	f7fc febf 	bl	80035e4 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e10c      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006874:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d106      	bne.n	8006896 <HAL_RCC_OscConfig+0x2ea>
 8006888:	4b64      	ldr	r3, [pc, #400]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688c:	4a63      	ldr	r2, [pc, #396]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	6713      	str	r3, [r2, #112]	@ 0x70
 8006894:	e01c      	b.n	80068d0 <HAL_RCC_OscConfig+0x324>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b05      	cmp	r3, #5
 800689c:	d10c      	bne.n	80068b8 <HAL_RCC_OscConfig+0x30c>
 800689e:	4b5f      	ldr	r3, [pc, #380]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a2:	4a5e      	ldr	r2, [pc, #376]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068a4:	f043 0304 	orr.w	r3, r3, #4
 80068a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068aa:	4b5c      	ldr	r3, [pc, #368]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ae:	4a5b      	ldr	r2, [pc, #364]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b6:	e00b      	b.n	80068d0 <HAL_RCC_OscConfig+0x324>
 80068b8:	4b58      	ldr	r3, [pc, #352]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068bc:	4a57      	ldr	r2, [pc, #348]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c4:	4b55      	ldr	r3, [pc, #340]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c8:	4a54      	ldr	r2, [pc, #336]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068ca:	f023 0304 	bic.w	r3, r3, #4
 80068ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d015      	beq.n	8006904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d8:	f7fc fe84 	bl	80035e4 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068de:	e00a      	b.n	80068f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e0:	f7fc fe80 	bl	80035e4 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e0cb      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f6:	4b49      	ldr	r3, [pc, #292]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ee      	beq.n	80068e0 <HAL_RCC_OscConfig+0x334>
 8006902:	e014      	b.n	800692e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006904:	f7fc fe6e 	bl	80035e4 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690a:	e00a      	b.n	8006922 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690c:	f7fc fe6a 	bl	80035e4 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e0b5      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006922:	4b3e      	ldr	r3, [pc, #248]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1ee      	bne.n	800690c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d105      	bne.n	8006940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006934:	4b39      	ldr	r3, [pc, #228]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006938:	4a38      	ldr	r2, [pc, #224]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800693a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800693e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80a1 	beq.w	8006a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800694a:	4b34      	ldr	r3, [pc, #208]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 030c 	and.w	r3, r3, #12
 8006952:	2b08      	cmp	r3, #8
 8006954:	d05c      	beq.n	8006a10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d141      	bne.n	80069e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	4b31      	ldr	r3, [pc, #196]	@ (8006a24 <HAL_RCC_OscConfig+0x478>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fc fe3e 	bl	80035e4 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696c:	f7fc fe3a 	bl	80035e4 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e087      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697e:	4b27      	ldr	r3, [pc, #156]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	019b      	lsls	r3, r3, #6
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	3b01      	subs	r3, #1
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	061b      	lsls	r3, r3, #24
 80069ae:	491b      	ldr	r1, [pc, #108]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a24 <HAL_RCC_OscConfig+0x478>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ba:	f7fc fe13 	bl	80035e4 <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c2:	f7fc fe0f 	bl	80035e4 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e05c      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d4:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCC_OscConfig+0x416>
 80069e0:	e054      	b.n	8006a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <HAL_RCC_OscConfig+0x478>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e8:	f7fc fdfc 	bl	80035e4 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f0:	f7fc fdf8 	bl	80035e4 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e045      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a02:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f0      	bne.n	80069f0 <HAL_RCC_OscConfig+0x444>
 8006a0e:	e03d      	b.n	8006a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d107      	bne.n	8006a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e038      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40007000 	.word	0x40007000
 8006a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <HAL_RCC_OscConfig+0x4ec>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d028      	beq.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d121      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d11a      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a58:	4013      	ands	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d111      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	3b01      	subs	r3, #1
 8006a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d107      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40023800 	.word	0x40023800

08006a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0cc      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b68      	ldr	r3, [pc, #416]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d90c      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b65      	ldr	r3, [pc, #404]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b63      	ldr	r3, [pc, #396]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0b8      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d020      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af0:	4b59      	ldr	r3, [pc, #356]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a58      	ldr	r2, [pc, #352]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b08:	4b53      	ldr	r3, [pc, #332]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a52      	ldr	r2, [pc, #328]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b14:	4b50      	ldr	r3, [pc, #320]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	494d      	ldr	r1, [pc, #308]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d044      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b47      	ldr	r3, [pc, #284]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d119      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d003      	beq.n	8006b5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d107      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e06f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e067      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7a:	4b37      	ldr	r3, [pc, #220]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 0203 	bic.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4934      	ldr	r1, [pc, #208]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b8c:	f7fc fd2a 	bl	80035e4 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b94:	f7fc fd26 	bl	80035e4 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e04f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	4b2b      	ldr	r3, [pc, #172]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 020c 	and.w	r2, r3, #12
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d1eb      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b25      	ldr	r3, [pc, #148]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d20c      	bcs.n	8006be4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b22      	ldr	r3, [pc, #136]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b20      	ldr	r3, [pc, #128]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e032      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf0:	4b19      	ldr	r3, [pc, #100]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4916      	ldr	r1, [pc, #88]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c0e:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	490e      	ldr	r1, [pc, #56]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c22:	f000 f821 	bl	8006c68 <HAL_RCC_GetSysClockFreq>
 8006c26:	4602      	mov	r2, r0
 8006c28:	4b0b      	ldr	r3, [pc, #44]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	490a      	ldr	r1, [pc, #40]	@ (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006c34:	5ccb      	ldrb	r3, [r1, r3]
 8006c36:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3a:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c3e:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <HAL_RCC_ClockConfig+0x1c8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fc fc8a 	bl	800355c <HAL_InitTick>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023c00 	.word	0x40023c00
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	0800fcc0 	.word	0x0800fcc0
 8006c60:	20000018 	.word	0x20000018
 8006c64:	2000001c 	.word	0x2000001c

08006c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c6c:	b094      	sub	sp, #80	@ 0x50
 8006c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c80:	4b79      	ldr	r3, [pc, #484]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d00d      	beq.n	8006ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	f200 80e1 	bhi.w	8006e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x34>
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c9a:	e0db      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c9c:	4b73      	ldr	r3, [pc, #460]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ca0:	e0db      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ca2:	4b73      	ldr	r3, [pc, #460]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ca6:	e0d8      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d063      	beq.n	8006d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	099b      	lsrs	r3, r3, #6
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cda:	4622      	mov	r2, r4
 8006cdc:	462b      	mov	r3, r5
 8006cde:	f04f 0000 	mov.w	r0, #0
 8006ce2:	f04f 0100 	mov.w	r1, #0
 8006ce6:	0159      	lsls	r1, r3, #5
 8006ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cec:	0150      	lsls	r0, r2, #5
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	1a51      	subs	r1, r2, r1
 8006cf6:	6139      	str	r1, [r7, #16]
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	018b      	lsls	r3, r1, #6
 8006d10:	4651      	mov	r1, sl
 8006d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d16:	4651      	mov	r1, sl
 8006d18:	018a      	lsls	r2, r1, #6
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8006d20:	4659      	mov	r1, fp
 8006d22:	eb63 0901 	sbc.w	r9, r3, r1
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d3a:	4690      	mov	r8, r2
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	4623      	mov	r3, r4
 8006d40:	eb18 0303 	adds.w	r3, r8, r3
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	462b      	mov	r3, r5
 8006d48:	eb49 0303 	adc.w	r3, r9, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	024b      	lsls	r3, r1, #9
 8006d5e:	4621      	mov	r1, r4
 8006d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d64:	4621      	mov	r1, r4
 8006d66:	024a      	lsls	r2, r1, #9
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6e:	2200      	movs	r2, #0
 8006d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d78:	f7f9 ff66 	bl	8000c48 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4613      	mov	r3, r2
 8006d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d84:	e058      	b.n	8006e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d86:	4b38      	ldr	r3, [pc, #224]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4618      	mov	r0, r3
 8006d90:	4611      	mov	r1, r2
 8006d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d96:	623b      	str	r3, [r7, #32]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f04f 0100 	mov.w	r1, #0
 8006dac:	0159      	lsls	r1, r3, #5
 8006dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006db2:	0150      	lsls	r0, r2, #5
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4641      	mov	r1, r8
 8006dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8006ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	00eb      	lsls	r3, r5, #3
 8006dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dee:	00e2      	lsls	r2, r4, #3
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	4643      	mov	r3, r8
 8006df6:	18e3      	adds	r3, r4, r3
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	eb45 0303 	adc.w	r3, r5, r3
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e0e:	4629      	mov	r1, r5
 8006e10:	028b      	lsls	r3, r1, #10
 8006e12:	4621      	mov	r1, r4
 8006e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e18:	4621      	mov	r1, r4
 8006e1a:	028a      	lsls	r2, r1, #10
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e22:	2200      	movs	r2, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	61fa      	str	r2, [r7, #28]
 8006e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e2c:	f7f9 ff0c 	bl	8000c48 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4613      	mov	r3, r2
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e38:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	3301      	adds	r3, #1
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e52:	e002      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3750      	adds	r7, #80	@ 0x50
 8006e60:	46bd      	mov	sp, r7
 8006e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	00f42400 	.word	0x00f42400
 8006e70:	007a1200 	.word	0x007a1200

08006e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e78:	4b03      	ldr	r3, [pc, #12]	@ (8006e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000018 	.word	0x20000018

08006e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e90:	f7ff fff0 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	0a9b      	lsrs	r3, r3, #10
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	4903      	ldr	r1, [pc, #12]	@ (8006eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ea2:	5ccb      	ldrb	r3, [r1, r3]
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	0800fcd0 	.word	0x0800fcd0

08006eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006eb8:	f7ff ffdc 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	0b5b      	lsrs	r3, r3, #13
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	4903      	ldr	r1, [pc, #12]	@ (8006ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eca:	5ccb      	ldrb	r3, [r1, r3]
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	0800fcd0 	.word	0x0800fcd0

08006edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e041      	b.n	8006f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fc f834 	bl	8002f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f000 fcdc 	bl	80078d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d001      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e04e      	b.n	8007032 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a23      	ldr	r2, [pc, #140]	@ (8007040 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d01d      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8007044 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1e      	ldr	r2, [pc, #120]	@ (8007048 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800704c <HAL_TIM_Base_Start_IT+0xd0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8007050 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a19      	ldr	r2, [pc, #100]	@ (8007054 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a18      	ldr	r2, [pc, #96]	@ (8007058 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d111      	bne.n	8007020 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b06      	cmp	r3, #6
 800700c:	d010      	beq.n	8007030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0201 	orr.w	r2, r2, #1
 800701c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	e007      	b.n	8007030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40010400 	.word	0x40010400
 8007054:	40014000 	.word	0x40014000
 8007058:	40001800 	.word	0x40001800

0800705c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e041      	b.n	80070f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f839 	bl	80070fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f000 fc1c 	bl	80078d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_TIM_PWM_Start+0x24>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	bf14      	ite	ne
 800712c:	2301      	movne	r3, #1
 800712e:	2300      	moveq	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	e022      	b.n	800717a <HAL_TIM_PWM_Start+0x6a>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b04      	cmp	r3, #4
 8007138:	d109      	bne.n	800714e <HAL_TIM_PWM_Start+0x3e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	e015      	b.n	800717a <HAL_TIM_PWM_Start+0x6a>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d109      	bne.n	8007168 <HAL_TIM_PWM_Start+0x58>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	e008      	b.n	800717a <HAL_TIM_PWM_Start+0x6a>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b01      	cmp	r3, #1
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e07c      	b.n	800727c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d104      	bne.n	8007192 <HAL_TIM_PWM_Start+0x82>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007190:	e013      	b.n	80071ba <HAL_TIM_PWM_Start+0xaa>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b04      	cmp	r3, #4
 8007196:	d104      	bne.n	80071a2 <HAL_TIM_PWM_Start+0x92>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071a0:	e00b      	b.n	80071ba <HAL_TIM_PWM_Start+0xaa>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d104      	bne.n	80071b2 <HAL_TIM_PWM_Start+0xa2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071b0:	e003      	b.n	80071ba <HAL_TIM_PWM_Start+0xaa>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2201      	movs	r2, #1
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fe7e 	bl	8007ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2d      	ldr	r2, [pc, #180]	@ (8007284 <HAL_TIM_PWM_Start+0x174>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <HAL_TIM_PWM_Start+0xcc>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007288 <HAL_TIM_PWM_Start+0x178>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d101      	bne.n	80071e0 <HAL_TIM_PWM_Start+0xd0>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <HAL_TIM_PWM_Start+0xd2>
 80071e0:	2300      	movs	r3, #0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a22      	ldr	r2, [pc, #136]	@ (8007284 <HAL_TIM_PWM_Start+0x174>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d022      	beq.n	8007246 <HAL_TIM_PWM_Start+0x136>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007208:	d01d      	beq.n	8007246 <HAL_TIM_PWM_Start+0x136>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1f      	ldr	r2, [pc, #124]	@ (800728c <HAL_TIM_PWM_Start+0x17c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d018      	beq.n	8007246 <HAL_TIM_PWM_Start+0x136>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1d      	ldr	r2, [pc, #116]	@ (8007290 <HAL_TIM_PWM_Start+0x180>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d013      	beq.n	8007246 <HAL_TIM_PWM_Start+0x136>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1c      	ldr	r2, [pc, #112]	@ (8007294 <HAL_TIM_PWM_Start+0x184>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00e      	beq.n	8007246 <HAL_TIM_PWM_Start+0x136>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a16      	ldr	r2, [pc, #88]	@ (8007288 <HAL_TIM_PWM_Start+0x178>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d009      	beq.n	8007246 <HAL_TIM_PWM_Start+0x136>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a18      	ldr	r2, [pc, #96]	@ (8007298 <HAL_TIM_PWM_Start+0x188>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d004      	beq.n	8007246 <HAL_TIM_PWM_Start+0x136>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a16      	ldr	r2, [pc, #88]	@ (800729c <HAL_TIM_PWM_Start+0x18c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d111      	bne.n	800726a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d010      	beq.n	800727a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007268:	e007      	b.n	800727a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400
 800728c:	40000400 	.word	0x40000400
 8007290:	40000800 	.word	0x40000800
 8007294:	40000c00 	.word	0x40000c00
 8007298:	40014000 	.word	0x40014000
 800729c:	40001800 	.word	0x40001800

080072a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fe06 	bl	8007ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007378 <HAL_TIM_PWM_Stop+0xd8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_TIM_PWM_Stop+0x2c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a2d      	ldr	r2, [pc, #180]	@ (800737c <HAL_TIM_PWM_Stop+0xdc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_PWM_Stop+0x30>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <HAL_TIM_PWM_Stop+0x32>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80072e0:	4013      	ands	r3, r2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10f      	bne.n	8007306 <HAL_TIM_PWM_Stop+0x66>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_PWM_Stop+0x66>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007304:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <HAL_TIM_PWM_Stop+0x96>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <HAL_TIM_PWM_Stop+0x96>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <HAL_TIM_PWM_Stop+0xa6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007344:	e013      	b.n	800736e <HAL_TIM_PWM_Stop+0xce>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d104      	bne.n	8007356 <HAL_TIM_PWM_Stop+0xb6>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007354:	e00b      	b.n	800736e <HAL_TIM_PWM_Stop+0xce>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b08      	cmp	r3, #8
 800735a:	d104      	bne.n	8007366 <HAL_TIM_PWM_Stop+0xc6>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007364:	e003      	b.n	800736e <HAL_TIM_PWM_Stop+0xce>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40010000 	.word	0x40010000
 800737c:	40010400 	.word	0x40010400

08007380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d020      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0202 	mvn.w	r2, #2
 80073b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa65 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 80073d0:	e005      	b.n	80073de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa57 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa68 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d020      	beq.n	8007430 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01b      	beq.n	8007430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0204 	mvn.w	r2, #4
 8007400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa3f 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 800741c:	e005      	b.n	800742a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa31 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa42 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d020      	beq.n	800747c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01b      	beq.n	800747c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0208 	mvn.w	r2, #8
 800744c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2204      	movs	r2, #4
 8007452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa19 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa0b 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa1c 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	d020      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0210 	mvn.w	r2, #16
 8007498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2208      	movs	r2, #8
 800749e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9f3 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 80074b4:	e005      	b.n	80074c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9e5 	bl	8007886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f9f6 	bl	80078ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0201 	mvn.w	r2, #1
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9c3 	bl	8007872 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00c      	beq.n	8007510 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fdd8 	bl	80080c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800752c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f9c7 	bl	80078c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0220 	mvn.w	r2, #32
 8007550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fdaa 	bl	80080ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800757a:	2302      	movs	r3, #2
 800757c:	e0ae      	b.n	80076dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b0c      	cmp	r3, #12
 800758a:	f200 809f 	bhi.w	80076cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800758e:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075c9 	.word	0x080075c9
 8007598:	080076cd 	.word	0x080076cd
 800759c:	080076cd 	.word	0x080076cd
 80075a0:	080076cd 	.word	0x080076cd
 80075a4:	08007609 	.word	0x08007609
 80075a8:	080076cd 	.word	0x080076cd
 80075ac:	080076cd 	.word	0x080076cd
 80075b0:	080076cd 	.word	0x080076cd
 80075b4:	0800764b 	.word	0x0800764b
 80075b8:	080076cd 	.word	0x080076cd
 80075bc:	080076cd 	.word	0x080076cd
 80075c0:	080076cd 	.word	0x080076cd
 80075c4:	0800768b 	.word	0x0800768b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fa2e 	bl	8007a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6999      	ldr	r1, [r3, #24]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	619a      	str	r2, [r3, #24]
      break;
 8007606:	e064      	b.n	80076d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fa7e 	bl	8007b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6999      	ldr	r1, [r3, #24]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	619a      	str	r2, [r3, #24]
      break;
 8007648:	e043      	b.n	80076d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fad3 	bl	8007bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0208 	orr.w	r2, r2, #8
 8007664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69da      	ldr	r2, [r3, #28]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0204 	bic.w	r2, r2, #4
 8007674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69d9      	ldr	r1, [r3, #28]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	61da      	str	r2, [r3, #28]
      break;
 8007688:	e023      	b.n	80076d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fb27 	bl	8007ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69d9      	ldr	r1, [r3, #28]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	021a      	lsls	r2, r3, #8
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	61da      	str	r2, [r3, #28]
      break;
 80076ca:	e002      	b.n	80076d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
      break;
 80076d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_TIM_ConfigClockSource+0x1c>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e0b4      	b.n	800786a <HAL_TIM_ConfigClockSource+0x186>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800771e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007738:	d03e      	beq.n	80077b8 <HAL_TIM_ConfigClockSource+0xd4>
 800773a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773e:	f200 8087 	bhi.w	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007746:	f000 8086 	beq.w	8007856 <HAL_TIM_ConfigClockSource+0x172>
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774e:	d87f      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007750:	2b70      	cmp	r3, #112	@ 0x70
 8007752:	d01a      	beq.n	800778a <HAL_TIM_ConfigClockSource+0xa6>
 8007754:	2b70      	cmp	r3, #112	@ 0x70
 8007756:	d87b      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007758:	2b60      	cmp	r3, #96	@ 0x60
 800775a:	d050      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x11a>
 800775c:	2b60      	cmp	r3, #96	@ 0x60
 800775e:	d877      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007760:	2b50      	cmp	r3, #80	@ 0x50
 8007762:	d03c      	beq.n	80077de <HAL_TIM_ConfigClockSource+0xfa>
 8007764:	2b50      	cmp	r3, #80	@ 0x50
 8007766:	d873      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007768:	2b40      	cmp	r3, #64	@ 0x40
 800776a:	d058      	beq.n	800781e <HAL_TIM_ConfigClockSource+0x13a>
 800776c:	2b40      	cmp	r3, #64	@ 0x40
 800776e:	d86f      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007770:	2b30      	cmp	r3, #48	@ 0x30
 8007772:	d064      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x15a>
 8007774:	2b30      	cmp	r3, #48	@ 0x30
 8007776:	d86b      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007778:	2b20      	cmp	r3, #32
 800777a:	d060      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x15a>
 800777c:	2b20      	cmp	r3, #32
 800777e:	d867      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d05c      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x15a>
 8007784:	2b10      	cmp	r3, #16
 8007786:	d05a      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x15a>
 8007788:	e062      	b.n	8007850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800779a:	f000 fb73 	bl	8007e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	609a      	str	r2, [r3, #8]
      break;
 80077b6:	e04f      	b.n	8007858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077c8:	f000 fb5c 	bl	8007e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077da:	609a      	str	r2, [r3, #8]
      break;
 80077dc:	e03c      	b.n	8007858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ea:	461a      	mov	r2, r3
 80077ec:	f000 fad0 	bl	8007d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2150      	movs	r1, #80	@ 0x50
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fb29 	bl	8007e4e <TIM_ITRx_SetConfig>
      break;
 80077fc:	e02c      	b.n	8007858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800780a:	461a      	mov	r2, r3
 800780c:	f000 faef 	bl	8007dee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2160      	movs	r1, #96	@ 0x60
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fb19 	bl	8007e4e <TIM_ITRx_SetConfig>
      break;
 800781c:	e01c      	b.n	8007858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800782a:	461a      	mov	r2, r3
 800782c:	f000 fab0 	bl	8007d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2140      	movs	r1, #64	@ 0x40
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fb09 	bl	8007e4e <TIM_ITRx_SetConfig>
      break;
 800783c:	e00c      	b.n	8007858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4619      	mov	r1, r3
 8007848:	4610      	mov	r0, r2
 800784a:	f000 fb00 	bl	8007e4e <TIM_ITRx_SetConfig>
      break;
 800784e:	e003      	b.n	8007858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
      break;
 8007854:	e000      	b.n	8007858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
	...

080078d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a46      	ldr	r2, [pc, #280]	@ (8007a04 <TIM_Base_SetConfig+0x12c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f6:	d00f      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a43      	ldr	r2, [pc, #268]	@ (8007a08 <TIM_Base_SetConfig+0x130>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a42      	ldr	r2, [pc, #264]	@ (8007a0c <TIM_Base_SetConfig+0x134>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a41      	ldr	r2, [pc, #260]	@ (8007a10 <TIM_Base_SetConfig+0x138>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a40      	ldr	r2, [pc, #256]	@ (8007a14 <TIM_Base_SetConfig+0x13c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d108      	bne.n	800792a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a35      	ldr	r2, [pc, #212]	@ (8007a04 <TIM_Base_SetConfig+0x12c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007938:	d027      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a32      	ldr	r2, [pc, #200]	@ (8007a08 <TIM_Base_SetConfig+0x130>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d023      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a31      	ldr	r2, [pc, #196]	@ (8007a0c <TIM_Base_SetConfig+0x134>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01f      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a30      	ldr	r2, [pc, #192]	@ (8007a10 <TIM_Base_SetConfig+0x138>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d01b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2f      	ldr	r2, [pc, #188]	@ (8007a14 <TIM_Base_SetConfig+0x13c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a2e      	ldr	r2, [pc, #184]	@ (8007a18 <TIM_Base_SetConfig+0x140>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2d      	ldr	r2, [pc, #180]	@ (8007a1c <TIM_Base_SetConfig+0x144>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a2c      	ldr	r2, [pc, #176]	@ (8007a20 <TIM_Base_SetConfig+0x148>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2b      	ldr	r2, [pc, #172]	@ (8007a24 <TIM_Base_SetConfig+0x14c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a2a      	ldr	r2, [pc, #168]	@ (8007a28 <TIM_Base_SetConfig+0x150>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a29      	ldr	r2, [pc, #164]	@ (8007a2c <TIM_Base_SetConfig+0x154>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a10      	ldr	r2, [pc, #64]	@ (8007a04 <TIM_Base_SetConfig+0x12c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_Base_SetConfig+0xf8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a12      	ldr	r2, [pc, #72]	@ (8007a14 <TIM_Base_SetConfig+0x13c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d103      	bne.n	80079d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f023 0201 	bic.w	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	611a      	str	r2, [r3, #16]
  }
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40010400 	.word	0x40010400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	40014800 	.word	0x40014800
 8007a24:	40001800 	.word	0x40001800
 8007a28:	40001c00 	.word	0x40001c00
 8007a2c:	40002000 	.word	0x40002000

08007a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f023 0201 	bic.w	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 0302 	bic.w	r3, r3, #2
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a20      	ldr	r2, [pc, #128]	@ (8007b08 <TIM_OC1_SetConfig+0xd8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_OC1_SetConfig+0x64>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b0c <TIM_OC1_SetConfig+0xdc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d10c      	bne.n	8007aae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0308 	bic.w	r3, r3, #8
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f023 0304 	bic.w	r3, r3, #4
 8007aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a15      	ldr	r2, [pc, #84]	@ (8007b08 <TIM_OC1_SetConfig+0xd8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_OC1_SetConfig+0x8e>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a14      	ldr	r2, [pc, #80]	@ (8007b0c <TIM_OC1_SetConfig+0xdc>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d111      	bne.n	8007ae2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40010400 	.word	0x40010400

08007b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	f023 0210 	bic.w	r2, r3, #16
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0320 	bic.w	r3, r3, #32
 8007b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a22      	ldr	r2, [pc, #136]	@ (8007bf4 <TIM_OC2_SetConfig+0xe4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d003      	beq.n	8007b78 <TIM_OC2_SetConfig+0x68>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a21      	ldr	r2, [pc, #132]	@ (8007bf8 <TIM_OC2_SetConfig+0xe8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d10d      	bne.n	8007b94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a17      	ldr	r2, [pc, #92]	@ (8007bf4 <TIM_OC2_SetConfig+0xe4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC2_SetConfig+0x94>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a16      	ldr	r2, [pc, #88]	@ (8007bf8 <TIM_OC2_SetConfig+0xe8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d113      	bne.n	8007bcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40010400 	.word	0x40010400

08007bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a21      	ldr	r2, [pc, #132]	@ (8007cdc <TIM_OC3_SetConfig+0xe0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_OC3_SetConfig+0x66>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a20      	ldr	r2, [pc, #128]	@ (8007ce0 <TIM_OC3_SetConfig+0xe4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d10d      	bne.n	8007c7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a16      	ldr	r2, [pc, #88]	@ (8007cdc <TIM_OC3_SetConfig+0xe0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d003      	beq.n	8007c8e <TIM_OC3_SetConfig+0x92>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a15      	ldr	r2, [pc, #84]	@ (8007ce0 <TIM_OC3_SetConfig+0xe4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d113      	bne.n	8007cb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	621a      	str	r2, [r3, #32]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	40010000 	.word	0x40010000
 8007ce0:	40010400 	.word	0x40010400

08007ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	031b      	lsls	r3, r3, #12
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a12      	ldr	r2, [pc, #72]	@ (8007d88 <TIM_OC4_SetConfig+0xa4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC4_SetConfig+0x68>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a11      	ldr	r2, [pc, #68]	@ (8007d8c <TIM_OC4_SetConfig+0xa8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d109      	bne.n	8007d60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	019b      	lsls	r3, r3, #6
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010000 	.word	0x40010000
 8007d8c:	40010400 	.word	0x40010400

08007d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f023 0201 	bic.w	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f023 030a 	bic.w	r3, r3, #10
 8007dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b087      	sub	sp, #28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	f023 0210 	bic.w	r2, r3, #16
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	031b      	lsls	r3, r3, #12
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	621a      	str	r2, [r3, #32]
}
 8007e42:	bf00      	nop
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f043 0307 	orr.w	r3, r3, #7
 8007e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	609a      	str	r2, [r3, #8]
}
 8007e78:	bf00      	nop
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	021a      	lsls	r2, r3, #8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	609a      	str	r2, [r3, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a1a      	ldr	r2, [r3, #32]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	43db      	mvns	r3, r3
 8007ee6:	401a      	ands	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a1a      	ldr	r2, [r3, #32]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8007efc:	431a      	orrs	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	621a      	str	r2, [r3, #32]
}
 8007f02:	bf00      	nop
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e05a      	b.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a21      	ldr	r2, [pc, #132]	@ (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d022      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f74:	d01d      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d018      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00e      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a18      	ldr	r2, [pc, #96]	@ (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a17      	ldr	r2, [pc, #92]	@ (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d10c      	bne.n	8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40010000 	.word	0x40010000
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40010400 	.word	0x40010400
 8008000:	40014000 	.word	0x40014000
 8008004:	40001800 	.word	0x40001800

08008008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008020:	2302      	movs	r3, #2
 8008022:	e03d      	b.n	80080a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e042      	b.n	800816c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fa ffea 	bl	80030d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2224      	movs	r2, #36	@ 0x24
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc85 	bl	8008a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800812c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695a      	ldr	r2, [r3, #20]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800813c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800814c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b0ba      	sub	sp, #232	@ 0xe8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800819a:	2300      	movs	r3, #0
 800819c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80081b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10f      	bne.n	80081da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <HAL_UART_IRQHandler+0x66>
 80081c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fb69 	bl	80088aa <UART_Receive_IT>
      return;
 80081d8:	e25b      	b.n	8008692 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 80de 	beq.w	80083a0 <HAL_UART_IRQHandler+0x22c>
 80081e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80d1 	beq.w	80083a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <HAL_UART_IRQHandler+0xae>
 800820a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800820e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821a:	f043 0201 	orr.w	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <HAL_UART_IRQHandler+0xd2>
 800822e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d005      	beq.n	8008246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823e:	f043 0202 	orr.w	r2, r3, #2
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <HAL_UART_IRQHandler+0xf6>
 8008252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008262:	f043 0204 	orr.w	r2, r3, #4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d011      	beq.n	800829a <HAL_UART_IRQHandler+0x126>
 8008276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008292:	f043 0208 	orr.w	r2, r3, #8
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 81f2 	beq.w	8008688 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <HAL_UART_IRQHandler+0x14e>
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 faf4 	bl	80088aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082cc:	2b40      	cmp	r3, #64	@ 0x40
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d103      	bne.n	80082ee <HAL_UART_IRQHandler+0x17a>
 80082e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d04f      	beq.n	800838e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9fc 	bl	80086ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fe:	2b40      	cmp	r3, #64	@ 0x40
 8008300:	d141      	bne.n	8008386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3314      	adds	r3, #20
 8008308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800831c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3314      	adds	r3, #20
 800832a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800832e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800833a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1d9      	bne.n	8008302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d013      	beq.n	800837e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835a:	4a7e      	ldr	r2, [pc, #504]	@ (8008554 <HAL_UART_IRQHandler+0x3e0>)
 800835c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008362:	4618      	mov	r0, r3
 8008364:	f7fc f827 	bl	80043b6 <HAL_DMA_Abort_IT>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d016      	beq.n	800839c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	e00e      	b.n	800839c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f99e 	bl	80086c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	e00a      	b.n	800839c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f99a 	bl	80086c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	e006      	b.n	800839c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f996 	bl	80086c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800839a:	e175      	b.n	8008688 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	bf00      	nop
    return;
 800839e:	e173      	b.n	8008688 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	f040 814f 	bne.w	8008648 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8148 	beq.w	8008648 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8141 	beq.w	8008648 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083c6:	2300      	movs	r3, #0
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e6:	2b40      	cmp	r3, #64	@ 0x40
 80083e8:	f040 80b6 	bne.w	8008558 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8145 	beq.w	800868c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800840a:	429a      	cmp	r2, r3
 800840c:	f080 813e 	bcs.w	800868c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008416:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008422:	f000 8088 	beq.w	8008536 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	330c      	adds	r3, #12
 800842c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800843c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	330c      	adds	r3, #12
 800844e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800845e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800846a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1d9      	bne.n	8008426 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3314      	adds	r3, #20
 8008478:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3314      	adds	r3, #20
 8008492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008496:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800849a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800849e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e1      	bne.n	8008472 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3314      	adds	r3, #20
 80084ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e3      	bne.n	80084ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008506:	f023 0310 	bic.w	r3, r3, #16
 800850a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	330c      	adds	r3, #12
 8008514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008518:	65ba      	str	r2, [r7, #88]	@ 0x58
 800851a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800851e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e3      	bne.n	80084f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008530:	4618      	mov	r0, r3
 8008532:	f7fb fed0 	bl	80042d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008544:	b29b      	uxth	r3, r3
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	b29b      	uxth	r3, r3
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8c1 	bl	80086d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008552:	e09b      	b.n	800868c <HAL_UART_IRQHandler+0x518>
 8008554:	080087b3 	.word	0x080087b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008560:	b29b      	uxth	r3, r3
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 808e 	beq.w	8008690 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8089 	beq.w	8008690 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800858e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008594:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	330c      	adds	r3, #12
 800859e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80085a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80085a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e3      	bne.n	800857e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3314      	adds	r3, #20
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	623b      	str	r3, [r7, #32]
   return(result);
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	f023 0301 	bic.w	r3, r3, #1
 80085cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3314      	adds	r3, #20
 80085d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085da:	633a      	str	r2, [r7, #48]	@ 0x30
 80085dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e3      	bne.n	80085b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	330c      	adds	r3, #12
 8008602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	60fb      	str	r3, [r7, #12]
   return(result);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 0310 	bic.w	r3, r3, #16
 8008612:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	330c      	adds	r3, #12
 800861c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008620:	61fa      	str	r2, [r7, #28]
 8008622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	69b9      	ldr	r1, [r7, #24]
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	617b      	str	r3, [r7, #20]
   return(result);
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e3      	bne.n	80085fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800863a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f847 	bl	80086d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008646:	e023      	b.n	8008690 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <HAL_UART_IRQHandler+0x4f4>
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f8ba 	bl	80087da <UART_Transmit_IT>
    return;
 8008666:	e014      	b.n	8008692 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00e      	beq.n	8008692 <HAL_UART_IRQHandler+0x51e>
 8008674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f8fa 	bl	800887a <UART_EndTransmit_IT>
    return;
 8008686:	e004      	b.n	8008692 <HAL_UART_IRQHandler+0x51e>
    return;
 8008688:	bf00      	nop
 800868a:	e002      	b.n	8008692 <HAL_UART_IRQHandler+0x51e>
      return;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <HAL_UART_IRQHandler+0x51e>
      return;
 8008690:	bf00      	nop
  }
}
 8008692:	37e8      	adds	r7, #232	@ 0xe8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b095      	sub	sp, #84	@ 0x54
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	330c      	adds	r3, #12
 80086fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800870a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008714:	643a      	str	r2, [r7, #64]	@ 0x40
 8008716:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800871a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e5      	bne.n	80086f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3314      	adds	r3, #20
 800872e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	61fb      	str	r3, [r7, #28]
   return(result);
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3314      	adds	r3, #20
 8008746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800874a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800874e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e5      	bne.n	8008728 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008760:	2b01      	cmp	r3, #1
 8008762:	d119      	bne.n	8008798 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	330c      	adds	r3, #12
 800876a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	60bb      	str	r3, [r7, #8]
   return(result);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f023 0310 	bic.w	r3, r3, #16
 800877a:	647b      	str	r3, [r7, #68]	@ 0x44
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008784:	61ba      	str	r2, [r7, #24]
 8008786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6979      	ldr	r1, [r7, #20]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	613b      	str	r3, [r7, #16]
   return(result);
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e5      	bne.n	8008764 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80087a6:	bf00      	nop
 80087a8:	3754      	adds	r7, #84	@ 0x54
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f7ff ff77 	bl	80086c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b21      	cmp	r3, #33	@ 0x21
 80087ec:	d13e      	bne.n	800886c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f6:	d114      	bne.n	8008822 <UART_Transmit_IT+0x48>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d110      	bne.n	8008822 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008814:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	1c9a      	adds	r2, r3, #2
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	621a      	str	r2, [r3, #32]
 8008820:	e008      	b.n	8008834 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	1c59      	adds	r1, r3, #1
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6211      	str	r1, [r2, #32]
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b29b      	uxth	r3, r3
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	4619      	mov	r1, r3
 8008842:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10f      	bne.n	8008868 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008856:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008866:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	e000      	b.n	800886e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800886c:	2302      	movs	r3, #2
  }
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008890:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff fefc 	bl	8008698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b08c      	sub	sp, #48	@ 0x30
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b22      	cmp	r3, #34	@ 0x22
 80088bc:	f040 80ae 	bne.w	8008a1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c8:	d117      	bne.n	80088fa <UART_Receive_IT+0x50>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d113      	bne.n	80088fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f2:	1c9a      	adds	r2, r3, #2
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80088f8:	e026      	b.n	8008948 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800890c:	d007      	beq.n	800891e <UART_Receive_IT+0x74>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10a      	bne.n	800892c <UART_Receive_IT+0x82>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	e008      	b.n	800893e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008938:	b2da      	uxtb	r2, r3
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800894c:	b29b      	uxth	r3, r3
 800894e:	3b01      	subs	r3, #1
 8008950:	b29b      	uxth	r3, r3
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4619      	mov	r1, r3
 8008956:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008958:	2b00      	cmp	r3, #0
 800895a:	d15d      	bne.n	8008a18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0220 	bic.w	r2, r2, #32
 800896a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800897a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695a      	ldr	r2, [r3, #20]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0201 	bic.w	r2, r2, #1
 800898a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d135      	bne.n	8008a0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	330c      	adds	r3, #12
 80089ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	613b      	str	r3, [r7, #16]
   return(result);
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f023 0310 	bic.w	r3, r3, #16
 80089be:	627b      	str	r3, [r7, #36]	@ 0x24
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	330c      	adds	r3, #12
 80089c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c8:	623a      	str	r2, [r7, #32]
 80089ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	69f9      	ldr	r1, [r7, #28]
 80089ce:	6a3a      	ldr	r2, [r7, #32]
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e5      	bne.n	80089a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d10a      	bne.n	8008a00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fe64 	bl	80086d4 <HAL_UARTEx_RxEventCallback>
 8008a0c:	e002      	b.n	8008a14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff fe4c 	bl	80086ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	e002      	b.n	8008a1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e000      	b.n	8008a1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
  }
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3730      	adds	r7, #48	@ 0x30
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a2c:	b0c0      	sub	sp, #256	@ 0x100
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a44:	68d9      	ldr	r1, [r3, #12]
 8008a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	ea40 0301 	orr.w	r3, r0, r1
 8008a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008a80:	f021 010c 	bic.w	r1, r1, #12
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa2:	6999      	ldr	r1, [r3, #24]
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	ea40 0301 	orr.w	r3, r0, r1
 8008aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8008cf4 <UART_SetConfig+0x2cc>)
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d005      	beq.n	8008ac8 <UART_SetConfig+0xa0>
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8008cf8 <UART_SetConfig+0x2d0>)
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d104      	bne.n	8008ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ac8:	f7fe f9f4 	bl	8006eb4 <HAL_RCC_GetPCLK2Freq>
 8008acc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ad0:	e003      	b.n	8008ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ad2:	f7fe f9db 	bl	8006e8c <HAL_RCC_GetPCLK1Freq>
 8008ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ae4:	f040 810c 	bne.w	8008d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008af2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	1891      	adds	r1, r2, r2
 8008b00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b02:	415b      	adcs	r3, r3
 8008b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	eb12 0801 	adds.w	r8, r2, r1
 8008b10:	4629      	mov	r1, r5
 8008b12:	eb43 0901 	adc.w	r9, r3, r1
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b2a:	4690      	mov	r8, r2
 8008b2c:	4699      	mov	r9, r3
 8008b2e:	4623      	mov	r3, r4
 8008b30:	eb18 0303 	adds.w	r3, r8, r3
 8008b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b38:	462b      	mov	r3, r5
 8008b3a:	eb49 0303 	adc.w	r3, r9, r3
 8008b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b56:	460b      	mov	r3, r1
 8008b58:	18db      	adds	r3, r3, r3
 8008b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	eb42 0303 	adc.w	r3, r2, r3
 8008b62:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008b6c:	f7f8 f86c 	bl	8000c48 <__aeabi_uldivmod>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4b61      	ldr	r3, [pc, #388]	@ (8008cfc <UART_SetConfig+0x2d4>)
 8008b76:	fba3 2302 	umull	r2, r3, r3, r2
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	011c      	lsls	r4, r3, #4
 8008b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	1891      	adds	r1, r2, r2
 8008b96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008b98:	415b      	adcs	r3, r3
 8008b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bc0:	4692      	mov	sl, r2
 8008bc2:	469b      	mov	fp, r3
 8008bc4:	4643      	mov	r3, r8
 8008bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8008bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8008bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008be4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008bec:	460b      	mov	r3, r1
 8008bee:	18db      	adds	r3, r3, r3
 8008bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	eb42 0303 	adc.w	r3, r2, r3
 8008bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c02:	f7f8 f821 	bl	8000c48 <__aeabi_uldivmod>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8008cfc <UART_SetConfig+0x2d4>)
 8008c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	2264      	movs	r2, #100	@ 0x64
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	1acb      	subs	r3, r1, r3
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c22:	4b36      	ldr	r3, [pc, #216]	@ (8008cfc <UART_SetConfig+0x2d4>)
 8008c24:	fba3 2302 	umull	r2, r3, r3, r2
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c30:	441c      	add	r4, r3
 8008c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	1891      	adds	r1, r2, r2
 8008c4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c4c:	415b      	adcs	r3, r3
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c54:	4641      	mov	r1, r8
 8008c56:	1851      	adds	r1, r2, r1
 8008c58:	6339      	str	r1, [r7, #48]	@ 0x30
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	414b      	adcs	r3, r1
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008c6c:	4659      	mov	r1, fp
 8008c6e:	00cb      	lsls	r3, r1, #3
 8008c70:	4651      	mov	r1, sl
 8008c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c76:	4651      	mov	r1, sl
 8008c78:	00ca      	lsls	r2, r1, #3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4642      	mov	r2, r8
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c88:	464b      	mov	r3, r9
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	eb42 0303 	adc.w	r3, r2, r3
 8008c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ca8:	460b      	mov	r3, r1
 8008caa:	18db      	adds	r3, r3, r3
 8008cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cae:	4613      	mov	r3, r2
 8008cb0:	eb42 0303 	adc.w	r3, r2, r3
 8008cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008cbe:	f7f7 ffc3 	bl	8000c48 <__aeabi_uldivmod>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <UART_SetConfig+0x2d4>)
 8008cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	2164      	movs	r1, #100	@ 0x64
 8008cd0:	fb01 f303 	mul.w	r3, r1, r3
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	3332      	adds	r3, #50	@ 0x32
 8008cda:	4a08      	ldr	r2, [pc, #32]	@ (8008cfc <UART_SetConfig+0x2d4>)
 8008cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce0:	095b      	lsrs	r3, r3, #5
 8008ce2:	f003 0207 	and.w	r2, r3, #7
 8008ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4422      	add	r2, r4
 8008cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cf0:	e106      	b.n	8008f00 <UART_SetConfig+0x4d8>
 8008cf2:	bf00      	nop
 8008cf4:	40011000 	.word	0x40011000
 8008cf8:	40011400 	.word	0x40011400
 8008cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d12:	4642      	mov	r2, r8
 8008d14:	464b      	mov	r3, r9
 8008d16:	1891      	adds	r1, r2, r2
 8008d18:	6239      	str	r1, [r7, #32]
 8008d1a:	415b      	adcs	r3, r3
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d22:	4641      	mov	r1, r8
 8008d24:	1854      	adds	r4, r2, r1
 8008d26:	4649      	mov	r1, r9
 8008d28:	eb43 0501 	adc.w	r5, r3, r1
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	00eb      	lsls	r3, r5, #3
 8008d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d3a:	00e2      	lsls	r2, r4, #3
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	461d      	mov	r5, r3
 8008d40:	4643      	mov	r3, r8
 8008d42:	18e3      	adds	r3, r4, r3
 8008d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d48:	464b      	mov	r3, r9
 8008d4a:	eb45 0303 	adc.w	r3, r5, r3
 8008d4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008d6e:	4629      	mov	r1, r5
 8008d70:	008b      	lsls	r3, r1, #2
 8008d72:	4621      	mov	r1, r4
 8008d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d78:	4621      	mov	r1, r4
 8008d7a:	008a      	lsls	r2, r1, #2
 8008d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008d80:	f7f7 ff62 	bl	8000c48 <__aeabi_uldivmod>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4b60      	ldr	r3, [pc, #384]	@ (8008f0c <UART_SetConfig+0x4e4>)
 8008d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	011c      	lsls	r4, r3, #4
 8008d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008da4:	4642      	mov	r2, r8
 8008da6:	464b      	mov	r3, r9
 8008da8:	1891      	adds	r1, r2, r2
 8008daa:	61b9      	str	r1, [r7, #24]
 8008dac:	415b      	adcs	r3, r3
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008db4:	4641      	mov	r1, r8
 8008db6:	1851      	adds	r1, r2, r1
 8008db8:	6139      	str	r1, [r7, #16]
 8008dba:	4649      	mov	r1, r9
 8008dbc:	414b      	adcs	r3, r1
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dcc:	4659      	mov	r1, fp
 8008dce:	00cb      	lsls	r3, r1, #3
 8008dd0:	4651      	mov	r1, sl
 8008dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	00ca      	lsls	r2, r1, #3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	4642      	mov	r2, r8
 8008de2:	189b      	adds	r3, r3, r2
 8008de4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008de8:	464b      	mov	r3, r9
 8008dea:	460a      	mov	r2, r1
 8008dec:	eb42 0303 	adc.w	r3, r2, r3
 8008df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	008b      	lsls	r3, r1, #2
 8008e10:	4641      	mov	r1, r8
 8008e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e16:	4641      	mov	r1, r8
 8008e18:	008a      	lsls	r2, r1, #2
 8008e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e1e:	f7f7 ff13 	bl	8000c48 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	4b38      	ldr	r3, [pc, #224]	@ (8008f0c <UART_SetConfig+0x4e4>)
 8008e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	2264      	movs	r2, #100	@ 0x64
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
 8008e36:	1acb      	subs	r3, r1, r3
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	3332      	adds	r3, #50	@ 0x32
 8008e3c:	4a33      	ldr	r2, [pc, #204]	@ (8008f0c <UART_SetConfig+0x4e4>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e48:	441c      	add	r4, r3
 8008e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e4e:	2200      	movs	r2, #0
 8008e50:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e52:	677a      	str	r2, [r7, #116]	@ 0x74
 8008e54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008e58:	4642      	mov	r2, r8
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	1891      	adds	r1, r2, r2
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	415b      	adcs	r3, r3
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e68:	4641      	mov	r1, r8
 8008e6a:	1851      	adds	r1, r2, r1
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	4649      	mov	r1, r9
 8008e70:	414b      	adcs	r3, r1
 8008e72:	607b      	str	r3, [r7, #4]
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e80:	4659      	mov	r1, fp
 8008e82:	00cb      	lsls	r3, r1, #3
 8008e84:	4651      	mov	r1, sl
 8008e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e8a:	4651      	mov	r1, sl
 8008e8c:	00ca      	lsls	r2, r1, #3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	4619      	mov	r1, r3
 8008e92:	4603      	mov	r3, r0
 8008e94:	4642      	mov	r2, r8
 8008e96:	189b      	adds	r3, r3, r2
 8008e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	460a      	mov	r2, r1
 8008e9e:	eb42 0303 	adc.w	r3, r2, r3
 8008ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eae:	667a      	str	r2, [r7, #100]	@ 0x64
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	008b      	lsls	r3, r1, #2
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	008a      	lsls	r2, r1, #2
 8008eca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008ece:	f7f7 febb 	bl	8000c48 <__aeabi_uldivmod>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <UART_SetConfig+0x4e4>)
 8008ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	2164      	movs	r1, #100	@ 0x64
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	3332      	adds	r3, #50	@ 0x32
 8008eea:	4a08      	ldr	r2, [pc, #32]	@ (8008f0c <UART_SetConfig+0x4e4>)
 8008eec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef0:	095b      	lsrs	r3, r3, #5
 8008ef2:	f003 020f 	and.w	r2, r3, #15
 8008ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4422      	add	r2, r4
 8008efe:	609a      	str	r2, [r3, #8]
}
 8008f00:	bf00      	nop
 8008f02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f06:	46bd      	mov	sp, r7
 8008f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f0c:	51eb851f 	.word	0x51eb851f

08008f10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f10:	b084      	sub	sp, #16
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	f107 001c 	add.w	r0, r7, #28
 8008f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d123      	bne.n	8008f72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d105      	bne.n	8008f66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fae8 	bl	800a53c <USB_CoreReset>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
 8008f70:	e01b      	b.n	8008faa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 fadc 	bl	800a53c <USB_CoreReset>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f9c:	e005      	b.n	8008faa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008faa:	7fbb      	ldrb	r3, [r7, #30]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d10b      	bne.n	8008fc8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f043 0206 	orr.w	r2, r3, #6
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f043 0220 	orr.w	r2, r3, #32
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd4:	b004      	add	sp, #16
 8008fd6:	4770      	bx	lr

08008fd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d165      	bne.n	80090b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4a41      	ldr	r2, [pc, #260]	@ (80090f4 <USB_SetTurnaroundTime+0x11c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d906      	bls.n	8009002 <USB_SetTurnaroundTime+0x2a>
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4a40      	ldr	r2, [pc, #256]	@ (80090f8 <USB_SetTurnaroundTime+0x120>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d202      	bcs.n	8009002 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ffc:	230f      	movs	r3, #15
 8008ffe:	617b      	str	r3, [r7, #20]
 8009000:	e062      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	4a3c      	ldr	r2, [pc, #240]	@ (80090f8 <USB_SetTurnaroundTime+0x120>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d306      	bcc.n	8009018 <USB_SetTurnaroundTime+0x40>
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4a3b      	ldr	r2, [pc, #236]	@ (80090fc <USB_SetTurnaroundTime+0x124>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d202      	bcs.n	8009018 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009012:	230e      	movs	r3, #14
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e057      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	4a38      	ldr	r2, [pc, #224]	@ (80090fc <USB_SetTurnaroundTime+0x124>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d306      	bcc.n	800902e <USB_SetTurnaroundTime+0x56>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4a37      	ldr	r2, [pc, #220]	@ (8009100 <USB_SetTurnaroundTime+0x128>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d202      	bcs.n	800902e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009028:	230d      	movs	r3, #13
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e04c      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	4a33      	ldr	r2, [pc, #204]	@ (8009100 <USB_SetTurnaroundTime+0x128>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d306      	bcc.n	8009044 <USB_SetTurnaroundTime+0x6c>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4a32      	ldr	r2, [pc, #200]	@ (8009104 <USB_SetTurnaroundTime+0x12c>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d802      	bhi.n	8009044 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800903e:	230c      	movs	r3, #12
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	e041      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4a2f      	ldr	r2, [pc, #188]	@ (8009104 <USB_SetTurnaroundTime+0x12c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d906      	bls.n	800905a <USB_SetTurnaroundTime+0x82>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	4a2e      	ldr	r2, [pc, #184]	@ (8009108 <USB_SetTurnaroundTime+0x130>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d802      	bhi.n	800905a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009054:	230b      	movs	r3, #11
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	e036      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	4a2a      	ldr	r2, [pc, #168]	@ (8009108 <USB_SetTurnaroundTime+0x130>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d906      	bls.n	8009070 <USB_SetTurnaroundTime+0x98>
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4a29      	ldr	r2, [pc, #164]	@ (800910c <USB_SetTurnaroundTime+0x134>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d802      	bhi.n	8009070 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800906a:	230a      	movs	r3, #10
 800906c:	617b      	str	r3, [r7, #20]
 800906e:	e02b      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4a26      	ldr	r2, [pc, #152]	@ (800910c <USB_SetTurnaroundTime+0x134>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d906      	bls.n	8009086 <USB_SetTurnaroundTime+0xae>
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4a25      	ldr	r2, [pc, #148]	@ (8009110 <USB_SetTurnaroundTime+0x138>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d202      	bcs.n	8009086 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009080:	2309      	movs	r3, #9
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	e020      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	4a21      	ldr	r2, [pc, #132]	@ (8009110 <USB_SetTurnaroundTime+0x138>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d306      	bcc.n	800909c <USB_SetTurnaroundTime+0xc4>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	4a20      	ldr	r2, [pc, #128]	@ (8009114 <USB_SetTurnaroundTime+0x13c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d802      	bhi.n	800909c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009096:	2308      	movs	r3, #8
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	e015      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4a1d      	ldr	r2, [pc, #116]	@ (8009114 <USB_SetTurnaroundTime+0x13c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d906      	bls.n	80090b2 <USB_SetTurnaroundTime+0xda>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009118 <USB_SetTurnaroundTime+0x140>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d202      	bcs.n	80090b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80090ac:	2307      	movs	r3, #7
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	e00a      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80090b2:	2306      	movs	r3, #6
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	e007      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80090be:	2309      	movs	r3, #9
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e001      	b.n	80090c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80090c4:	2309      	movs	r3, #9
 80090c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	029b      	lsls	r3, r3, #10
 80090dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80090e0:	431a      	orrs	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	00d8acbf 	.word	0x00d8acbf
 80090f8:	00e4e1c0 	.word	0x00e4e1c0
 80090fc:	00f42400 	.word	0x00f42400
 8009100:	01067380 	.word	0x01067380
 8009104:	011a499f 	.word	0x011a499f
 8009108:	01312cff 	.word	0x01312cff
 800910c:	014ca43f 	.word	0x014ca43f
 8009110:	016e3600 	.word	0x016e3600
 8009114:	01a6ab1f 	.word	0x01a6ab1f
 8009118:	01e84800 	.word	0x01e84800

0800911c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f043 0201 	orr.w	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f023 0201 	bic.w	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d115      	bne.n	80091ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800918e:	200a      	movs	r0, #10
 8009190:	f7fa fa34 	bl	80035fc <HAL_Delay>
      ms += 10U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	330a      	adds	r3, #10
 8009198:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 f93f 	bl	800a41e <USB_GetMode>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d01e      	beq.n	80091e4 <USB_SetCurrentMode+0x84>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80091aa:	d9f0      	bls.n	800918e <USB_SetCurrentMode+0x2e>
 80091ac:	e01a      	b.n	80091e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d115      	bne.n	80091e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091c0:	200a      	movs	r0, #10
 80091c2:	f7fa fa1b 	bl	80035fc <HAL_Delay>
      ms += 10U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	330a      	adds	r3, #10
 80091ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 f926 	bl	800a41e <USB_GetMode>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <USB_SetCurrentMode+0x84>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2bc7      	cmp	r3, #199	@ 0xc7
 80091dc:	d9f0      	bls.n	80091c0 <USB_SetCurrentMode+0x60>
 80091de:	e001      	b.n	80091e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e005      	b.n	80091f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80091e8:	d101      	bne.n	80091ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e000      	b.n	80091f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091f8:	b084      	sub	sp, #16
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b086      	sub	sp, #24
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009212:	2300      	movs	r3, #0
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	e009      	b.n	800922c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	3340      	adds	r3, #64	@ 0x40
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	2200      	movs	r2, #0
 8009224:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3301      	adds	r3, #1
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b0e      	cmp	r3, #14
 8009230:	d9f2      	bls.n	8009218 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009232:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009236:	2b00      	cmp	r3, #0
 8009238:	d11c      	bne.n	8009274 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009248:	f043 0302 	orr.w	r3, r3, #2
 800924c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009252:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	639a      	str	r2, [r3, #56]	@ 0x38
 8009272:	e00b      	b.n	800928c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009278:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009284:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009292:	461a      	mov	r2, r3
 8009294:	2300      	movs	r3, #0
 8009296:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009298:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800929c:	2b01      	cmp	r3, #1
 800929e:	d10d      	bne.n	80092bc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092a8:	2100      	movs	r1, #0
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f968 	bl	8009580 <USB_SetDevSpeed>
 80092b0:	e008      	b.n	80092c4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80092b2:	2101      	movs	r1, #1
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f963 	bl	8009580 <USB_SetDevSpeed>
 80092ba:	e003      	b.n	80092c4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80092bc:	2103      	movs	r1, #3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f95e 	bl	8009580 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092c4:	2110      	movs	r1, #16
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f8fa 	bl	80094c0 <USB_FlushTxFifo>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f924 	bl	8009524 <USB_FlushRxFifo>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ec:	461a      	mov	r2, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092f8:	461a      	mov	r2, r3
 80092fa:	2300      	movs	r3, #0
 80092fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009304:	461a      	mov	r2, r3
 8009306:	2300      	movs	r3, #0
 8009308:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800930a:	2300      	movs	r3, #0
 800930c:	613b      	str	r3, [r7, #16]
 800930e:	e043      	b.n	8009398 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009322:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009326:	d118      	bne.n	800935a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800933a:	461a      	mov	r2, r3
 800933c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	e013      	b.n	800936c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009350:	461a      	mov	r2, r3
 8009352:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	e008      	b.n	800936c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009366:	461a      	mov	r2, r3
 8009368:	2300      	movs	r3, #0
 800936a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009378:	461a      	mov	r2, r3
 800937a:	2300      	movs	r3, #0
 800937c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	015a      	lsls	r2, r3, #5
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4413      	add	r3, r2
 8009386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800938a:	461a      	mov	r2, r3
 800938c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009390:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	3301      	adds	r3, #1
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800939c:	461a      	mov	r2, r3
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d3b5      	bcc.n	8009310 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093a4:	2300      	movs	r3, #0
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	e043      	b.n	8009432 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c0:	d118      	bne.n	80093f4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d4:	461a      	mov	r2, r3
 80093d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	e013      	b.n	8009406 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ea:	461a      	mov	r2, r3
 80093ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	e008      	b.n	8009406 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009400:	461a      	mov	r2, r3
 8009402:	2300      	movs	r3, #0
 8009404:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009412:	461a      	mov	r2, r3
 8009414:	2300      	movs	r3, #0
 8009416:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009424:	461a      	mov	r2, r3
 8009426:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800942a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	3301      	adds	r3, #1
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009436:	461a      	mov	r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	4293      	cmp	r3, r2
 800943c:	d3b5      	bcc.n	80093aa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800944c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009450:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800945e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009460:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009464:	2b00      	cmp	r3, #0
 8009466:	d105      	bne.n	8009474 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f043 0210 	orr.w	r2, r3, #16
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	699a      	ldr	r2, [r3, #24]
 8009478:	4b10      	ldr	r3, [pc, #64]	@ (80094bc <USB_DevInit+0x2c4>)
 800947a:	4313      	orrs	r3, r2
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009480:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	f043 0208 	orr.w	r2, r3, #8
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009494:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009498:	2b01      	cmp	r3, #1
 800949a:	d107      	bne.n	80094ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094a4:	f043 0304 	orr.w	r3, r3, #4
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094b8:	b004      	add	sp, #16
 80094ba:	4770      	bx	lr
 80094bc:	803c3800 	.word	0x803c3800

080094c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094da:	d901      	bls.n	80094e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e01b      	b.n	8009518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	daf2      	bge.n	80094ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	019b      	lsls	r3, r3, #6
 80094f0:	f043 0220 	orr.w	r2, r3, #32
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009504:	d901      	bls.n	800950a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e006      	b.n	8009518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b20      	cmp	r3, #32
 8009514:	d0f0      	beq.n	80094f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3301      	adds	r3, #1
 8009534:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800953c:	d901      	bls.n	8009542 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e018      	b.n	8009574 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	daf2      	bge.n	8009530 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2210      	movs	r2, #16
 8009552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009560:	d901      	bls.n	8009566 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e006      	b.n	8009574 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0310 	and.w	r3, r3, #16
 800956e:	2b10      	cmp	r3, #16
 8009570:	d0f0      	beq.n	8009554 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	68f9      	ldr	r1, [r7, #12]
 800959c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095a0:	4313      	orrs	r3, r2
 80095a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b087      	sub	sp, #28
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 0306 	and.w	r3, r3, #6
 80095ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d102      	bne.n	80095d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80095d2:	2300      	movs	r3, #0
 80095d4:	75fb      	strb	r3, [r7, #23]
 80095d6:	e00a      	b.n	80095ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d002      	beq.n	80095e4 <USB_GetDevSpeed+0x32>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b06      	cmp	r3, #6
 80095e2:	d102      	bne.n	80095ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80095e4:	2302      	movs	r3, #2
 80095e6:	75fb      	strb	r3, [r7, #23]
 80095e8:	e001      	b.n	80095ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80095ea:	230f      	movs	r3, #15
 80095ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d13a      	bne.n	800968e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800961e:	69da      	ldr	r2, [r3, #28]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	2101      	movs	r1, #1
 800962a:	fa01 f303 	lsl.w	r3, r1, r3
 800962e:	b29b      	uxth	r3, r3
 8009630:	68f9      	ldr	r1, [r7, #12]
 8009632:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009636:	4313      	orrs	r3, r2
 8009638:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d155      	bne.n	80096fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	791b      	ldrb	r3, [r3, #4]
 800966a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800966c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	059b      	lsls	r3, r3, #22
 8009672:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009674:	4313      	orrs	r3, r2
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	e036      	b.n	80096fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009694:	69da      	ldr	r2, [r3, #28]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	2101      	movs	r1, #1
 80096a0:	fa01 f303 	lsl.w	r3, r1, r3
 80096a4:	041b      	lsls	r3, r3, #16
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096ac:	4313      	orrs	r3, r2
 80096ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d11a      	bne.n	80096fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	791b      	ldrb	r3, [r3, #4]
 80096e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096e2:	430b      	orrs	r3, r1
 80096e4:	4313      	orrs	r3, r2
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d161      	bne.n	80097ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800973a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800973e:	d11f      	bne.n	8009780 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	0151      	lsls	r1, r2, #5
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	440a      	add	r2, r1
 8009756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800975a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800975e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800977a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800977e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 030f 	and.w	r3, r3, #15
 8009790:	2101      	movs	r1, #1
 8009792:	fa01 f303 	lsl.w	r3, r1, r3
 8009796:	b29b      	uxth	r3, r3
 8009798:	43db      	mvns	r3, r3
 800979a:	68f9      	ldr	r1, [r7, #12]
 800979c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097a0:	4013      	ands	r3, r2
 80097a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 030f 	and.w	r3, r3, #15
 80097b4:	2101      	movs	r1, #1
 80097b6:	fa01 f303 	lsl.w	r3, r1, r3
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	43db      	mvns	r3, r3
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097c4:	4013      	ands	r3, r2
 80097c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	0159      	lsls	r1, r3, #5
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	440b      	add	r3, r1
 80097de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e2:	4619      	mov	r1, r3
 80097e4:	4b35      	ldr	r3, [pc, #212]	@ (80098bc <USB_DeactivateEndpoint+0x1b0>)
 80097e6:	4013      	ands	r3, r2
 80097e8:	600b      	str	r3, [r1, #0]
 80097ea:	e060      	b.n	80098ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009802:	d11f      	bne.n	8009844 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	440a      	add	r2, r1
 800981a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800981e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009822:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	440a      	add	r2, r1
 800983a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800983e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009842:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800984a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f003 030f 	and.w	r3, r3, #15
 8009854:	2101      	movs	r1, #1
 8009856:	fa01 f303 	lsl.w	r3, r1, r3
 800985a:	041b      	lsls	r3, r3, #16
 800985c:	43db      	mvns	r3, r3
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009864:	4013      	ands	r3, r2
 8009866:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800986e:	69da      	ldr	r2, [r3, #28]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	2101      	movs	r1, #1
 800987a:	fa01 f303 	lsl.w	r3, r1, r3
 800987e:	041b      	lsls	r3, r3, #16
 8009880:	43db      	mvns	r3, r3
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009888:	4013      	ands	r3, r2
 800988a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	0159      	lsls	r1, r3, #5
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	440b      	add	r3, r1
 80098a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a6:	4619      	mov	r1, r3
 80098a8:	4b05      	ldr	r3, [pc, #20]	@ (80098c0 <USB_DeactivateEndpoint+0x1b4>)
 80098aa:	4013      	ands	r3, r2
 80098ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	ec337800 	.word	0xec337800
 80098c0:	eff37800 	.word	0xeff37800

080098c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08a      	sub	sp, #40	@ 0x28
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	4613      	mov	r3, r2
 80098d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	785b      	ldrb	r3, [r3, #1]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	f040 817f 	bne.w	8009be4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d132      	bne.n	8009954 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	0151      	lsls	r1, r2, #5
 8009900:	69fa      	ldr	r2, [r7, #28]
 8009902:	440a      	add	r2, r1
 8009904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009908:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800990c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	0151      	lsls	r1, r2, #5
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	440a      	add	r2, r1
 8009928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800992c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	0151      	lsls	r1, r2, #5
 8009944:	69fa      	ldr	r2, [r7, #28]
 8009946:	440a      	add	r2, r1
 8009948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800994c:	0cdb      	lsrs	r3, r3, #19
 800994e:	04db      	lsls	r3, r3, #19
 8009950:	6113      	str	r3, [r2, #16]
 8009952:	e097      	b.n	8009a84 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	0151      	lsls	r1, r2, #5
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	440a      	add	r2, r1
 800996a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800996e:	0cdb      	lsrs	r3, r3, #19
 8009970:	04db      	lsls	r3, r3, #19
 8009972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	0151      	lsls	r1, r2, #5
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	440a      	add	r2, r1
 800998a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800998e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009992:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009996:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d11a      	bne.n	80099d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	691a      	ldr	r2, [r3, #16]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d903      	bls.n	80099b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	689a      	ldr	r2, [r3, #8]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	69ba      	ldr	r2, [r7, #24]
 80099c2:	0151      	lsls	r1, r2, #5
 80099c4:	69fa      	ldr	r2, [r7, #28]
 80099c6:	440a      	add	r2, r1
 80099c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099d0:	6113      	str	r3, [r2, #16]
 80099d2:	e044      	b.n	8009a5e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	691a      	ldr	r2, [r3, #16]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	4413      	add	r3, r2
 80099de:	1e5a      	subs	r2, r3, #1
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f6:	691a      	ldr	r2, [r3, #16]
 80099f8:	8afb      	ldrh	r3, [r7, #22]
 80099fa:	04d9      	lsls	r1, r3, #19
 80099fc:	4ba4      	ldr	r3, [pc, #656]	@ (8009c90 <USB_EPStartXfer+0x3cc>)
 80099fe:	400b      	ands	r3, r1
 8009a00:	69b9      	ldr	r1, [r7, #24]
 8009a02:	0148      	lsls	r0, r1, #5
 8009a04:	69f9      	ldr	r1, [r7, #28]
 8009a06:	4401      	add	r1, r0
 8009a08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	791b      	ldrb	r3, [r3, #4]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d122      	bne.n	8009a5e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	69ba      	ldr	r2, [r7, #24]
 8009a28:	0151      	lsls	r1, r2, #5
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	440a      	add	r2, r1
 8009a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a32:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009a36:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a44:	691a      	ldr	r2, [r3, #16]
 8009a46:	8afb      	ldrh	r3, [r7, #22]
 8009a48:	075b      	lsls	r3, r3, #29
 8009a4a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009a4e:	69b9      	ldr	r1, [r7, #24]
 8009a50:	0148      	lsls	r0, r1, #5
 8009a52:	69f9      	ldr	r1, [r7, #28]
 8009a54:	4401      	add	r1, r0
 8009a56:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a6a:	691a      	ldr	r2, [r3, #16]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a74:	69b9      	ldr	r1, [r7, #24]
 8009a76:	0148      	lsls	r0, r1, #5
 8009a78:	69f9      	ldr	r1, [r7, #28]
 8009a7a:	4401      	add	r1, r0
 8009a7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a80:	4313      	orrs	r3, r2
 8009a82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d14b      	bne.n	8009b22 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d009      	beq.n	8009aa6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	791b      	ldrb	r3, [r3, #4]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d128      	bne.n	8009b00 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d110      	bne.n	8009ae0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	0151      	lsls	r1, r2, #5
 8009ad0:	69fa      	ldr	r2, [r7, #28]
 8009ad2:	440a      	add	r2, r1
 8009ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ad8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	e00f      	b.n	8009b00 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	0151      	lsls	r1, r2, #5
 8009af2:	69fa      	ldr	r2, [r7, #28]
 8009af4:	440a      	add	r2, r1
 8009af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009afe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	0151      	lsls	r1, r2, #5
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	440a      	add	r2, r1
 8009b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	e166      	b.n	8009df0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	0151      	lsls	r1, r2, #5
 8009b34:	69fa      	ldr	r2, [r7, #28]
 8009b36:	440a      	add	r2, r1
 8009b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b40:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	791b      	ldrb	r3, [r3, #4]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d015      	beq.n	8009b76 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 814e 	beq.w	8009df0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	f003 030f 	and.w	r3, r3, #15
 8009b64:	2101      	movs	r1, #1
 8009b66:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6a:	69f9      	ldr	r1, [r7, #28]
 8009b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b70:	4313      	orrs	r3, r2
 8009b72:	634b      	str	r3, [r1, #52]	@ 0x34
 8009b74:	e13c      	b.n	8009df0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d110      	bne.n	8009ba8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	e00f      	b.n	8009bc8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	0151      	lsls	r1, r2, #5
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	440a      	add	r2, r1
 8009bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bc6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	68d9      	ldr	r1, [r3, #12]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	781a      	ldrb	r2, [r3, #0]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	b298      	uxth	r0, r3
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	4603      	mov	r3, r0
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f9b9 	bl	8009f54 <USB_WritePacket>
 8009be2:	e105      	b.n	8009df0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	0151      	lsls	r1, r2, #5
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	440a      	add	r2, r1
 8009bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bfe:	0cdb      	lsrs	r3, r3, #19
 8009c00:	04db      	lsls	r3, r3, #19
 8009c02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	0151      	lsls	r1, r2, #5
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	440a      	add	r2, r1
 8009c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c1e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c22:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c26:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d132      	bne.n	8009c94 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	689a      	ldr	r2, [r3, #8]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	015a      	lsls	r2, r3, #5
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c5c:	69b9      	ldr	r1, [r7, #24]
 8009c5e:	0148      	lsls	r0, r1, #5
 8009c60:	69f9      	ldr	r1, [r7, #28]
 8009c62:	4401      	add	r1, r0
 8009c64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c8a:	6113      	str	r3, [r2, #16]
 8009c8c:	e062      	b.n	8009d54 <USB_EPStartXfer+0x490>
 8009c8e:	bf00      	nop
 8009c90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d123      	bne.n	8009ce4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca8:	691a      	ldr	r2, [r3, #16]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb2:	69b9      	ldr	r1, [r7, #24]
 8009cb4:	0148      	lsls	r0, r1, #5
 8009cb6:	69f9      	ldr	r1, [r7, #28]
 8009cb8:	4401      	add	r1, r0
 8009cba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	0151      	lsls	r1, r2, #5
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	440a      	add	r2, r1
 8009cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ce0:	6113      	str	r3, [r2, #16]
 8009ce2:	e037      	b.n	8009d54 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	4413      	add	r3, r2
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	8afa      	ldrh	r2, [r7, #22]
 8009d00:	fb03 f202 	mul.w	r2, r3, r2
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d14:	691a      	ldr	r2, [r3, #16]
 8009d16:	8afb      	ldrh	r3, [r7, #22]
 8009d18:	04d9      	lsls	r1, r3, #19
 8009d1a:	4b38      	ldr	r3, [pc, #224]	@ (8009dfc <USB_EPStartXfer+0x538>)
 8009d1c:	400b      	ands	r3, r1
 8009d1e:	69b9      	ldr	r1, [r7, #24]
 8009d20:	0148      	lsls	r0, r1, #5
 8009d22:	69f9      	ldr	r1, [r7, #28]
 8009d24:	4401      	add	r1, r0
 8009d26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	015a      	lsls	r2, r3, #5
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	4413      	add	r3, r2
 8009d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d3a:	691a      	ldr	r2, [r3, #16]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d44:	69b9      	ldr	r1, [r7, #24]
 8009d46:	0148      	lsls	r0, r1, #5
 8009d48:	69f9      	ldr	r1, [r7, #28]
 8009d4a:	4401      	add	r1, r0
 8009d4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d50:	4313      	orrs	r3, r2
 8009d52:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d10d      	bne.n	8009d76 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	68d9      	ldr	r1, [r3, #12]
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d72:	460a      	mov	r2, r1
 8009d74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	791b      	ldrb	r3, [r3, #4]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d128      	bne.n	8009dd0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d110      	bne.n	8009db0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	0151      	lsls	r1, r2, #5
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	440a      	add	r2, r1
 8009da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009da8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e00f      	b.n	8009dd0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	69fa      	ldr	r2, [r7, #28]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	0151      	lsls	r1, r2, #5
 8009de2:	69fa      	ldr	r2, [r7, #28]
 8009de4:	440a      	add	r2, r1
 8009de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009dee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3720      	adds	r7, #32
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	1ff80000 	.word	0x1ff80000

08009e00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	785b      	ldrb	r3, [r3, #1]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d14a      	bne.n	8009eb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e36:	f040 8086 	bne.w	8009f46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	7812      	ldrb	r2, [r2, #0]
 8009e4e:	0151      	lsls	r1, r2, #5
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	440a      	add	r2, r1
 8009e54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	7812      	ldrb	r2, [r2, #0]
 8009e72:	0151      	lsls	r1, r2, #5
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	440a      	add	r2, r1
 8009e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3301      	adds	r3, #1
 8009e86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d902      	bls.n	8009e98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	75fb      	strb	r3, [r7, #23]
          break;
 8009e96:	e056      	b.n	8009f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eb0:	d0e7      	beq.n	8009e82 <USB_EPStopXfer+0x82>
 8009eb2:	e048      	b.n	8009f46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ecc:	d13b      	bne.n	8009f46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	7812      	ldrb	r2, [r2, #0]
 8009ee2:	0151      	lsls	r1, r2, #5
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	440a      	add	r2, r1
 8009ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ef0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	7812      	ldrb	r2, [r2, #0]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d902      	bls.n	8009f2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
          break;
 8009f2a:	e00c      	b.n	8009f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f44:	d0e7      	beq.n	8009f16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b089      	sub	sp, #36	@ 0x24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4611      	mov	r1, r2
 8009f60:	461a      	mov	r2, r3
 8009f62:	460b      	mov	r3, r1
 8009f64:	71fb      	strb	r3, [r7, #7]
 8009f66:	4613      	mov	r3, r2
 8009f68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d123      	bne.n	8009fc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f7a:	88bb      	ldrh	r3, [r7, #4]
 8009f7c:	3303      	adds	r3, #3
 8009f7e:	089b      	lsrs	r3, r3, #2
 8009f80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f82:	2300      	movs	r3, #0
 8009f84:	61bb      	str	r3, [r7, #24]
 8009f86:	e018      	b.n	8009fba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	031a      	lsls	r2, r3, #12
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f94:	461a      	mov	r2, r3
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	3301      	adds	r3, #1
 8009fac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	61bb      	str	r3, [r7, #24]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3e2      	bcc.n	8009f88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3724      	adds	r7, #36	@ 0x24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b08b      	sub	sp, #44	@ 0x2c
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	089b      	lsrs	r3, r3, #2
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009fee:	88fb      	ldrh	r3, [r7, #6]
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	623b      	str	r3, [r7, #32]
 8009ffa:	e014      	b.n	800a026 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a006:	601a      	str	r2, [r3, #0]
    pDest++;
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	3301      	adds	r3, #1
 800a00c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	3301      	adds	r3, #1
 800a012:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a016:	3301      	adds	r3, #1
 800a018:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	3301      	adds	r3, #1
 800a01e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	3301      	adds	r3, #1
 800a024:	623b      	str	r3, [r7, #32]
 800a026:	6a3a      	ldr	r2, [r7, #32]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d3e6      	bcc.n	8009ffc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a02e:	8bfb      	ldrh	r3, [r7, #30]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d01e      	beq.n	800a072 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a03e:	461a      	mov	r2, r3
 800a040:	f107 0310 	add.w	r3, r7, #16
 800a044:	6812      	ldr	r2, [r2, #0]
 800a046:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	fa22 f303 	lsr.w	r3, r2, r3
 800a054:	b2da      	uxtb	r2, r3
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	701a      	strb	r2, [r3, #0]
      i++;
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	3301      	adds	r3, #1
 800a05e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a062:	3301      	adds	r3, #1
 800a064:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a066:	8bfb      	ldrh	r3, [r7, #30]
 800a068:	3b01      	subs	r3, #1
 800a06a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a06c:	8bfb      	ldrh	r3, [r7, #30]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1ea      	bne.n	800a048 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a074:	4618      	mov	r0, r3
 800a076:	372c      	adds	r7, #44	@ 0x2c
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d12c      	bne.n	800a0f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	db12      	blt.n	800a0d4 <USB_EPSetStall+0x54>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00f      	beq.n	800a0d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	0151      	lsls	r1, r2, #5
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	440a      	add	r2, r1
 800a0ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a0d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	e02b      	b.n	800a14e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	db12      	blt.n	800a12e <USB_EPSetStall+0xae>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00f      	beq.n	800a12e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a128:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a12c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	0151      	lsls	r1, r2, #5
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	440a      	add	r2, r1
 800a144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a14c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d128      	bne.n	800a1ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	0151      	lsls	r1, r2, #5
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	440a      	add	r2, r1
 800a18e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a192:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a196:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	791b      	ldrb	r3, [r3, #4]
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d003      	beq.n	800a1a8 <USB_EPClearStall+0x4c>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	791b      	ldrb	r3, [r3, #4]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d138      	bne.n	800a21a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	0151      	lsls	r1, r2, #5
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	440a      	add	r2, r1
 800a1be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	e027      	b.n	800a21a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	015a      	lsls	r2, r3, #5
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	0151      	lsls	r1, r2, #5
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	440a      	add	r2, r1
 800a1e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	791b      	ldrb	r3, [r3, #4]
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d003      	beq.n	800a1fa <USB_EPClearStall+0x9e>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	791b      	ldrb	r3, [r3, #4]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d10f      	bne.n	800a21a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	0151      	lsls	r1, r2, #5
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	440a      	add	r2, r1
 800a210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a218:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a246:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a24a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a25c:	68f9      	ldr	r1, [r7, #12]
 800a25e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a262:	4313      	orrs	r3, r2
 800a264:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a28e:	f023 0303 	bic.w	r3, r3, #3
 800a292:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2a2:	f023 0302 	bic.w	r3, r3, #2
 800a2a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2d0:	f023 0303 	bic.w	r3, r3, #3
 800a2d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2e4:	f043 0302 	orr.w	r3, r3, #2
 800a2e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4013      	ands	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a310:	68fb      	ldr	r3, [r7, #12]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	4013      	ands	r3, r2
 800a340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	0c1b      	lsrs	r3, r3, #16
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a352:	b480      	push	{r7}
 800a354:	b085      	sub	sp, #20
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	4013      	ands	r3, r2
 800a374:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	b29b      	uxth	r3, r3
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a396:	78fb      	ldrb	r3, [r7, #3]
 800a398:	015a      	lsls	r2, r3, #5
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	4413      	add	r3, r2
 800a39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b087      	sub	sp, #28
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f2:	01db      	lsls	r3, r3, #7
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4013      	ands	r3, r2
 800a40e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a410:	68bb      	ldr	r3, [r7, #8]
}
 800a412:	4618      	mov	r0, r3
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a41e:	b480      	push	{r7}
 800a420:	b083      	sub	sp, #12
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	f003 0301 	and.w	r3, r3, #1
}
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b085      	sub	sp, #20
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a454:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a458:	f023 0307 	bic.w	r3, r3, #7
 800a45c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a46c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a470:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	460b      	mov	r3, r1
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	333c      	adds	r3, #60	@ 0x3c
 800a496:	3304      	adds	r3, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	4a26      	ldr	r2, [pc, #152]	@ (800a538 <USB_EP0_OutStart+0xb8>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d90a      	bls.n	800a4ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4b4:	d101      	bne.n	800a4ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	e037      	b.n	800a52a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4e8:	f043 0318 	orr.w	r3, r3, #24
 800a4ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a500:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a502:	7afb      	ldrb	r3, [r7, #11]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d10f      	bne.n	800a528 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a50e:	461a      	mov	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a522:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	4f54300a 	.word	0x4f54300a

0800a53c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a554:	d901      	bls.n	800a55a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e01b      	b.n	800a592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	daf2      	bge.n	800a548 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	f043 0201 	orr.w	r2, r3, #1
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a57e:	d901      	bls.n	800a584 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e006      	b.n	800a592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d0f0      	beq.n	800a572 <USB_CoreReset+0x36>

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
	...

0800a5a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a5b0:	f002 fc38 	bl	800ce24 <USBD_static_malloc>
 800a5b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d109      	bne.n	800a5d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	32b0      	adds	r2, #176	@ 0xb0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e0d4      	b.n	800a77a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a5d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f003 f9f9 	bl	800d9ce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	32b0      	adds	r2, #176	@ 0xb0
 800a5e6:	68f9      	ldr	r1, [r7, #12]
 800a5e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	32b0      	adds	r2, #176	@ 0xb0
 800a5f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	7c1b      	ldrb	r3, [r3, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d138      	bne.n	800a67a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a608:	4b5e      	ldr	r3, [pc, #376]	@ (800a784 <USBD_CDC_Init+0x1e4>)
 800a60a:	7819      	ldrb	r1, [r3, #0]
 800a60c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a610:	2202      	movs	r2, #2
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f002 fae3 	bl	800cbde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a618:	4b5a      	ldr	r3, [pc, #360]	@ (800a784 <USBD_CDC_Init+0x1e4>)
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	f003 020f 	and.w	r2, r3, #15
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	440b      	add	r3, r1
 800a62c:	3324      	adds	r3, #36	@ 0x24
 800a62e:	2201      	movs	r2, #1
 800a630:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a632:	4b55      	ldr	r3, [pc, #340]	@ (800a788 <USBD_CDC_Init+0x1e8>)
 800a634:	7819      	ldrb	r1, [r3, #0]
 800a636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a63a:	2202      	movs	r2, #2
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f002 face 	bl	800cbde <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a642:	4b51      	ldr	r3, [pc, #324]	@ (800a788 <USBD_CDC_Init+0x1e8>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	f003 020f 	and.w	r2, r3, #15
 800a64a:	6879      	ldr	r1, [r7, #4]
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	440b      	add	r3, r1
 800a656:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a65a:	2201      	movs	r2, #1
 800a65c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a65e:	4b4b      	ldr	r3, [pc, #300]	@ (800a78c <USBD_CDC_Init+0x1ec>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	f003 020f 	and.w	r2, r3, #15
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	440b      	add	r3, r1
 800a672:	3326      	adds	r3, #38	@ 0x26
 800a674:	2210      	movs	r2, #16
 800a676:	801a      	strh	r2, [r3, #0]
 800a678:	e035      	b.n	800a6e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a67a:	4b42      	ldr	r3, [pc, #264]	@ (800a784 <USBD_CDC_Init+0x1e4>)
 800a67c:	7819      	ldrb	r1, [r3, #0]
 800a67e:	2340      	movs	r3, #64	@ 0x40
 800a680:	2202      	movs	r2, #2
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f002 faab 	bl	800cbde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a688:	4b3e      	ldr	r3, [pc, #248]	@ (800a784 <USBD_CDC_Init+0x1e4>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	f003 020f 	and.w	r2, r3, #15
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	4613      	mov	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	440b      	add	r3, r1
 800a69c:	3324      	adds	r3, #36	@ 0x24
 800a69e:	2201      	movs	r2, #1
 800a6a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6a2:	4b39      	ldr	r3, [pc, #228]	@ (800a788 <USBD_CDC_Init+0x1e8>)
 800a6a4:	7819      	ldrb	r1, [r3, #0]
 800a6a6:	2340      	movs	r3, #64	@ 0x40
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f002 fa97 	bl	800cbde <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6b0:	4b35      	ldr	r3, [pc, #212]	@ (800a788 <USBD_CDC_Init+0x1e8>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 020f 	and.w	r2, r3, #15
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a6cc:	4b2f      	ldr	r3, [pc, #188]	@ (800a78c <USBD_CDC_Init+0x1ec>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	f003 020f 	and.w	r2, r3, #15
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	440b      	add	r3, r1
 800a6e0:	3326      	adds	r3, #38	@ 0x26
 800a6e2:	2210      	movs	r2, #16
 800a6e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a6e6:	4b29      	ldr	r3, [pc, #164]	@ (800a78c <USBD_CDC_Init+0x1ec>)
 800a6e8:	7819      	ldrb	r1, [r3, #0]
 800a6ea:	2308      	movs	r3, #8
 800a6ec:	2203      	movs	r2, #3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f002 fa75 	bl	800cbde <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a6f4:	4b25      	ldr	r3, [pc, #148]	@ (800a78c <USBD_CDC_Init+0x1ec>)
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	f003 020f 	and.w	r2, r3, #15
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4613      	mov	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	440b      	add	r3, r1
 800a708:	3324      	adds	r3, #36	@ 0x24
 800a70a:	2201      	movs	r2, #1
 800a70c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	33b0      	adds	r3, #176	@ 0xb0
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a744:	2302      	movs	r3, #2
 800a746:	e018      	b.n	800a77a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	7c1b      	ldrb	r3, [r3, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10a      	bne.n	800a766 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a750:	4b0d      	ldr	r3, [pc, #52]	@ (800a788 <USBD_CDC_Init+0x1e8>)
 800a752:	7819      	ldrb	r1, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a75a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f002 fb2c 	bl	800cdbc <USBD_LL_PrepareReceive>
 800a764:	e008      	b.n	800a778 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a766:	4b08      	ldr	r3, [pc, #32]	@ (800a788 <USBD_CDC_Init+0x1e8>)
 800a768:	7819      	ldrb	r1, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a770:	2340      	movs	r3, #64	@ 0x40
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f002 fb22 	bl	800cdbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	200000ab 	.word	0x200000ab
 800a788:	200000ac 	.word	0x200000ac
 800a78c:	200000ad 	.word	0x200000ad

0800a790 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a79c:	4b3a      	ldr	r3, [pc, #232]	@ (800a888 <USBD_CDC_DeInit+0xf8>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f002 fa41 	bl	800cc2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a7a8:	4b37      	ldr	r3, [pc, #220]	@ (800a888 <USBD_CDC_DeInit+0xf8>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f003 020f 	and.w	r2, r3, #15
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	3324      	adds	r3, #36	@ 0x24
 800a7be:	2200      	movs	r2, #0
 800a7c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a7c2:	4b32      	ldr	r3, [pc, #200]	@ (800a88c <USBD_CDC_DeInit+0xfc>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f002 fa2e 	bl	800cc2a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a7ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a88c <USBD_CDC_DeInit+0xfc>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f003 020f 	and.w	r2, r3, #15
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	440b      	add	r3, r1
 800a7e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a7ea:	4b29      	ldr	r3, [pc, #164]	@ (800a890 <USBD_CDC_DeInit+0x100>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f002 fa1a 	bl	800cc2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a7f6:	4b26      	ldr	r3, [pc, #152]	@ (800a890 <USBD_CDC_DeInit+0x100>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	f003 020f 	and.w	r2, r3, #15
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	4613      	mov	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	440b      	add	r3, r1
 800a80a:	3324      	adds	r3, #36	@ 0x24
 800a80c:	2200      	movs	r2, #0
 800a80e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a810:	4b1f      	ldr	r3, [pc, #124]	@ (800a890 <USBD_CDC_DeInit+0x100>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	f003 020f 	and.w	r2, r3, #15
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	4613      	mov	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	440b      	add	r3, r1
 800a824:	3326      	adds	r3, #38	@ 0x26
 800a826:	2200      	movs	r2, #0
 800a828:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	32b0      	adds	r2, #176	@ 0xb0
 800a834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01f      	beq.n	800a87c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	33b0      	adds	r3, #176	@ 0xb0
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	32b0      	adds	r2, #176	@ 0xb0
 800a85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85e:	4618      	mov	r0, r3
 800a860:	f002 faee 	bl	800ce40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	32b0      	adds	r2, #176	@ 0xb0
 800a86e:	2100      	movs	r1, #0
 800a870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	200000ab 	.word	0x200000ab
 800a88c:	200000ac 	.word	0x200000ac
 800a890:	200000ad 	.word	0x200000ad

0800a894 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	32b0      	adds	r2, #176	@ 0xb0
 800a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e0bf      	b.n	800aa44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d050      	beq.n	800a972 <USBD_CDC_Setup+0xde>
 800a8d0:	2b20      	cmp	r3, #32
 800a8d2:	f040 80af 	bne.w	800aa34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	88db      	ldrh	r3, [r3, #6]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d03a      	beq.n	800a954 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	da1b      	bge.n	800a920 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	33b0      	adds	r3, #176	@ 0xb0
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a8fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	88d2      	ldrh	r2, [r2, #6]
 800a904:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	88db      	ldrh	r3, [r3, #6]
 800a90a:	2b07      	cmp	r3, #7
 800a90c:	bf28      	it	cs
 800a90e:	2307      	movcs	r3, #7
 800a910:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	89fa      	ldrh	r2, [r7, #14]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 fd53 	bl	800c3c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a91e:	e090      	b.n	800aa42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	785a      	ldrb	r2, [r3, #1]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	88db      	ldrh	r3, [r3, #6]
 800a92e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a930:	d803      	bhi.n	800a93a <USBD_CDC_Setup+0xa6>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	88db      	ldrh	r3, [r3, #6]
 800a936:	b2da      	uxtb	r2, r3
 800a938:	e000      	b.n	800a93c <USBD_CDC_Setup+0xa8>
 800a93a:	2240      	movs	r2, #64	@ 0x40
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a942:	6939      	ldr	r1, [r7, #16]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a94a:	461a      	mov	r2, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 fd65 	bl	800c41c <USBD_CtlPrepareRx>
      break;
 800a952:	e076      	b.n	800aa42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	33b0      	adds	r3, #176	@ 0xb0
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	7850      	ldrb	r0, [r2, #1]
 800a96a:	2200      	movs	r2, #0
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	4798      	blx	r3
      break;
 800a970:	e067      	b.n	800aa42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b0b      	cmp	r3, #11
 800a978:	d851      	bhi.n	800aa1e <USBD_CDC_Setup+0x18a>
 800a97a:	a201      	add	r2, pc, #4	@ (adr r2, 800a980 <USBD_CDC_Setup+0xec>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800a9b1 	.word	0x0800a9b1
 800a984:	0800aa2d 	.word	0x0800aa2d
 800a988:	0800aa1f 	.word	0x0800aa1f
 800a98c:	0800aa1f 	.word	0x0800aa1f
 800a990:	0800aa1f 	.word	0x0800aa1f
 800a994:	0800aa1f 	.word	0x0800aa1f
 800a998:	0800aa1f 	.word	0x0800aa1f
 800a99c:	0800aa1f 	.word	0x0800aa1f
 800a9a0:	0800aa1f 	.word	0x0800aa1f
 800a9a4:	0800aa1f 	.word	0x0800aa1f
 800a9a8:	0800a9db 	.word	0x0800a9db
 800a9ac:	0800aa05 	.word	0x0800aa05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d107      	bne.n	800a9cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9bc:	f107 030a 	add.w	r3, r7, #10
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f001 fcfd 	bl	800c3c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9ca:	e032      	b.n	800aa32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f001 fc7b 	bl	800c2ca <USBD_CtlError>
            ret = USBD_FAIL;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	75fb      	strb	r3, [r7, #23]
          break;
 800a9d8:	e02b      	b.n	800aa32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d107      	bne.n	800a9f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9e6:	f107 030d 	add.w	r3, r7, #13
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 fce8 	bl	800c3c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9f4:	e01d      	b.n	800aa32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 fc66 	bl	800c2ca <USBD_CtlError>
            ret = USBD_FAIL;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	75fb      	strb	r3, [r7, #23]
          break;
 800aa02:	e016      	b.n	800aa32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d00f      	beq.n	800aa30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f001 fc59 	bl	800c2ca <USBD_CtlError>
            ret = USBD_FAIL;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa1c:	e008      	b.n	800aa30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 fc52 	bl	800c2ca <USBD_CtlError>
          ret = USBD_FAIL;
 800aa26:	2303      	movs	r3, #3
 800aa28:	75fb      	strb	r3, [r7, #23]
          break;
 800aa2a:	e002      	b.n	800aa32 <USBD_CDC_Setup+0x19e>
          break;
 800aa2c:	bf00      	nop
 800aa2e:	e008      	b.n	800aa42 <USBD_CDC_Setup+0x1ae>
          break;
 800aa30:	bf00      	nop
      }
      break;
 800aa32:	e006      	b.n	800aa42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f001 fc47 	bl	800c2ca <USBD_CtlError>
      ret = USBD_FAIL;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa40:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	32b0      	adds	r2, #176	@ 0xb0
 800aa6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e065      	b.n	800ab42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	32b0      	adds	r2, #176	@ 0xb0
 800aa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa86:	78fb      	ldrb	r3, [r7, #3]
 800aa88:	f003 020f 	and.w	r2, r3, #15
 800aa8c:	6879      	ldr	r1, [r7, #4]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	440b      	add	r3, r1
 800aa98:	3318      	adds	r3, #24
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d02f      	beq.n	800ab00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	f003 020f 	and.w	r2, r3, #15
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	440b      	add	r3, r1
 800aab2:	3318      	adds	r3, #24
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	f003 010f 	and.w	r1, r3, #15
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	460b      	mov	r3, r1
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	440b      	add	r3, r1
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4403      	add	r3, r0
 800aac8:	331c      	adds	r3, #28
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	fbb2 f1f3 	udiv	r1, r2, r3
 800aad0:	fb01 f303 	mul.w	r3, r1, r3
 800aad4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d112      	bne.n	800ab00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aada:	78fb      	ldrb	r3, [r7, #3]
 800aadc:	f003 020f 	and.w	r2, r3, #15
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	440b      	add	r3, r1
 800aaec:	3318      	adds	r3, #24
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aaf2:	78f9      	ldrb	r1, [r7, #3]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f002 f93e 	bl	800cd7a <USBD_LL_Transmit>
 800aafe:	e01f      	b.n	800ab40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	33b0      	adds	r3, #176	@ 0xb0
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d010      	beq.n	800ab40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	33b0      	adds	r3, #176	@ 0xb0
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ab3c:	78fa      	ldrb	r2, [r7, #3]
 800ab3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	32b0      	adds	r2, #176	@ 0xb0
 800ab60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	32b0      	adds	r2, #176	@ 0xb0
 800ab70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e01a      	b.n	800abb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f002 f93c 	bl	800cdfe <USBD_LL_GetRxDataSize>
 800ab86:	4602      	mov	r2, r0
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	33b0      	adds	r3, #176	@ 0xb0
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800abac:	4611      	mov	r1, r2
 800abae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	32b0      	adds	r2, #176	@ 0xb0
 800abcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800abd8:	2303      	movs	r3, #3
 800abda:	e024      	b.n	800ac26 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	33b0      	adds	r3, #176	@ 0xb0
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d019      	beq.n	800ac24 <USBD_CDC_EP0_RxReady+0x6a>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800abf6:	2bff      	cmp	r3, #255	@ 0xff
 800abf8:	d014      	beq.n	800ac24 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	33b0      	adds	r3, #176	@ 0xb0
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	22ff      	movs	r2, #255	@ 0xff
 800ac20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac38:	2182      	movs	r1, #130	@ 0x82
 800ac3a:	4818      	ldr	r0, [pc, #96]	@ (800ac9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac3c:	f000 fd0f 	bl	800b65e <USBD_GetEpDesc>
 800ac40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac42:	2101      	movs	r1, #1
 800ac44:	4815      	ldr	r0, [pc, #84]	@ (800ac9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac46:	f000 fd0a 	bl	800b65e <USBD_GetEpDesc>
 800ac4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac4c:	2181      	movs	r1, #129	@ 0x81
 800ac4e:	4813      	ldr	r0, [pc, #76]	@ (800ac9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac50:	f000 fd05 	bl	800b65e <USBD_GetEpDesc>
 800ac54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2210      	movs	r2, #16
 800ac60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d006      	beq.n	800ac76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac70:	711a      	strb	r2, [r3, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d006      	beq.n	800ac8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac84:	711a      	strb	r2, [r3, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2243      	movs	r2, #67	@ 0x43
 800ac8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac90:	4b02      	ldr	r3, [pc, #8]	@ (800ac9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000068 	.word	0x20000068

0800aca0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aca8:	2182      	movs	r1, #130	@ 0x82
 800acaa:	4818      	ldr	r0, [pc, #96]	@ (800ad0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acac:	f000 fcd7 	bl	800b65e <USBD_GetEpDesc>
 800acb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acb2:	2101      	movs	r1, #1
 800acb4:	4815      	ldr	r0, [pc, #84]	@ (800ad0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acb6:	f000 fcd2 	bl	800b65e <USBD_GetEpDesc>
 800acba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acbc:	2181      	movs	r1, #129	@ 0x81
 800acbe:	4813      	ldr	r0, [pc, #76]	@ (800ad0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acc0:	f000 fccd 	bl	800b65e <USBD_GetEpDesc>
 800acc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	2210      	movs	r2, #16
 800acd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d006      	beq.n	800ace6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2200      	movs	r2, #0
 800acdc:	711a      	strb	r2, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f042 0202 	orr.w	r2, r2, #2
 800ace4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	711a      	strb	r2, [r3, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f042 0202 	orr.w	r2, r2, #2
 800acf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2243      	movs	r2, #67	@ 0x43
 800acfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad00:	4b02      	ldr	r3, [pc, #8]	@ (800ad0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000068 	.word	0x20000068

0800ad10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad18:	2182      	movs	r1, #130	@ 0x82
 800ad1a:	4818      	ldr	r0, [pc, #96]	@ (800ad7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad1c:	f000 fc9f 	bl	800b65e <USBD_GetEpDesc>
 800ad20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad22:	2101      	movs	r1, #1
 800ad24:	4815      	ldr	r0, [pc, #84]	@ (800ad7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad26:	f000 fc9a 	bl	800b65e <USBD_GetEpDesc>
 800ad2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad2c:	2181      	movs	r1, #129	@ 0x81
 800ad2e:	4813      	ldr	r0, [pc, #76]	@ (800ad7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad30:	f000 fc95 	bl	800b65e <USBD_GetEpDesc>
 800ad34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d002      	beq.n	800ad42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2210      	movs	r2, #16
 800ad40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad50:	711a      	strb	r2, [r3, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d006      	beq.n	800ad6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad64:	711a      	strb	r2, [r3, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2243      	movs	r2, #67	@ 0x43
 800ad6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad70:	4b02      	ldr	r3, [pc, #8]	@ (800ad7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3718      	adds	r7, #24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20000068 	.word	0x20000068

0800ad80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	220a      	movs	r2, #10
 800ad8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad8e:	4b03      	ldr	r3, [pc, #12]	@ (800ad9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	20000024 	.word	0x20000024

0800ada0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e009      	b.n	800adc8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	33b0      	adds	r3, #176	@ 0xb0
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	32b0      	adds	r2, #176	@ 0xb0
 800adea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e008      	b.n	800ae0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	32b0      	adds	r2, #176	@ 0xb0
 800ae2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e004      	b.n	800ae46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
	...

0800ae54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32b0      	adds	r2, #176	@ 0xb0
 800ae66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	32b0      	adds	r2, #176	@ 0xb0
 800ae76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e018      	b.n	800aeb4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	7c1b      	ldrb	r3, [r3, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae8a:	4b0c      	ldr	r3, [pc, #48]	@ (800aebc <USBD_CDC_ReceivePacket+0x68>)
 800ae8c:	7819      	ldrb	r1, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f001 ff8f 	bl	800cdbc <USBD_LL_PrepareReceive>
 800ae9e:	e008      	b.n	800aeb2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aea0:	4b06      	ldr	r3, [pc, #24]	@ (800aebc <USBD_CDC_ReceivePacket+0x68>)
 800aea2:	7819      	ldrb	r1, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aeaa:	2340      	movs	r3, #64	@ 0x40
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 ff85 	bl	800cdbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	200000ac 	.word	0x200000ac

0800aec0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aed4:	2303      	movs	r3, #3
 800aed6:	e01f      	b.n	800af18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	79fa      	ldrb	r2, [r7, #7]
 800af0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f001 fdff 	bl	800cb10 <USBD_LL_Init>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af16:	7dfb      	ldrb	r3, [r7, #23]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af34:	2303      	movs	r3, #3
 800af36:	e025      	b.n	800af84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	32ae      	adds	r2, #174	@ 0xae
 800af4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00f      	beq.n	800af74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	32ae      	adds	r2, #174	@ 0xae
 800af5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af64:	f107 020e 	add.w	r2, r7, #14
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
 800af6c:	4602      	mov	r2, r0
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fe07 	bl	800cba8 <USBD_LL_Start>
 800af9a:	4603      	mov	r3, r0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800afae:	4618      	mov	r0, r3
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	460b      	mov	r3, r1
 800afc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d009      	beq.n	800afe8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	78fa      	ldrb	r2, [r7, #3]
 800afde:	4611      	mov	r1, r2
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	4798      	blx	r3
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	460b      	mov	r3, r1
 800affc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	78fa      	ldrb	r2, [r7, #3]
 800b00c:	4611      	mov	r1, r2
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	4798      	blx	r3
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b018:	2303      	movs	r3, #3
 800b01a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 f90c 	bl	800c256 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b04c:	461a      	mov	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b05a:	f003 031f 	and.w	r3, r3, #31
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d01a      	beq.n	800b098 <USBD_LL_SetupStage+0x72>
 800b062:	2b02      	cmp	r3, #2
 800b064:	d822      	bhi.n	800b0ac <USBD_LL_SetupStage+0x86>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <USBD_LL_SetupStage+0x4a>
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d00a      	beq.n	800b084 <USBD_LL_SetupStage+0x5e>
 800b06e:	e01d      	b.n	800b0ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fb63 	bl	800b744 <USBD_StdDevReq>
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]
      break;
 800b082:	e020      	b.n	800b0c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fbcb 	bl	800b828 <USBD_StdItfReq>
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
      break;
 800b096:	e016      	b.n	800b0c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fc2d 	bl	800b900 <USBD_StdEPReq>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0aa:	e00c      	b.n	800b0c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b0b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f001 fdd4 	bl	800cc68 <USBD_LL_StallEP>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c4:	bf00      	nop
  }

  return ret;
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d16e      	bne.n	800b1c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b0ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	f040 8098 	bne.w	800b22c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	689a      	ldr	r2, [r3, #8]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	429a      	cmp	r2, r3
 800b106:	d913      	bls.n	800b130 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	689a      	ldr	r2, [r3, #8]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	1ad2      	subs	r2, r2, r3
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	4293      	cmp	r3, r2
 800b120:	bf28      	it	cs
 800b122:	4613      	movcs	r3, r2
 800b124:	461a      	mov	r2, r3
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f001 f994 	bl	800c456 <USBD_CtlContinueRx>
 800b12e:	e07d      	b.n	800b22c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b136:	f003 031f 	and.w	r3, r3, #31
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d014      	beq.n	800b168 <USBD_LL_DataOutStage+0x98>
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d81d      	bhi.n	800b17e <USBD_LL_DataOutStage+0xae>
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <USBD_LL_DataOutStage+0x7c>
 800b146:	2b01      	cmp	r3, #1
 800b148:	d003      	beq.n	800b152 <USBD_LL_DataOutStage+0x82>
 800b14a:	e018      	b.n	800b17e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75bb      	strb	r3, [r7, #22]
            break;
 800b150:	e018      	b.n	800b184 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	4619      	mov	r1, r3
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fa64 	bl	800b62a <USBD_CoreFindIF>
 800b162:	4603      	mov	r3, r0
 800b164:	75bb      	strb	r3, [r7, #22]
            break;
 800b166:	e00d      	b.n	800b184 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	4619      	mov	r1, r3
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f000 fa66 	bl	800b644 <USBD_CoreFindEP>
 800b178:	4603      	mov	r3, r0
 800b17a:	75bb      	strb	r3, [r7, #22]
            break;
 800b17c:	e002      	b.n	800b184 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	75bb      	strb	r3, [r7, #22]
            break;
 800b182:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b184:	7dbb      	ldrb	r3, [r7, #22]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d119      	bne.n	800b1be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b03      	cmp	r3, #3
 800b194:	d113      	bne.n	800b1be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b196:	7dba      	ldrb	r2, [r7, #22]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	32ae      	adds	r2, #174	@ 0xae
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00b      	beq.n	800b1be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b1a6:	7dba      	ldrb	r2, [r7, #22]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b1ae:	7dba      	ldrb	r2, [r7, #22]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	32ae      	adds	r2, #174	@ 0xae
 800b1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f001 f95a 	bl	800c478 <USBD_CtlSendStatus>
 800b1c4:	e032      	b.n	800b22c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b1c6:	7afb      	ldrb	r3, [r7, #11]
 800b1c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 fa37 	bl	800b644 <USBD_CoreFindEP>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1da:	7dbb      	ldrb	r3, [r7, #22]
 800b1dc:	2bff      	cmp	r3, #255	@ 0xff
 800b1de:	d025      	beq.n	800b22c <USBD_LL_DataOutStage+0x15c>
 800b1e0:	7dbb      	ldrb	r3, [r7, #22]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d122      	bne.n	800b22c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d117      	bne.n	800b222 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b1f2:	7dba      	ldrb	r2, [r7, #22]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	32ae      	adds	r2, #174	@ 0xae
 800b1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00f      	beq.n	800b222 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b202:	7dba      	ldrb	r2, [r7, #22]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b20a:	7dba      	ldrb	r2, [r7, #22]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	32ae      	adds	r2, #174	@ 0xae
 800b210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	7afa      	ldrb	r2, [r7, #11]
 800b218:	4611      	mov	r1, r2
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	4798      	blx	r3
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	e000      	b.n	800b22e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	460b      	mov	r3, r1
 800b240:	607a      	str	r2, [r7, #4]
 800b242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b244:	7afb      	ldrb	r3, [r7, #11]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d16f      	bne.n	800b32a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3314      	adds	r3, #20
 800b24e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b256:	2b02      	cmp	r3, #2
 800b258:	d15a      	bne.n	800b310 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	689a      	ldr	r2, [r3, #8]
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	429a      	cmp	r2, r3
 800b264:	d914      	bls.n	800b290 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	1ad2      	subs	r2, r2, r3
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	461a      	mov	r2, r3
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f001 f8bc 	bl	800c3fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b282:	2300      	movs	r3, #0
 800b284:	2200      	movs	r2, #0
 800b286:	2100      	movs	r1, #0
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f001 fd97 	bl	800cdbc <USBD_LL_PrepareReceive>
 800b28e:	e03f      	b.n	800b310 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	68da      	ldr	r2, [r3, #12]
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d11c      	bne.n	800b2d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d316      	bcc.n	800b2d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d20f      	bcs.n	800b2d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f001 f89d 	bl	800c3fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f001 fd74 	bl	800cdbc <USBD_LL_PrepareReceive>
 800b2d4:	e01c      	b.n	800b310 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d10f      	bne.n	800b302 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d009      	beq.n	800b302 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b302:	2180      	movs	r1, #128	@ 0x80
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f001 fcaf 	bl	800cc68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f001 f8c7 	bl	800c49e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d03a      	beq.n	800b390 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7ff fe42 	bl	800afa4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b328:	e032      	b.n	800b390 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b32a:	7afb      	ldrb	r3, [r7, #11]
 800b32c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b330:	b2db      	uxtb	r3, r3
 800b332:	4619      	mov	r1, r3
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 f985 	bl	800b644 <USBD_CoreFindEP>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	2bff      	cmp	r3, #255	@ 0xff
 800b342:	d025      	beq.n	800b390 <USBD_LL_DataInStage+0x15a>
 800b344:	7dfb      	ldrb	r3, [r7, #23]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d122      	bne.n	800b390 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b03      	cmp	r3, #3
 800b354:	d11c      	bne.n	800b390 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b356:	7dfa      	ldrb	r2, [r7, #23]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	32ae      	adds	r2, #174	@ 0xae
 800b35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d014      	beq.n	800b390 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b366:	7dfa      	ldrb	r2, [r7, #23]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b36e:	7dfa      	ldrb	r2, [r7, #23]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	32ae      	adds	r2, #174	@ 0xae
 800b374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	7afa      	ldrb	r2, [r7, #11]
 800b37c:	4611      	mov	r1, r2
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	4798      	blx	r3
 800b382:	4603      	mov	r3, r0
 800b384:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b386:	7dbb      	ldrb	r3, [r7, #22]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b38c:	7dbb      	ldrb	r3, [r7, #22]
 800b38e:	e000      	b.n	800b392 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d014      	beq.n	800b400 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00e      	beq.n	800b400 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	6852      	ldr	r2, [r2, #4]
 800b3ee:	b2d2      	uxtb	r2, r2
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	4798      	blx	r3
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b400:	2340      	movs	r3, #64	@ 0x40
 800b402:	2200      	movs	r2, #0
 800b404:	2100      	movs	r1, #0
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f001 fbe9 	bl	800cbde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2240      	movs	r2, #64	@ 0x40
 800b418:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b41c:	2340      	movs	r3, #64	@ 0x40
 800b41e:	2200      	movs	r2, #0
 800b420:	2180      	movs	r1, #128	@ 0x80
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 fbdb 	bl	800cbde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2240      	movs	r2, #64	@ 0x40
 800b432:	621a      	str	r2, [r3, #32]

  return ret;
 800b434:	7bfb      	ldrb	r3, [r7, #15]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	460b      	mov	r3, r1
 800b448:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d006      	beq.n	800b480 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2204      	movs	r2, #4
 800b484:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b496:	b480      	push	{r7}
 800b498:	b083      	sub	sp, #12
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d106      	bne.n	800b4b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d110      	bne.n	800b4fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00b      	beq.n	800b4fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d005      	beq.n	800b4fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	460b      	mov	r3, r1
 800b510:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	32ae      	adds	r2, #174	@ 0xae
 800b51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	e01c      	b.n	800b562 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	2b03      	cmp	r3, #3
 800b532:	d115      	bne.n	800b560 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	32ae      	adds	r2, #174	@ 0xae
 800b53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00b      	beq.n	800b560 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	32ae      	adds	r2, #174	@ 0xae
 800b552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	78fa      	ldrb	r2, [r7, #3]
 800b55a:	4611      	mov	r1, r2
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b082      	sub	sp, #8
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	460b      	mov	r3, r1
 800b574:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	32ae      	adds	r2, #174	@ 0xae
 800b580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	e01c      	b.n	800b5c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b03      	cmp	r3, #3
 800b596:	d115      	bne.n	800b5c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	32ae      	adds	r2, #174	@ 0xae
 800b5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	32ae      	adds	r2, #174	@ 0xae
 800b5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5bc:	78fa      	ldrb	r2, [r7, #3]
 800b5be:	4611      	mov	r1, r2
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b083      	sub	sp, #12
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00e      	beq.n	800b620 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6852      	ldr	r2, [r2, #4]
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	4611      	mov	r1, r2
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b61c:	2303      	movs	r3, #3
 800b61e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b620:	7bfb      	ldrb	r3, [r7, #15]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	460b      	mov	r3, r1
 800b634:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b636:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b638:	4618      	mov	r0, r3
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b650:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b652:	4618      	mov	r0, r3
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b086      	sub	sp, #24
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b672:	2300      	movs	r3, #0
 800b674:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	885b      	ldrh	r3, [r3, #2]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	7812      	ldrb	r2, [r2, #0]
 800b680:	4293      	cmp	r3, r2
 800b682:	d91f      	bls.n	800b6c4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b68a:	e013      	b.n	800b6b4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b68c:	f107 030a 	add.w	r3, r7, #10
 800b690:	4619      	mov	r1, r3
 800b692:	6978      	ldr	r0, [r7, #20]
 800b694:	f000 f81b 	bl	800b6ce <USBD_GetNextDesc>
 800b698:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	785b      	ldrb	r3, [r3, #1]
 800b69e:	2b05      	cmp	r3, #5
 800b6a0:	d108      	bne.n	800b6b4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	789b      	ldrb	r3, [r3, #2]
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d008      	beq.n	800b6c2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	885b      	ldrh	r3, [r3, #2]
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	897b      	ldrh	r3, [r7, #10]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d8e5      	bhi.n	800b68c <USBD_GetEpDesc+0x2e>
 800b6c0:	e000      	b.n	800b6c4 <USBD_GetEpDesc+0x66>
          break;
 800b6c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6c4:	693b      	ldr	r3, [r7, #16]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b085      	sub	sp, #20
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	881b      	ldrh	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	7812      	ldrb	r2, [r2, #0]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b706:	b480      	push	{r7}
 800b708:	b087      	sub	sp, #28
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	3301      	adds	r3, #1
 800b71c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b724:	8a3b      	ldrh	r3, [r7, #16]
 800b726:	021b      	lsls	r3, r3, #8
 800b728:	b21a      	sxth	r2, r3
 800b72a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b72e:	4313      	orrs	r3, r2
 800b730:	b21b      	sxth	r3, r3
 800b732:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b734:	89fb      	ldrh	r3, [r7, #14]
}
 800b736:	4618      	mov	r0, r3
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
	...

0800b744 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b75a:	2b40      	cmp	r3, #64	@ 0x40
 800b75c:	d005      	beq.n	800b76a <USBD_StdDevReq+0x26>
 800b75e:	2b40      	cmp	r3, #64	@ 0x40
 800b760:	d857      	bhi.n	800b812 <USBD_StdDevReq+0xce>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00f      	beq.n	800b786 <USBD_StdDevReq+0x42>
 800b766:	2b20      	cmp	r3, #32
 800b768:	d153      	bne.n	800b812 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	32ae      	adds	r2, #174	@ 0xae
 800b774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	4798      	blx	r3
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]
      break;
 800b784:	e04a      	b.n	800b81c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	785b      	ldrb	r3, [r3, #1]
 800b78a:	2b09      	cmp	r3, #9
 800b78c:	d83b      	bhi.n	800b806 <USBD_StdDevReq+0xc2>
 800b78e:	a201      	add	r2, pc, #4	@ (adr r2, 800b794 <USBD_StdDevReq+0x50>)
 800b790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b794:	0800b7e9 	.word	0x0800b7e9
 800b798:	0800b7fd 	.word	0x0800b7fd
 800b79c:	0800b807 	.word	0x0800b807
 800b7a0:	0800b7f3 	.word	0x0800b7f3
 800b7a4:	0800b807 	.word	0x0800b807
 800b7a8:	0800b7c7 	.word	0x0800b7c7
 800b7ac:	0800b7bd 	.word	0x0800b7bd
 800b7b0:	0800b807 	.word	0x0800b807
 800b7b4:	0800b7df 	.word	0x0800b7df
 800b7b8:	0800b7d1 	.word	0x0800b7d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fa3c 	bl	800bc3c <USBD_GetDescriptor>
          break;
 800b7c4:	e024      	b.n	800b810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fba1 	bl	800bf10 <USBD_SetAddress>
          break;
 800b7ce:	e01f      	b.n	800b810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fbe0 	bl	800bf98 <USBD_SetConfig>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	73fb      	strb	r3, [r7, #15]
          break;
 800b7dc:	e018      	b.n	800b810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fc83 	bl	800c0ec <USBD_GetConfig>
          break;
 800b7e6:	e013      	b.n	800b810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fcb4 	bl	800c158 <USBD_GetStatus>
          break;
 800b7f0:	e00e      	b.n	800b810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fce3 	bl	800c1c0 <USBD_SetFeature>
          break;
 800b7fa:	e009      	b.n	800b810 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fd07 	bl	800c212 <USBD_ClrFeature>
          break;
 800b804:	e004      	b.n	800b810 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fd5e 	bl	800c2ca <USBD_CtlError>
          break;
 800b80e:	bf00      	nop
      }
      break;
 800b810:	e004      	b.n	800b81c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fd58 	bl	800c2ca <USBD_CtlError>
      break;
 800b81a:	bf00      	nop
  }

  return ret;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop

0800b828 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b83e:	2b40      	cmp	r3, #64	@ 0x40
 800b840:	d005      	beq.n	800b84e <USBD_StdItfReq+0x26>
 800b842:	2b40      	cmp	r3, #64	@ 0x40
 800b844:	d852      	bhi.n	800b8ec <USBD_StdItfReq+0xc4>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <USBD_StdItfReq+0x26>
 800b84a:	2b20      	cmp	r3, #32
 800b84c:	d14e      	bne.n	800b8ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b854:	b2db      	uxtb	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d840      	bhi.n	800b8de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	889b      	ldrh	r3, [r3, #4]
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b01      	cmp	r3, #1
 800b864:	d836      	bhi.n	800b8d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	889b      	ldrh	r3, [r3, #4]
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fedb 	bl	800b62a <USBD_CoreFindIF>
 800b874:	4603      	mov	r3, r0
 800b876:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2bff      	cmp	r3, #255	@ 0xff
 800b87c:	d01d      	beq.n	800b8ba <USBD_StdItfReq+0x92>
 800b87e:	7bbb      	ldrb	r3, [r7, #14]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d11a      	bne.n	800b8ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b884:	7bba      	ldrb	r2, [r7, #14]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	32ae      	adds	r2, #174	@ 0xae
 800b88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00f      	beq.n	800b8b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b894:	7bba      	ldrb	r2, [r7, #14]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b89c:	7bba      	ldrb	r2, [r7, #14]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	32ae      	adds	r2, #174	@ 0xae
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8b2:	e004      	b.n	800b8be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8b8:	e001      	b.n	800b8be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	88db      	ldrh	r3, [r3, #6]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d110      	bne.n	800b8e8 <USBD_StdItfReq+0xc0>
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10d      	bne.n	800b8e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fdd3 	bl	800c478 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8d2:	e009      	b.n	800b8e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fcf7 	bl	800c2ca <USBD_CtlError>
          break;
 800b8dc:	e004      	b.n	800b8e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fcf2 	bl	800c2ca <USBD_CtlError>
          break;
 800b8e6:	e000      	b.n	800b8ea <USBD_StdItfReq+0xc2>
          break;
 800b8e8:	bf00      	nop
      }
      break;
 800b8ea:	e004      	b.n	800b8f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fceb 	bl	800c2ca <USBD_CtlError>
      break;
 800b8f4:	bf00      	nop
  }

  return ret;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	889b      	ldrh	r3, [r3, #4]
 800b912:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b91c:	2b40      	cmp	r3, #64	@ 0x40
 800b91e:	d007      	beq.n	800b930 <USBD_StdEPReq+0x30>
 800b920:	2b40      	cmp	r3, #64	@ 0x40
 800b922:	f200 817f 	bhi.w	800bc24 <USBD_StdEPReq+0x324>
 800b926:	2b00      	cmp	r3, #0
 800b928:	d02a      	beq.n	800b980 <USBD_StdEPReq+0x80>
 800b92a:	2b20      	cmp	r3, #32
 800b92c:	f040 817a 	bne.w	800bc24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	4619      	mov	r1, r3
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7ff fe85 	bl	800b644 <USBD_CoreFindEP>
 800b93a:	4603      	mov	r3, r0
 800b93c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b93e:	7b7b      	ldrb	r3, [r7, #13]
 800b940:	2bff      	cmp	r3, #255	@ 0xff
 800b942:	f000 8174 	beq.w	800bc2e <USBD_StdEPReq+0x32e>
 800b946:	7b7b      	ldrb	r3, [r7, #13]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f040 8170 	bne.w	800bc2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b94e:	7b7a      	ldrb	r2, [r7, #13]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b956:	7b7a      	ldrb	r2, [r7, #13]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	32ae      	adds	r2, #174	@ 0xae
 800b95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 8163 	beq.w	800bc2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b968:	7b7a      	ldrb	r2, [r7, #13]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32ae      	adds	r2, #174	@ 0xae
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	4798      	blx	r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b97e:	e156      	b.n	800bc2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	785b      	ldrb	r3, [r3, #1]
 800b984:	2b03      	cmp	r3, #3
 800b986:	d008      	beq.n	800b99a <USBD_StdEPReq+0x9a>
 800b988:	2b03      	cmp	r3, #3
 800b98a:	f300 8145 	bgt.w	800bc18 <USBD_StdEPReq+0x318>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 809b 	beq.w	800baca <USBD_StdEPReq+0x1ca>
 800b994:	2b01      	cmp	r3, #1
 800b996:	d03c      	beq.n	800ba12 <USBD_StdEPReq+0x112>
 800b998:	e13e      	b.n	800bc18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d002      	beq.n	800b9ac <USBD_StdEPReq+0xac>
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d016      	beq.n	800b9d8 <USBD_StdEPReq+0xd8>
 800b9aa:	e02c      	b.n	800ba06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00d      	beq.n	800b9ce <USBD_StdEPReq+0xce>
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	2b80      	cmp	r3, #128	@ 0x80
 800b9b6:	d00a      	beq.n	800b9ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 f953 	bl	800cc68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9c2:	2180      	movs	r1, #128	@ 0x80
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 f94f 	bl	800cc68 <USBD_LL_StallEP>
 800b9ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9cc:	e020      	b.n	800ba10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fc7a 	bl	800c2ca <USBD_CtlError>
              break;
 800b9d6:	e01b      	b.n	800ba10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	885b      	ldrh	r3, [r3, #2]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10e      	bne.n	800b9fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00b      	beq.n	800b9fe <USBD_StdEPReq+0xfe>
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	2b80      	cmp	r3, #128	@ 0x80
 800b9ea:	d008      	beq.n	800b9fe <USBD_StdEPReq+0xfe>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	88db      	ldrh	r3, [r3, #6]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d104      	bne.n	800b9fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 f935 	bl	800cc68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fd3a 	bl	800c478 <USBD_CtlSendStatus>

              break;
 800ba04:	e004      	b.n	800ba10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fc5e 	bl	800c2ca <USBD_CtlError>
              break;
 800ba0e:	bf00      	nop
          }
          break;
 800ba10:	e107      	b.n	800bc22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d002      	beq.n	800ba24 <USBD_StdEPReq+0x124>
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d016      	beq.n	800ba50 <USBD_StdEPReq+0x150>
 800ba22:	e04b      	b.n	800babc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00d      	beq.n	800ba46 <USBD_StdEPReq+0x146>
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	2b80      	cmp	r3, #128	@ 0x80
 800ba2e:	d00a      	beq.n	800ba46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 f917 	bl	800cc68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba3a:	2180      	movs	r1, #128	@ 0x80
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f001 f913 	bl	800cc68 <USBD_LL_StallEP>
 800ba42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba44:	e040      	b.n	800bac8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba46:	6839      	ldr	r1, [r7, #0]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fc3e 	bl	800c2ca <USBD_CtlError>
              break;
 800ba4e:	e03b      	b.n	800bac8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	885b      	ldrh	r3, [r3, #2]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d136      	bne.n	800bac6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d004      	beq.n	800ba6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 f91d 	bl	800cca6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fd03 	bl	800c478 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff fde4 	bl	800b644 <USBD_CoreFindEP>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba80:	7b7b      	ldrb	r3, [r7, #13]
 800ba82:	2bff      	cmp	r3, #255	@ 0xff
 800ba84:	d01f      	beq.n	800bac6 <USBD_StdEPReq+0x1c6>
 800ba86:	7b7b      	ldrb	r3, [r7, #13]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d11c      	bne.n	800bac6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba8c:	7b7a      	ldrb	r2, [r7, #13]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba94:	7b7a      	ldrb	r2, [r7, #13]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	32ae      	adds	r2, #174	@ 0xae
 800ba9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d010      	beq.n	800bac6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800baa4:	7b7a      	ldrb	r2, [r7, #13]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	32ae      	adds	r2, #174	@ 0xae
 800baaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
 800bab6:	4603      	mov	r3, r0
 800bab8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800baba:	e004      	b.n	800bac6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fc03 	bl	800c2ca <USBD_CtlError>
              break;
 800bac4:	e000      	b.n	800bac8 <USBD_StdEPReq+0x1c8>
              break;
 800bac6:	bf00      	nop
          }
          break;
 800bac8:	e0ab      	b.n	800bc22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d002      	beq.n	800badc <USBD_StdEPReq+0x1dc>
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d032      	beq.n	800bb40 <USBD_StdEPReq+0x240>
 800bada:	e097      	b.n	800bc0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <USBD_StdEPReq+0x1f2>
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b80      	cmp	r3, #128	@ 0x80
 800bae6:	d004      	beq.n	800baf2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fbed 	bl	800c2ca <USBD_CtlError>
                break;
 800baf0:	e091      	b.n	800bc16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	da0b      	bge.n	800bb12 <USBD_StdEPReq+0x212>
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb00:	4613      	mov	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	3310      	adds	r3, #16
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	3304      	adds	r3, #4
 800bb10:	e00b      	b.n	800bb2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	4413      	add	r3, r2
 800bb28:	3304      	adds	r3, #4
 800bb2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2202      	movs	r2, #2
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fc43 	bl	800c3c4 <USBD_CtlSendData>
              break;
 800bb3e:	e06a      	b.n	800bc16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	da11      	bge.n	800bb6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
 800bb4a:	f003 020f 	and.w	r2, r3, #15
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	440b      	add	r3, r1
 800bb5a:	3324      	adds	r3, #36	@ 0x24
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d117      	bne.n	800bb92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fbb0 	bl	800c2ca <USBD_CtlError>
                  break;
 800bb6a:	e054      	b.n	800bc16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	f003 020f 	and.w	r2, r3, #15
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	440b      	add	r3, r1
 800bb7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb82:	881b      	ldrh	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d104      	bne.n	800bb92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fb9d 	bl	800c2ca <USBD_CtlError>
                  break;
 800bb90:	e041      	b.n	800bc16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	da0b      	bge.n	800bbb2 <USBD_StdEPReq+0x2b2>
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	3310      	adds	r3, #16
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	4413      	add	r3, r2
 800bbae:	3304      	adds	r3, #4
 800bbb0:	e00b      	b.n	800bbca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
 800bbb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbb8:	4613      	mov	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	3304      	adds	r3, #4
 800bbca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d002      	beq.n	800bbd8 <USBD_StdEPReq+0x2d8>
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b80      	cmp	r3, #128	@ 0x80
 800bbd6:	d103      	bne.n	800bbe0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e00e      	b.n	800bbfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f001 f87d 	bl	800cce4 <USBD_LL_IsStallEP>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	e002      	b.n	800bbfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2202      	movs	r2, #2
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fbdd 	bl	800c3c4 <USBD_CtlSendData>
              break;
 800bc0a:	e004      	b.n	800bc16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fb5b 	bl	800c2ca <USBD_CtlError>
              break;
 800bc14:	bf00      	nop
          }
          break;
 800bc16:	e004      	b.n	800bc22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 fb55 	bl	800c2ca <USBD_CtlError>
          break;
 800bc20:	bf00      	nop
      }
      break;
 800bc22:	e005      	b.n	800bc30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fb4f 	bl	800c2ca <USBD_CtlError>
      break;
 800bc2c:	e000      	b.n	800bc30 <USBD_StdEPReq+0x330>
      break;
 800bc2e:	bf00      	nop
  }

  return ret;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
	...

0800bc3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc46:	2300      	movs	r3, #0
 800bc48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	885b      	ldrh	r3, [r3, #2]
 800bc56:	0a1b      	lsrs	r3, r3, #8
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	2b06      	cmp	r3, #6
 800bc5e:	f200 8128 	bhi.w	800beb2 <USBD_GetDescriptor+0x276>
 800bc62:	a201      	add	r2, pc, #4	@ (adr r2, 800bc68 <USBD_GetDescriptor+0x2c>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800bc85 	.word	0x0800bc85
 800bc6c:	0800bc9d 	.word	0x0800bc9d
 800bc70:	0800bcdd 	.word	0x0800bcdd
 800bc74:	0800beb3 	.word	0x0800beb3
 800bc78:	0800beb3 	.word	0x0800beb3
 800bc7c:	0800be53 	.word	0x0800be53
 800bc80:	0800be7f 	.word	0x0800be7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	7c12      	ldrb	r2, [r2, #16]
 800bc90:	f107 0108 	add.w	r1, r7, #8
 800bc94:	4610      	mov	r0, r2
 800bc96:	4798      	blx	r3
 800bc98:	60f8      	str	r0, [r7, #12]
      break;
 800bc9a:	e112      	b.n	800bec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	7c1b      	ldrb	r3, [r3, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10d      	bne.n	800bcc0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcac:	f107 0208 	add.w	r2, r7, #8
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	4798      	blx	r3
 800bcb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	2202      	movs	r2, #2
 800bcbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcbe:	e100      	b.n	800bec2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc8:	f107 0208 	add.w	r2, r7, #8
 800bccc:	4610      	mov	r0, r2
 800bcce:	4798      	blx	r3
 800bcd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	701a      	strb	r2, [r3, #0]
      break;
 800bcda:	e0f2      	b.n	800bec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	885b      	ldrh	r3, [r3, #2]
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	f200 80ac 	bhi.w	800be40 <USBD_GetDescriptor+0x204>
 800bce8:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf0 <USBD_GetDescriptor+0xb4>)
 800bcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcee:	bf00      	nop
 800bcf0:	0800bd09 	.word	0x0800bd09
 800bcf4:	0800bd3d 	.word	0x0800bd3d
 800bcf8:	0800bd71 	.word	0x0800bd71
 800bcfc:	0800bda5 	.word	0x0800bda5
 800bd00:	0800bdd9 	.word	0x0800bdd9
 800bd04:	0800be0d 	.word	0x0800be0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	7c12      	ldrb	r2, [r2, #16]
 800bd20:	f107 0108 	add.w	r1, r7, #8
 800bd24:	4610      	mov	r0, r2
 800bd26:	4798      	blx	r3
 800bd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd2a:	e091      	b.n	800be50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 facb 	bl	800c2ca <USBD_CtlError>
            err++;
 800bd34:	7afb      	ldrb	r3, [r7, #11]
 800bd36:	3301      	adds	r3, #1
 800bd38:	72fb      	strb	r3, [r7, #11]
          break;
 800bd3a:	e089      	b.n	800be50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	7c12      	ldrb	r2, [r2, #16]
 800bd54:	f107 0108 	add.w	r1, r7, #8
 800bd58:	4610      	mov	r0, r2
 800bd5a:	4798      	blx	r3
 800bd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd5e:	e077      	b.n	800be50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fab1 	bl	800c2ca <USBD_CtlError>
            err++;
 800bd68:	7afb      	ldrb	r3, [r7, #11]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd6e:	e06f      	b.n	800be50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	7c12      	ldrb	r2, [r2, #16]
 800bd88:	f107 0108 	add.w	r1, r7, #8
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	4798      	blx	r3
 800bd90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd92:	e05d      	b.n	800be50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa97 	bl	800c2ca <USBD_CtlError>
            err++;
 800bd9c:	7afb      	ldrb	r3, [r7, #11]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	72fb      	strb	r3, [r7, #11]
          break;
 800bda2:	e055      	b.n	800be50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00b      	beq.n	800bdc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	7c12      	ldrb	r2, [r2, #16]
 800bdbc:	f107 0108 	add.w	r1, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdc6:	e043      	b.n	800be50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa7d 	bl	800c2ca <USBD_CtlError>
            err++;
 800bdd0:	7afb      	ldrb	r3, [r7, #11]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdd6:	e03b      	b.n	800be50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00b      	beq.n	800bdfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	7c12      	ldrb	r2, [r2, #16]
 800bdf0:	f107 0108 	add.w	r1, r7, #8
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4798      	blx	r3
 800bdf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdfa:	e029      	b.n	800be50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fa63 	bl	800c2ca <USBD_CtlError>
            err++;
 800be04:	7afb      	ldrb	r3, [r7, #11]
 800be06:	3301      	adds	r3, #1
 800be08:	72fb      	strb	r3, [r7, #11]
          break;
 800be0a:	e021      	b.n	800be50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00b      	beq.n	800be30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	7c12      	ldrb	r2, [r2, #16]
 800be24:	f107 0108 	add.w	r1, r7, #8
 800be28:	4610      	mov	r0, r2
 800be2a:	4798      	blx	r3
 800be2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be2e:	e00f      	b.n	800be50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa49 	bl	800c2ca <USBD_CtlError>
            err++;
 800be38:	7afb      	ldrb	r3, [r7, #11]
 800be3a:	3301      	adds	r3, #1
 800be3c:	72fb      	strb	r3, [r7, #11]
          break;
 800be3e:	e007      	b.n	800be50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fa41 	bl	800c2ca <USBD_CtlError>
          err++;
 800be48:	7afb      	ldrb	r3, [r7, #11]
 800be4a:	3301      	adds	r3, #1
 800be4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be4e:	bf00      	nop
      }
      break;
 800be50:	e037      	b.n	800bec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7c1b      	ldrb	r3, [r3, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d109      	bne.n	800be6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be62:	f107 0208 	add.w	r2, r7, #8
 800be66:	4610      	mov	r0, r2
 800be68:	4798      	blx	r3
 800be6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be6c:	e029      	b.n	800bec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa2a 	bl	800c2ca <USBD_CtlError>
        err++;
 800be76:	7afb      	ldrb	r3, [r7, #11]
 800be78:	3301      	adds	r3, #1
 800be7a:	72fb      	strb	r3, [r7, #11]
      break;
 800be7c:	e021      	b.n	800bec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	7c1b      	ldrb	r3, [r3, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10d      	bne.n	800bea2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be8e:	f107 0208 	add.w	r2, r7, #8
 800be92:	4610      	mov	r0, r2
 800be94:	4798      	blx	r3
 800be96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3301      	adds	r3, #1
 800be9c:	2207      	movs	r2, #7
 800be9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bea0:	e00f      	b.n	800bec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fa10 	bl	800c2ca <USBD_CtlError>
        err++;
 800beaa:	7afb      	ldrb	r3, [r7, #11]
 800beac:	3301      	adds	r3, #1
 800beae:	72fb      	strb	r3, [r7, #11]
      break;
 800beb0:	e007      	b.n	800bec2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fa08 	bl	800c2ca <USBD_CtlError>
      err++;
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	3301      	adds	r3, #1
 800bebe:	72fb      	strb	r3, [r7, #11]
      break;
 800bec0:	bf00      	nop
  }

  if (err != 0U)
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d11e      	bne.n	800bf06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	88db      	ldrh	r3, [r3, #6]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d016      	beq.n	800befe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bed0:	893b      	ldrh	r3, [r7, #8]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00e      	beq.n	800bef4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	88da      	ldrh	r2, [r3, #6]
 800beda:	893b      	ldrh	r3, [r7, #8]
 800bedc:	4293      	cmp	r3, r2
 800bede:	bf28      	it	cs
 800bee0:	4613      	movcs	r3, r2
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bee6:	893b      	ldrh	r3, [r7, #8]
 800bee8:	461a      	mov	r2, r3
 800beea:	68f9      	ldr	r1, [r7, #12]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fa69 	bl	800c3c4 <USBD_CtlSendData>
 800bef2:	e009      	b.n	800bf08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f9e7 	bl	800c2ca <USBD_CtlError>
 800befc:	e004      	b.n	800bf08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 faba 	bl	800c478 <USBD_CtlSendStatus>
 800bf04:	e000      	b.n	800bf08 <USBD_GetDescriptor+0x2cc>
    return;
 800bf06:	bf00      	nop
  }
}
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop

0800bf10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	889b      	ldrh	r3, [r3, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d131      	bne.n	800bf86 <USBD_SetAddress+0x76>
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	88db      	ldrh	r3, [r3, #6]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d12d      	bne.n	800bf86 <USBD_SetAddress+0x76>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf30:	d829      	bhi.n	800bf86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	885b      	ldrh	r3, [r3, #2]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d104      	bne.n	800bf54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f9bc 	bl	800c2ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf52:	e01d      	b.n	800bf90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7bfa      	ldrb	r2, [r7, #15]
 800bf58:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 feeb 	bl	800cd3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa86 	bl	800c478 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d004      	beq.n	800bf7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2202      	movs	r2, #2
 800bf76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7a:	e009      	b.n	800bf90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf84:	e004      	b.n	800bf90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f99e 	bl	800c2ca <USBD_CtlError>
  }
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	885b      	ldrh	r3, [r3, #2]
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	4b4e      	ldr	r3, [pc, #312]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800bfae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfb0:	4b4d      	ldr	r3, [pc, #308]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d905      	bls.n	800bfc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f985 	bl	800c2ca <USBD_CtlError>
    return USBD_FAIL;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e08c      	b.n	800c0de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d002      	beq.n	800bfd6 <USBD_SetConfig+0x3e>
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	d029      	beq.n	800c028 <USBD_SetConfig+0x90>
 800bfd4:	e075      	b.n	800c0c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bfd6:	4b44      	ldr	r3, [pc, #272]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d020      	beq.n	800c020 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bfde:	4b42      	ldr	r3, [pc, #264]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfe8:	4b3f      	ldr	r3, [pc, #252]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7fe ffe3 	bl	800afba <USBD_SetClassConfig>
 800bff4:	4603      	mov	r3, r0
 800bff6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d008      	beq.n	800c010 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f962 	bl	800c2ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2202      	movs	r2, #2
 800c00a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c00e:	e065      	b.n	800c0dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fa31 	bl	800c478 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2203      	movs	r2, #3
 800c01a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c01e:	e05d      	b.n	800c0dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fa29 	bl	800c478 <USBD_CtlSendStatus>
      break;
 800c026:	e059      	b.n	800c0dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c028:	4b2f      	ldr	r3, [pc, #188]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d112      	bne.n	800c056 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2202      	movs	r2, #2
 800c034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c038:	4b2b      	ldr	r3, [pc, #172]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	461a      	mov	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c042:	4b29      	ldr	r3, [pc, #164]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7fe ffd2 	bl	800aff2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fa12 	bl	800c478 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c054:	e042      	b.n	800c0dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c056:	4b24      	ldr	r3, [pc, #144]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	429a      	cmp	r2, r3
 800c062:	d02a      	beq.n	800c0ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7fe ffc0 	bl	800aff2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c072:	4b1d      	ldr	r3, [pc, #116]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c07c:	4b1a      	ldr	r3, [pc, #104]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	4619      	mov	r1, r3
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7fe ff99 	bl	800afba <USBD_SetClassConfig>
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00f      	beq.n	800c0b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f918 	bl	800c2ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7fe ffa5 	bl	800aff2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0b0:	e014      	b.n	800c0dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f9e0 	bl	800c478 <USBD_CtlSendStatus>
      break;
 800c0b8:	e010      	b.n	800c0dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f9dc 	bl	800c478 <USBD_CtlSendStatus>
      break;
 800c0c0:	e00c      	b.n	800c0dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f900 	bl	800c2ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0ca:	4b07      	ldr	r3, [pc, #28]	@ (800c0e8 <USBD_SetConfig+0x150>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7fe ff8e 	bl	800aff2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c0da:	bf00      	nop
  }

  return ret;
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	200005a4 	.word	0x200005a4

0800c0ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	88db      	ldrh	r3, [r3, #6]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d004      	beq.n	800c108 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f8e2 	bl	800c2ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c106:	e023      	b.n	800c150 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b02      	cmp	r3, #2
 800c112:	dc02      	bgt.n	800c11a <USBD_GetConfig+0x2e>
 800c114:	2b00      	cmp	r3, #0
 800c116:	dc03      	bgt.n	800c120 <USBD_GetConfig+0x34>
 800c118:	e015      	b.n	800c146 <USBD_GetConfig+0x5a>
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d00b      	beq.n	800c136 <USBD_GetConfig+0x4a>
 800c11e:	e012      	b.n	800c146 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	3308      	adds	r3, #8
 800c12a:	2201      	movs	r2, #1
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f948 	bl	800c3c4 <USBD_CtlSendData>
        break;
 800c134:	e00c      	b.n	800c150 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3304      	adds	r3, #4
 800c13a:	2201      	movs	r2, #1
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f940 	bl	800c3c4 <USBD_CtlSendData>
        break;
 800c144:	e004      	b.n	800c150 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f8be 	bl	800c2ca <USBD_CtlError>
        break;
 800c14e:	bf00      	nop
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	3b01      	subs	r3, #1
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d81e      	bhi.n	800c1ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	88db      	ldrh	r3, [r3, #6]
 800c174:	2b02      	cmp	r3, #2
 800c176:	d004      	beq.n	800c182 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f8a5 	bl	800c2ca <USBD_CtlError>
        break;
 800c180:	e01a      	b.n	800c1b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	f043 0202 	orr.w	r2, r3, #2
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	330c      	adds	r3, #12
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f90c 	bl	800c3c4 <USBD_CtlSendData>
      break;
 800c1ac:	e004      	b.n	800c1b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f88a 	bl	800c2ca <USBD_CtlError>
      break;
 800c1b6:	bf00      	nop
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d107      	bne.n	800c1e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f94c 	bl	800c478 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c1e0:	e013      	b.n	800c20a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	885b      	ldrh	r3, [r3, #2]
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d10b      	bne.n	800c202 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	889b      	ldrh	r3, [r3, #4]
 800c1ee:	0a1b      	lsrs	r3, r3, #8
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f93c 	bl	800c478 <USBD_CtlSendStatus>
}
 800c200:	e003      	b.n	800c20a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f860 	bl	800c2ca <USBD_CtlError>
}
 800c20a:	bf00      	nop
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b082      	sub	sp, #8
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c222:	b2db      	uxtb	r3, r3
 800c224:	3b01      	subs	r3, #1
 800c226:	2b02      	cmp	r3, #2
 800c228:	d80b      	bhi.n	800c242 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	885b      	ldrh	r3, [r3, #2]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d10c      	bne.n	800c24c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f91c 	bl	800c478 <USBD_CtlSendStatus>
      }
      break;
 800c240:	e004      	b.n	800c24c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f840 	bl	800c2ca <USBD_CtlError>
      break;
 800c24a:	e000      	b.n	800c24e <USBD_ClrFeature+0x3c>
      break;
 800c24c:	bf00      	nop
  }
}
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	781a      	ldrb	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	3301      	adds	r3, #1
 800c270:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	781a      	ldrb	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f7ff fa40 	bl	800b706 <SWAPBYTE>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3301      	adds	r3, #1
 800c292:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3301      	adds	r3, #1
 800c298:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f7ff fa33 	bl	800b706 <SWAPBYTE>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f7ff fa26 	bl	800b706 <SWAPBYTE>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	461a      	mov	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	80da      	strh	r2, [r3, #6]
}
 800c2c2:	bf00      	nop
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b082      	sub	sp, #8
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2d4:	2180      	movs	r1, #128	@ 0x80
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fcc6 	bl	800cc68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2dc:	2100      	movs	r1, #0
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fcc2 	bl	800cc68 <USBD_LL_StallEP>
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d042      	beq.n	800c388 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c306:	6938      	ldr	r0, [r7, #16]
 800c308:	f000 f842 	bl	800c390 <USBD_GetLen>
 800c30c:	4603      	mov	r3, r0
 800c30e:	3301      	adds	r3, #1
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c316:	d808      	bhi.n	800c32a <USBD_GetString+0x3e>
 800c318:	6938      	ldr	r0, [r7, #16]
 800c31a:	f000 f839 	bl	800c390 <USBD_GetLen>
 800c31e:	4603      	mov	r3, r0
 800c320:	3301      	adds	r3, #1
 800c322:	b29b      	uxth	r3, r3
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	b29a      	uxth	r2, r3
 800c328:	e001      	b.n	800c32e <USBD_GetString+0x42>
 800c32a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	4413      	add	r3, r2
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	7812      	ldrb	r2, [r2, #0]
 800c33c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c33e:	7dfb      	ldrb	r3, [r7, #23]
 800c340:	3301      	adds	r3, #1
 800c342:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c344:	7dfb      	ldrb	r3, [r7, #23]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	4413      	add	r3, r2
 800c34a:	2203      	movs	r2, #3
 800c34c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	3301      	adds	r3, #1
 800c352:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c354:	e013      	b.n	800c37e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c356:	7dfb      	ldrb	r3, [r7, #23]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	4413      	add	r3, r2
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	7812      	ldrb	r2, [r2, #0]
 800c360:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	3301      	adds	r3, #1
 800c366:	613b      	str	r3, [r7, #16]
    idx++;
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	3301      	adds	r3, #1
 800c36c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	4413      	add	r3, r2
 800c374:	2200      	movs	r2, #0
 800c376:	701a      	strb	r2, [r3, #0]
    idx++;
 800c378:	7dfb      	ldrb	r3, [r7, #23]
 800c37a:	3301      	adds	r3, #1
 800c37c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1e7      	bne.n	800c356 <USBD_GetString+0x6a>
 800c386:	e000      	b.n	800c38a <USBD_GetString+0x9e>
    return;
 800c388:	bf00      	nop
  }
}
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c398:	2300      	movs	r3, #0
 800c39a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3a0:	e005      	b.n	800c3ae <USBD_GetLen+0x1e>
  {
    len++;
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1f5      	bne.n	800c3a2 <USBD_GetLen+0x12>
  }

  return len;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 fcc5 	bl	800cd7a <USBD_LL_Transmit>

  return USBD_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	2100      	movs	r1, #0
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f000 fcb4 	bl	800cd7a <USBD_LL_Transmit>

  return USBD_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3710      	adds	r7, #16
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2203      	movs	r2, #3
 800c42c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	2100      	movs	r1, #0
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f000 fcb8 	bl	800cdbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	60f8      	str	r0, [r7, #12]
 800c45e:	60b9      	str	r1, [r7, #8]
 800c460:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	2100      	movs	r1, #0
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 fca7 	bl	800cdbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2204      	movs	r2, #4
 800c484:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c488:	2300      	movs	r3, #0
 800c48a:	2200      	movs	r2, #0
 800c48c:	2100      	movs	r1, #0
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fc73 	bl	800cd7a <USBD_LL_Transmit>

  return USBD_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b082      	sub	sp, #8
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2205      	movs	r2, #5
 800c4aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fc81 	bl	800cdbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4912      	ldr	r1, [pc, #72]	@ (800c514 <MX_USB_DEVICE_Init+0x50>)
 800c4cc:	4812      	ldr	r0, [pc, #72]	@ (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c4ce:	f7fe fcf7 	bl	800aec0 <USBD_Init>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4d8:	f7f6 fbfc 	bl	8002cd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4dc:	490f      	ldr	r1, [pc, #60]	@ (800c51c <MX_USB_DEVICE_Init+0x58>)
 800c4de:	480e      	ldr	r0, [pc, #56]	@ (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c4e0:	f7fe fd1e 	bl	800af20 <USBD_RegisterClass>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4ea:	f7f6 fbf3 	bl	8002cd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4ee:	490c      	ldr	r1, [pc, #48]	@ (800c520 <MX_USB_DEVICE_Init+0x5c>)
 800c4f0:	4809      	ldr	r0, [pc, #36]	@ (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c4f2:	f7fe fc55 	bl	800ada0 <USBD_CDC_RegisterInterface>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4fc:	f7f6 fbea 	bl	8002cd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c500:	4805      	ldr	r0, [pc, #20]	@ (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c502:	f7fe fd43 	bl	800af8c <USBD_Start>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c50c:	f7f6 fbe2 	bl	8002cd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c510:	bf00      	nop
 800c512:	bd80      	pop	{r7, pc}
 800c514:	200000c4 	.word	0x200000c4
 800c518:	200005a8 	.word	0x200005a8
 800c51c:	20000030 	.word	0x20000030
 800c520:	200000b0 	.word	0x200000b0

0800c524 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c528:	2200      	movs	r2, #0
 800c52a:	4905      	ldr	r1, [pc, #20]	@ (800c540 <CDC_Init_FS+0x1c>)
 800c52c:	4805      	ldr	r0, [pc, #20]	@ (800c544 <CDC_Init_FS+0x20>)
 800c52e:	f7fe fc51 	bl	800add4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c532:	4905      	ldr	r1, [pc, #20]	@ (800c548 <CDC_Init_FS+0x24>)
 800c534:	4803      	ldr	r0, [pc, #12]	@ (800c544 <CDC_Init_FS+0x20>)
 800c536:	f7fe fc6f 	bl	800ae18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c53a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20001084 	.word	0x20001084
 800c544:	200005a8 	.word	0x200005a8
 800c548:	20000884 	.word	0x20000884

0800c54c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c54c:	b480      	push	{r7}
 800c54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c550:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c552:	4618      	mov	r0, r3
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	6039      	str	r1, [r7, #0]
 800c566:	71fb      	strb	r3, [r7, #7]
 800c568:	4613      	mov	r3, r2
 800c56a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	2b23      	cmp	r3, #35	@ 0x23
 800c570:	d84a      	bhi.n	800c608 <CDC_Control_FS+0xac>
 800c572:	a201      	add	r2, pc, #4	@ (adr r2, 800c578 <CDC_Control_FS+0x1c>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c609 	.word	0x0800c609
 800c57c:	0800c609 	.word	0x0800c609
 800c580:	0800c609 	.word	0x0800c609
 800c584:	0800c609 	.word	0x0800c609
 800c588:	0800c609 	.word	0x0800c609
 800c58c:	0800c609 	.word	0x0800c609
 800c590:	0800c609 	.word	0x0800c609
 800c594:	0800c609 	.word	0x0800c609
 800c598:	0800c609 	.word	0x0800c609
 800c59c:	0800c609 	.word	0x0800c609
 800c5a0:	0800c609 	.word	0x0800c609
 800c5a4:	0800c609 	.word	0x0800c609
 800c5a8:	0800c609 	.word	0x0800c609
 800c5ac:	0800c609 	.word	0x0800c609
 800c5b0:	0800c609 	.word	0x0800c609
 800c5b4:	0800c609 	.word	0x0800c609
 800c5b8:	0800c609 	.word	0x0800c609
 800c5bc:	0800c609 	.word	0x0800c609
 800c5c0:	0800c609 	.word	0x0800c609
 800c5c4:	0800c609 	.word	0x0800c609
 800c5c8:	0800c609 	.word	0x0800c609
 800c5cc:	0800c609 	.word	0x0800c609
 800c5d0:	0800c609 	.word	0x0800c609
 800c5d4:	0800c609 	.word	0x0800c609
 800c5d8:	0800c609 	.word	0x0800c609
 800c5dc:	0800c609 	.word	0x0800c609
 800c5e0:	0800c609 	.word	0x0800c609
 800c5e4:	0800c609 	.word	0x0800c609
 800c5e8:	0800c609 	.word	0x0800c609
 800c5ec:	0800c609 	.word	0x0800c609
 800c5f0:	0800c609 	.word	0x0800c609
 800c5f4:	0800c609 	.word	0x0800c609
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c609 	.word	0x0800c609
 800c600:	0800c609 	.word	0x0800c609
 800c604:	0800c609 	.word	0x0800c609
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c608:	bf00      	nop
  }

  return (USBD_OK);
 800c60a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	4805      	ldr	r0, [pc, #20]	@ (800c63c <CDC_Receive_FS+0x24>)
 800c626:	f7fe fbf7 	bl	800ae18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c62a:	4804      	ldr	r0, [pc, #16]	@ (800c63c <CDC_Receive_FS+0x24>)
 800c62c:	f7fe fc12 	bl	800ae54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c630:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c632:	4618      	mov	r0, r3
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	200005a8 	.word	0x200005a8

0800c640 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	4613      	mov	r3, r2
 800c64c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c652:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c656:	4618      	mov	r0, r3
 800c658:	371c      	adds	r7, #28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
	...

0800c664 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	6039      	str	r1, [r7, #0]
 800c66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2212      	movs	r2, #18
 800c674:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c676:	4b03      	ldr	r3, [pc, #12]	@ (800c684 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	200000e0 	.word	0x200000e0

0800c688 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	6039      	str	r1, [r7, #0]
 800c692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2204      	movs	r2, #4
 800c698:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c69a:	4b03      	ldr	r3, [pc, #12]	@ (800c6a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	200000f4 	.word	0x200000f4

0800c6ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6b8:	79fb      	ldrb	r3, [r7, #7]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d105      	bne.n	800c6ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4907      	ldr	r1, [pc, #28]	@ (800c6e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6c2:	4808      	ldr	r0, [pc, #32]	@ (800c6e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6c4:	f7ff fe12 	bl	800c2ec <USBD_GetString>
 800c6c8:	e004      	b.n	800c6d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	4904      	ldr	r1, [pc, #16]	@ (800c6e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6ce:	4805      	ldr	r0, [pc, #20]	@ (800c6e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6d0:	f7ff fe0c 	bl	800c2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6d4:	4b02      	ldr	r3, [pc, #8]	@ (800c6e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20001884 	.word	0x20001884
 800c6e4:	0800fc78 	.word	0x0800fc78

0800c6e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	6039      	str	r1, [r7, #0]
 800c6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	4904      	ldr	r1, [pc, #16]	@ (800c708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c6f8:	4804      	ldr	r0, [pc, #16]	@ (800c70c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6fa:	f7ff fdf7 	bl	800c2ec <USBD_GetString>
  return USBD_StrDesc;
 800c6fe:	4b02      	ldr	r3, [pc, #8]	@ (800c708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	20001884 	.word	0x20001884
 800c70c:	0800fc90 	.word	0x0800fc90

0800c710 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	6039      	str	r1, [r7, #0]
 800c71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	221a      	movs	r2, #26
 800c720:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c722:	f000 f843 	bl	800c7ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c726:	4b02      	ldr	r3, [pc, #8]	@ (800c730 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	200000f8 	.word	0x200000f8

0800c734 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	4603      	mov	r3, r0
 800c73c:	6039      	str	r1, [r7, #0]
 800c73e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c740:	79fb      	ldrb	r3, [r7, #7]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d105      	bne.n	800c752 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	4907      	ldr	r1, [pc, #28]	@ (800c768 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c74a:	4808      	ldr	r0, [pc, #32]	@ (800c76c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c74c:	f7ff fdce 	bl	800c2ec <USBD_GetString>
 800c750:	e004      	b.n	800c75c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	4904      	ldr	r1, [pc, #16]	@ (800c768 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c756:	4805      	ldr	r0, [pc, #20]	@ (800c76c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c758:	f7ff fdc8 	bl	800c2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c75c:	4b02      	ldr	r3, [pc, #8]	@ (800c768 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	20001884 	.word	0x20001884
 800c76c:	0800fca4 	.word	0x0800fca4

0800c770 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	6039      	str	r1, [r7, #0]
 800c77a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c77c:	79fb      	ldrb	r3, [r7, #7]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d105      	bne.n	800c78e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	4907      	ldr	r1, [pc, #28]	@ (800c7a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c786:	4808      	ldr	r0, [pc, #32]	@ (800c7a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c788:	f7ff fdb0 	bl	800c2ec <USBD_GetString>
 800c78c:	e004      	b.n	800c798 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	4904      	ldr	r1, [pc, #16]	@ (800c7a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c792:	4805      	ldr	r0, [pc, #20]	@ (800c7a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c794:	f7ff fdaa 	bl	800c2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c798:	4b02      	ldr	r3, [pc, #8]	@ (800c7a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20001884 	.word	0x20001884
 800c7a8:	0800fcb0 	.word	0x0800fcb0

0800c7ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f0 <Get_SerialNum+0x44>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c7f4 <Get_SerialNum+0x48>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7be:	4b0e      	ldr	r3, [pc, #56]	@ (800c7f8 <Get_SerialNum+0x4c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d009      	beq.n	800c7e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7d2:	2208      	movs	r2, #8
 800c7d4:	4909      	ldr	r1, [pc, #36]	@ (800c7fc <Get_SerialNum+0x50>)
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f000 f814 	bl	800c804 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7dc:	2204      	movs	r2, #4
 800c7de:	4908      	ldr	r1, [pc, #32]	@ (800c800 <Get_SerialNum+0x54>)
 800c7e0:	68b8      	ldr	r0, [r7, #8]
 800c7e2:	f000 f80f 	bl	800c804 <IntToUnicode>
  }
}
 800c7e6:	bf00      	nop
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	1fff7a10 	.word	0x1fff7a10
 800c7f4:	1fff7a14 	.word	0x1fff7a14
 800c7f8:	1fff7a18 	.word	0x1fff7a18
 800c7fc:	200000fa 	.word	0x200000fa
 800c800:	2000010a 	.word	0x2000010a

0800c804 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c804:	b480      	push	{r7}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	4613      	mov	r3, r2
 800c810:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c816:	2300      	movs	r3, #0
 800c818:	75fb      	strb	r3, [r7, #23]
 800c81a:	e027      	b.n	800c86c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	0f1b      	lsrs	r3, r3, #28
 800c820:	2b09      	cmp	r3, #9
 800c822:	d80b      	bhi.n	800c83c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	0f1b      	lsrs	r3, r3, #28
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	4619      	mov	r1, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	440b      	add	r3, r1
 800c834:	3230      	adds	r2, #48	@ 0x30
 800c836:	b2d2      	uxtb	r2, r2
 800c838:	701a      	strb	r2, [r3, #0]
 800c83a:	e00a      	b.n	800c852 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	0f1b      	lsrs	r3, r3, #28
 800c840:	b2da      	uxtb	r2, r3
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	4619      	mov	r1, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	440b      	add	r3, r1
 800c84c:	3237      	adds	r2, #55	@ 0x37
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	011b      	lsls	r3, r3, #4
 800c856:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c858:	7dfb      	ldrb	r3, [r7, #23]
 800c85a:	005b      	lsls	r3, r3, #1
 800c85c:	3301      	adds	r3, #1
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	4413      	add	r3, r2
 800c862:	2200      	movs	r2, #0
 800c864:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	3301      	adds	r3, #1
 800c86a:	75fb      	strb	r3, [r7, #23]
 800c86c:	7dfa      	ldrb	r2, [r7, #23]
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	429a      	cmp	r2, r3
 800c872:	d3d3      	bcc.n	800c81c <IntToUnicode+0x18>
  }
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
	...

0800c884 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08a      	sub	sp, #40	@ 0x28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c88c:	f107 0314 	add.w	r3, r7, #20
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	605a      	str	r2, [r3, #4]
 800c896:	609a      	str	r2, [r3, #8]
 800c898:	60da      	str	r2, [r3, #12]
 800c89a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8a4:	d13a      	bne.n	800c91c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	613b      	str	r3, [r7, #16]
 800c8aa:	4b1e      	ldr	r3, [pc, #120]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ae:	4a1d      	ldr	r2, [pc, #116]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c8b0:	f043 0301 	orr.w	r3, r3, #1
 800c8b4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c8b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c8b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	613b      	str	r3, [r7, #16]
 800c8c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c8c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c8c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c8d4:	230a      	movs	r3, #10
 800c8d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8d8:	f107 0314 	add.w	r3, r7, #20
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4812      	ldr	r0, [pc, #72]	@ (800c928 <HAL_PCD_MspInit+0xa4>)
 800c8e0:	f7f7 fd8c 	bl	80043fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c8e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ee:	6353      	str	r3, [r2, #52]	@ 0x34
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c8f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8f8:	4a0a      	ldr	r2, [pc, #40]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c8fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c8fe:	6453      	str	r3, [r2, #68]	@ 0x44
 800c900:	4b08      	ldr	r3, [pc, #32]	@ (800c924 <HAL_PCD_MspInit+0xa0>)
 800c902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c908:	60fb      	str	r3, [r7, #12]
 800c90a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c90c:	2200      	movs	r2, #0
 800c90e:	2100      	movs	r1, #0
 800c910:	2043      	movs	r0, #67	@ 0x43
 800c912:	f7f7 fcaa 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c916:	2043      	movs	r0, #67	@ 0x43
 800c918:	f7f7 fcc3 	bl	80042a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c91c:	bf00      	nop
 800c91e:	3728      	adds	r7, #40	@ 0x28
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	40023800 	.word	0x40023800
 800c928:	40020000 	.word	0x40020000

0800c92c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c940:	4619      	mov	r1, r3
 800c942:	4610      	mov	r0, r2
 800c944:	f7fe fb6f 	bl	800b026 <USBD_LL_SetupStage>
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	460b      	mov	r3, r1
 800c95a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c962:	78fa      	ldrb	r2, [r7, #3]
 800c964:	6879      	ldr	r1, [r7, #4]
 800c966:	4613      	mov	r3, r2
 800c968:	00db      	lsls	r3, r3, #3
 800c96a:	4413      	add	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	440b      	add	r3, r1
 800c970:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	78fb      	ldrb	r3, [r7, #3]
 800c978:	4619      	mov	r1, r3
 800c97a:	f7fe fba9 	bl	800b0d0 <USBD_LL_DataOutStage>
}
 800c97e:	bf00      	nop
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	460b      	mov	r3, r1
 800c990:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c998:	78fa      	ldrb	r2, [r7, #3]
 800c99a:	6879      	ldr	r1, [r7, #4]
 800c99c:	4613      	mov	r3, r2
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	4413      	add	r3, r2
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	440b      	add	r3, r1
 800c9a6:	3320      	adds	r3, #32
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	78fb      	ldrb	r3, [r7, #3]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	f7fe fc42 	bl	800b236 <USBD_LL_DataInStage>
}
 800c9b2:	bf00      	nop
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fd7c 	bl	800b4c6 <USBD_LL_SOF>
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	79db      	ldrb	r3, [r3, #7]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d102      	bne.n	800c9f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]
 800c9ee:	e008      	b.n	800ca02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	79db      	ldrb	r3, [r3, #7]
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d102      	bne.n	800c9fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	73fb      	strb	r3, [r7, #15]
 800c9fc:	e001      	b.n	800ca02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c9fe:	f7f6 f969 	bl	8002cd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca08:	7bfa      	ldrb	r2, [r7, #15]
 800ca0a:	4611      	mov	r1, r2
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe fd16 	bl	800b43e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fe fcbe 	bl	800b39a <USBD_LL_Reset>
}
 800ca1e:	bf00      	nop
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
	...

0800ca28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fe fd11 	bl	800b45e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	6812      	ldr	r2, [r2, #0]
 800ca4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	7adb      	ldrb	r3, [r3, #11]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d005      	beq.n	800ca68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca5c:	4b04      	ldr	r3, [pc, #16]	@ (800ca70 <HAL_PCD_SuspendCallback+0x48>)
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	4a03      	ldr	r2, [pc, #12]	@ (800ca70 <HAL_PCD_SuspendCallback+0x48>)
 800ca62:	f043 0306 	orr.w	r3, r3, #6
 800ca66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	e000ed00 	.word	0xe000ed00

0800ca74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe fd07 	bl	800b496 <USBD_LL_Resume>
}
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800caa2:	78fa      	ldrb	r2, [r7, #3]
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fe fd5f 	bl	800b56a <USBD_LL_IsoOUTIncomplete>
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cac6:	78fa      	ldrb	r2, [r7, #3]
 800cac8:	4611      	mov	r1, r2
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fe fd1b 	bl	800b506 <USBD_LL_IsoINIncomplete>
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe fd71 	bl	800b5ce <USBD_LL_DevConnected>
}
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fd6e 	bl	800b5e4 <USBD_LL_DevDisconnected>
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d13c      	bne.n	800cb9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb20:	4a20      	ldr	r2, [pc, #128]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a1e      	ldr	r2, [pc, #120]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb30:	4b1c      	ldr	r3, [pc, #112]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cb36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb38:	4b1a      	ldr	r3, [pc, #104]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb3a:	2204      	movs	r2, #4
 800cb3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb3e:	4b19      	ldr	r3, [pc, #100]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb40:	2202      	movs	r2, #2
 800cb42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb44:	4b17      	ldr	r3, [pc, #92]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb4a:	4b16      	ldr	r3, [pc, #88]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb50:	4b14      	ldr	r3, [pc, #80]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb56:	4b13      	ldr	r3, [pc, #76]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb5c:	4b11      	ldr	r3, [pc, #68]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb62:	4b10      	ldr	r3, [pc, #64]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb68:	4b0e      	ldr	r3, [pc, #56]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb6e:	480d      	ldr	r0, [pc, #52]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb70:	f7f8 fac9 	bl	8005106 <HAL_PCD_Init>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb7a:	f7f6 f8ab 	bl	8002cd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb7e:	2180      	movs	r1, #128	@ 0x80
 800cb80:	4808      	ldr	r0, [pc, #32]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb82:	f7f9 fcf6 	bl	8006572 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb86:	2240      	movs	r2, #64	@ 0x40
 800cb88:	2100      	movs	r1, #0
 800cb8a:	4806      	ldr	r0, [pc, #24]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb8c:	f7f9 fcaa 	bl	80064e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb90:	2280      	movs	r2, #128	@ 0x80
 800cb92:	2101      	movs	r1, #1
 800cb94:	4803      	ldr	r0, [pc, #12]	@ (800cba4 <USBD_LL_Init+0x94>)
 800cb96:	f7f9 fca5 	bl	80064e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20001a84 	.word	0x20001a84

0800cba8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7f8 fbb0 	bl	8005324 <HAL_PCD_Start>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 f942 	bl	800ce54 <USBD_Get_USB_Status>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	4611      	mov	r1, r2
 800cbea:	461a      	mov	r2, r3
 800cbec:	4603      	mov	r3, r0
 800cbee:	70fb      	strb	r3, [r7, #3]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	70bb      	strb	r3, [r7, #2]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cc06:	78bb      	ldrb	r3, [r7, #2]
 800cc08:	883a      	ldrh	r2, [r7, #0]
 800cc0a:	78f9      	ldrb	r1, [r7, #3]
 800cc0c:	f7f9 f884 	bl	8005d18 <HAL_PCD_EP_Open>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 f91c 	bl	800ce54 <USBD_Get_USB_Status>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	460b      	mov	r3, r1
 800cc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc44:	78fa      	ldrb	r2, [r7, #3]
 800cc46:	4611      	mov	r1, r2
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f9 f8cf 	bl	8005dec <HAL_PCD_EP_Close>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f8fd 	bl	800ce54 <USBD_Get_USB_Status>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f9 f987 	bl	8005f9a <HAL_PCD_EP_SetStall>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 f8de 	bl	800ce54 <USBD_Get_USB_Status>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	460b      	mov	r3, r1
 800ccb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccc0:	78fa      	ldrb	r2, [r7, #3]
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7f9 f9cb 	bl	8006060 <HAL_PCD_EP_ClrStall>
 800ccca:	4603      	mov	r3, r0
 800cccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 f8bf 	bl	800ce54 <USBD_Get_USB_Status>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	460b      	mov	r3, r1
 800ccee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da0b      	bge.n	800cd18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd06:	68f9      	ldr	r1, [r7, #12]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	4413      	add	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	440b      	add	r3, r1
 800cd12:	3316      	adds	r3, #22
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	e00b      	b.n	800cd30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd18:	78fb      	ldrb	r3, [r7, #3]
 800cd1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd1e:	68f9      	ldr	r1, [r7, #12]
 800cd20:	4613      	mov	r3, r2
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	4413      	add	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	440b      	add	r3, r1
 800cd2a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cd2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd56:	78fa      	ldrb	r2, [r7, #3]
 800cd58:	4611      	mov	r1, r2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7f8 ffb8 	bl	8005cd0 <HAL_PCD_SetAddress>
 800cd60:	4603      	mov	r3, r0
 800cd62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f874 	bl	800ce54 <USBD_Get_USB_Status>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b086      	sub	sp, #24
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	607a      	str	r2, [r7, #4]
 800cd84:	603b      	str	r3, [r7, #0]
 800cd86:	460b      	mov	r3, r1
 800cd88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd98:	7af9      	ldrb	r1, [r7, #11]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	f7f9 f8c2 	bl	8005f26 <HAL_PCD_EP_Transmit>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f853 	bl	800ce54 <USBD_Get_USB_Status>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	607a      	str	r2, [r7, #4]
 800cdc6:	603b      	str	r3, [r7, #0]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cdda:	7af9      	ldrb	r1, [r7, #11]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	f7f9 f84e 	bl	8005e80 <HAL_PCD_EP_Receive>
 800cde4:	4603      	mov	r3, r0
 800cde6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 f832 	bl	800ce54 <USBD_Get_USB_Status>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdf4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	460b      	mov	r3, r1
 800ce08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce10:	78fa      	ldrb	r2, [r7, #3]
 800ce12:	4611      	mov	r1, r2
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7f9 f86e 	bl	8005ef6 <HAL_PCD_EP_GetRxCount>
 800ce1a:	4603      	mov	r3, r0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce2c:	4b03      	ldr	r3, [pc, #12]	@ (800ce3c <USBD_static_malloc+0x18>)
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	20001f68 	.word	0x20001f68

0800ce40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]

}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d817      	bhi.n	800ce98 <USBD_Get_USB_Status+0x44>
 800ce68:	a201      	add	r2, pc, #4	@ (adr r2, 800ce70 <USBD_Get_USB_Status+0x1c>)
 800ce6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6e:	bf00      	nop
 800ce70:	0800ce81 	.word	0x0800ce81
 800ce74:	0800ce87 	.word	0x0800ce87
 800ce78:	0800ce8d 	.word	0x0800ce8d
 800ce7c:	0800ce93 	.word	0x0800ce93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73fb      	strb	r3, [r7, #15]
    break;
 800ce84:	e00b      	b.n	800ce9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce86:	2303      	movs	r3, #3
 800ce88:	73fb      	strb	r3, [r7, #15]
    break;
 800ce8a:	e008      	b.n	800ce9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce90:	e005      	b.n	800ce9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	73fb      	strb	r3, [r7, #15]
    break;
 800ce96:	e002      	b.n	800ce9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce9c:	bf00      	nop
  }
  return usb_status;
 800ce9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <__cvt>:
 800ceac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb0:	ec57 6b10 	vmov	r6, r7, d0
 800ceb4:	2f00      	cmp	r7, #0
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	4619      	mov	r1, r3
 800ceba:	463b      	mov	r3, r7
 800cebc:	bfbb      	ittet	lt
 800cebe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cec2:	461f      	movlt	r7, r3
 800cec4:	2300      	movge	r3, #0
 800cec6:	232d      	movlt	r3, #45	@ 0x2d
 800cec8:	700b      	strb	r3, [r1, #0]
 800ceca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cecc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ced0:	4691      	mov	r9, r2
 800ced2:	f023 0820 	bic.w	r8, r3, #32
 800ced6:	bfbc      	itt	lt
 800ced8:	4632      	movlt	r2, r6
 800ceda:	4616      	movlt	r6, r2
 800cedc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cee0:	d005      	beq.n	800ceee <__cvt+0x42>
 800cee2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cee6:	d100      	bne.n	800ceea <__cvt+0x3e>
 800cee8:	3401      	adds	r4, #1
 800ceea:	2102      	movs	r1, #2
 800ceec:	e000      	b.n	800cef0 <__cvt+0x44>
 800ceee:	2103      	movs	r1, #3
 800cef0:	ab03      	add	r3, sp, #12
 800cef2:	9301      	str	r3, [sp, #4]
 800cef4:	ab02      	add	r3, sp, #8
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	ec47 6b10 	vmov	d0, r6, r7
 800cefc:	4653      	mov	r3, sl
 800cefe:	4622      	mov	r2, r4
 800cf00:	f000 fe6e 	bl	800dbe0 <_dtoa_r>
 800cf04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf08:	4605      	mov	r5, r0
 800cf0a:	d119      	bne.n	800cf40 <__cvt+0x94>
 800cf0c:	f019 0f01 	tst.w	r9, #1
 800cf10:	d00e      	beq.n	800cf30 <__cvt+0x84>
 800cf12:	eb00 0904 	add.w	r9, r0, r4
 800cf16:	2200      	movs	r2, #0
 800cf18:	2300      	movs	r3, #0
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	f7f3 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf22:	b108      	cbz	r0, 800cf28 <__cvt+0x7c>
 800cf24:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf28:	2230      	movs	r2, #48	@ 0x30
 800cf2a:	9b03      	ldr	r3, [sp, #12]
 800cf2c:	454b      	cmp	r3, r9
 800cf2e:	d31e      	bcc.n	800cf6e <__cvt+0xc2>
 800cf30:	9b03      	ldr	r3, [sp, #12]
 800cf32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf34:	1b5b      	subs	r3, r3, r5
 800cf36:	4628      	mov	r0, r5
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	b004      	add	sp, #16
 800cf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf44:	eb00 0904 	add.w	r9, r0, r4
 800cf48:	d1e5      	bne.n	800cf16 <__cvt+0x6a>
 800cf4a:	7803      	ldrb	r3, [r0, #0]
 800cf4c:	2b30      	cmp	r3, #48	@ 0x30
 800cf4e:	d10a      	bne.n	800cf66 <__cvt+0xba>
 800cf50:	2200      	movs	r2, #0
 800cf52:	2300      	movs	r3, #0
 800cf54:	4630      	mov	r0, r6
 800cf56:	4639      	mov	r1, r7
 800cf58:	f7f3 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf5c:	b918      	cbnz	r0, 800cf66 <__cvt+0xba>
 800cf5e:	f1c4 0401 	rsb	r4, r4, #1
 800cf62:	f8ca 4000 	str.w	r4, [sl]
 800cf66:	f8da 3000 	ldr.w	r3, [sl]
 800cf6a:	4499      	add	r9, r3
 800cf6c:	e7d3      	b.n	800cf16 <__cvt+0x6a>
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	9103      	str	r1, [sp, #12]
 800cf72:	701a      	strb	r2, [r3, #0]
 800cf74:	e7d9      	b.n	800cf2a <__cvt+0x7e>

0800cf76 <__exponent>:
 800cf76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf78:	2900      	cmp	r1, #0
 800cf7a:	bfba      	itte	lt
 800cf7c:	4249      	neglt	r1, r1
 800cf7e:	232d      	movlt	r3, #45	@ 0x2d
 800cf80:	232b      	movge	r3, #43	@ 0x2b
 800cf82:	2909      	cmp	r1, #9
 800cf84:	7002      	strb	r2, [r0, #0]
 800cf86:	7043      	strb	r3, [r0, #1]
 800cf88:	dd29      	ble.n	800cfde <__exponent+0x68>
 800cf8a:	f10d 0307 	add.w	r3, sp, #7
 800cf8e:	461d      	mov	r5, r3
 800cf90:	270a      	movs	r7, #10
 800cf92:	461a      	mov	r2, r3
 800cf94:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf98:	fb07 1416 	mls	r4, r7, r6, r1
 800cf9c:	3430      	adds	r4, #48	@ 0x30
 800cf9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	2c63      	cmp	r4, #99	@ 0x63
 800cfa6:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfaa:	4631      	mov	r1, r6
 800cfac:	dcf1      	bgt.n	800cf92 <__exponent+0x1c>
 800cfae:	3130      	adds	r1, #48	@ 0x30
 800cfb0:	1e94      	subs	r4, r2, #2
 800cfb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cfb6:	1c41      	adds	r1, r0, #1
 800cfb8:	4623      	mov	r3, r4
 800cfba:	42ab      	cmp	r3, r5
 800cfbc:	d30a      	bcc.n	800cfd4 <__exponent+0x5e>
 800cfbe:	f10d 0309 	add.w	r3, sp, #9
 800cfc2:	1a9b      	subs	r3, r3, r2
 800cfc4:	42ac      	cmp	r4, r5
 800cfc6:	bf88      	it	hi
 800cfc8:	2300      	movhi	r3, #0
 800cfca:	3302      	adds	r3, #2
 800cfcc:	4403      	add	r3, r0
 800cfce:	1a18      	subs	r0, r3, r0
 800cfd0:	b003      	add	sp, #12
 800cfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cfd8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cfdc:	e7ed      	b.n	800cfba <__exponent+0x44>
 800cfde:	2330      	movs	r3, #48	@ 0x30
 800cfe0:	3130      	adds	r1, #48	@ 0x30
 800cfe2:	7083      	strb	r3, [r0, #2]
 800cfe4:	70c1      	strb	r1, [r0, #3]
 800cfe6:	1d03      	adds	r3, r0, #4
 800cfe8:	e7f1      	b.n	800cfce <__exponent+0x58>
	...

0800cfec <_printf_float>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	b08d      	sub	sp, #52	@ 0x34
 800cff2:	460c      	mov	r4, r1
 800cff4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cff8:	4616      	mov	r6, r2
 800cffa:	461f      	mov	r7, r3
 800cffc:	4605      	mov	r5, r0
 800cffe:	f000 fcef 	bl	800d9e0 <_localeconv_r>
 800d002:	6803      	ldr	r3, [r0, #0]
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	4618      	mov	r0, r3
 800d008:	f7f3 f932 	bl	8000270 <strlen>
 800d00c:	2300      	movs	r3, #0
 800d00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d010:	f8d8 3000 	ldr.w	r3, [r8]
 800d014:	9005      	str	r0, [sp, #20]
 800d016:	3307      	adds	r3, #7
 800d018:	f023 0307 	bic.w	r3, r3, #7
 800d01c:	f103 0208 	add.w	r2, r3, #8
 800d020:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d024:	f8d4 b000 	ldr.w	fp, [r4]
 800d028:	f8c8 2000 	str.w	r2, [r8]
 800d02c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d030:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d034:	9307      	str	r3, [sp, #28]
 800d036:	f8cd 8018 	str.w	r8, [sp, #24]
 800d03a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d03e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d042:	4b9c      	ldr	r3, [pc, #624]	@ (800d2b4 <_printf_float+0x2c8>)
 800d044:	f04f 32ff 	mov.w	r2, #4294967295
 800d048:	f7f3 fd70 	bl	8000b2c <__aeabi_dcmpun>
 800d04c:	bb70      	cbnz	r0, 800d0ac <_printf_float+0xc0>
 800d04e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d052:	4b98      	ldr	r3, [pc, #608]	@ (800d2b4 <_printf_float+0x2c8>)
 800d054:	f04f 32ff 	mov.w	r2, #4294967295
 800d058:	f7f3 fd4a 	bl	8000af0 <__aeabi_dcmple>
 800d05c:	bb30      	cbnz	r0, 800d0ac <_printf_float+0xc0>
 800d05e:	2200      	movs	r2, #0
 800d060:	2300      	movs	r3, #0
 800d062:	4640      	mov	r0, r8
 800d064:	4649      	mov	r1, r9
 800d066:	f7f3 fd39 	bl	8000adc <__aeabi_dcmplt>
 800d06a:	b110      	cbz	r0, 800d072 <_printf_float+0x86>
 800d06c:	232d      	movs	r3, #45	@ 0x2d
 800d06e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d072:	4a91      	ldr	r2, [pc, #580]	@ (800d2b8 <_printf_float+0x2cc>)
 800d074:	4b91      	ldr	r3, [pc, #580]	@ (800d2bc <_printf_float+0x2d0>)
 800d076:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d07a:	bf94      	ite	ls
 800d07c:	4690      	movls	r8, r2
 800d07e:	4698      	movhi	r8, r3
 800d080:	2303      	movs	r3, #3
 800d082:	6123      	str	r3, [r4, #16]
 800d084:	f02b 0304 	bic.w	r3, fp, #4
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	f04f 0900 	mov.w	r9, #0
 800d08e:	9700      	str	r7, [sp, #0]
 800d090:	4633      	mov	r3, r6
 800d092:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d094:	4621      	mov	r1, r4
 800d096:	4628      	mov	r0, r5
 800d098:	f000 f9d2 	bl	800d440 <_printf_common>
 800d09c:	3001      	adds	r0, #1
 800d09e:	f040 808d 	bne.w	800d1bc <_printf_float+0x1d0>
 800d0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a6:	b00d      	add	sp, #52	@ 0x34
 800d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ac:	4642      	mov	r2, r8
 800d0ae:	464b      	mov	r3, r9
 800d0b0:	4640      	mov	r0, r8
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	f7f3 fd3a 	bl	8000b2c <__aeabi_dcmpun>
 800d0b8:	b140      	cbz	r0, 800d0cc <_printf_float+0xe0>
 800d0ba:	464b      	mov	r3, r9
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	bfbc      	itt	lt
 800d0c0:	232d      	movlt	r3, #45	@ 0x2d
 800d0c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0c6:	4a7e      	ldr	r2, [pc, #504]	@ (800d2c0 <_printf_float+0x2d4>)
 800d0c8:	4b7e      	ldr	r3, [pc, #504]	@ (800d2c4 <_printf_float+0x2d8>)
 800d0ca:	e7d4      	b.n	800d076 <_printf_float+0x8a>
 800d0cc:	6863      	ldr	r3, [r4, #4]
 800d0ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d0d2:	9206      	str	r2, [sp, #24]
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	d13b      	bne.n	800d150 <_printf_float+0x164>
 800d0d8:	2306      	movs	r3, #6
 800d0da:	6063      	str	r3, [r4, #4]
 800d0dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	6022      	str	r2, [r4, #0]
 800d0e4:	9303      	str	r3, [sp, #12]
 800d0e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d0e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d0ec:	ab09      	add	r3, sp, #36	@ 0x24
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	6861      	ldr	r1, [r4, #4]
 800d0f2:	ec49 8b10 	vmov	d0, r8, r9
 800d0f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	f7ff fed6 	bl	800ceac <__cvt>
 800d100:	9b06      	ldr	r3, [sp, #24]
 800d102:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d104:	2b47      	cmp	r3, #71	@ 0x47
 800d106:	4680      	mov	r8, r0
 800d108:	d129      	bne.n	800d15e <_printf_float+0x172>
 800d10a:	1cc8      	adds	r0, r1, #3
 800d10c:	db02      	blt.n	800d114 <_printf_float+0x128>
 800d10e:	6863      	ldr	r3, [r4, #4]
 800d110:	4299      	cmp	r1, r3
 800d112:	dd41      	ble.n	800d198 <_printf_float+0x1ac>
 800d114:	f1aa 0a02 	sub.w	sl, sl, #2
 800d118:	fa5f fa8a 	uxtb.w	sl, sl
 800d11c:	3901      	subs	r1, #1
 800d11e:	4652      	mov	r2, sl
 800d120:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d124:	9109      	str	r1, [sp, #36]	@ 0x24
 800d126:	f7ff ff26 	bl	800cf76 <__exponent>
 800d12a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d12c:	1813      	adds	r3, r2, r0
 800d12e:	2a01      	cmp	r2, #1
 800d130:	4681      	mov	r9, r0
 800d132:	6123      	str	r3, [r4, #16]
 800d134:	dc02      	bgt.n	800d13c <_printf_float+0x150>
 800d136:	6822      	ldr	r2, [r4, #0]
 800d138:	07d2      	lsls	r2, r2, #31
 800d13a:	d501      	bpl.n	800d140 <_printf_float+0x154>
 800d13c:	3301      	adds	r3, #1
 800d13e:	6123      	str	r3, [r4, #16]
 800d140:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0a2      	beq.n	800d08e <_printf_float+0xa2>
 800d148:	232d      	movs	r3, #45	@ 0x2d
 800d14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d14e:	e79e      	b.n	800d08e <_printf_float+0xa2>
 800d150:	9a06      	ldr	r2, [sp, #24]
 800d152:	2a47      	cmp	r2, #71	@ 0x47
 800d154:	d1c2      	bne.n	800d0dc <_printf_float+0xf0>
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1c0      	bne.n	800d0dc <_printf_float+0xf0>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e7bd      	b.n	800d0da <_printf_float+0xee>
 800d15e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d162:	d9db      	bls.n	800d11c <_printf_float+0x130>
 800d164:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d168:	d118      	bne.n	800d19c <_printf_float+0x1b0>
 800d16a:	2900      	cmp	r1, #0
 800d16c:	6863      	ldr	r3, [r4, #4]
 800d16e:	dd0b      	ble.n	800d188 <_printf_float+0x19c>
 800d170:	6121      	str	r1, [r4, #16]
 800d172:	b913      	cbnz	r3, 800d17a <_printf_float+0x18e>
 800d174:	6822      	ldr	r2, [r4, #0]
 800d176:	07d0      	lsls	r0, r2, #31
 800d178:	d502      	bpl.n	800d180 <_printf_float+0x194>
 800d17a:	3301      	adds	r3, #1
 800d17c:	440b      	add	r3, r1
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	e7db      	b.n	800d140 <_printf_float+0x154>
 800d188:	b913      	cbnz	r3, 800d190 <_printf_float+0x1a4>
 800d18a:	6822      	ldr	r2, [r4, #0]
 800d18c:	07d2      	lsls	r2, r2, #31
 800d18e:	d501      	bpl.n	800d194 <_printf_float+0x1a8>
 800d190:	3302      	adds	r3, #2
 800d192:	e7f4      	b.n	800d17e <_printf_float+0x192>
 800d194:	2301      	movs	r3, #1
 800d196:	e7f2      	b.n	800d17e <_printf_float+0x192>
 800d198:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d19e:	4299      	cmp	r1, r3
 800d1a0:	db05      	blt.n	800d1ae <_printf_float+0x1c2>
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	6121      	str	r1, [r4, #16]
 800d1a6:	07d8      	lsls	r0, r3, #31
 800d1a8:	d5ea      	bpl.n	800d180 <_printf_float+0x194>
 800d1aa:	1c4b      	adds	r3, r1, #1
 800d1ac:	e7e7      	b.n	800d17e <_printf_float+0x192>
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	bfd4      	ite	le
 800d1b2:	f1c1 0202 	rsble	r2, r1, #2
 800d1b6:	2201      	movgt	r2, #1
 800d1b8:	4413      	add	r3, r2
 800d1ba:	e7e0      	b.n	800d17e <_printf_float+0x192>
 800d1bc:	6823      	ldr	r3, [r4, #0]
 800d1be:	055a      	lsls	r2, r3, #21
 800d1c0:	d407      	bmi.n	800d1d2 <_printf_float+0x1e6>
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b8      	blx	r7
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d12b      	bne.n	800d228 <_printf_float+0x23c>
 800d1d0:	e767      	b.n	800d0a2 <_printf_float+0xb6>
 800d1d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1d6:	f240 80dd 	bls.w	800d394 <_printf_float+0x3a8>
 800d1da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1de:	2200      	movs	r2, #0
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f7f3 fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d033      	beq.n	800d252 <_printf_float+0x266>
 800d1ea:	4a37      	ldr	r2, [pc, #220]	@ (800d2c8 <_printf_float+0x2dc>)
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	47b8      	blx	r7
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	f43f af54 	beq.w	800d0a2 <_printf_float+0xb6>
 800d1fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d1fe:	4543      	cmp	r3, r8
 800d200:	db02      	blt.n	800d208 <_printf_float+0x21c>
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	07d8      	lsls	r0, r3, #31
 800d206:	d50f      	bpl.n	800d228 <_printf_float+0x23c>
 800d208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d20c:	4631      	mov	r1, r6
 800d20e:	4628      	mov	r0, r5
 800d210:	47b8      	blx	r7
 800d212:	3001      	adds	r0, #1
 800d214:	f43f af45 	beq.w	800d0a2 <_printf_float+0xb6>
 800d218:	f04f 0900 	mov.w	r9, #0
 800d21c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d220:	f104 0a1a 	add.w	sl, r4, #26
 800d224:	45c8      	cmp	r8, r9
 800d226:	dc09      	bgt.n	800d23c <_printf_float+0x250>
 800d228:	6823      	ldr	r3, [r4, #0]
 800d22a:	079b      	lsls	r3, r3, #30
 800d22c:	f100 8103 	bmi.w	800d436 <_printf_float+0x44a>
 800d230:	68e0      	ldr	r0, [r4, #12]
 800d232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d234:	4298      	cmp	r0, r3
 800d236:	bfb8      	it	lt
 800d238:	4618      	movlt	r0, r3
 800d23a:	e734      	b.n	800d0a6 <_printf_float+0xba>
 800d23c:	2301      	movs	r3, #1
 800d23e:	4652      	mov	r2, sl
 800d240:	4631      	mov	r1, r6
 800d242:	4628      	mov	r0, r5
 800d244:	47b8      	blx	r7
 800d246:	3001      	adds	r0, #1
 800d248:	f43f af2b 	beq.w	800d0a2 <_printf_float+0xb6>
 800d24c:	f109 0901 	add.w	r9, r9, #1
 800d250:	e7e8      	b.n	800d224 <_printf_float+0x238>
 800d252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d254:	2b00      	cmp	r3, #0
 800d256:	dc39      	bgt.n	800d2cc <_printf_float+0x2e0>
 800d258:	4a1b      	ldr	r2, [pc, #108]	@ (800d2c8 <_printf_float+0x2dc>)
 800d25a:	2301      	movs	r3, #1
 800d25c:	4631      	mov	r1, r6
 800d25e:	4628      	mov	r0, r5
 800d260:	47b8      	blx	r7
 800d262:	3001      	adds	r0, #1
 800d264:	f43f af1d 	beq.w	800d0a2 <_printf_float+0xb6>
 800d268:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d26c:	ea59 0303 	orrs.w	r3, r9, r3
 800d270:	d102      	bne.n	800d278 <_printf_float+0x28c>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	07d9      	lsls	r1, r3, #31
 800d276:	d5d7      	bpl.n	800d228 <_printf_float+0x23c>
 800d278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d27c:	4631      	mov	r1, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	47b8      	blx	r7
 800d282:	3001      	adds	r0, #1
 800d284:	f43f af0d 	beq.w	800d0a2 <_printf_float+0xb6>
 800d288:	f04f 0a00 	mov.w	sl, #0
 800d28c:	f104 0b1a 	add.w	fp, r4, #26
 800d290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d292:	425b      	negs	r3, r3
 800d294:	4553      	cmp	r3, sl
 800d296:	dc01      	bgt.n	800d29c <_printf_float+0x2b0>
 800d298:	464b      	mov	r3, r9
 800d29a:	e793      	b.n	800d1c4 <_printf_float+0x1d8>
 800d29c:	2301      	movs	r3, #1
 800d29e:	465a      	mov	r2, fp
 800d2a0:	4631      	mov	r1, r6
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	47b8      	blx	r7
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	f43f aefb 	beq.w	800d0a2 <_printf_float+0xb6>
 800d2ac:	f10a 0a01 	add.w	sl, sl, #1
 800d2b0:	e7ee      	b.n	800d290 <_printf_float+0x2a4>
 800d2b2:	bf00      	nop
 800d2b4:	7fefffff 	.word	0x7fefffff
 800d2b8:	0800fcd8 	.word	0x0800fcd8
 800d2bc:	0800fcdc 	.word	0x0800fcdc
 800d2c0:	0800fce0 	.word	0x0800fce0
 800d2c4:	0800fce4 	.word	0x0800fce4
 800d2c8:	0800fce8 	.word	0x0800fce8
 800d2cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2d2:	4553      	cmp	r3, sl
 800d2d4:	bfa8      	it	ge
 800d2d6:	4653      	movge	r3, sl
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	4699      	mov	r9, r3
 800d2dc:	dc36      	bgt.n	800d34c <_printf_float+0x360>
 800d2de:	f04f 0b00 	mov.w	fp, #0
 800d2e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2e6:	f104 021a 	add.w	r2, r4, #26
 800d2ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2ec:	9306      	str	r3, [sp, #24]
 800d2ee:	eba3 0309 	sub.w	r3, r3, r9
 800d2f2:	455b      	cmp	r3, fp
 800d2f4:	dc31      	bgt.n	800d35a <_printf_float+0x36e>
 800d2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f8:	459a      	cmp	sl, r3
 800d2fa:	dc3a      	bgt.n	800d372 <_printf_float+0x386>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	07da      	lsls	r2, r3, #31
 800d300:	d437      	bmi.n	800d372 <_printf_float+0x386>
 800d302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d304:	ebaa 0903 	sub.w	r9, sl, r3
 800d308:	9b06      	ldr	r3, [sp, #24]
 800d30a:	ebaa 0303 	sub.w	r3, sl, r3
 800d30e:	4599      	cmp	r9, r3
 800d310:	bfa8      	it	ge
 800d312:	4699      	movge	r9, r3
 800d314:	f1b9 0f00 	cmp.w	r9, #0
 800d318:	dc33      	bgt.n	800d382 <_printf_float+0x396>
 800d31a:	f04f 0800 	mov.w	r8, #0
 800d31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d322:	f104 0b1a 	add.w	fp, r4, #26
 800d326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d328:	ebaa 0303 	sub.w	r3, sl, r3
 800d32c:	eba3 0309 	sub.w	r3, r3, r9
 800d330:	4543      	cmp	r3, r8
 800d332:	f77f af79 	ble.w	800d228 <_printf_float+0x23c>
 800d336:	2301      	movs	r3, #1
 800d338:	465a      	mov	r2, fp
 800d33a:	4631      	mov	r1, r6
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b8      	blx	r7
 800d340:	3001      	adds	r0, #1
 800d342:	f43f aeae 	beq.w	800d0a2 <_printf_float+0xb6>
 800d346:	f108 0801 	add.w	r8, r8, #1
 800d34a:	e7ec      	b.n	800d326 <_printf_float+0x33a>
 800d34c:	4642      	mov	r2, r8
 800d34e:	4631      	mov	r1, r6
 800d350:	4628      	mov	r0, r5
 800d352:	47b8      	blx	r7
 800d354:	3001      	adds	r0, #1
 800d356:	d1c2      	bne.n	800d2de <_printf_float+0x2f2>
 800d358:	e6a3      	b.n	800d0a2 <_printf_float+0xb6>
 800d35a:	2301      	movs	r3, #1
 800d35c:	4631      	mov	r1, r6
 800d35e:	4628      	mov	r0, r5
 800d360:	9206      	str	r2, [sp, #24]
 800d362:	47b8      	blx	r7
 800d364:	3001      	adds	r0, #1
 800d366:	f43f ae9c 	beq.w	800d0a2 <_printf_float+0xb6>
 800d36a:	9a06      	ldr	r2, [sp, #24]
 800d36c:	f10b 0b01 	add.w	fp, fp, #1
 800d370:	e7bb      	b.n	800d2ea <_printf_float+0x2fe>
 800d372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d376:	4631      	mov	r1, r6
 800d378:	4628      	mov	r0, r5
 800d37a:	47b8      	blx	r7
 800d37c:	3001      	adds	r0, #1
 800d37e:	d1c0      	bne.n	800d302 <_printf_float+0x316>
 800d380:	e68f      	b.n	800d0a2 <_printf_float+0xb6>
 800d382:	9a06      	ldr	r2, [sp, #24]
 800d384:	464b      	mov	r3, r9
 800d386:	4442      	add	r2, r8
 800d388:	4631      	mov	r1, r6
 800d38a:	4628      	mov	r0, r5
 800d38c:	47b8      	blx	r7
 800d38e:	3001      	adds	r0, #1
 800d390:	d1c3      	bne.n	800d31a <_printf_float+0x32e>
 800d392:	e686      	b.n	800d0a2 <_printf_float+0xb6>
 800d394:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d398:	f1ba 0f01 	cmp.w	sl, #1
 800d39c:	dc01      	bgt.n	800d3a2 <_printf_float+0x3b6>
 800d39e:	07db      	lsls	r3, r3, #31
 800d3a0:	d536      	bpl.n	800d410 <_printf_float+0x424>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4642      	mov	r2, r8
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	47b8      	blx	r7
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	f43f ae78 	beq.w	800d0a2 <_printf_float+0xb6>
 800d3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	47b8      	blx	r7
 800d3bc:	3001      	adds	r0, #1
 800d3be:	f43f ae70 	beq.w	800d0a2 <_printf_float+0xb6>
 800d3c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3ce:	f7f3 fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3d2:	b9c0      	cbnz	r0, 800d406 <_printf_float+0x41a>
 800d3d4:	4653      	mov	r3, sl
 800d3d6:	f108 0201 	add.w	r2, r8, #1
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4628      	mov	r0, r5
 800d3de:	47b8      	blx	r7
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d10c      	bne.n	800d3fe <_printf_float+0x412>
 800d3e4:	e65d      	b.n	800d0a2 <_printf_float+0xb6>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	465a      	mov	r2, fp
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	47b8      	blx	r7
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	f43f ae56 	beq.w	800d0a2 <_printf_float+0xb6>
 800d3f6:	f108 0801 	add.w	r8, r8, #1
 800d3fa:	45d0      	cmp	r8, sl
 800d3fc:	dbf3      	blt.n	800d3e6 <_printf_float+0x3fa>
 800d3fe:	464b      	mov	r3, r9
 800d400:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d404:	e6df      	b.n	800d1c6 <_printf_float+0x1da>
 800d406:	f04f 0800 	mov.w	r8, #0
 800d40a:	f104 0b1a 	add.w	fp, r4, #26
 800d40e:	e7f4      	b.n	800d3fa <_printf_float+0x40e>
 800d410:	2301      	movs	r3, #1
 800d412:	4642      	mov	r2, r8
 800d414:	e7e1      	b.n	800d3da <_printf_float+0x3ee>
 800d416:	2301      	movs	r3, #1
 800d418:	464a      	mov	r2, r9
 800d41a:	4631      	mov	r1, r6
 800d41c:	4628      	mov	r0, r5
 800d41e:	47b8      	blx	r7
 800d420:	3001      	adds	r0, #1
 800d422:	f43f ae3e 	beq.w	800d0a2 <_printf_float+0xb6>
 800d426:	f108 0801 	add.w	r8, r8, #1
 800d42a:	68e3      	ldr	r3, [r4, #12]
 800d42c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d42e:	1a5b      	subs	r3, r3, r1
 800d430:	4543      	cmp	r3, r8
 800d432:	dcf0      	bgt.n	800d416 <_printf_float+0x42a>
 800d434:	e6fc      	b.n	800d230 <_printf_float+0x244>
 800d436:	f04f 0800 	mov.w	r8, #0
 800d43a:	f104 0919 	add.w	r9, r4, #25
 800d43e:	e7f4      	b.n	800d42a <_printf_float+0x43e>

0800d440 <_printf_common>:
 800d440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d444:	4616      	mov	r6, r2
 800d446:	4698      	mov	r8, r3
 800d448:	688a      	ldr	r2, [r1, #8]
 800d44a:	690b      	ldr	r3, [r1, #16]
 800d44c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d450:	4293      	cmp	r3, r2
 800d452:	bfb8      	it	lt
 800d454:	4613      	movlt	r3, r2
 800d456:	6033      	str	r3, [r6, #0]
 800d458:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d45c:	4607      	mov	r7, r0
 800d45e:	460c      	mov	r4, r1
 800d460:	b10a      	cbz	r2, 800d466 <_printf_common+0x26>
 800d462:	3301      	adds	r3, #1
 800d464:	6033      	str	r3, [r6, #0]
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	0699      	lsls	r1, r3, #26
 800d46a:	bf42      	ittt	mi
 800d46c:	6833      	ldrmi	r3, [r6, #0]
 800d46e:	3302      	addmi	r3, #2
 800d470:	6033      	strmi	r3, [r6, #0]
 800d472:	6825      	ldr	r5, [r4, #0]
 800d474:	f015 0506 	ands.w	r5, r5, #6
 800d478:	d106      	bne.n	800d488 <_printf_common+0x48>
 800d47a:	f104 0a19 	add.w	sl, r4, #25
 800d47e:	68e3      	ldr	r3, [r4, #12]
 800d480:	6832      	ldr	r2, [r6, #0]
 800d482:	1a9b      	subs	r3, r3, r2
 800d484:	42ab      	cmp	r3, r5
 800d486:	dc26      	bgt.n	800d4d6 <_printf_common+0x96>
 800d488:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d48c:	6822      	ldr	r2, [r4, #0]
 800d48e:	3b00      	subs	r3, #0
 800d490:	bf18      	it	ne
 800d492:	2301      	movne	r3, #1
 800d494:	0692      	lsls	r2, r2, #26
 800d496:	d42b      	bmi.n	800d4f0 <_printf_common+0xb0>
 800d498:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d49c:	4641      	mov	r1, r8
 800d49e:	4638      	mov	r0, r7
 800d4a0:	47c8      	blx	r9
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	d01e      	beq.n	800d4e4 <_printf_common+0xa4>
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	6922      	ldr	r2, [r4, #16]
 800d4aa:	f003 0306 	and.w	r3, r3, #6
 800d4ae:	2b04      	cmp	r3, #4
 800d4b0:	bf02      	ittt	eq
 800d4b2:	68e5      	ldreq	r5, [r4, #12]
 800d4b4:	6833      	ldreq	r3, [r6, #0]
 800d4b6:	1aed      	subeq	r5, r5, r3
 800d4b8:	68a3      	ldr	r3, [r4, #8]
 800d4ba:	bf0c      	ite	eq
 800d4bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4c0:	2500      	movne	r5, #0
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	bfc4      	itt	gt
 800d4c6:	1a9b      	subgt	r3, r3, r2
 800d4c8:	18ed      	addgt	r5, r5, r3
 800d4ca:	2600      	movs	r6, #0
 800d4cc:	341a      	adds	r4, #26
 800d4ce:	42b5      	cmp	r5, r6
 800d4d0:	d11a      	bne.n	800d508 <_printf_common+0xc8>
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	e008      	b.n	800d4e8 <_printf_common+0xa8>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	4652      	mov	r2, sl
 800d4da:	4641      	mov	r1, r8
 800d4dc:	4638      	mov	r0, r7
 800d4de:	47c8      	blx	r9
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d103      	bne.n	800d4ec <_printf_common+0xac>
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ec:	3501      	adds	r5, #1
 800d4ee:	e7c6      	b.n	800d47e <_printf_common+0x3e>
 800d4f0:	18e1      	adds	r1, r4, r3
 800d4f2:	1c5a      	adds	r2, r3, #1
 800d4f4:	2030      	movs	r0, #48	@ 0x30
 800d4f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4fa:	4422      	add	r2, r4
 800d4fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d500:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d504:	3302      	adds	r3, #2
 800d506:	e7c7      	b.n	800d498 <_printf_common+0x58>
 800d508:	2301      	movs	r3, #1
 800d50a:	4622      	mov	r2, r4
 800d50c:	4641      	mov	r1, r8
 800d50e:	4638      	mov	r0, r7
 800d510:	47c8      	blx	r9
 800d512:	3001      	adds	r0, #1
 800d514:	d0e6      	beq.n	800d4e4 <_printf_common+0xa4>
 800d516:	3601      	adds	r6, #1
 800d518:	e7d9      	b.n	800d4ce <_printf_common+0x8e>
	...

0800d51c <_printf_i>:
 800d51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d520:	7e0f      	ldrb	r7, [r1, #24]
 800d522:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d524:	2f78      	cmp	r7, #120	@ 0x78
 800d526:	4691      	mov	r9, r2
 800d528:	4680      	mov	r8, r0
 800d52a:	460c      	mov	r4, r1
 800d52c:	469a      	mov	sl, r3
 800d52e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d532:	d807      	bhi.n	800d544 <_printf_i+0x28>
 800d534:	2f62      	cmp	r7, #98	@ 0x62
 800d536:	d80a      	bhi.n	800d54e <_printf_i+0x32>
 800d538:	2f00      	cmp	r7, #0
 800d53a:	f000 80d2 	beq.w	800d6e2 <_printf_i+0x1c6>
 800d53e:	2f58      	cmp	r7, #88	@ 0x58
 800d540:	f000 80b9 	beq.w	800d6b6 <_printf_i+0x19a>
 800d544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d54c:	e03a      	b.n	800d5c4 <_printf_i+0xa8>
 800d54e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d552:	2b15      	cmp	r3, #21
 800d554:	d8f6      	bhi.n	800d544 <_printf_i+0x28>
 800d556:	a101      	add	r1, pc, #4	@ (adr r1, 800d55c <_printf_i+0x40>)
 800d558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d55c:	0800d5b5 	.word	0x0800d5b5
 800d560:	0800d5c9 	.word	0x0800d5c9
 800d564:	0800d545 	.word	0x0800d545
 800d568:	0800d545 	.word	0x0800d545
 800d56c:	0800d545 	.word	0x0800d545
 800d570:	0800d545 	.word	0x0800d545
 800d574:	0800d5c9 	.word	0x0800d5c9
 800d578:	0800d545 	.word	0x0800d545
 800d57c:	0800d545 	.word	0x0800d545
 800d580:	0800d545 	.word	0x0800d545
 800d584:	0800d545 	.word	0x0800d545
 800d588:	0800d6c9 	.word	0x0800d6c9
 800d58c:	0800d5f3 	.word	0x0800d5f3
 800d590:	0800d683 	.word	0x0800d683
 800d594:	0800d545 	.word	0x0800d545
 800d598:	0800d545 	.word	0x0800d545
 800d59c:	0800d6eb 	.word	0x0800d6eb
 800d5a0:	0800d545 	.word	0x0800d545
 800d5a4:	0800d5f3 	.word	0x0800d5f3
 800d5a8:	0800d545 	.word	0x0800d545
 800d5ac:	0800d545 	.word	0x0800d545
 800d5b0:	0800d68b 	.word	0x0800d68b
 800d5b4:	6833      	ldr	r3, [r6, #0]
 800d5b6:	1d1a      	adds	r2, r3, #4
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	6032      	str	r2, [r6, #0]
 800d5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e09d      	b.n	800d704 <_printf_i+0x1e8>
 800d5c8:	6833      	ldr	r3, [r6, #0]
 800d5ca:	6820      	ldr	r0, [r4, #0]
 800d5cc:	1d19      	adds	r1, r3, #4
 800d5ce:	6031      	str	r1, [r6, #0]
 800d5d0:	0606      	lsls	r6, r0, #24
 800d5d2:	d501      	bpl.n	800d5d8 <_printf_i+0xbc>
 800d5d4:	681d      	ldr	r5, [r3, #0]
 800d5d6:	e003      	b.n	800d5e0 <_printf_i+0xc4>
 800d5d8:	0645      	lsls	r5, r0, #25
 800d5da:	d5fb      	bpl.n	800d5d4 <_printf_i+0xb8>
 800d5dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5e0:	2d00      	cmp	r5, #0
 800d5e2:	da03      	bge.n	800d5ec <_printf_i+0xd0>
 800d5e4:	232d      	movs	r3, #45	@ 0x2d
 800d5e6:	426d      	negs	r5, r5
 800d5e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ec:	4859      	ldr	r0, [pc, #356]	@ (800d754 <_printf_i+0x238>)
 800d5ee:	230a      	movs	r3, #10
 800d5f0:	e011      	b.n	800d616 <_printf_i+0xfa>
 800d5f2:	6821      	ldr	r1, [r4, #0]
 800d5f4:	6833      	ldr	r3, [r6, #0]
 800d5f6:	0608      	lsls	r0, r1, #24
 800d5f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5fc:	d402      	bmi.n	800d604 <_printf_i+0xe8>
 800d5fe:	0649      	lsls	r1, r1, #25
 800d600:	bf48      	it	mi
 800d602:	b2ad      	uxthmi	r5, r5
 800d604:	2f6f      	cmp	r7, #111	@ 0x6f
 800d606:	4853      	ldr	r0, [pc, #332]	@ (800d754 <_printf_i+0x238>)
 800d608:	6033      	str	r3, [r6, #0]
 800d60a:	bf14      	ite	ne
 800d60c:	230a      	movne	r3, #10
 800d60e:	2308      	moveq	r3, #8
 800d610:	2100      	movs	r1, #0
 800d612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d616:	6866      	ldr	r6, [r4, #4]
 800d618:	60a6      	str	r6, [r4, #8]
 800d61a:	2e00      	cmp	r6, #0
 800d61c:	bfa2      	ittt	ge
 800d61e:	6821      	ldrge	r1, [r4, #0]
 800d620:	f021 0104 	bicge.w	r1, r1, #4
 800d624:	6021      	strge	r1, [r4, #0]
 800d626:	b90d      	cbnz	r5, 800d62c <_printf_i+0x110>
 800d628:	2e00      	cmp	r6, #0
 800d62a:	d04b      	beq.n	800d6c4 <_printf_i+0x1a8>
 800d62c:	4616      	mov	r6, r2
 800d62e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d632:	fb03 5711 	mls	r7, r3, r1, r5
 800d636:	5dc7      	ldrb	r7, [r0, r7]
 800d638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d63c:	462f      	mov	r7, r5
 800d63e:	42bb      	cmp	r3, r7
 800d640:	460d      	mov	r5, r1
 800d642:	d9f4      	bls.n	800d62e <_printf_i+0x112>
 800d644:	2b08      	cmp	r3, #8
 800d646:	d10b      	bne.n	800d660 <_printf_i+0x144>
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	07df      	lsls	r7, r3, #31
 800d64c:	d508      	bpl.n	800d660 <_printf_i+0x144>
 800d64e:	6923      	ldr	r3, [r4, #16]
 800d650:	6861      	ldr	r1, [r4, #4]
 800d652:	4299      	cmp	r1, r3
 800d654:	bfde      	ittt	le
 800d656:	2330      	movle	r3, #48	@ 0x30
 800d658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d65c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d660:	1b92      	subs	r2, r2, r6
 800d662:	6122      	str	r2, [r4, #16]
 800d664:	f8cd a000 	str.w	sl, [sp]
 800d668:	464b      	mov	r3, r9
 800d66a:	aa03      	add	r2, sp, #12
 800d66c:	4621      	mov	r1, r4
 800d66e:	4640      	mov	r0, r8
 800d670:	f7ff fee6 	bl	800d440 <_printf_common>
 800d674:	3001      	adds	r0, #1
 800d676:	d14a      	bne.n	800d70e <_printf_i+0x1f2>
 800d678:	f04f 30ff 	mov.w	r0, #4294967295
 800d67c:	b004      	add	sp, #16
 800d67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	f043 0320 	orr.w	r3, r3, #32
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	4833      	ldr	r0, [pc, #204]	@ (800d758 <_printf_i+0x23c>)
 800d68c:	2778      	movs	r7, #120	@ 0x78
 800d68e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	6831      	ldr	r1, [r6, #0]
 800d696:	061f      	lsls	r7, r3, #24
 800d698:	f851 5b04 	ldr.w	r5, [r1], #4
 800d69c:	d402      	bmi.n	800d6a4 <_printf_i+0x188>
 800d69e:	065f      	lsls	r7, r3, #25
 800d6a0:	bf48      	it	mi
 800d6a2:	b2ad      	uxthmi	r5, r5
 800d6a4:	6031      	str	r1, [r6, #0]
 800d6a6:	07d9      	lsls	r1, r3, #31
 800d6a8:	bf44      	itt	mi
 800d6aa:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ae:	6023      	strmi	r3, [r4, #0]
 800d6b0:	b11d      	cbz	r5, 800d6ba <_printf_i+0x19e>
 800d6b2:	2310      	movs	r3, #16
 800d6b4:	e7ac      	b.n	800d610 <_printf_i+0xf4>
 800d6b6:	4827      	ldr	r0, [pc, #156]	@ (800d754 <_printf_i+0x238>)
 800d6b8:	e7e9      	b.n	800d68e <_printf_i+0x172>
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	f023 0320 	bic.w	r3, r3, #32
 800d6c0:	6023      	str	r3, [r4, #0]
 800d6c2:	e7f6      	b.n	800d6b2 <_printf_i+0x196>
 800d6c4:	4616      	mov	r6, r2
 800d6c6:	e7bd      	b.n	800d644 <_printf_i+0x128>
 800d6c8:	6833      	ldr	r3, [r6, #0]
 800d6ca:	6825      	ldr	r5, [r4, #0]
 800d6cc:	6961      	ldr	r1, [r4, #20]
 800d6ce:	1d18      	adds	r0, r3, #4
 800d6d0:	6030      	str	r0, [r6, #0]
 800d6d2:	062e      	lsls	r6, r5, #24
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	d501      	bpl.n	800d6dc <_printf_i+0x1c0>
 800d6d8:	6019      	str	r1, [r3, #0]
 800d6da:	e002      	b.n	800d6e2 <_printf_i+0x1c6>
 800d6dc:	0668      	lsls	r0, r5, #25
 800d6de:	d5fb      	bpl.n	800d6d8 <_printf_i+0x1bc>
 800d6e0:	8019      	strh	r1, [r3, #0]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	6123      	str	r3, [r4, #16]
 800d6e6:	4616      	mov	r6, r2
 800d6e8:	e7bc      	b.n	800d664 <_printf_i+0x148>
 800d6ea:	6833      	ldr	r3, [r6, #0]
 800d6ec:	1d1a      	adds	r2, r3, #4
 800d6ee:	6032      	str	r2, [r6, #0]
 800d6f0:	681e      	ldr	r6, [r3, #0]
 800d6f2:	6862      	ldr	r2, [r4, #4]
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f7f2 fd6a 	bl	80001d0 <memchr>
 800d6fc:	b108      	cbz	r0, 800d702 <_printf_i+0x1e6>
 800d6fe:	1b80      	subs	r0, r0, r6
 800d700:	6060      	str	r0, [r4, #4]
 800d702:	6863      	ldr	r3, [r4, #4]
 800d704:	6123      	str	r3, [r4, #16]
 800d706:	2300      	movs	r3, #0
 800d708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d70c:	e7aa      	b.n	800d664 <_printf_i+0x148>
 800d70e:	6923      	ldr	r3, [r4, #16]
 800d710:	4632      	mov	r2, r6
 800d712:	4649      	mov	r1, r9
 800d714:	4640      	mov	r0, r8
 800d716:	47d0      	blx	sl
 800d718:	3001      	adds	r0, #1
 800d71a:	d0ad      	beq.n	800d678 <_printf_i+0x15c>
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	079b      	lsls	r3, r3, #30
 800d720:	d413      	bmi.n	800d74a <_printf_i+0x22e>
 800d722:	68e0      	ldr	r0, [r4, #12]
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	4298      	cmp	r0, r3
 800d728:	bfb8      	it	lt
 800d72a:	4618      	movlt	r0, r3
 800d72c:	e7a6      	b.n	800d67c <_printf_i+0x160>
 800d72e:	2301      	movs	r3, #1
 800d730:	4632      	mov	r2, r6
 800d732:	4649      	mov	r1, r9
 800d734:	4640      	mov	r0, r8
 800d736:	47d0      	blx	sl
 800d738:	3001      	adds	r0, #1
 800d73a:	d09d      	beq.n	800d678 <_printf_i+0x15c>
 800d73c:	3501      	adds	r5, #1
 800d73e:	68e3      	ldr	r3, [r4, #12]
 800d740:	9903      	ldr	r1, [sp, #12]
 800d742:	1a5b      	subs	r3, r3, r1
 800d744:	42ab      	cmp	r3, r5
 800d746:	dcf2      	bgt.n	800d72e <_printf_i+0x212>
 800d748:	e7eb      	b.n	800d722 <_printf_i+0x206>
 800d74a:	2500      	movs	r5, #0
 800d74c:	f104 0619 	add.w	r6, r4, #25
 800d750:	e7f5      	b.n	800d73e <_printf_i+0x222>
 800d752:	bf00      	nop
 800d754:	0800fcea 	.word	0x0800fcea
 800d758:	0800fcfb 	.word	0x0800fcfb

0800d75c <std>:
 800d75c:	2300      	movs	r3, #0
 800d75e:	b510      	push	{r4, lr}
 800d760:	4604      	mov	r4, r0
 800d762:	e9c0 3300 	strd	r3, r3, [r0]
 800d766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d76a:	6083      	str	r3, [r0, #8]
 800d76c:	8181      	strh	r1, [r0, #12]
 800d76e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d770:	81c2      	strh	r2, [r0, #14]
 800d772:	6183      	str	r3, [r0, #24]
 800d774:	4619      	mov	r1, r3
 800d776:	2208      	movs	r2, #8
 800d778:	305c      	adds	r0, #92	@ 0x5c
 800d77a:	f000 f928 	bl	800d9ce <memset>
 800d77e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b4 <std+0x58>)
 800d780:	6263      	str	r3, [r4, #36]	@ 0x24
 800d782:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b8 <std+0x5c>)
 800d784:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d786:	4b0d      	ldr	r3, [pc, #52]	@ (800d7bc <std+0x60>)
 800d788:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d78a:	4b0d      	ldr	r3, [pc, #52]	@ (800d7c0 <std+0x64>)
 800d78c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d78e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7c4 <std+0x68>)
 800d790:	6224      	str	r4, [r4, #32]
 800d792:	429c      	cmp	r4, r3
 800d794:	d006      	beq.n	800d7a4 <std+0x48>
 800d796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d79a:	4294      	cmp	r4, r2
 800d79c:	d002      	beq.n	800d7a4 <std+0x48>
 800d79e:	33d0      	adds	r3, #208	@ 0xd0
 800d7a0:	429c      	cmp	r4, r3
 800d7a2:	d105      	bne.n	800d7b0 <std+0x54>
 800d7a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ac:	f000 b98c 	b.w	800dac8 <__retarget_lock_init_recursive>
 800d7b0:	bd10      	pop	{r4, pc}
 800d7b2:	bf00      	nop
 800d7b4:	0800d949 	.word	0x0800d949
 800d7b8:	0800d96b 	.word	0x0800d96b
 800d7bc:	0800d9a3 	.word	0x0800d9a3
 800d7c0:	0800d9c7 	.word	0x0800d9c7
 800d7c4:	20002188 	.word	0x20002188

0800d7c8 <stdio_exit_handler>:
 800d7c8:	4a02      	ldr	r2, [pc, #8]	@ (800d7d4 <stdio_exit_handler+0xc>)
 800d7ca:	4903      	ldr	r1, [pc, #12]	@ (800d7d8 <stdio_exit_handler+0x10>)
 800d7cc:	4803      	ldr	r0, [pc, #12]	@ (800d7dc <stdio_exit_handler+0x14>)
 800d7ce:	f000 b869 	b.w	800d8a4 <_fwalk_sglue>
 800d7d2:	bf00      	nop
 800d7d4:	20000114 	.word	0x20000114
 800d7d8:	0800f425 	.word	0x0800f425
 800d7dc:	20000124 	.word	0x20000124

0800d7e0 <cleanup_stdio>:
 800d7e0:	6841      	ldr	r1, [r0, #4]
 800d7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d814 <cleanup_stdio+0x34>)
 800d7e4:	4299      	cmp	r1, r3
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	d001      	beq.n	800d7f0 <cleanup_stdio+0x10>
 800d7ec:	f001 fe1a 	bl	800f424 <_fflush_r>
 800d7f0:	68a1      	ldr	r1, [r4, #8]
 800d7f2:	4b09      	ldr	r3, [pc, #36]	@ (800d818 <cleanup_stdio+0x38>)
 800d7f4:	4299      	cmp	r1, r3
 800d7f6:	d002      	beq.n	800d7fe <cleanup_stdio+0x1e>
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f001 fe13 	bl	800f424 <_fflush_r>
 800d7fe:	68e1      	ldr	r1, [r4, #12]
 800d800:	4b06      	ldr	r3, [pc, #24]	@ (800d81c <cleanup_stdio+0x3c>)
 800d802:	4299      	cmp	r1, r3
 800d804:	d004      	beq.n	800d810 <cleanup_stdio+0x30>
 800d806:	4620      	mov	r0, r4
 800d808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d80c:	f001 be0a 	b.w	800f424 <_fflush_r>
 800d810:	bd10      	pop	{r4, pc}
 800d812:	bf00      	nop
 800d814:	20002188 	.word	0x20002188
 800d818:	200021f0 	.word	0x200021f0
 800d81c:	20002258 	.word	0x20002258

0800d820 <global_stdio_init.part.0>:
 800d820:	b510      	push	{r4, lr}
 800d822:	4b0b      	ldr	r3, [pc, #44]	@ (800d850 <global_stdio_init.part.0+0x30>)
 800d824:	4c0b      	ldr	r4, [pc, #44]	@ (800d854 <global_stdio_init.part.0+0x34>)
 800d826:	4a0c      	ldr	r2, [pc, #48]	@ (800d858 <global_stdio_init.part.0+0x38>)
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	4620      	mov	r0, r4
 800d82c:	2200      	movs	r2, #0
 800d82e:	2104      	movs	r1, #4
 800d830:	f7ff ff94 	bl	800d75c <std>
 800d834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d838:	2201      	movs	r2, #1
 800d83a:	2109      	movs	r1, #9
 800d83c:	f7ff ff8e 	bl	800d75c <std>
 800d840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d844:	2202      	movs	r2, #2
 800d846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d84a:	2112      	movs	r1, #18
 800d84c:	f7ff bf86 	b.w	800d75c <std>
 800d850:	200022c0 	.word	0x200022c0
 800d854:	20002188 	.word	0x20002188
 800d858:	0800d7c9 	.word	0x0800d7c9

0800d85c <__sfp_lock_acquire>:
 800d85c:	4801      	ldr	r0, [pc, #4]	@ (800d864 <__sfp_lock_acquire+0x8>)
 800d85e:	f000 b934 	b.w	800daca <__retarget_lock_acquire_recursive>
 800d862:	bf00      	nop
 800d864:	200022c9 	.word	0x200022c9

0800d868 <__sfp_lock_release>:
 800d868:	4801      	ldr	r0, [pc, #4]	@ (800d870 <__sfp_lock_release+0x8>)
 800d86a:	f000 b92f 	b.w	800dacc <__retarget_lock_release_recursive>
 800d86e:	bf00      	nop
 800d870:	200022c9 	.word	0x200022c9

0800d874 <__sinit>:
 800d874:	b510      	push	{r4, lr}
 800d876:	4604      	mov	r4, r0
 800d878:	f7ff fff0 	bl	800d85c <__sfp_lock_acquire>
 800d87c:	6a23      	ldr	r3, [r4, #32]
 800d87e:	b11b      	cbz	r3, 800d888 <__sinit+0x14>
 800d880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d884:	f7ff bff0 	b.w	800d868 <__sfp_lock_release>
 800d888:	4b04      	ldr	r3, [pc, #16]	@ (800d89c <__sinit+0x28>)
 800d88a:	6223      	str	r3, [r4, #32]
 800d88c:	4b04      	ldr	r3, [pc, #16]	@ (800d8a0 <__sinit+0x2c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1f5      	bne.n	800d880 <__sinit+0xc>
 800d894:	f7ff ffc4 	bl	800d820 <global_stdio_init.part.0>
 800d898:	e7f2      	b.n	800d880 <__sinit+0xc>
 800d89a:	bf00      	nop
 800d89c:	0800d7e1 	.word	0x0800d7e1
 800d8a0:	200022c0 	.word	0x200022c0

0800d8a4 <_fwalk_sglue>:
 800d8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a8:	4607      	mov	r7, r0
 800d8aa:	4688      	mov	r8, r1
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	2600      	movs	r6, #0
 800d8b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8b4:	f1b9 0901 	subs.w	r9, r9, #1
 800d8b8:	d505      	bpl.n	800d8c6 <_fwalk_sglue+0x22>
 800d8ba:	6824      	ldr	r4, [r4, #0]
 800d8bc:	2c00      	cmp	r4, #0
 800d8be:	d1f7      	bne.n	800d8b0 <_fwalk_sglue+0xc>
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	89ab      	ldrh	r3, [r5, #12]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d907      	bls.n	800d8dc <_fwalk_sglue+0x38>
 800d8cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	d003      	beq.n	800d8dc <_fwalk_sglue+0x38>
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	47c0      	blx	r8
 800d8da:	4306      	orrs	r6, r0
 800d8dc:	3568      	adds	r5, #104	@ 0x68
 800d8de:	e7e9      	b.n	800d8b4 <_fwalk_sglue+0x10>

0800d8e0 <sniprintf>:
 800d8e0:	b40c      	push	{r2, r3}
 800d8e2:	b530      	push	{r4, r5, lr}
 800d8e4:	4b17      	ldr	r3, [pc, #92]	@ (800d944 <sniprintf+0x64>)
 800d8e6:	1e0c      	subs	r4, r1, #0
 800d8e8:	681d      	ldr	r5, [r3, #0]
 800d8ea:	b09d      	sub	sp, #116	@ 0x74
 800d8ec:	da08      	bge.n	800d900 <sniprintf+0x20>
 800d8ee:	238b      	movs	r3, #139	@ 0x8b
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f6:	b01d      	add	sp, #116	@ 0x74
 800d8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8fc:	b002      	add	sp, #8
 800d8fe:	4770      	bx	lr
 800d900:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d904:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d908:	bf14      	ite	ne
 800d90a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d90e:	4623      	moveq	r3, r4
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	9307      	str	r3, [sp, #28]
 800d914:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d918:	9002      	str	r0, [sp, #8]
 800d91a:	9006      	str	r0, [sp, #24]
 800d91c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d920:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d922:	ab21      	add	r3, sp, #132	@ 0x84
 800d924:	a902      	add	r1, sp, #8
 800d926:	4628      	mov	r0, r5
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	f001 fbfb 	bl	800f124 <_svfiprintf_r>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	bfbc      	itt	lt
 800d932:	238b      	movlt	r3, #139	@ 0x8b
 800d934:	602b      	strlt	r3, [r5, #0]
 800d936:	2c00      	cmp	r4, #0
 800d938:	d0dd      	beq.n	800d8f6 <sniprintf+0x16>
 800d93a:	9b02      	ldr	r3, [sp, #8]
 800d93c:	2200      	movs	r2, #0
 800d93e:	701a      	strb	r2, [r3, #0]
 800d940:	e7d9      	b.n	800d8f6 <sniprintf+0x16>
 800d942:	bf00      	nop
 800d944:	20000120 	.word	0x20000120

0800d948 <__sread>:
 800d948:	b510      	push	{r4, lr}
 800d94a:	460c      	mov	r4, r1
 800d94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d950:	f000 f86c 	bl	800da2c <_read_r>
 800d954:	2800      	cmp	r0, #0
 800d956:	bfab      	itete	ge
 800d958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d95a:	89a3      	ldrhlt	r3, [r4, #12]
 800d95c:	181b      	addge	r3, r3, r0
 800d95e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d962:	bfac      	ite	ge
 800d964:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d966:	81a3      	strhlt	r3, [r4, #12]
 800d968:	bd10      	pop	{r4, pc}

0800d96a <__swrite>:
 800d96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d96e:	461f      	mov	r7, r3
 800d970:	898b      	ldrh	r3, [r1, #12]
 800d972:	05db      	lsls	r3, r3, #23
 800d974:	4605      	mov	r5, r0
 800d976:	460c      	mov	r4, r1
 800d978:	4616      	mov	r6, r2
 800d97a:	d505      	bpl.n	800d988 <__swrite+0x1e>
 800d97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d980:	2302      	movs	r3, #2
 800d982:	2200      	movs	r2, #0
 800d984:	f000 f840 	bl	800da08 <_lseek_r>
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d98e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d992:	81a3      	strh	r3, [r4, #12]
 800d994:	4632      	mov	r2, r6
 800d996:	463b      	mov	r3, r7
 800d998:	4628      	mov	r0, r5
 800d99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d99e:	f000 b857 	b.w	800da50 <_write_r>

0800d9a2 <__sseek>:
 800d9a2:	b510      	push	{r4, lr}
 800d9a4:	460c      	mov	r4, r1
 800d9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9aa:	f000 f82d 	bl	800da08 <_lseek_r>
 800d9ae:	1c43      	adds	r3, r0, #1
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	bf15      	itete	ne
 800d9b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9be:	81a3      	strheq	r3, [r4, #12]
 800d9c0:	bf18      	it	ne
 800d9c2:	81a3      	strhne	r3, [r4, #12]
 800d9c4:	bd10      	pop	{r4, pc}

0800d9c6 <__sclose>:
 800d9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ca:	f000 b80d 	b.w	800d9e8 <_close_r>

0800d9ce <memset>:
 800d9ce:	4402      	add	r2, r0
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d100      	bne.n	800d9d8 <memset+0xa>
 800d9d6:	4770      	bx	lr
 800d9d8:	f803 1b01 	strb.w	r1, [r3], #1
 800d9dc:	e7f9      	b.n	800d9d2 <memset+0x4>
	...

0800d9e0 <_localeconv_r>:
 800d9e0:	4800      	ldr	r0, [pc, #0]	@ (800d9e4 <_localeconv_r+0x4>)
 800d9e2:	4770      	bx	lr
 800d9e4:	20000260 	.word	0x20000260

0800d9e8 <_close_r>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	4d06      	ldr	r5, [pc, #24]	@ (800da04 <_close_r+0x1c>)
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	4608      	mov	r0, r1
 800d9f2:	602b      	str	r3, [r5, #0]
 800d9f4:	f7f5 fcea 	bl	80033cc <_close>
 800d9f8:	1c43      	adds	r3, r0, #1
 800d9fa:	d102      	bne.n	800da02 <_close_r+0x1a>
 800d9fc:	682b      	ldr	r3, [r5, #0]
 800d9fe:	b103      	cbz	r3, 800da02 <_close_r+0x1a>
 800da00:	6023      	str	r3, [r4, #0]
 800da02:	bd38      	pop	{r3, r4, r5, pc}
 800da04:	200022c4 	.word	0x200022c4

0800da08 <_lseek_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	4d07      	ldr	r5, [pc, #28]	@ (800da28 <_lseek_r+0x20>)
 800da0c:	4604      	mov	r4, r0
 800da0e:	4608      	mov	r0, r1
 800da10:	4611      	mov	r1, r2
 800da12:	2200      	movs	r2, #0
 800da14:	602a      	str	r2, [r5, #0]
 800da16:	461a      	mov	r2, r3
 800da18:	f7f5 fcff 	bl	800341a <_lseek>
 800da1c:	1c43      	adds	r3, r0, #1
 800da1e:	d102      	bne.n	800da26 <_lseek_r+0x1e>
 800da20:	682b      	ldr	r3, [r5, #0]
 800da22:	b103      	cbz	r3, 800da26 <_lseek_r+0x1e>
 800da24:	6023      	str	r3, [r4, #0]
 800da26:	bd38      	pop	{r3, r4, r5, pc}
 800da28:	200022c4 	.word	0x200022c4

0800da2c <_read_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d07      	ldr	r5, [pc, #28]	@ (800da4c <_read_r+0x20>)
 800da30:	4604      	mov	r4, r0
 800da32:	4608      	mov	r0, r1
 800da34:	4611      	mov	r1, r2
 800da36:	2200      	movs	r2, #0
 800da38:	602a      	str	r2, [r5, #0]
 800da3a:	461a      	mov	r2, r3
 800da3c:	f7f5 fc8d 	bl	800335a <_read>
 800da40:	1c43      	adds	r3, r0, #1
 800da42:	d102      	bne.n	800da4a <_read_r+0x1e>
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	b103      	cbz	r3, 800da4a <_read_r+0x1e>
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	bd38      	pop	{r3, r4, r5, pc}
 800da4c:	200022c4 	.word	0x200022c4

0800da50 <_write_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4d07      	ldr	r5, [pc, #28]	@ (800da70 <_write_r+0x20>)
 800da54:	4604      	mov	r4, r0
 800da56:	4608      	mov	r0, r1
 800da58:	4611      	mov	r1, r2
 800da5a:	2200      	movs	r2, #0
 800da5c:	602a      	str	r2, [r5, #0]
 800da5e:	461a      	mov	r2, r3
 800da60:	f7f5 fc98 	bl	8003394 <_write>
 800da64:	1c43      	adds	r3, r0, #1
 800da66:	d102      	bne.n	800da6e <_write_r+0x1e>
 800da68:	682b      	ldr	r3, [r5, #0]
 800da6a:	b103      	cbz	r3, 800da6e <_write_r+0x1e>
 800da6c:	6023      	str	r3, [r4, #0]
 800da6e:	bd38      	pop	{r3, r4, r5, pc}
 800da70:	200022c4 	.word	0x200022c4

0800da74 <__errno>:
 800da74:	4b01      	ldr	r3, [pc, #4]	@ (800da7c <__errno+0x8>)
 800da76:	6818      	ldr	r0, [r3, #0]
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	20000120 	.word	0x20000120

0800da80 <__libc_init_array>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	4d0d      	ldr	r5, [pc, #52]	@ (800dab8 <__libc_init_array+0x38>)
 800da84:	4c0d      	ldr	r4, [pc, #52]	@ (800dabc <__libc_init_array+0x3c>)
 800da86:	1b64      	subs	r4, r4, r5
 800da88:	10a4      	asrs	r4, r4, #2
 800da8a:	2600      	movs	r6, #0
 800da8c:	42a6      	cmp	r6, r4
 800da8e:	d109      	bne.n	800daa4 <__libc_init_array+0x24>
 800da90:	4d0b      	ldr	r5, [pc, #44]	@ (800dac0 <__libc_init_array+0x40>)
 800da92:	4c0c      	ldr	r4, [pc, #48]	@ (800dac4 <__libc_init_array+0x44>)
 800da94:	f002 f864 	bl	800fb60 <_init>
 800da98:	1b64      	subs	r4, r4, r5
 800da9a:	10a4      	asrs	r4, r4, #2
 800da9c:	2600      	movs	r6, #0
 800da9e:	42a6      	cmp	r6, r4
 800daa0:	d105      	bne.n	800daae <__libc_init_array+0x2e>
 800daa2:	bd70      	pop	{r4, r5, r6, pc}
 800daa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa8:	4798      	blx	r3
 800daaa:	3601      	adds	r6, #1
 800daac:	e7ee      	b.n	800da8c <__libc_init_array+0xc>
 800daae:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab2:	4798      	blx	r3
 800dab4:	3601      	adds	r6, #1
 800dab6:	e7f2      	b.n	800da9e <__libc_init_array+0x1e>
 800dab8:	08010050 	.word	0x08010050
 800dabc:	08010050 	.word	0x08010050
 800dac0:	08010050 	.word	0x08010050
 800dac4:	08010054 	.word	0x08010054

0800dac8 <__retarget_lock_init_recursive>:
 800dac8:	4770      	bx	lr

0800daca <__retarget_lock_acquire_recursive>:
 800daca:	4770      	bx	lr

0800dacc <__retarget_lock_release_recursive>:
 800dacc:	4770      	bx	lr

0800dace <quorem>:
 800dace:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad2:	6903      	ldr	r3, [r0, #16]
 800dad4:	690c      	ldr	r4, [r1, #16]
 800dad6:	42a3      	cmp	r3, r4
 800dad8:	4607      	mov	r7, r0
 800dada:	db7e      	blt.n	800dbda <quorem+0x10c>
 800dadc:	3c01      	subs	r4, #1
 800dade:	f101 0814 	add.w	r8, r1, #20
 800dae2:	00a3      	lsls	r3, r4, #2
 800dae4:	f100 0514 	add.w	r5, r0, #20
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800daee:	9301      	str	r3, [sp, #4]
 800daf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800daf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800daf8:	3301      	adds	r3, #1
 800dafa:	429a      	cmp	r2, r3
 800dafc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db00:	fbb2 f6f3 	udiv	r6, r2, r3
 800db04:	d32e      	bcc.n	800db64 <quorem+0x96>
 800db06:	f04f 0a00 	mov.w	sl, #0
 800db0a:	46c4      	mov	ip, r8
 800db0c:	46ae      	mov	lr, r5
 800db0e:	46d3      	mov	fp, sl
 800db10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db14:	b298      	uxth	r0, r3
 800db16:	fb06 a000 	mla	r0, r6, r0, sl
 800db1a:	0c02      	lsrs	r2, r0, #16
 800db1c:	0c1b      	lsrs	r3, r3, #16
 800db1e:	fb06 2303 	mla	r3, r6, r3, r2
 800db22:	f8de 2000 	ldr.w	r2, [lr]
 800db26:	b280      	uxth	r0, r0
 800db28:	b292      	uxth	r2, r2
 800db2a:	1a12      	subs	r2, r2, r0
 800db2c:	445a      	add	r2, fp
 800db2e:	f8de 0000 	ldr.w	r0, [lr]
 800db32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db36:	b29b      	uxth	r3, r3
 800db38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db40:	b292      	uxth	r2, r2
 800db42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db46:	45e1      	cmp	r9, ip
 800db48:	f84e 2b04 	str.w	r2, [lr], #4
 800db4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db50:	d2de      	bcs.n	800db10 <quorem+0x42>
 800db52:	9b00      	ldr	r3, [sp, #0]
 800db54:	58eb      	ldr	r3, [r5, r3]
 800db56:	b92b      	cbnz	r3, 800db64 <quorem+0x96>
 800db58:	9b01      	ldr	r3, [sp, #4]
 800db5a:	3b04      	subs	r3, #4
 800db5c:	429d      	cmp	r5, r3
 800db5e:	461a      	mov	r2, r3
 800db60:	d32f      	bcc.n	800dbc2 <quorem+0xf4>
 800db62:	613c      	str	r4, [r7, #16]
 800db64:	4638      	mov	r0, r7
 800db66:	f001 f979 	bl	800ee5c <__mcmp>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	db25      	blt.n	800dbba <quorem+0xec>
 800db6e:	4629      	mov	r1, r5
 800db70:	2000      	movs	r0, #0
 800db72:	f858 2b04 	ldr.w	r2, [r8], #4
 800db76:	f8d1 c000 	ldr.w	ip, [r1]
 800db7a:	fa1f fe82 	uxth.w	lr, r2
 800db7e:	fa1f f38c 	uxth.w	r3, ip
 800db82:	eba3 030e 	sub.w	r3, r3, lr
 800db86:	4403      	add	r3, r0
 800db88:	0c12      	lsrs	r2, r2, #16
 800db8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800db8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800db92:	b29b      	uxth	r3, r3
 800db94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db98:	45c1      	cmp	r9, r8
 800db9a:	f841 3b04 	str.w	r3, [r1], #4
 800db9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dba2:	d2e6      	bcs.n	800db72 <quorem+0xa4>
 800dba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbac:	b922      	cbnz	r2, 800dbb8 <quorem+0xea>
 800dbae:	3b04      	subs	r3, #4
 800dbb0:	429d      	cmp	r5, r3
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	d30b      	bcc.n	800dbce <quorem+0x100>
 800dbb6:	613c      	str	r4, [r7, #16]
 800dbb8:	3601      	adds	r6, #1
 800dbba:	4630      	mov	r0, r6
 800dbbc:	b003      	add	sp, #12
 800dbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc2:	6812      	ldr	r2, [r2, #0]
 800dbc4:	3b04      	subs	r3, #4
 800dbc6:	2a00      	cmp	r2, #0
 800dbc8:	d1cb      	bne.n	800db62 <quorem+0x94>
 800dbca:	3c01      	subs	r4, #1
 800dbcc:	e7c6      	b.n	800db5c <quorem+0x8e>
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	3b04      	subs	r3, #4
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	d1ef      	bne.n	800dbb6 <quorem+0xe8>
 800dbd6:	3c01      	subs	r4, #1
 800dbd8:	e7ea      	b.n	800dbb0 <quorem+0xe2>
 800dbda:	2000      	movs	r0, #0
 800dbdc:	e7ee      	b.n	800dbbc <quorem+0xee>
	...

0800dbe0 <_dtoa_r>:
 800dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	69c7      	ldr	r7, [r0, #28]
 800dbe6:	b099      	sub	sp, #100	@ 0x64
 800dbe8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dbec:	ec55 4b10 	vmov	r4, r5, d0
 800dbf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dbf2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbf4:	4683      	mov	fp, r0
 800dbf6:	920e      	str	r2, [sp, #56]	@ 0x38
 800dbf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dbfa:	b97f      	cbnz	r7, 800dc1c <_dtoa_r+0x3c>
 800dbfc:	2010      	movs	r0, #16
 800dbfe:	f000 fdfd 	bl	800e7fc <malloc>
 800dc02:	4602      	mov	r2, r0
 800dc04:	f8cb 001c 	str.w	r0, [fp, #28]
 800dc08:	b920      	cbnz	r0, 800dc14 <_dtoa_r+0x34>
 800dc0a:	4ba7      	ldr	r3, [pc, #668]	@ (800dea8 <_dtoa_r+0x2c8>)
 800dc0c:	21ef      	movs	r1, #239	@ 0xef
 800dc0e:	48a7      	ldr	r0, [pc, #668]	@ (800deac <_dtoa_r+0x2cc>)
 800dc10:	f001 fc68 	bl	800f4e4 <__assert_func>
 800dc14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc18:	6007      	str	r7, [r0, #0]
 800dc1a:	60c7      	str	r7, [r0, #12]
 800dc1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc20:	6819      	ldr	r1, [r3, #0]
 800dc22:	b159      	cbz	r1, 800dc3c <_dtoa_r+0x5c>
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	604a      	str	r2, [r1, #4]
 800dc28:	2301      	movs	r3, #1
 800dc2a:	4093      	lsls	r3, r2
 800dc2c:	608b      	str	r3, [r1, #8]
 800dc2e:	4658      	mov	r0, fp
 800dc30:	f000 feda 	bl	800e9e8 <_Bfree>
 800dc34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	1e2b      	subs	r3, r5, #0
 800dc3e:	bfb9      	ittee	lt
 800dc40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dc44:	9303      	strlt	r3, [sp, #12]
 800dc46:	2300      	movge	r3, #0
 800dc48:	6033      	strge	r3, [r6, #0]
 800dc4a:	9f03      	ldr	r7, [sp, #12]
 800dc4c:	4b98      	ldr	r3, [pc, #608]	@ (800deb0 <_dtoa_r+0x2d0>)
 800dc4e:	bfbc      	itt	lt
 800dc50:	2201      	movlt	r2, #1
 800dc52:	6032      	strlt	r2, [r6, #0]
 800dc54:	43bb      	bics	r3, r7
 800dc56:	d112      	bne.n	800dc7e <_dtoa_r+0x9e>
 800dc58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dc5e:	6013      	str	r3, [r2, #0]
 800dc60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc64:	4323      	orrs	r3, r4
 800dc66:	f000 854d 	beq.w	800e704 <_dtoa_r+0xb24>
 800dc6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dec4 <_dtoa_r+0x2e4>
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 854f 	beq.w	800e714 <_dtoa_r+0xb34>
 800dc76:	f10a 0303 	add.w	r3, sl, #3
 800dc7a:	f000 bd49 	b.w	800e710 <_dtoa_r+0xb30>
 800dc7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc82:	2200      	movs	r2, #0
 800dc84:	ec51 0b17 	vmov	r0, r1, d7
 800dc88:	2300      	movs	r3, #0
 800dc8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dc8e:	f7f2 ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc92:	4680      	mov	r8, r0
 800dc94:	b158      	cbz	r0, 800dcae <_dtoa_r+0xce>
 800dc96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc98:	2301      	movs	r3, #1
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc9e:	b113      	cbz	r3, 800dca6 <_dtoa_r+0xc6>
 800dca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dca2:	4b84      	ldr	r3, [pc, #528]	@ (800deb4 <_dtoa_r+0x2d4>)
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dec8 <_dtoa_r+0x2e8>
 800dcaa:	f000 bd33 	b.w	800e714 <_dtoa_r+0xb34>
 800dcae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dcb2:	aa16      	add	r2, sp, #88	@ 0x58
 800dcb4:	a917      	add	r1, sp, #92	@ 0x5c
 800dcb6:	4658      	mov	r0, fp
 800dcb8:	f001 f980 	bl	800efbc <__d2b>
 800dcbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dcc0:	4681      	mov	r9, r0
 800dcc2:	2e00      	cmp	r6, #0
 800dcc4:	d077      	beq.n	800ddb6 <_dtoa_r+0x1d6>
 800dcc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dcd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dcdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dce0:	4619      	mov	r1, r3
 800dce2:	2200      	movs	r2, #0
 800dce4:	4b74      	ldr	r3, [pc, #464]	@ (800deb8 <_dtoa_r+0x2d8>)
 800dce6:	f7f2 facf 	bl	8000288 <__aeabi_dsub>
 800dcea:	a369      	add	r3, pc, #420	@ (adr r3, 800de90 <_dtoa_r+0x2b0>)
 800dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf0:	f7f2 fc82 	bl	80005f8 <__aeabi_dmul>
 800dcf4:	a368      	add	r3, pc, #416	@ (adr r3, 800de98 <_dtoa_r+0x2b8>)
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	f7f2 fac7 	bl	800028c <__adddf3>
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4630      	mov	r0, r6
 800dd02:	460d      	mov	r5, r1
 800dd04:	f7f2 fc0e 	bl	8000524 <__aeabi_i2d>
 800dd08:	a365      	add	r3, pc, #404	@ (adr r3, 800dea0 <_dtoa_r+0x2c0>)
 800dd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0e:	f7f2 fc73 	bl	80005f8 <__aeabi_dmul>
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	4620      	mov	r0, r4
 800dd18:	4629      	mov	r1, r5
 800dd1a:	f7f2 fab7 	bl	800028c <__adddf3>
 800dd1e:	4604      	mov	r4, r0
 800dd20:	460d      	mov	r5, r1
 800dd22:	f7f2 ff19 	bl	8000b58 <__aeabi_d2iz>
 800dd26:	2200      	movs	r2, #0
 800dd28:	4607      	mov	r7, r0
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f7f2 fed4 	bl	8000adc <__aeabi_dcmplt>
 800dd34:	b140      	cbz	r0, 800dd48 <_dtoa_r+0x168>
 800dd36:	4638      	mov	r0, r7
 800dd38:	f7f2 fbf4 	bl	8000524 <__aeabi_i2d>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f2 fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd44:	b900      	cbnz	r0, 800dd48 <_dtoa_r+0x168>
 800dd46:	3f01      	subs	r7, #1
 800dd48:	2f16      	cmp	r7, #22
 800dd4a:	d851      	bhi.n	800ddf0 <_dtoa_r+0x210>
 800dd4c:	4b5b      	ldr	r3, [pc, #364]	@ (800debc <_dtoa_r+0x2dc>)
 800dd4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd5a:	f7f2 febf 	bl	8000adc <__aeabi_dcmplt>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d048      	beq.n	800ddf4 <_dtoa_r+0x214>
 800dd62:	3f01      	subs	r7, #1
 800dd64:	2300      	movs	r3, #0
 800dd66:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd6a:	1b9b      	subs	r3, r3, r6
 800dd6c:	1e5a      	subs	r2, r3, #1
 800dd6e:	bf44      	itt	mi
 800dd70:	f1c3 0801 	rsbmi	r8, r3, #1
 800dd74:	2300      	movmi	r3, #0
 800dd76:	9208      	str	r2, [sp, #32]
 800dd78:	bf54      	ite	pl
 800dd7a:	f04f 0800 	movpl.w	r8, #0
 800dd7e:	9308      	strmi	r3, [sp, #32]
 800dd80:	2f00      	cmp	r7, #0
 800dd82:	db39      	blt.n	800ddf8 <_dtoa_r+0x218>
 800dd84:	9b08      	ldr	r3, [sp, #32]
 800dd86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dd88:	443b      	add	r3, r7
 800dd8a:	9308      	str	r3, [sp, #32]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd92:	2b09      	cmp	r3, #9
 800dd94:	d864      	bhi.n	800de60 <_dtoa_r+0x280>
 800dd96:	2b05      	cmp	r3, #5
 800dd98:	bfc4      	itt	gt
 800dd9a:	3b04      	subgt	r3, #4
 800dd9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dda0:	f1a3 0302 	sub.w	r3, r3, #2
 800dda4:	bfcc      	ite	gt
 800dda6:	2400      	movgt	r4, #0
 800dda8:	2401      	movle	r4, #1
 800ddaa:	2b03      	cmp	r3, #3
 800ddac:	d863      	bhi.n	800de76 <_dtoa_r+0x296>
 800ddae:	e8df f003 	tbb	[pc, r3]
 800ddb2:	372a      	.short	0x372a
 800ddb4:	5535      	.short	0x5535
 800ddb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ddba:	441e      	add	r6, r3
 800ddbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ddc0:	2b20      	cmp	r3, #32
 800ddc2:	bfc1      	itttt	gt
 800ddc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ddc8:	409f      	lslgt	r7, r3
 800ddca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ddce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ddd2:	bfd6      	itet	le
 800ddd4:	f1c3 0320 	rsble	r3, r3, #32
 800ddd8:	ea47 0003 	orrgt.w	r0, r7, r3
 800dddc:	fa04 f003 	lslle.w	r0, r4, r3
 800dde0:	f7f2 fb90 	bl	8000504 <__aeabi_ui2d>
 800dde4:	2201      	movs	r2, #1
 800dde6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ddea:	3e01      	subs	r6, #1
 800ddec:	9214      	str	r2, [sp, #80]	@ 0x50
 800ddee:	e777      	b.n	800dce0 <_dtoa_r+0x100>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e7b8      	b.n	800dd66 <_dtoa_r+0x186>
 800ddf4:	9012      	str	r0, [sp, #72]	@ 0x48
 800ddf6:	e7b7      	b.n	800dd68 <_dtoa_r+0x188>
 800ddf8:	427b      	negs	r3, r7
 800ddfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	eba8 0807 	sub.w	r8, r8, r7
 800de02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de04:	e7c4      	b.n	800dd90 <_dtoa_r+0x1b0>
 800de06:	2300      	movs	r3, #0
 800de08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dc35      	bgt.n	800de7c <_dtoa_r+0x29c>
 800de10:	2301      	movs	r3, #1
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	9307      	str	r3, [sp, #28]
 800de16:	461a      	mov	r2, r3
 800de18:	920e      	str	r2, [sp, #56]	@ 0x38
 800de1a:	e00b      	b.n	800de34 <_dtoa_r+0x254>
 800de1c:	2301      	movs	r3, #1
 800de1e:	e7f3      	b.n	800de08 <_dtoa_r+0x228>
 800de20:	2300      	movs	r3, #0
 800de22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de26:	18fb      	adds	r3, r7, r3
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	3301      	adds	r3, #1
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	9307      	str	r3, [sp, #28]
 800de30:	bfb8      	it	lt
 800de32:	2301      	movlt	r3, #1
 800de34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800de38:	2100      	movs	r1, #0
 800de3a:	2204      	movs	r2, #4
 800de3c:	f102 0514 	add.w	r5, r2, #20
 800de40:	429d      	cmp	r5, r3
 800de42:	d91f      	bls.n	800de84 <_dtoa_r+0x2a4>
 800de44:	6041      	str	r1, [r0, #4]
 800de46:	4658      	mov	r0, fp
 800de48:	f000 fd8e 	bl	800e968 <_Balloc>
 800de4c:	4682      	mov	sl, r0
 800de4e:	2800      	cmp	r0, #0
 800de50:	d13c      	bne.n	800decc <_dtoa_r+0x2ec>
 800de52:	4b1b      	ldr	r3, [pc, #108]	@ (800dec0 <_dtoa_r+0x2e0>)
 800de54:	4602      	mov	r2, r0
 800de56:	f240 11af 	movw	r1, #431	@ 0x1af
 800de5a:	e6d8      	b.n	800dc0e <_dtoa_r+0x2e>
 800de5c:	2301      	movs	r3, #1
 800de5e:	e7e0      	b.n	800de22 <_dtoa_r+0x242>
 800de60:	2401      	movs	r4, #1
 800de62:	2300      	movs	r3, #0
 800de64:	9309      	str	r3, [sp, #36]	@ 0x24
 800de66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de68:	f04f 33ff 	mov.w	r3, #4294967295
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	9307      	str	r3, [sp, #28]
 800de70:	2200      	movs	r2, #0
 800de72:	2312      	movs	r3, #18
 800de74:	e7d0      	b.n	800de18 <_dtoa_r+0x238>
 800de76:	2301      	movs	r3, #1
 800de78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de7a:	e7f5      	b.n	800de68 <_dtoa_r+0x288>
 800de7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	9307      	str	r3, [sp, #28]
 800de82:	e7d7      	b.n	800de34 <_dtoa_r+0x254>
 800de84:	3101      	adds	r1, #1
 800de86:	0052      	lsls	r2, r2, #1
 800de88:	e7d8      	b.n	800de3c <_dtoa_r+0x25c>
 800de8a:	bf00      	nop
 800de8c:	f3af 8000 	nop.w
 800de90:	636f4361 	.word	0x636f4361
 800de94:	3fd287a7 	.word	0x3fd287a7
 800de98:	8b60c8b3 	.word	0x8b60c8b3
 800de9c:	3fc68a28 	.word	0x3fc68a28
 800dea0:	509f79fb 	.word	0x509f79fb
 800dea4:	3fd34413 	.word	0x3fd34413
 800dea8:	0800fd19 	.word	0x0800fd19
 800deac:	0800fd30 	.word	0x0800fd30
 800deb0:	7ff00000 	.word	0x7ff00000
 800deb4:	0800fce9 	.word	0x0800fce9
 800deb8:	3ff80000 	.word	0x3ff80000
 800debc:	0800fe28 	.word	0x0800fe28
 800dec0:	0800fd88 	.word	0x0800fd88
 800dec4:	0800fd15 	.word	0x0800fd15
 800dec8:	0800fce8 	.word	0x0800fce8
 800decc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ded0:	6018      	str	r0, [r3, #0]
 800ded2:	9b07      	ldr	r3, [sp, #28]
 800ded4:	2b0e      	cmp	r3, #14
 800ded6:	f200 80a4 	bhi.w	800e022 <_dtoa_r+0x442>
 800deda:	2c00      	cmp	r4, #0
 800dedc:	f000 80a1 	beq.w	800e022 <_dtoa_r+0x442>
 800dee0:	2f00      	cmp	r7, #0
 800dee2:	dd33      	ble.n	800df4c <_dtoa_r+0x36c>
 800dee4:	4bad      	ldr	r3, [pc, #692]	@ (800e19c <_dtoa_r+0x5bc>)
 800dee6:	f007 020f 	and.w	r2, r7, #15
 800deea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800deee:	ed93 7b00 	vldr	d7, [r3]
 800def2:	05f8      	lsls	r0, r7, #23
 800def4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800def8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800defc:	d516      	bpl.n	800df2c <_dtoa_r+0x34c>
 800defe:	4ba8      	ldr	r3, [pc, #672]	@ (800e1a0 <_dtoa_r+0x5c0>)
 800df00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df08:	f7f2 fca0 	bl	800084c <__aeabi_ddiv>
 800df0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df10:	f004 040f 	and.w	r4, r4, #15
 800df14:	2603      	movs	r6, #3
 800df16:	4da2      	ldr	r5, [pc, #648]	@ (800e1a0 <_dtoa_r+0x5c0>)
 800df18:	b954      	cbnz	r4, 800df30 <_dtoa_r+0x350>
 800df1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df22:	f7f2 fc93 	bl	800084c <__aeabi_ddiv>
 800df26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df2a:	e028      	b.n	800df7e <_dtoa_r+0x39e>
 800df2c:	2602      	movs	r6, #2
 800df2e:	e7f2      	b.n	800df16 <_dtoa_r+0x336>
 800df30:	07e1      	lsls	r1, r4, #31
 800df32:	d508      	bpl.n	800df46 <_dtoa_r+0x366>
 800df34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df3c:	f7f2 fb5c 	bl	80005f8 <__aeabi_dmul>
 800df40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df44:	3601      	adds	r6, #1
 800df46:	1064      	asrs	r4, r4, #1
 800df48:	3508      	adds	r5, #8
 800df4a:	e7e5      	b.n	800df18 <_dtoa_r+0x338>
 800df4c:	f000 80d2 	beq.w	800e0f4 <_dtoa_r+0x514>
 800df50:	427c      	negs	r4, r7
 800df52:	4b92      	ldr	r3, [pc, #584]	@ (800e19c <_dtoa_r+0x5bc>)
 800df54:	4d92      	ldr	r5, [pc, #584]	@ (800e1a0 <_dtoa_r+0x5c0>)
 800df56:	f004 020f 	and.w	r2, r4, #15
 800df5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df66:	f7f2 fb47 	bl	80005f8 <__aeabi_dmul>
 800df6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df6e:	1124      	asrs	r4, r4, #4
 800df70:	2300      	movs	r3, #0
 800df72:	2602      	movs	r6, #2
 800df74:	2c00      	cmp	r4, #0
 800df76:	f040 80b2 	bne.w	800e0de <_dtoa_r+0x4fe>
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1d3      	bne.n	800df26 <_dtoa_r+0x346>
 800df7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 80b7 	beq.w	800e0f8 <_dtoa_r+0x518>
 800df8a:	4b86      	ldr	r3, [pc, #536]	@ (800e1a4 <_dtoa_r+0x5c4>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	4620      	mov	r0, r4
 800df90:	4629      	mov	r1, r5
 800df92:	f7f2 fda3 	bl	8000adc <__aeabi_dcmplt>
 800df96:	2800      	cmp	r0, #0
 800df98:	f000 80ae 	beq.w	800e0f8 <_dtoa_r+0x518>
 800df9c:	9b07      	ldr	r3, [sp, #28]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 80aa 	beq.w	800e0f8 <_dtoa_r+0x518>
 800dfa4:	9b00      	ldr	r3, [sp, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	dd37      	ble.n	800e01a <_dtoa_r+0x43a>
 800dfaa:	1e7b      	subs	r3, r7, #1
 800dfac:	9304      	str	r3, [sp, #16]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	4b7d      	ldr	r3, [pc, #500]	@ (800e1a8 <_dtoa_r+0x5c8>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	f7f2 fb1f 	bl	80005f8 <__aeabi_dmul>
 800dfba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfbe:	9c00      	ldr	r4, [sp, #0]
 800dfc0:	3601      	adds	r6, #1
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f7f2 faae 	bl	8000524 <__aeabi_i2d>
 800dfc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfcc:	f7f2 fb14 	bl	80005f8 <__aeabi_dmul>
 800dfd0:	4b76      	ldr	r3, [pc, #472]	@ (800e1ac <_dtoa_r+0x5cc>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f7f2 f95a 	bl	800028c <__adddf3>
 800dfd8:	4605      	mov	r5, r0
 800dfda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dfde:	2c00      	cmp	r4, #0
 800dfe0:	f040 808d 	bne.w	800e0fe <_dtoa_r+0x51e>
 800dfe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfe8:	4b71      	ldr	r3, [pc, #452]	@ (800e1b0 <_dtoa_r+0x5d0>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	f7f2 f94c 	bl	8000288 <__aeabi_dsub>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dff8:	462a      	mov	r2, r5
 800dffa:	4633      	mov	r3, r6
 800dffc:	f7f2 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 800e000:	2800      	cmp	r0, #0
 800e002:	f040 828b 	bne.w	800e51c <_dtoa_r+0x93c>
 800e006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e00a:	462a      	mov	r2, r5
 800e00c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e010:	f7f2 fd64 	bl	8000adc <__aeabi_dcmplt>
 800e014:	2800      	cmp	r0, #0
 800e016:	f040 8128 	bne.w	800e26a <_dtoa_r+0x68a>
 800e01a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e01e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e024:	2b00      	cmp	r3, #0
 800e026:	f2c0 815a 	blt.w	800e2de <_dtoa_r+0x6fe>
 800e02a:	2f0e      	cmp	r7, #14
 800e02c:	f300 8157 	bgt.w	800e2de <_dtoa_r+0x6fe>
 800e030:	4b5a      	ldr	r3, [pc, #360]	@ (800e19c <_dtoa_r+0x5bc>)
 800e032:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e036:	ed93 7b00 	vldr	d7, [r3]
 800e03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	ed8d 7b00 	vstr	d7, [sp]
 800e042:	da03      	bge.n	800e04c <_dtoa_r+0x46c>
 800e044:	9b07      	ldr	r3, [sp, #28]
 800e046:	2b00      	cmp	r3, #0
 800e048:	f340 8101 	ble.w	800e24e <_dtoa_r+0x66e>
 800e04c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e050:	4656      	mov	r6, sl
 800e052:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e056:	4620      	mov	r0, r4
 800e058:	4629      	mov	r1, r5
 800e05a:	f7f2 fbf7 	bl	800084c <__aeabi_ddiv>
 800e05e:	f7f2 fd7b 	bl	8000b58 <__aeabi_d2iz>
 800e062:	4680      	mov	r8, r0
 800e064:	f7f2 fa5e 	bl	8000524 <__aeabi_i2d>
 800e068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e06c:	f7f2 fac4 	bl	80005f8 <__aeabi_dmul>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e07c:	f7f2 f904 	bl	8000288 <__aeabi_dsub>
 800e080:	f806 4b01 	strb.w	r4, [r6], #1
 800e084:	9d07      	ldr	r5, [sp, #28]
 800e086:	eba6 040a 	sub.w	r4, r6, sl
 800e08a:	42a5      	cmp	r5, r4
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	f040 8117 	bne.w	800e2c2 <_dtoa_r+0x6e2>
 800e094:	f7f2 f8fa 	bl	800028c <__adddf3>
 800e098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e09c:	4604      	mov	r4, r0
 800e09e:	460d      	mov	r5, r1
 800e0a0:	f7f2 fd3a 	bl	8000b18 <__aeabi_dcmpgt>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	f040 80f9 	bne.w	800e29c <_dtoa_r+0x6bc>
 800e0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	f7f2 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0b6:	b118      	cbz	r0, 800e0c0 <_dtoa_r+0x4e0>
 800e0b8:	f018 0f01 	tst.w	r8, #1
 800e0bc:	f040 80ee 	bne.w	800e29c <_dtoa_r+0x6bc>
 800e0c0:	4649      	mov	r1, r9
 800e0c2:	4658      	mov	r0, fp
 800e0c4:	f000 fc90 	bl	800e9e8 <_Bfree>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	7033      	strb	r3, [r6, #0]
 800e0cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0ce:	3701      	adds	r7, #1
 800e0d0:	601f      	str	r7, [r3, #0]
 800e0d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 831d 	beq.w	800e714 <_dtoa_r+0xb34>
 800e0da:	601e      	str	r6, [r3, #0]
 800e0dc:	e31a      	b.n	800e714 <_dtoa_r+0xb34>
 800e0de:	07e2      	lsls	r2, r4, #31
 800e0e0:	d505      	bpl.n	800e0ee <_dtoa_r+0x50e>
 800e0e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0e6:	f7f2 fa87 	bl	80005f8 <__aeabi_dmul>
 800e0ea:	3601      	adds	r6, #1
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	1064      	asrs	r4, r4, #1
 800e0f0:	3508      	adds	r5, #8
 800e0f2:	e73f      	b.n	800df74 <_dtoa_r+0x394>
 800e0f4:	2602      	movs	r6, #2
 800e0f6:	e742      	b.n	800df7e <_dtoa_r+0x39e>
 800e0f8:	9c07      	ldr	r4, [sp, #28]
 800e0fa:	9704      	str	r7, [sp, #16]
 800e0fc:	e761      	b.n	800dfc2 <_dtoa_r+0x3e2>
 800e0fe:	4b27      	ldr	r3, [pc, #156]	@ (800e19c <_dtoa_r+0x5bc>)
 800e100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e106:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e10a:	4454      	add	r4, sl
 800e10c:	2900      	cmp	r1, #0
 800e10e:	d053      	beq.n	800e1b8 <_dtoa_r+0x5d8>
 800e110:	4928      	ldr	r1, [pc, #160]	@ (800e1b4 <_dtoa_r+0x5d4>)
 800e112:	2000      	movs	r0, #0
 800e114:	f7f2 fb9a 	bl	800084c <__aeabi_ddiv>
 800e118:	4633      	mov	r3, r6
 800e11a:	462a      	mov	r2, r5
 800e11c:	f7f2 f8b4 	bl	8000288 <__aeabi_dsub>
 800e120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e124:	4656      	mov	r6, sl
 800e126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e12a:	f7f2 fd15 	bl	8000b58 <__aeabi_d2iz>
 800e12e:	4605      	mov	r5, r0
 800e130:	f7f2 f9f8 	bl	8000524 <__aeabi_i2d>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e13c:	f7f2 f8a4 	bl	8000288 <__aeabi_dsub>
 800e140:	3530      	adds	r5, #48	@ 0x30
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e14a:	f806 5b01 	strb.w	r5, [r6], #1
 800e14e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e152:	f7f2 fcc3 	bl	8000adc <__aeabi_dcmplt>
 800e156:	2800      	cmp	r0, #0
 800e158:	d171      	bne.n	800e23e <_dtoa_r+0x65e>
 800e15a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e15e:	4911      	ldr	r1, [pc, #68]	@ (800e1a4 <_dtoa_r+0x5c4>)
 800e160:	2000      	movs	r0, #0
 800e162:	f7f2 f891 	bl	8000288 <__aeabi_dsub>
 800e166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e16a:	f7f2 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800e16e:	2800      	cmp	r0, #0
 800e170:	f040 8095 	bne.w	800e29e <_dtoa_r+0x6be>
 800e174:	42a6      	cmp	r6, r4
 800e176:	f43f af50 	beq.w	800e01a <_dtoa_r+0x43a>
 800e17a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e17e:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a8 <_dtoa_r+0x5c8>)
 800e180:	2200      	movs	r2, #0
 800e182:	f7f2 fa39 	bl	80005f8 <__aeabi_dmul>
 800e186:	4b08      	ldr	r3, [pc, #32]	@ (800e1a8 <_dtoa_r+0x5c8>)
 800e188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e18c:	2200      	movs	r2, #0
 800e18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e192:	f7f2 fa31 	bl	80005f8 <__aeabi_dmul>
 800e196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e19a:	e7c4      	b.n	800e126 <_dtoa_r+0x546>
 800e19c:	0800fe28 	.word	0x0800fe28
 800e1a0:	0800fe00 	.word	0x0800fe00
 800e1a4:	3ff00000 	.word	0x3ff00000
 800e1a8:	40240000 	.word	0x40240000
 800e1ac:	401c0000 	.word	0x401c0000
 800e1b0:	40140000 	.word	0x40140000
 800e1b4:	3fe00000 	.word	0x3fe00000
 800e1b8:	4631      	mov	r1, r6
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f7f2 fa1c 	bl	80005f8 <__aeabi_dmul>
 800e1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e1c6:	4656      	mov	r6, sl
 800e1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1cc:	f7f2 fcc4 	bl	8000b58 <__aeabi_d2iz>
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	f7f2 f9a7 	bl	8000524 <__aeabi_i2d>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	460b      	mov	r3, r1
 800e1da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1de:	f7f2 f853 	bl	8000288 <__aeabi_dsub>
 800e1e2:	3530      	adds	r5, #48	@ 0x30
 800e1e4:	f806 5b01 	strb.w	r5, [r6], #1
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	42a6      	cmp	r6, r4
 800e1ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e1f2:	f04f 0200 	mov.w	r2, #0
 800e1f6:	d124      	bne.n	800e242 <_dtoa_r+0x662>
 800e1f8:	4bac      	ldr	r3, [pc, #688]	@ (800e4ac <_dtoa_r+0x8cc>)
 800e1fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e1fe:	f7f2 f845 	bl	800028c <__adddf3>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e20a:	f7f2 fc85 	bl	8000b18 <__aeabi_dcmpgt>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d145      	bne.n	800e29e <_dtoa_r+0x6be>
 800e212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e216:	49a5      	ldr	r1, [pc, #660]	@ (800e4ac <_dtoa_r+0x8cc>)
 800e218:	2000      	movs	r0, #0
 800e21a:	f7f2 f835 	bl	8000288 <__aeabi_dsub>
 800e21e:	4602      	mov	r2, r0
 800e220:	460b      	mov	r3, r1
 800e222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e226:	f7f2 fc59 	bl	8000adc <__aeabi_dcmplt>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	f43f aef5 	beq.w	800e01a <_dtoa_r+0x43a>
 800e230:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e232:	1e73      	subs	r3, r6, #1
 800e234:	9315      	str	r3, [sp, #84]	@ 0x54
 800e236:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e23a:	2b30      	cmp	r3, #48	@ 0x30
 800e23c:	d0f8      	beq.n	800e230 <_dtoa_r+0x650>
 800e23e:	9f04      	ldr	r7, [sp, #16]
 800e240:	e73e      	b.n	800e0c0 <_dtoa_r+0x4e0>
 800e242:	4b9b      	ldr	r3, [pc, #620]	@ (800e4b0 <_dtoa_r+0x8d0>)
 800e244:	f7f2 f9d8 	bl	80005f8 <__aeabi_dmul>
 800e248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e24c:	e7bc      	b.n	800e1c8 <_dtoa_r+0x5e8>
 800e24e:	d10c      	bne.n	800e26a <_dtoa_r+0x68a>
 800e250:	4b98      	ldr	r3, [pc, #608]	@ (800e4b4 <_dtoa_r+0x8d4>)
 800e252:	2200      	movs	r2, #0
 800e254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e258:	f7f2 f9ce 	bl	80005f8 <__aeabi_dmul>
 800e25c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e260:	f7f2 fc50 	bl	8000b04 <__aeabi_dcmpge>
 800e264:	2800      	cmp	r0, #0
 800e266:	f000 8157 	beq.w	800e518 <_dtoa_r+0x938>
 800e26a:	2400      	movs	r4, #0
 800e26c:	4625      	mov	r5, r4
 800e26e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e270:	43db      	mvns	r3, r3
 800e272:	9304      	str	r3, [sp, #16]
 800e274:	4656      	mov	r6, sl
 800e276:	2700      	movs	r7, #0
 800e278:	4621      	mov	r1, r4
 800e27a:	4658      	mov	r0, fp
 800e27c:	f000 fbb4 	bl	800e9e8 <_Bfree>
 800e280:	2d00      	cmp	r5, #0
 800e282:	d0dc      	beq.n	800e23e <_dtoa_r+0x65e>
 800e284:	b12f      	cbz	r7, 800e292 <_dtoa_r+0x6b2>
 800e286:	42af      	cmp	r7, r5
 800e288:	d003      	beq.n	800e292 <_dtoa_r+0x6b2>
 800e28a:	4639      	mov	r1, r7
 800e28c:	4658      	mov	r0, fp
 800e28e:	f000 fbab 	bl	800e9e8 <_Bfree>
 800e292:	4629      	mov	r1, r5
 800e294:	4658      	mov	r0, fp
 800e296:	f000 fba7 	bl	800e9e8 <_Bfree>
 800e29a:	e7d0      	b.n	800e23e <_dtoa_r+0x65e>
 800e29c:	9704      	str	r7, [sp, #16]
 800e29e:	4633      	mov	r3, r6
 800e2a0:	461e      	mov	r6, r3
 800e2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2a6:	2a39      	cmp	r2, #57	@ 0x39
 800e2a8:	d107      	bne.n	800e2ba <_dtoa_r+0x6da>
 800e2aa:	459a      	cmp	sl, r3
 800e2ac:	d1f8      	bne.n	800e2a0 <_dtoa_r+0x6c0>
 800e2ae:	9a04      	ldr	r2, [sp, #16]
 800e2b0:	3201      	adds	r2, #1
 800e2b2:	9204      	str	r2, [sp, #16]
 800e2b4:	2230      	movs	r2, #48	@ 0x30
 800e2b6:	f88a 2000 	strb.w	r2, [sl]
 800e2ba:	781a      	ldrb	r2, [r3, #0]
 800e2bc:	3201      	adds	r2, #1
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	e7bd      	b.n	800e23e <_dtoa_r+0x65e>
 800e2c2:	4b7b      	ldr	r3, [pc, #492]	@ (800e4b0 <_dtoa_r+0x8d0>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f7f2 f997 	bl	80005f8 <__aeabi_dmul>
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	460d      	mov	r5, r1
 800e2d2:	f7f2 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	f43f aebb 	beq.w	800e052 <_dtoa_r+0x472>
 800e2dc:	e6f0      	b.n	800e0c0 <_dtoa_r+0x4e0>
 800e2de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	f000 80db 	beq.w	800e49c <_dtoa_r+0x8bc>
 800e2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2e8:	2a01      	cmp	r2, #1
 800e2ea:	f300 80bf 	bgt.w	800e46c <_dtoa_r+0x88c>
 800e2ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e2f0:	2a00      	cmp	r2, #0
 800e2f2:	f000 80b7 	beq.w	800e464 <_dtoa_r+0x884>
 800e2f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e2fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e2fc:	4646      	mov	r6, r8
 800e2fe:	9a08      	ldr	r2, [sp, #32]
 800e300:	2101      	movs	r1, #1
 800e302:	441a      	add	r2, r3
 800e304:	4658      	mov	r0, fp
 800e306:	4498      	add	r8, r3
 800e308:	9208      	str	r2, [sp, #32]
 800e30a:	f000 fc21 	bl	800eb50 <__i2b>
 800e30e:	4605      	mov	r5, r0
 800e310:	b15e      	cbz	r6, 800e32a <_dtoa_r+0x74a>
 800e312:	9b08      	ldr	r3, [sp, #32]
 800e314:	2b00      	cmp	r3, #0
 800e316:	dd08      	ble.n	800e32a <_dtoa_r+0x74a>
 800e318:	42b3      	cmp	r3, r6
 800e31a:	9a08      	ldr	r2, [sp, #32]
 800e31c:	bfa8      	it	ge
 800e31e:	4633      	movge	r3, r6
 800e320:	eba8 0803 	sub.w	r8, r8, r3
 800e324:	1af6      	subs	r6, r6, r3
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	9308      	str	r3, [sp, #32]
 800e32a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e32c:	b1f3      	cbz	r3, 800e36c <_dtoa_r+0x78c>
 800e32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e330:	2b00      	cmp	r3, #0
 800e332:	f000 80b7 	beq.w	800e4a4 <_dtoa_r+0x8c4>
 800e336:	b18c      	cbz	r4, 800e35c <_dtoa_r+0x77c>
 800e338:	4629      	mov	r1, r5
 800e33a:	4622      	mov	r2, r4
 800e33c:	4658      	mov	r0, fp
 800e33e:	f000 fcc7 	bl	800ecd0 <__pow5mult>
 800e342:	464a      	mov	r2, r9
 800e344:	4601      	mov	r1, r0
 800e346:	4605      	mov	r5, r0
 800e348:	4658      	mov	r0, fp
 800e34a:	f000 fc17 	bl	800eb7c <__multiply>
 800e34e:	4649      	mov	r1, r9
 800e350:	9004      	str	r0, [sp, #16]
 800e352:	4658      	mov	r0, fp
 800e354:	f000 fb48 	bl	800e9e8 <_Bfree>
 800e358:	9b04      	ldr	r3, [sp, #16]
 800e35a:	4699      	mov	r9, r3
 800e35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e35e:	1b1a      	subs	r2, r3, r4
 800e360:	d004      	beq.n	800e36c <_dtoa_r+0x78c>
 800e362:	4649      	mov	r1, r9
 800e364:	4658      	mov	r0, fp
 800e366:	f000 fcb3 	bl	800ecd0 <__pow5mult>
 800e36a:	4681      	mov	r9, r0
 800e36c:	2101      	movs	r1, #1
 800e36e:	4658      	mov	r0, fp
 800e370:	f000 fbee 	bl	800eb50 <__i2b>
 800e374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e376:	4604      	mov	r4, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f000 81cf 	beq.w	800e71c <_dtoa_r+0xb3c>
 800e37e:	461a      	mov	r2, r3
 800e380:	4601      	mov	r1, r0
 800e382:	4658      	mov	r0, fp
 800e384:	f000 fca4 	bl	800ecd0 <__pow5mult>
 800e388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	4604      	mov	r4, r0
 800e38e:	f300 8095 	bgt.w	800e4bc <_dtoa_r+0x8dc>
 800e392:	9b02      	ldr	r3, [sp, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	f040 8087 	bne.w	800e4a8 <_dtoa_r+0x8c8>
 800e39a:	9b03      	ldr	r3, [sp, #12]
 800e39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f040 8089 	bne.w	800e4b8 <_dtoa_r+0x8d8>
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3ac:	0d1b      	lsrs	r3, r3, #20
 800e3ae:	051b      	lsls	r3, r3, #20
 800e3b0:	b12b      	cbz	r3, 800e3be <_dtoa_r+0x7de>
 800e3b2:	9b08      	ldr	r3, [sp, #32]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	9308      	str	r3, [sp, #32]
 800e3b8:	f108 0801 	add.w	r8, r8, #1
 800e3bc:	2301      	movs	r3, #1
 800e3be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f000 81b0 	beq.w	800e728 <_dtoa_r+0xb48>
 800e3c8:	6923      	ldr	r3, [r4, #16]
 800e3ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3ce:	6918      	ldr	r0, [r3, #16]
 800e3d0:	f000 fb72 	bl	800eab8 <__hi0bits>
 800e3d4:	f1c0 0020 	rsb	r0, r0, #32
 800e3d8:	9b08      	ldr	r3, [sp, #32]
 800e3da:	4418      	add	r0, r3
 800e3dc:	f010 001f 	ands.w	r0, r0, #31
 800e3e0:	d077      	beq.n	800e4d2 <_dtoa_r+0x8f2>
 800e3e2:	f1c0 0320 	rsb	r3, r0, #32
 800e3e6:	2b04      	cmp	r3, #4
 800e3e8:	dd6b      	ble.n	800e4c2 <_dtoa_r+0x8e2>
 800e3ea:	9b08      	ldr	r3, [sp, #32]
 800e3ec:	f1c0 001c 	rsb	r0, r0, #28
 800e3f0:	4403      	add	r3, r0
 800e3f2:	4480      	add	r8, r0
 800e3f4:	4406      	add	r6, r0
 800e3f6:	9308      	str	r3, [sp, #32]
 800e3f8:	f1b8 0f00 	cmp.w	r8, #0
 800e3fc:	dd05      	ble.n	800e40a <_dtoa_r+0x82a>
 800e3fe:	4649      	mov	r1, r9
 800e400:	4642      	mov	r2, r8
 800e402:	4658      	mov	r0, fp
 800e404:	f000 fcbe 	bl	800ed84 <__lshift>
 800e408:	4681      	mov	r9, r0
 800e40a:	9b08      	ldr	r3, [sp, #32]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dd05      	ble.n	800e41c <_dtoa_r+0x83c>
 800e410:	4621      	mov	r1, r4
 800e412:	461a      	mov	r2, r3
 800e414:	4658      	mov	r0, fp
 800e416:	f000 fcb5 	bl	800ed84 <__lshift>
 800e41a:	4604      	mov	r4, r0
 800e41c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d059      	beq.n	800e4d6 <_dtoa_r+0x8f6>
 800e422:	4621      	mov	r1, r4
 800e424:	4648      	mov	r0, r9
 800e426:	f000 fd19 	bl	800ee5c <__mcmp>
 800e42a:	2800      	cmp	r0, #0
 800e42c:	da53      	bge.n	800e4d6 <_dtoa_r+0x8f6>
 800e42e:	1e7b      	subs	r3, r7, #1
 800e430:	9304      	str	r3, [sp, #16]
 800e432:	4649      	mov	r1, r9
 800e434:	2300      	movs	r3, #0
 800e436:	220a      	movs	r2, #10
 800e438:	4658      	mov	r0, fp
 800e43a:	f000 faf7 	bl	800ea2c <__multadd>
 800e43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e440:	4681      	mov	r9, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 8172 	beq.w	800e72c <_dtoa_r+0xb4c>
 800e448:	2300      	movs	r3, #0
 800e44a:	4629      	mov	r1, r5
 800e44c:	220a      	movs	r2, #10
 800e44e:	4658      	mov	r0, fp
 800e450:	f000 faec 	bl	800ea2c <__multadd>
 800e454:	9b00      	ldr	r3, [sp, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	4605      	mov	r5, r0
 800e45a:	dc67      	bgt.n	800e52c <_dtoa_r+0x94c>
 800e45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e45e:	2b02      	cmp	r3, #2
 800e460:	dc41      	bgt.n	800e4e6 <_dtoa_r+0x906>
 800e462:	e063      	b.n	800e52c <_dtoa_r+0x94c>
 800e464:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e466:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e46a:	e746      	b.n	800e2fa <_dtoa_r+0x71a>
 800e46c:	9b07      	ldr	r3, [sp, #28]
 800e46e:	1e5c      	subs	r4, r3, #1
 800e470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e472:	42a3      	cmp	r3, r4
 800e474:	bfbf      	itttt	lt
 800e476:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e478:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e47a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e47c:	1ae3      	sublt	r3, r4, r3
 800e47e:	bfb4      	ite	lt
 800e480:	18d2      	addlt	r2, r2, r3
 800e482:	1b1c      	subge	r4, r3, r4
 800e484:	9b07      	ldr	r3, [sp, #28]
 800e486:	bfbc      	itt	lt
 800e488:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e48a:	2400      	movlt	r4, #0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	bfb5      	itete	lt
 800e490:	eba8 0603 	sublt.w	r6, r8, r3
 800e494:	9b07      	ldrge	r3, [sp, #28]
 800e496:	2300      	movlt	r3, #0
 800e498:	4646      	movge	r6, r8
 800e49a:	e730      	b.n	800e2fe <_dtoa_r+0x71e>
 800e49c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e49e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e4a0:	4646      	mov	r6, r8
 800e4a2:	e735      	b.n	800e310 <_dtoa_r+0x730>
 800e4a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4a6:	e75c      	b.n	800e362 <_dtoa_r+0x782>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e788      	b.n	800e3be <_dtoa_r+0x7de>
 800e4ac:	3fe00000 	.word	0x3fe00000
 800e4b0:	40240000 	.word	0x40240000
 800e4b4:	40140000 	.word	0x40140000
 800e4b8:	9b02      	ldr	r3, [sp, #8]
 800e4ba:	e780      	b.n	800e3be <_dtoa_r+0x7de>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4c0:	e782      	b.n	800e3c8 <_dtoa_r+0x7e8>
 800e4c2:	d099      	beq.n	800e3f8 <_dtoa_r+0x818>
 800e4c4:	9a08      	ldr	r2, [sp, #32]
 800e4c6:	331c      	adds	r3, #28
 800e4c8:	441a      	add	r2, r3
 800e4ca:	4498      	add	r8, r3
 800e4cc:	441e      	add	r6, r3
 800e4ce:	9208      	str	r2, [sp, #32]
 800e4d0:	e792      	b.n	800e3f8 <_dtoa_r+0x818>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	e7f6      	b.n	800e4c4 <_dtoa_r+0x8e4>
 800e4d6:	9b07      	ldr	r3, [sp, #28]
 800e4d8:	9704      	str	r7, [sp, #16]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	dc20      	bgt.n	800e520 <_dtoa_r+0x940>
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	dd1e      	ble.n	800e524 <_dtoa_r+0x944>
 800e4e6:	9b00      	ldr	r3, [sp, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f47f aec0 	bne.w	800e26e <_dtoa_r+0x68e>
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	2205      	movs	r2, #5
 800e4f2:	4658      	mov	r0, fp
 800e4f4:	f000 fa9a 	bl	800ea2c <__multadd>
 800e4f8:	4601      	mov	r1, r0
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	4648      	mov	r0, r9
 800e4fe:	f000 fcad 	bl	800ee5c <__mcmp>
 800e502:	2800      	cmp	r0, #0
 800e504:	f77f aeb3 	ble.w	800e26e <_dtoa_r+0x68e>
 800e508:	4656      	mov	r6, sl
 800e50a:	2331      	movs	r3, #49	@ 0x31
 800e50c:	f806 3b01 	strb.w	r3, [r6], #1
 800e510:	9b04      	ldr	r3, [sp, #16]
 800e512:	3301      	adds	r3, #1
 800e514:	9304      	str	r3, [sp, #16]
 800e516:	e6ae      	b.n	800e276 <_dtoa_r+0x696>
 800e518:	9c07      	ldr	r4, [sp, #28]
 800e51a:	9704      	str	r7, [sp, #16]
 800e51c:	4625      	mov	r5, r4
 800e51e:	e7f3      	b.n	800e508 <_dtoa_r+0x928>
 800e520:	9b07      	ldr	r3, [sp, #28]
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 8104 	beq.w	800e734 <_dtoa_r+0xb54>
 800e52c:	2e00      	cmp	r6, #0
 800e52e:	dd05      	ble.n	800e53c <_dtoa_r+0x95c>
 800e530:	4629      	mov	r1, r5
 800e532:	4632      	mov	r2, r6
 800e534:	4658      	mov	r0, fp
 800e536:	f000 fc25 	bl	800ed84 <__lshift>
 800e53a:	4605      	mov	r5, r0
 800e53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d05a      	beq.n	800e5f8 <_dtoa_r+0xa18>
 800e542:	6869      	ldr	r1, [r5, #4]
 800e544:	4658      	mov	r0, fp
 800e546:	f000 fa0f 	bl	800e968 <_Balloc>
 800e54a:	4606      	mov	r6, r0
 800e54c:	b928      	cbnz	r0, 800e55a <_dtoa_r+0x97a>
 800e54e:	4b84      	ldr	r3, [pc, #528]	@ (800e760 <_dtoa_r+0xb80>)
 800e550:	4602      	mov	r2, r0
 800e552:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e556:	f7ff bb5a 	b.w	800dc0e <_dtoa_r+0x2e>
 800e55a:	692a      	ldr	r2, [r5, #16]
 800e55c:	3202      	adds	r2, #2
 800e55e:	0092      	lsls	r2, r2, #2
 800e560:	f105 010c 	add.w	r1, r5, #12
 800e564:	300c      	adds	r0, #12
 800e566:	f000 ffaf 	bl	800f4c8 <memcpy>
 800e56a:	2201      	movs	r2, #1
 800e56c:	4631      	mov	r1, r6
 800e56e:	4658      	mov	r0, fp
 800e570:	f000 fc08 	bl	800ed84 <__lshift>
 800e574:	f10a 0301 	add.w	r3, sl, #1
 800e578:	9307      	str	r3, [sp, #28]
 800e57a:	9b00      	ldr	r3, [sp, #0]
 800e57c:	4453      	add	r3, sl
 800e57e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e580:	9b02      	ldr	r3, [sp, #8]
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	462f      	mov	r7, r5
 800e588:	930a      	str	r3, [sp, #40]	@ 0x28
 800e58a:	4605      	mov	r5, r0
 800e58c:	9b07      	ldr	r3, [sp, #28]
 800e58e:	4621      	mov	r1, r4
 800e590:	3b01      	subs	r3, #1
 800e592:	4648      	mov	r0, r9
 800e594:	9300      	str	r3, [sp, #0]
 800e596:	f7ff fa9a 	bl	800dace <quorem>
 800e59a:	4639      	mov	r1, r7
 800e59c:	9002      	str	r0, [sp, #8]
 800e59e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e5a2:	4648      	mov	r0, r9
 800e5a4:	f000 fc5a 	bl	800ee5c <__mcmp>
 800e5a8:	462a      	mov	r2, r5
 800e5aa:	9008      	str	r0, [sp, #32]
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	4658      	mov	r0, fp
 800e5b0:	f000 fc70 	bl	800ee94 <__mdiff>
 800e5b4:	68c2      	ldr	r2, [r0, #12]
 800e5b6:	4606      	mov	r6, r0
 800e5b8:	bb02      	cbnz	r2, 800e5fc <_dtoa_r+0xa1c>
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	4648      	mov	r0, r9
 800e5be:	f000 fc4d 	bl	800ee5c <__mcmp>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	4631      	mov	r1, r6
 800e5c6:	4658      	mov	r0, fp
 800e5c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5ca:	f000 fa0d 	bl	800e9e8 <_Bfree>
 800e5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5d2:	9e07      	ldr	r6, [sp, #28]
 800e5d4:	ea43 0102 	orr.w	r1, r3, r2
 800e5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5da:	4319      	orrs	r1, r3
 800e5dc:	d110      	bne.n	800e600 <_dtoa_r+0xa20>
 800e5de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e5e2:	d029      	beq.n	800e638 <_dtoa_r+0xa58>
 800e5e4:	9b08      	ldr	r3, [sp, #32]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	dd02      	ble.n	800e5f0 <_dtoa_r+0xa10>
 800e5ea:	9b02      	ldr	r3, [sp, #8]
 800e5ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e5f0:	9b00      	ldr	r3, [sp, #0]
 800e5f2:	f883 8000 	strb.w	r8, [r3]
 800e5f6:	e63f      	b.n	800e278 <_dtoa_r+0x698>
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	e7bb      	b.n	800e574 <_dtoa_r+0x994>
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	e7e1      	b.n	800e5c4 <_dtoa_r+0x9e4>
 800e600:	9b08      	ldr	r3, [sp, #32]
 800e602:	2b00      	cmp	r3, #0
 800e604:	db04      	blt.n	800e610 <_dtoa_r+0xa30>
 800e606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e608:	430b      	orrs	r3, r1
 800e60a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e60c:	430b      	orrs	r3, r1
 800e60e:	d120      	bne.n	800e652 <_dtoa_r+0xa72>
 800e610:	2a00      	cmp	r2, #0
 800e612:	dded      	ble.n	800e5f0 <_dtoa_r+0xa10>
 800e614:	4649      	mov	r1, r9
 800e616:	2201      	movs	r2, #1
 800e618:	4658      	mov	r0, fp
 800e61a:	f000 fbb3 	bl	800ed84 <__lshift>
 800e61e:	4621      	mov	r1, r4
 800e620:	4681      	mov	r9, r0
 800e622:	f000 fc1b 	bl	800ee5c <__mcmp>
 800e626:	2800      	cmp	r0, #0
 800e628:	dc03      	bgt.n	800e632 <_dtoa_r+0xa52>
 800e62a:	d1e1      	bne.n	800e5f0 <_dtoa_r+0xa10>
 800e62c:	f018 0f01 	tst.w	r8, #1
 800e630:	d0de      	beq.n	800e5f0 <_dtoa_r+0xa10>
 800e632:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e636:	d1d8      	bne.n	800e5ea <_dtoa_r+0xa0a>
 800e638:	9a00      	ldr	r2, [sp, #0]
 800e63a:	2339      	movs	r3, #57	@ 0x39
 800e63c:	7013      	strb	r3, [r2, #0]
 800e63e:	4633      	mov	r3, r6
 800e640:	461e      	mov	r6, r3
 800e642:	3b01      	subs	r3, #1
 800e644:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e648:	2a39      	cmp	r2, #57	@ 0x39
 800e64a:	d052      	beq.n	800e6f2 <_dtoa_r+0xb12>
 800e64c:	3201      	adds	r2, #1
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	e612      	b.n	800e278 <_dtoa_r+0x698>
 800e652:	2a00      	cmp	r2, #0
 800e654:	dd07      	ble.n	800e666 <_dtoa_r+0xa86>
 800e656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e65a:	d0ed      	beq.n	800e638 <_dtoa_r+0xa58>
 800e65c:	9a00      	ldr	r2, [sp, #0]
 800e65e:	f108 0301 	add.w	r3, r8, #1
 800e662:	7013      	strb	r3, [r2, #0]
 800e664:	e608      	b.n	800e278 <_dtoa_r+0x698>
 800e666:	9b07      	ldr	r3, [sp, #28]
 800e668:	9a07      	ldr	r2, [sp, #28]
 800e66a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e670:	4293      	cmp	r3, r2
 800e672:	d028      	beq.n	800e6c6 <_dtoa_r+0xae6>
 800e674:	4649      	mov	r1, r9
 800e676:	2300      	movs	r3, #0
 800e678:	220a      	movs	r2, #10
 800e67a:	4658      	mov	r0, fp
 800e67c:	f000 f9d6 	bl	800ea2c <__multadd>
 800e680:	42af      	cmp	r7, r5
 800e682:	4681      	mov	r9, r0
 800e684:	f04f 0300 	mov.w	r3, #0
 800e688:	f04f 020a 	mov.w	r2, #10
 800e68c:	4639      	mov	r1, r7
 800e68e:	4658      	mov	r0, fp
 800e690:	d107      	bne.n	800e6a2 <_dtoa_r+0xac2>
 800e692:	f000 f9cb 	bl	800ea2c <__multadd>
 800e696:	4607      	mov	r7, r0
 800e698:	4605      	mov	r5, r0
 800e69a:	9b07      	ldr	r3, [sp, #28]
 800e69c:	3301      	adds	r3, #1
 800e69e:	9307      	str	r3, [sp, #28]
 800e6a0:	e774      	b.n	800e58c <_dtoa_r+0x9ac>
 800e6a2:	f000 f9c3 	bl	800ea2c <__multadd>
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	4607      	mov	r7, r0
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	220a      	movs	r2, #10
 800e6ae:	4658      	mov	r0, fp
 800e6b0:	f000 f9bc 	bl	800ea2c <__multadd>
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	e7f0      	b.n	800e69a <_dtoa_r+0xaba>
 800e6b8:	9b00      	ldr	r3, [sp, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	bfcc      	ite	gt
 800e6be:	461e      	movgt	r6, r3
 800e6c0:	2601      	movle	r6, #1
 800e6c2:	4456      	add	r6, sl
 800e6c4:	2700      	movs	r7, #0
 800e6c6:	4649      	mov	r1, r9
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	4658      	mov	r0, fp
 800e6cc:	f000 fb5a 	bl	800ed84 <__lshift>
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	4681      	mov	r9, r0
 800e6d4:	f000 fbc2 	bl	800ee5c <__mcmp>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	dcb0      	bgt.n	800e63e <_dtoa_r+0xa5e>
 800e6dc:	d102      	bne.n	800e6e4 <_dtoa_r+0xb04>
 800e6de:	f018 0f01 	tst.w	r8, #1
 800e6e2:	d1ac      	bne.n	800e63e <_dtoa_r+0xa5e>
 800e6e4:	4633      	mov	r3, r6
 800e6e6:	461e      	mov	r6, r3
 800e6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6ec:	2a30      	cmp	r2, #48	@ 0x30
 800e6ee:	d0fa      	beq.n	800e6e6 <_dtoa_r+0xb06>
 800e6f0:	e5c2      	b.n	800e278 <_dtoa_r+0x698>
 800e6f2:	459a      	cmp	sl, r3
 800e6f4:	d1a4      	bne.n	800e640 <_dtoa_r+0xa60>
 800e6f6:	9b04      	ldr	r3, [sp, #16]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	9304      	str	r3, [sp, #16]
 800e6fc:	2331      	movs	r3, #49	@ 0x31
 800e6fe:	f88a 3000 	strb.w	r3, [sl]
 800e702:	e5b9      	b.n	800e278 <_dtoa_r+0x698>
 800e704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e706:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e764 <_dtoa_r+0xb84>
 800e70a:	b11b      	cbz	r3, 800e714 <_dtoa_r+0xb34>
 800e70c:	f10a 0308 	add.w	r3, sl, #8
 800e710:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e712:	6013      	str	r3, [r2, #0]
 800e714:	4650      	mov	r0, sl
 800e716:	b019      	add	sp, #100	@ 0x64
 800e718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71e:	2b01      	cmp	r3, #1
 800e720:	f77f ae37 	ble.w	800e392 <_dtoa_r+0x7b2>
 800e724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e726:	930a      	str	r3, [sp, #40]	@ 0x28
 800e728:	2001      	movs	r0, #1
 800e72a:	e655      	b.n	800e3d8 <_dtoa_r+0x7f8>
 800e72c:	9b00      	ldr	r3, [sp, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f77f aed6 	ble.w	800e4e0 <_dtoa_r+0x900>
 800e734:	4656      	mov	r6, sl
 800e736:	4621      	mov	r1, r4
 800e738:	4648      	mov	r0, r9
 800e73a:	f7ff f9c8 	bl	800dace <quorem>
 800e73e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e742:	f806 8b01 	strb.w	r8, [r6], #1
 800e746:	9b00      	ldr	r3, [sp, #0]
 800e748:	eba6 020a 	sub.w	r2, r6, sl
 800e74c:	4293      	cmp	r3, r2
 800e74e:	ddb3      	ble.n	800e6b8 <_dtoa_r+0xad8>
 800e750:	4649      	mov	r1, r9
 800e752:	2300      	movs	r3, #0
 800e754:	220a      	movs	r2, #10
 800e756:	4658      	mov	r0, fp
 800e758:	f000 f968 	bl	800ea2c <__multadd>
 800e75c:	4681      	mov	r9, r0
 800e75e:	e7ea      	b.n	800e736 <_dtoa_r+0xb56>
 800e760:	0800fd88 	.word	0x0800fd88
 800e764:	0800fd0c 	.word	0x0800fd0c

0800e768 <_free_r>:
 800e768:	b538      	push	{r3, r4, r5, lr}
 800e76a:	4605      	mov	r5, r0
 800e76c:	2900      	cmp	r1, #0
 800e76e:	d041      	beq.n	800e7f4 <_free_r+0x8c>
 800e770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e774:	1f0c      	subs	r4, r1, #4
 800e776:	2b00      	cmp	r3, #0
 800e778:	bfb8      	it	lt
 800e77a:	18e4      	addlt	r4, r4, r3
 800e77c:	f000 f8e8 	bl	800e950 <__malloc_lock>
 800e780:	4a1d      	ldr	r2, [pc, #116]	@ (800e7f8 <_free_r+0x90>)
 800e782:	6813      	ldr	r3, [r2, #0]
 800e784:	b933      	cbnz	r3, 800e794 <_free_r+0x2c>
 800e786:	6063      	str	r3, [r4, #4]
 800e788:	6014      	str	r4, [r2, #0]
 800e78a:	4628      	mov	r0, r5
 800e78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e790:	f000 b8e4 	b.w	800e95c <__malloc_unlock>
 800e794:	42a3      	cmp	r3, r4
 800e796:	d908      	bls.n	800e7aa <_free_r+0x42>
 800e798:	6820      	ldr	r0, [r4, #0]
 800e79a:	1821      	adds	r1, r4, r0
 800e79c:	428b      	cmp	r3, r1
 800e79e:	bf01      	itttt	eq
 800e7a0:	6819      	ldreq	r1, [r3, #0]
 800e7a2:	685b      	ldreq	r3, [r3, #4]
 800e7a4:	1809      	addeq	r1, r1, r0
 800e7a6:	6021      	streq	r1, [r4, #0]
 800e7a8:	e7ed      	b.n	800e786 <_free_r+0x1e>
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	b10b      	cbz	r3, 800e7b4 <_free_r+0x4c>
 800e7b0:	42a3      	cmp	r3, r4
 800e7b2:	d9fa      	bls.n	800e7aa <_free_r+0x42>
 800e7b4:	6811      	ldr	r1, [r2, #0]
 800e7b6:	1850      	adds	r0, r2, r1
 800e7b8:	42a0      	cmp	r0, r4
 800e7ba:	d10b      	bne.n	800e7d4 <_free_r+0x6c>
 800e7bc:	6820      	ldr	r0, [r4, #0]
 800e7be:	4401      	add	r1, r0
 800e7c0:	1850      	adds	r0, r2, r1
 800e7c2:	4283      	cmp	r3, r0
 800e7c4:	6011      	str	r1, [r2, #0]
 800e7c6:	d1e0      	bne.n	800e78a <_free_r+0x22>
 800e7c8:	6818      	ldr	r0, [r3, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	6053      	str	r3, [r2, #4]
 800e7ce:	4408      	add	r0, r1
 800e7d0:	6010      	str	r0, [r2, #0]
 800e7d2:	e7da      	b.n	800e78a <_free_r+0x22>
 800e7d4:	d902      	bls.n	800e7dc <_free_r+0x74>
 800e7d6:	230c      	movs	r3, #12
 800e7d8:	602b      	str	r3, [r5, #0]
 800e7da:	e7d6      	b.n	800e78a <_free_r+0x22>
 800e7dc:	6820      	ldr	r0, [r4, #0]
 800e7de:	1821      	adds	r1, r4, r0
 800e7e0:	428b      	cmp	r3, r1
 800e7e2:	bf04      	itt	eq
 800e7e4:	6819      	ldreq	r1, [r3, #0]
 800e7e6:	685b      	ldreq	r3, [r3, #4]
 800e7e8:	6063      	str	r3, [r4, #4]
 800e7ea:	bf04      	itt	eq
 800e7ec:	1809      	addeq	r1, r1, r0
 800e7ee:	6021      	streq	r1, [r4, #0]
 800e7f0:	6054      	str	r4, [r2, #4]
 800e7f2:	e7ca      	b.n	800e78a <_free_r+0x22>
 800e7f4:	bd38      	pop	{r3, r4, r5, pc}
 800e7f6:	bf00      	nop
 800e7f8:	200022d0 	.word	0x200022d0

0800e7fc <malloc>:
 800e7fc:	4b02      	ldr	r3, [pc, #8]	@ (800e808 <malloc+0xc>)
 800e7fe:	4601      	mov	r1, r0
 800e800:	6818      	ldr	r0, [r3, #0]
 800e802:	f000 b825 	b.w	800e850 <_malloc_r>
 800e806:	bf00      	nop
 800e808:	20000120 	.word	0x20000120

0800e80c <sbrk_aligned>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	4e0f      	ldr	r6, [pc, #60]	@ (800e84c <sbrk_aligned+0x40>)
 800e810:	460c      	mov	r4, r1
 800e812:	6831      	ldr	r1, [r6, #0]
 800e814:	4605      	mov	r5, r0
 800e816:	b911      	cbnz	r1, 800e81e <sbrk_aligned+0x12>
 800e818:	f000 fe46 	bl	800f4a8 <_sbrk_r>
 800e81c:	6030      	str	r0, [r6, #0]
 800e81e:	4621      	mov	r1, r4
 800e820:	4628      	mov	r0, r5
 800e822:	f000 fe41 	bl	800f4a8 <_sbrk_r>
 800e826:	1c43      	adds	r3, r0, #1
 800e828:	d103      	bne.n	800e832 <sbrk_aligned+0x26>
 800e82a:	f04f 34ff 	mov.w	r4, #4294967295
 800e82e:	4620      	mov	r0, r4
 800e830:	bd70      	pop	{r4, r5, r6, pc}
 800e832:	1cc4      	adds	r4, r0, #3
 800e834:	f024 0403 	bic.w	r4, r4, #3
 800e838:	42a0      	cmp	r0, r4
 800e83a:	d0f8      	beq.n	800e82e <sbrk_aligned+0x22>
 800e83c:	1a21      	subs	r1, r4, r0
 800e83e:	4628      	mov	r0, r5
 800e840:	f000 fe32 	bl	800f4a8 <_sbrk_r>
 800e844:	3001      	adds	r0, #1
 800e846:	d1f2      	bne.n	800e82e <sbrk_aligned+0x22>
 800e848:	e7ef      	b.n	800e82a <sbrk_aligned+0x1e>
 800e84a:	bf00      	nop
 800e84c:	200022cc 	.word	0x200022cc

0800e850 <_malloc_r>:
 800e850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e854:	1ccd      	adds	r5, r1, #3
 800e856:	f025 0503 	bic.w	r5, r5, #3
 800e85a:	3508      	adds	r5, #8
 800e85c:	2d0c      	cmp	r5, #12
 800e85e:	bf38      	it	cc
 800e860:	250c      	movcc	r5, #12
 800e862:	2d00      	cmp	r5, #0
 800e864:	4606      	mov	r6, r0
 800e866:	db01      	blt.n	800e86c <_malloc_r+0x1c>
 800e868:	42a9      	cmp	r1, r5
 800e86a:	d904      	bls.n	800e876 <_malloc_r+0x26>
 800e86c:	230c      	movs	r3, #12
 800e86e:	6033      	str	r3, [r6, #0]
 800e870:	2000      	movs	r0, #0
 800e872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e94c <_malloc_r+0xfc>
 800e87a:	f000 f869 	bl	800e950 <__malloc_lock>
 800e87e:	f8d8 3000 	ldr.w	r3, [r8]
 800e882:	461c      	mov	r4, r3
 800e884:	bb44      	cbnz	r4, 800e8d8 <_malloc_r+0x88>
 800e886:	4629      	mov	r1, r5
 800e888:	4630      	mov	r0, r6
 800e88a:	f7ff ffbf 	bl	800e80c <sbrk_aligned>
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	4604      	mov	r4, r0
 800e892:	d158      	bne.n	800e946 <_malloc_r+0xf6>
 800e894:	f8d8 4000 	ldr.w	r4, [r8]
 800e898:	4627      	mov	r7, r4
 800e89a:	2f00      	cmp	r7, #0
 800e89c:	d143      	bne.n	800e926 <_malloc_r+0xd6>
 800e89e:	2c00      	cmp	r4, #0
 800e8a0:	d04b      	beq.n	800e93a <_malloc_r+0xea>
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	4639      	mov	r1, r7
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	eb04 0903 	add.w	r9, r4, r3
 800e8ac:	f000 fdfc 	bl	800f4a8 <_sbrk_r>
 800e8b0:	4581      	cmp	r9, r0
 800e8b2:	d142      	bne.n	800e93a <_malloc_r+0xea>
 800e8b4:	6821      	ldr	r1, [r4, #0]
 800e8b6:	1a6d      	subs	r5, r5, r1
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ffa6 	bl	800e80c <sbrk_aligned>
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	d03a      	beq.n	800e93a <_malloc_r+0xea>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	442b      	add	r3, r5
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ce:	685a      	ldr	r2, [r3, #4]
 800e8d0:	bb62      	cbnz	r2, 800e92c <_malloc_r+0xdc>
 800e8d2:	f8c8 7000 	str.w	r7, [r8]
 800e8d6:	e00f      	b.n	800e8f8 <_malloc_r+0xa8>
 800e8d8:	6822      	ldr	r2, [r4, #0]
 800e8da:	1b52      	subs	r2, r2, r5
 800e8dc:	d420      	bmi.n	800e920 <_malloc_r+0xd0>
 800e8de:	2a0b      	cmp	r2, #11
 800e8e0:	d917      	bls.n	800e912 <_malloc_r+0xc2>
 800e8e2:	1961      	adds	r1, r4, r5
 800e8e4:	42a3      	cmp	r3, r4
 800e8e6:	6025      	str	r5, [r4, #0]
 800e8e8:	bf18      	it	ne
 800e8ea:	6059      	strne	r1, [r3, #4]
 800e8ec:	6863      	ldr	r3, [r4, #4]
 800e8ee:	bf08      	it	eq
 800e8f0:	f8c8 1000 	streq.w	r1, [r8]
 800e8f4:	5162      	str	r2, [r4, r5]
 800e8f6:	604b      	str	r3, [r1, #4]
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f000 f82f 	bl	800e95c <__malloc_unlock>
 800e8fe:	f104 000b 	add.w	r0, r4, #11
 800e902:	1d23      	adds	r3, r4, #4
 800e904:	f020 0007 	bic.w	r0, r0, #7
 800e908:	1ac2      	subs	r2, r0, r3
 800e90a:	bf1c      	itt	ne
 800e90c:	1a1b      	subne	r3, r3, r0
 800e90e:	50a3      	strne	r3, [r4, r2]
 800e910:	e7af      	b.n	800e872 <_malloc_r+0x22>
 800e912:	6862      	ldr	r2, [r4, #4]
 800e914:	42a3      	cmp	r3, r4
 800e916:	bf0c      	ite	eq
 800e918:	f8c8 2000 	streq.w	r2, [r8]
 800e91c:	605a      	strne	r2, [r3, #4]
 800e91e:	e7eb      	b.n	800e8f8 <_malloc_r+0xa8>
 800e920:	4623      	mov	r3, r4
 800e922:	6864      	ldr	r4, [r4, #4]
 800e924:	e7ae      	b.n	800e884 <_malloc_r+0x34>
 800e926:	463c      	mov	r4, r7
 800e928:	687f      	ldr	r7, [r7, #4]
 800e92a:	e7b6      	b.n	800e89a <_malloc_r+0x4a>
 800e92c:	461a      	mov	r2, r3
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	42a3      	cmp	r3, r4
 800e932:	d1fb      	bne.n	800e92c <_malloc_r+0xdc>
 800e934:	2300      	movs	r3, #0
 800e936:	6053      	str	r3, [r2, #4]
 800e938:	e7de      	b.n	800e8f8 <_malloc_r+0xa8>
 800e93a:	230c      	movs	r3, #12
 800e93c:	6033      	str	r3, [r6, #0]
 800e93e:	4630      	mov	r0, r6
 800e940:	f000 f80c 	bl	800e95c <__malloc_unlock>
 800e944:	e794      	b.n	800e870 <_malloc_r+0x20>
 800e946:	6005      	str	r5, [r0, #0]
 800e948:	e7d6      	b.n	800e8f8 <_malloc_r+0xa8>
 800e94a:	bf00      	nop
 800e94c:	200022d0 	.word	0x200022d0

0800e950 <__malloc_lock>:
 800e950:	4801      	ldr	r0, [pc, #4]	@ (800e958 <__malloc_lock+0x8>)
 800e952:	f7ff b8ba 	b.w	800daca <__retarget_lock_acquire_recursive>
 800e956:	bf00      	nop
 800e958:	200022c8 	.word	0x200022c8

0800e95c <__malloc_unlock>:
 800e95c:	4801      	ldr	r0, [pc, #4]	@ (800e964 <__malloc_unlock+0x8>)
 800e95e:	f7ff b8b5 	b.w	800dacc <__retarget_lock_release_recursive>
 800e962:	bf00      	nop
 800e964:	200022c8 	.word	0x200022c8

0800e968 <_Balloc>:
 800e968:	b570      	push	{r4, r5, r6, lr}
 800e96a:	69c6      	ldr	r6, [r0, #28]
 800e96c:	4604      	mov	r4, r0
 800e96e:	460d      	mov	r5, r1
 800e970:	b976      	cbnz	r6, 800e990 <_Balloc+0x28>
 800e972:	2010      	movs	r0, #16
 800e974:	f7ff ff42 	bl	800e7fc <malloc>
 800e978:	4602      	mov	r2, r0
 800e97a:	61e0      	str	r0, [r4, #28]
 800e97c:	b920      	cbnz	r0, 800e988 <_Balloc+0x20>
 800e97e:	4b18      	ldr	r3, [pc, #96]	@ (800e9e0 <_Balloc+0x78>)
 800e980:	4818      	ldr	r0, [pc, #96]	@ (800e9e4 <_Balloc+0x7c>)
 800e982:	216b      	movs	r1, #107	@ 0x6b
 800e984:	f000 fdae 	bl	800f4e4 <__assert_func>
 800e988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e98c:	6006      	str	r6, [r0, #0]
 800e98e:	60c6      	str	r6, [r0, #12]
 800e990:	69e6      	ldr	r6, [r4, #28]
 800e992:	68f3      	ldr	r3, [r6, #12]
 800e994:	b183      	cbz	r3, 800e9b8 <_Balloc+0x50>
 800e996:	69e3      	ldr	r3, [r4, #28]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e99e:	b9b8      	cbnz	r0, 800e9d0 <_Balloc+0x68>
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	fa01 f605 	lsl.w	r6, r1, r5
 800e9a6:	1d72      	adds	r2, r6, #5
 800e9a8:	0092      	lsls	r2, r2, #2
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 fdb8 	bl	800f520 <_calloc_r>
 800e9b0:	b160      	cbz	r0, 800e9cc <_Balloc+0x64>
 800e9b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9b6:	e00e      	b.n	800e9d6 <_Balloc+0x6e>
 800e9b8:	2221      	movs	r2, #33	@ 0x21
 800e9ba:	2104      	movs	r1, #4
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f000 fdaf 	bl	800f520 <_calloc_r>
 800e9c2:	69e3      	ldr	r3, [r4, #28]
 800e9c4:	60f0      	str	r0, [r6, #12]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1e4      	bne.n	800e996 <_Balloc+0x2e>
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	bd70      	pop	{r4, r5, r6, pc}
 800e9d0:	6802      	ldr	r2, [r0, #0]
 800e9d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9dc:	e7f7      	b.n	800e9ce <_Balloc+0x66>
 800e9de:	bf00      	nop
 800e9e0:	0800fd19 	.word	0x0800fd19
 800e9e4:	0800fd99 	.word	0x0800fd99

0800e9e8 <_Bfree>:
 800e9e8:	b570      	push	{r4, r5, r6, lr}
 800e9ea:	69c6      	ldr	r6, [r0, #28]
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	460c      	mov	r4, r1
 800e9f0:	b976      	cbnz	r6, 800ea10 <_Bfree+0x28>
 800e9f2:	2010      	movs	r0, #16
 800e9f4:	f7ff ff02 	bl	800e7fc <malloc>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	61e8      	str	r0, [r5, #28]
 800e9fc:	b920      	cbnz	r0, 800ea08 <_Bfree+0x20>
 800e9fe:	4b09      	ldr	r3, [pc, #36]	@ (800ea24 <_Bfree+0x3c>)
 800ea00:	4809      	ldr	r0, [pc, #36]	@ (800ea28 <_Bfree+0x40>)
 800ea02:	218f      	movs	r1, #143	@ 0x8f
 800ea04:	f000 fd6e 	bl	800f4e4 <__assert_func>
 800ea08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea0c:	6006      	str	r6, [r0, #0]
 800ea0e:	60c6      	str	r6, [r0, #12]
 800ea10:	b13c      	cbz	r4, 800ea22 <_Bfree+0x3a>
 800ea12:	69eb      	ldr	r3, [r5, #28]
 800ea14:	6862      	ldr	r2, [r4, #4]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea1c:	6021      	str	r1, [r4, #0]
 800ea1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea22:	bd70      	pop	{r4, r5, r6, pc}
 800ea24:	0800fd19 	.word	0x0800fd19
 800ea28:	0800fd99 	.word	0x0800fd99

0800ea2c <__multadd>:
 800ea2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea30:	690d      	ldr	r5, [r1, #16]
 800ea32:	4607      	mov	r7, r0
 800ea34:	460c      	mov	r4, r1
 800ea36:	461e      	mov	r6, r3
 800ea38:	f101 0c14 	add.w	ip, r1, #20
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea42:	b299      	uxth	r1, r3
 800ea44:	fb02 6101 	mla	r1, r2, r1, r6
 800ea48:	0c1e      	lsrs	r6, r3, #16
 800ea4a:	0c0b      	lsrs	r3, r1, #16
 800ea4c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea50:	b289      	uxth	r1, r1
 800ea52:	3001      	adds	r0, #1
 800ea54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea58:	4285      	cmp	r5, r0
 800ea5a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea62:	dcec      	bgt.n	800ea3e <__multadd+0x12>
 800ea64:	b30e      	cbz	r6, 800eaaa <__multadd+0x7e>
 800ea66:	68a3      	ldr	r3, [r4, #8]
 800ea68:	42ab      	cmp	r3, r5
 800ea6a:	dc19      	bgt.n	800eaa0 <__multadd+0x74>
 800ea6c:	6861      	ldr	r1, [r4, #4]
 800ea6e:	4638      	mov	r0, r7
 800ea70:	3101      	adds	r1, #1
 800ea72:	f7ff ff79 	bl	800e968 <_Balloc>
 800ea76:	4680      	mov	r8, r0
 800ea78:	b928      	cbnz	r0, 800ea86 <__multadd+0x5a>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	4b0c      	ldr	r3, [pc, #48]	@ (800eab0 <__multadd+0x84>)
 800ea7e:	480d      	ldr	r0, [pc, #52]	@ (800eab4 <__multadd+0x88>)
 800ea80:	21ba      	movs	r1, #186	@ 0xba
 800ea82:	f000 fd2f 	bl	800f4e4 <__assert_func>
 800ea86:	6922      	ldr	r2, [r4, #16]
 800ea88:	3202      	adds	r2, #2
 800ea8a:	f104 010c 	add.w	r1, r4, #12
 800ea8e:	0092      	lsls	r2, r2, #2
 800ea90:	300c      	adds	r0, #12
 800ea92:	f000 fd19 	bl	800f4c8 <memcpy>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4638      	mov	r0, r7
 800ea9a:	f7ff ffa5 	bl	800e9e8 <_Bfree>
 800ea9e:	4644      	mov	r4, r8
 800eaa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eaa4:	3501      	adds	r5, #1
 800eaa6:	615e      	str	r6, [r3, #20]
 800eaa8:	6125      	str	r5, [r4, #16]
 800eaaa:	4620      	mov	r0, r4
 800eaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab0:	0800fd88 	.word	0x0800fd88
 800eab4:	0800fd99 	.word	0x0800fd99

0800eab8 <__hi0bits>:
 800eab8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eabc:	4603      	mov	r3, r0
 800eabe:	bf36      	itet	cc
 800eac0:	0403      	lslcc	r3, r0, #16
 800eac2:	2000      	movcs	r0, #0
 800eac4:	2010      	movcc	r0, #16
 800eac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eaca:	bf3c      	itt	cc
 800eacc:	021b      	lslcc	r3, r3, #8
 800eace:	3008      	addcc	r0, #8
 800ead0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ead4:	bf3c      	itt	cc
 800ead6:	011b      	lslcc	r3, r3, #4
 800ead8:	3004      	addcc	r0, #4
 800eada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eade:	bf3c      	itt	cc
 800eae0:	009b      	lslcc	r3, r3, #2
 800eae2:	3002      	addcc	r0, #2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	db05      	blt.n	800eaf4 <__hi0bits+0x3c>
 800eae8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eaec:	f100 0001 	add.w	r0, r0, #1
 800eaf0:	bf08      	it	eq
 800eaf2:	2020      	moveq	r0, #32
 800eaf4:	4770      	bx	lr

0800eaf6 <__lo0bits>:
 800eaf6:	6803      	ldr	r3, [r0, #0]
 800eaf8:	4602      	mov	r2, r0
 800eafa:	f013 0007 	ands.w	r0, r3, #7
 800eafe:	d00b      	beq.n	800eb18 <__lo0bits+0x22>
 800eb00:	07d9      	lsls	r1, r3, #31
 800eb02:	d421      	bmi.n	800eb48 <__lo0bits+0x52>
 800eb04:	0798      	lsls	r0, r3, #30
 800eb06:	bf49      	itett	mi
 800eb08:	085b      	lsrmi	r3, r3, #1
 800eb0a:	089b      	lsrpl	r3, r3, #2
 800eb0c:	2001      	movmi	r0, #1
 800eb0e:	6013      	strmi	r3, [r2, #0]
 800eb10:	bf5c      	itt	pl
 800eb12:	6013      	strpl	r3, [r2, #0]
 800eb14:	2002      	movpl	r0, #2
 800eb16:	4770      	bx	lr
 800eb18:	b299      	uxth	r1, r3
 800eb1a:	b909      	cbnz	r1, 800eb20 <__lo0bits+0x2a>
 800eb1c:	0c1b      	lsrs	r3, r3, #16
 800eb1e:	2010      	movs	r0, #16
 800eb20:	b2d9      	uxtb	r1, r3
 800eb22:	b909      	cbnz	r1, 800eb28 <__lo0bits+0x32>
 800eb24:	3008      	adds	r0, #8
 800eb26:	0a1b      	lsrs	r3, r3, #8
 800eb28:	0719      	lsls	r1, r3, #28
 800eb2a:	bf04      	itt	eq
 800eb2c:	091b      	lsreq	r3, r3, #4
 800eb2e:	3004      	addeq	r0, #4
 800eb30:	0799      	lsls	r1, r3, #30
 800eb32:	bf04      	itt	eq
 800eb34:	089b      	lsreq	r3, r3, #2
 800eb36:	3002      	addeq	r0, #2
 800eb38:	07d9      	lsls	r1, r3, #31
 800eb3a:	d403      	bmi.n	800eb44 <__lo0bits+0x4e>
 800eb3c:	085b      	lsrs	r3, r3, #1
 800eb3e:	f100 0001 	add.w	r0, r0, #1
 800eb42:	d003      	beq.n	800eb4c <__lo0bits+0x56>
 800eb44:	6013      	str	r3, [r2, #0]
 800eb46:	4770      	bx	lr
 800eb48:	2000      	movs	r0, #0
 800eb4a:	4770      	bx	lr
 800eb4c:	2020      	movs	r0, #32
 800eb4e:	4770      	bx	lr

0800eb50 <__i2b>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	460c      	mov	r4, r1
 800eb54:	2101      	movs	r1, #1
 800eb56:	f7ff ff07 	bl	800e968 <_Balloc>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	b928      	cbnz	r0, 800eb6a <__i2b+0x1a>
 800eb5e:	4b05      	ldr	r3, [pc, #20]	@ (800eb74 <__i2b+0x24>)
 800eb60:	4805      	ldr	r0, [pc, #20]	@ (800eb78 <__i2b+0x28>)
 800eb62:	f240 1145 	movw	r1, #325	@ 0x145
 800eb66:	f000 fcbd 	bl	800f4e4 <__assert_func>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	6144      	str	r4, [r0, #20]
 800eb6e:	6103      	str	r3, [r0, #16]
 800eb70:	bd10      	pop	{r4, pc}
 800eb72:	bf00      	nop
 800eb74:	0800fd88 	.word	0x0800fd88
 800eb78:	0800fd99 	.word	0x0800fd99

0800eb7c <__multiply>:
 800eb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb80:	4614      	mov	r4, r2
 800eb82:	690a      	ldr	r2, [r1, #16]
 800eb84:	6923      	ldr	r3, [r4, #16]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	bfa8      	it	ge
 800eb8a:	4623      	movge	r3, r4
 800eb8c:	460f      	mov	r7, r1
 800eb8e:	bfa4      	itt	ge
 800eb90:	460c      	movge	r4, r1
 800eb92:	461f      	movge	r7, r3
 800eb94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eb98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eb9c:	68a3      	ldr	r3, [r4, #8]
 800eb9e:	6861      	ldr	r1, [r4, #4]
 800eba0:	eb0a 0609 	add.w	r6, sl, r9
 800eba4:	42b3      	cmp	r3, r6
 800eba6:	b085      	sub	sp, #20
 800eba8:	bfb8      	it	lt
 800ebaa:	3101      	addlt	r1, #1
 800ebac:	f7ff fedc 	bl	800e968 <_Balloc>
 800ebb0:	b930      	cbnz	r0, 800ebc0 <__multiply+0x44>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	4b44      	ldr	r3, [pc, #272]	@ (800ecc8 <__multiply+0x14c>)
 800ebb6:	4845      	ldr	r0, [pc, #276]	@ (800eccc <__multiply+0x150>)
 800ebb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebbc:	f000 fc92 	bl	800f4e4 <__assert_func>
 800ebc0:	f100 0514 	add.w	r5, r0, #20
 800ebc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ebc8:	462b      	mov	r3, r5
 800ebca:	2200      	movs	r2, #0
 800ebcc:	4543      	cmp	r3, r8
 800ebce:	d321      	bcc.n	800ec14 <__multiply+0x98>
 800ebd0:	f107 0114 	add.w	r1, r7, #20
 800ebd4:	f104 0214 	add.w	r2, r4, #20
 800ebd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ebdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ebe0:	9302      	str	r3, [sp, #8]
 800ebe2:	1b13      	subs	r3, r2, r4
 800ebe4:	3b15      	subs	r3, #21
 800ebe6:	f023 0303 	bic.w	r3, r3, #3
 800ebea:	3304      	adds	r3, #4
 800ebec:	f104 0715 	add.w	r7, r4, #21
 800ebf0:	42ba      	cmp	r2, r7
 800ebf2:	bf38      	it	cc
 800ebf4:	2304      	movcc	r3, #4
 800ebf6:	9301      	str	r3, [sp, #4]
 800ebf8:	9b02      	ldr	r3, [sp, #8]
 800ebfa:	9103      	str	r1, [sp, #12]
 800ebfc:	428b      	cmp	r3, r1
 800ebfe:	d80c      	bhi.n	800ec1a <__multiply+0x9e>
 800ec00:	2e00      	cmp	r6, #0
 800ec02:	dd03      	ble.n	800ec0c <__multiply+0x90>
 800ec04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d05b      	beq.n	800ecc4 <__multiply+0x148>
 800ec0c:	6106      	str	r6, [r0, #16]
 800ec0e:	b005      	add	sp, #20
 800ec10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec14:	f843 2b04 	str.w	r2, [r3], #4
 800ec18:	e7d8      	b.n	800ebcc <__multiply+0x50>
 800ec1a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec1e:	f1ba 0f00 	cmp.w	sl, #0
 800ec22:	d024      	beq.n	800ec6e <__multiply+0xf2>
 800ec24:	f104 0e14 	add.w	lr, r4, #20
 800ec28:	46a9      	mov	r9, r5
 800ec2a:	f04f 0c00 	mov.w	ip, #0
 800ec2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec32:	f8d9 3000 	ldr.w	r3, [r9]
 800ec36:	fa1f fb87 	uxth.w	fp, r7
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ec44:	f8d9 7000 	ldr.w	r7, [r9]
 800ec48:	4463      	add	r3, ip
 800ec4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec4e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ec52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec5c:	4572      	cmp	r2, lr
 800ec5e:	f849 3b04 	str.w	r3, [r9], #4
 800ec62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec66:	d8e2      	bhi.n	800ec2e <__multiply+0xb2>
 800ec68:	9b01      	ldr	r3, [sp, #4]
 800ec6a:	f845 c003 	str.w	ip, [r5, r3]
 800ec6e:	9b03      	ldr	r3, [sp, #12]
 800ec70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec74:	3104      	adds	r1, #4
 800ec76:	f1b9 0f00 	cmp.w	r9, #0
 800ec7a:	d021      	beq.n	800ecc0 <__multiply+0x144>
 800ec7c:	682b      	ldr	r3, [r5, #0]
 800ec7e:	f104 0c14 	add.w	ip, r4, #20
 800ec82:	46ae      	mov	lr, r5
 800ec84:	f04f 0a00 	mov.w	sl, #0
 800ec88:	f8bc b000 	ldrh.w	fp, [ip]
 800ec8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ec90:	fb09 770b 	mla	r7, r9, fp, r7
 800ec94:	4457      	add	r7, sl
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec9c:	f84e 3b04 	str.w	r3, [lr], #4
 800eca0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eca8:	f8be 3000 	ldrh.w	r3, [lr]
 800ecac:	fb09 330a 	mla	r3, r9, sl, r3
 800ecb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ecb4:	4562      	cmp	r2, ip
 800ecb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecba:	d8e5      	bhi.n	800ec88 <__multiply+0x10c>
 800ecbc:	9f01      	ldr	r7, [sp, #4]
 800ecbe:	51eb      	str	r3, [r5, r7]
 800ecc0:	3504      	adds	r5, #4
 800ecc2:	e799      	b.n	800ebf8 <__multiply+0x7c>
 800ecc4:	3e01      	subs	r6, #1
 800ecc6:	e79b      	b.n	800ec00 <__multiply+0x84>
 800ecc8:	0800fd88 	.word	0x0800fd88
 800eccc:	0800fd99 	.word	0x0800fd99

0800ecd0 <__pow5mult>:
 800ecd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecd4:	4615      	mov	r5, r2
 800ecd6:	f012 0203 	ands.w	r2, r2, #3
 800ecda:	4607      	mov	r7, r0
 800ecdc:	460e      	mov	r6, r1
 800ecde:	d007      	beq.n	800ecf0 <__pow5mult+0x20>
 800ece0:	4c25      	ldr	r4, [pc, #148]	@ (800ed78 <__pow5mult+0xa8>)
 800ece2:	3a01      	subs	r2, #1
 800ece4:	2300      	movs	r3, #0
 800ece6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ecea:	f7ff fe9f 	bl	800ea2c <__multadd>
 800ecee:	4606      	mov	r6, r0
 800ecf0:	10ad      	asrs	r5, r5, #2
 800ecf2:	d03d      	beq.n	800ed70 <__pow5mult+0xa0>
 800ecf4:	69fc      	ldr	r4, [r7, #28]
 800ecf6:	b97c      	cbnz	r4, 800ed18 <__pow5mult+0x48>
 800ecf8:	2010      	movs	r0, #16
 800ecfa:	f7ff fd7f 	bl	800e7fc <malloc>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	61f8      	str	r0, [r7, #28]
 800ed02:	b928      	cbnz	r0, 800ed10 <__pow5mult+0x40>
 800ed04:	4b1d      	ldr	r3, [pc, #116]	@ (800ed7c <__pow5mult+0xac>)
 800ed06:	481e      	ldr	r0, [pc, #120]	@ (800ed80 <__pow5mult+0xb0>)
 800ed08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed0c:	f000 fbea 	bl	800f4e4 <__assert_func>
 800ed10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed14:	6004      	str	r4, [r0, #0]
 800ed16:	60c4      	str	r4, [r0, #12]
 800ed18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed20:	b94c      	cbnz	r4, 800ed36 <__pow5mult+0x66>
 800ed22:	f240 2171 	movw	r1, #625	@ 0x271
 800ed26:	4638      	mov	r0, r7
 800ed28:	f7ff ff12 	bl	800eb50 <__i2b>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed32:	4604      	mov	r4, r0
 800ed34:	6003      	str	r3, [r0, #0]
 800ed36:	f04f 0900 	mov.w	r9, #0
 800ed3a:	07eb      	lsls	r3, r5, #31
 800ed3c:	d50a      	bpl.n	800ed54 <__pow5mult+0x84>
 800ed3e:	4631      	mov	r1, r6
 800ed40:	4622      	mov	r2, r4
 800ed42:	4638      	mov	r0, r7
 800ed44:	f7ff ff1a 	bl	800eb7c <__multiply>
 800ed48:	4631      	mov	r1, r6
 800ed4a:	4680      	mov	r8, r0
 800ed4c:	4638      	mov	r0, r7
 800ed4e:	f7ff fe4b 	bl	800e9e8 <_Bfree>
 800ed52:	4646      	mov	r6, r8
 800ed54:	106d      	asrs	r5, r5, #1
 800ed56:	d00b      	beq.n	800ed70 <__pow5mult+0xa0>
 800ed58:	6820      	ldr	r0, [r4, #0]
 800ed5a:	b938      	cbnz	r0, 800ed6c <__pow5mult+0x9c>
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4638      	mov	r0, r7
 800ed62:	f7ff ff0b 	bl	800eb7c <__multiply>
 800ed66:	6020      	str	r0, [r4, #0]
 800ed68:	f8c0 9000 	str.w	r9, [r0]
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	e7e4      	b.n	800ed3a <__pow5mult+0x6a>
 800ed70:	4630      	mov	r0, r6
 800ed72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed76:	bf00      	nop
 800ed78:	0800fdf4 	.word	0x0800fdf4
 800ed7c:	0800fd19 	.word	0x0800fd19
 800ed80:	0800fd99 	.word	0x0800fd99

0800ed84 <__lshift>:
 800ed84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed88:	460c      	mov	r4, r1
 800ed8a:	6849      	ldr	r1, [r1, #4]
 800ed8c:	6923      	ldr	r3, [r4, #16]
 800ed8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed92:	68a3      	ldr	r3, [r4, #8]
 800ed94:	4607      	mov	r7, r0
 800ed96:	4691      	mov	r9, r2
 800ed98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed9c:	f108 0601 	add.w	r6, r8, #1
 800eda0:	42b3      	cmp	r3, r6
 800eda2:	db0b      	blt.n	800edbc <__lshift+0x38>
 800eda4:	4638      	mov	r0, r7
 800eda6:	f7ff fddf 	bl	800e968 <_Balloc>
 800edaa:	4605      	mov	r5, r0
 800edac:	b948      	cbnz	r0, 800edc2 <__lshift+0x3e>
 800edae:	4602      	mov	r2, r0
 800edb0:	4b28      	ldr	r3, [pc, #160]	@ (800ee54 <__lshift+0xd0>)
 800edb2:	4829      	ldr	r0, [pc, #164]	@ (800ee58 <__lshift+0xd4>)
 800edb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800edb8:	f000 fb94 	bl	800f4e4 <__assert_func>
 800edbc:	3101      	adds	r1, #1
 800edbe:	005b      	lsls	r3, r3, #1
 800edc0:	e7ee      	b.n	800eda0 <__lshift+0x1c>
 800edc2:	2300      	movs	r3, #0
 800edc4:	f100 0114 	add.w	r1, r0, #20
 800edc8:	f100 0210 	add.w	r2, r0, #16
 800edcc:	4618      	mov	r0, r3
 800edce:	4553      	cmp	r3, sl
 800edd0:	db33      	blt.n	800ee3a <__lshift+0xb6>
 800edd2:	6920      	ldr	r0, [r4, #16]
 800edd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800edd8:	f104 0314 	add.w	r3, r4, #20
 800eddc:	f019 091f 	ands.w	r9, r9, #31
 800ede0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ede4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ede8:	d02b      	beq.n	800ee42 <__lshift+0xbe>
 800edea:	f1c9 0e20 	rsb	lr, r9, #32
 800edee:	468a      	mov	sl, r1
 800edf0:	2200      	movs	r2, #0
 800edf2:	6818      	ldr	r0, [r3, #0]
 800edf4:	fa00 f009 	lsl.w	r0, r0, r9
 800edf8:	4310      	orrs	r0, r2
 800edfa:	f84a 0b04 	str.w	r0, [sl], #4
 800edfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee02:	459c      	cmp	ip, r3
 800ee04:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee08:	d8f3      	bhi.n	800edf2 <__lshift+0x6e>
 800ee0a:	ebac 0304 	sub.w	r3, ip, r4
 800ee0e:	3b15      	subs	r3, #21
 800ee10:	f023 0303 	bic.w	r3, r3, #3
 800ee14:	3304      	adds	r3, #4
 800ee16:	f104 0015 	add.w	r0, r4, #21
 800ee1a:	4584      	cmp	ip, r0
 800ee1c:	bf38      	it	cc
 800ee1e:	2304      	movcc	r3, #4
 800ee20:	50ca      	str	r2, [r1, r3]
 800ee22:	b10a      	cbz	r2, 800ee28 <__lshift+0xa4>
 800ee24:	f108 0602 	add.w	r6, r8, #2
 800ee28:	3e01      	subs	r6, #1
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	612e      	str	r6, [r5, #16]
 800ee2e:	4621      	mov	r1, r4
 800ee30:	f7ff fdda 	bl	800e9e8 <_Bfree>
 800ee34:	4628      	mov	r0, r5
 800ee36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee3e:	3301      	adds	r3, #1
 800ee40:	e7c5      	b.n	800edce <__lshift+0x4a>
 800ee42:	3904      	subs	r1, #4
 800ee44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee48:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee4c:	459c      	cmp	ip, r3
 800ee4e:	d8f9      	bhi.n	800ee44 <__lshift+0xc0>
 800ee50:	e7ea      	b.n	800ee28 <__lshift+0xa4>
 800ee52:	bf00      	nop
 800ee54:	0800fd88 	.word	0x0800fd88
 800ee58:	0800fd99 	.word	0x0800fd99

0800ee5c <__mcmp>:
 800ee5c:	690a      	ldr	r2, [r1, #16]
 800ee5e:	4603      	mov	r3, r0
 800ee60:	6900      	ldr	r0, [r0, #16]
 800ee62:	1a80      	subs	r0, r0, r2
 800ee64:	b530      	push	{r4, r5, lr}
 800ee66:	d10e      	bne.n	800ee86 <__mcmp+0x2a>
 800ee68:	3314      	adds	r3, #20
 800ee6a:	3114      	adds	r1, #20
 800ee6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee7c:	4295      	cmp	r5, r2
 800ee7e:	d003      	beq.n	800ee88 <__mcmp+0x2c>
 800ee80:	d205      	bcs.n	800ee8e <__mcmp+0x32>
 800ee82:	f04f 30ff 	mov.w	r0, #4294967295
 800ee86:	bd30      	pop	{r4, r5, pc}
 800ee88:	42a3      	cmp	r3, r4
 800ee8a:	d3f3      	bcc.n	800ee74 <__mcmp+0x18>
 800ee8c:	e7fb      	b.n	800ee86 <__mcmp+0x2a>
 800ee8e:	2001      	movs	r0, #1
 800ee90:	e7f9      	b.n	800ee86 <__mcmp+0x2a>
	...

0800ee94 <__mdiff>:
 800ee94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	4689      	mov	r9, r1
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	4611      	mov	r1, r2
 800ee9e:	4648      	mov	r0, r9
 800eea0:	4614      	mov	r4, r2
 800eea2:	f7ff ffdb 	bl	800ee5c <__mcmp>
 800eea6:	1e05      	subs	r5, r0, #0
 800eea8:	d112      	bne.n	800eed0 <__mdiff+0x3c>
 800eeaa:	4629      	mov	r1, r5
 800eeac:	4630      	mov	r0, r6
 800eeae:	f7ff fd5b 	bl	800e968 <_Balloc>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	b928      	cbnz	r0, 800eec2 <__mdiff+0x2e>
 800eeb6:	4b3f      	ldr	r3, [pc, #252]	@ (800efb4 <__mdiff+0x120>)
 800eeb8:	f240 2137 	movw	r1, #567	@ 0x237
 800eebc:	483e      	ldr	r0, [pc, #248]	@ (800efb8 <__mdiff+0x124>)
 800eebe:	f000 fb11 	bl	800f4e4 <__assert_func>
 800eec2:	2301      	movs	r3, #1
 800eec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eec8:	4610      	mov	r0, r2
 800eeca:	b003      	add	sp, #12
 800eecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed0:	bfbc      	itt	lt
 800eed2:	464b      	movlt	r3, r9
 800eed4:	46a1      	movlt	r9, r4
 800eed6:	4630      	mov	r0, r6
 800eed8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eedc:	bfba      	itte	lt
 800eede:	461c      	movlt	r4, r3
 800eee0:	2501      	movlt	r5, #1
 800eee2:	2500      	movge	r5, #0
 800eee4:	f7ff fd40 	bl	800e968 <_Balloc>
 800eee8:	4602      	mov	r2, r0
 800eeea:	b918      	cbnz	r0, 800eef4 <__mdiff+0x60>
 800eeec:	4b31      	ldr	r3, [pc, #196]	@ (800efb4 <__mdiff+0x120>)
 800eeee:	f240 2145 	movw	r1, #581	@ 0x245
 800eef2:	e7e3      	b.n	800eebc <__mdiff+0x28>
 800eef4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eef8:	6926      	ldr	r6, [r4, #16]
 800eefa:	60c5      	str	r5, [r0, #12]
 800eefc:	f109 0310 	add.w	r3, r9, #16
 800ef00:	f109 0514 	add.w	r5, r9, #20
 800ef04:	f104 0e14 	add.w	lr, r4, #20
 800ef08:	f100 0b14 	add.w	fp, r0, #20
 800ef0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef14:	9301      	str	r3, [sp, #4]
 800ef16:	46d9      	mov	r9, fp
 800ef18:	f04f 0c00 	mov.w	ip, #0
 800ef1c:	9b01      	ldr	r3, [sp, #4]
 800ef1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	fa1f f38a 	uxth.w	r3, sl
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	b283      	uxth	r3, r0
 800ef30:	1acb      	subs	r3, r1, r3
 800ef32:	0c00      	lsrs	r0, r0, #16
 800ef34:	4463      	add	r3, ip
 800ef36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef44:	4576      	cmp	r6, lr
 800ef46:	f849 3b04 	str.w	r3, [r9], #4
 800ef4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef4e:	d8e5      	bhi.n	800ef1c <__mdiff+0x88>
 800ef50:	1b33      	subs	r3, r6, r4
 800ef52:	3b15      	subs	r3, #21
 800ef54:	f023 0303 	bic.w	r3, r3, #3
 800ef58:	3415      	adds	r4, #21
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	42a6      	cmp	r6, r4
 800ef5e:	bf38      	it	cc
 800ef60:	2304      	movcc	r3, #4
 800ef62:	441d      	add	r5, r3
 800ef64:	445b      	add	r3, fp
 800ef66:	461e      	mov	r6, r3
 800ef68:	462c      	mov	r4, r5
 800ef6a:	4544      	cmp	r4, r8
 800ef6c:	d30e      	bcc.n	800ef8c <__mdiff+0xf8>
 800ef6e:	f108 0103 	add.w	r1, r8, #3
 800ef72:	1b49      	subs	r1, r1, r5
 800ef74:	f021 0103 	bic.w	r1, r1, #3
 800ef78:	3d03      	subs	r5, #3
 800ef7a:	45a8      	cmp	r8, r5
 800ef7c:	bf38      	it	cc
 800ef7e:	2100      	movcc	r1, #0
 800ef80:	440b      	add	r3, r1
 800ef82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef86:	b191      	cbz	r1, 800efae <__mdiff+0x11a>
 800ef88:	6117      	str	r7, [r2, #16]
 800ef8a:	e79d      	b.n	800eec8 <__mdiff+0x34>
 800ef8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef90:	46e6      	mov	lr, ip
 800ef92:	0c08      	lsrs	r0, r1, #16
 800ef94:	fa1c fc81 	uxtah	ip, ip, r1
 800ef98:	4471      	add	r1, lr
 800ef9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ef9e:	b289      	uxth	r1, r1
 800efa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efa4:	f846 1b04 	str.w	r1, [r6], #4
 800efa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efac:	e7dd      	b.n	800ef6a <__mdiff+0xd6>
 800efae:	3f01      	subs	r7, #1
 800efb0:	e7e7      	b.n	800ef82 <__mdiff+0xee>
 800efb2:	bf00      	nop
 800efb4:	0800fd88 	.word	0x0800fd88
 800efb8:	0800fd99 	.word	0x0800fd99

0800efbc <__d2b>:
 800efbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efc0:	460f      	mov	r7, r1
 800efc2:	2101      	movs	r1, #1
 800efc4:	ec59 8b10 	vmov	r8, r9, d0
 800efc8:	4616      	mov	r6, r2
 800efca:	f7ff fccd 	bl	800e968 <_Balloc>
 800efce:	4604      	mov	r4, r0
 800efd0:	b930      	cbnz	r0, 800efe0 <__d2b+0x24>
 800efd2:	4602      	mov	r2, r0
 800efd4:	4b23      	ldr	r3, [pc, #140]	@ (800f064 <__d2b+0xa8>)
 800efd6:	4824      	ldr	r0, [pc, #144]	@ (800f068 <__d2b+0xac>)
 800efd8:	f240 310f 	movw	r1, #783	@ 0x30f
 800efdc:	f000 fa82 	bl	800f4e4 <__assert_func>
 800efe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800efe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800efe8:	b10d      	cbz	r5, 800efee <__d2b+0x32>
 800efea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800efee:	9301      	str	r3, [sp, #4]
 800eff0:	f1b8 0300 	subs.w	r3, r8, #0
 800eff4:	d023      	beq.n	800f03e <__d2b+0x82>
 800eff6:	4668      	mov	r0, sp
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	f7ff fd7c 	bl	800eaf6 <__lo0bits>
 800effe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f002:	b1d0      	cbz	r0, 800f03a <__d2b+0x7e>
 800f004:	f1c0 0320 	rsb	r3, r0, #32
 800f008:	fa02 f303 	lsl.w	r3, r2, r3
 800f00c:	430b      	orrs	r3, r1
 800f00e:	40c2      	lsrs	r2, r0
 800f010:	6163      	str	r3, [r4, #20]
 800f012:	9201      	str	r2, [sp, #4]
 800f014:	9b01      	ldr	r3, [sp, #4]
 800f016:	61a3      	str	r3, [r4, #24]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	bf0c      	ite	eq
 800f01c:	2201      	moveq	r2, #1
 800f01e:	2202      	movne	r2, #2
 800f020:	6122      	str	r2, [r4, #16]
 800f022:	b1a5      	cbz	r5, 800f04e <__d2b+0x92>
 800f024:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f028:	4405      	add	r5, r0
 800f02a:	603d      	str	r5, [r7, #0]
 800f02c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f030:	6030      	str	r0, [r6, #0]
 800f032:	4620      	mov	r0, r4
 800f034:	b003      	add	sp, #12
 800f036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f03a:	6161      	str	r1, [r4, #20]
 800f03c:	e7ea      	b.n	800f014 <__d2b+0x58>
 800f03e:	a801      	add	r0, sp, #4
 800f040:	f7ff fd59 	bl	800eaf6 <__lo0bits>
 800f044:	9b01      	ldr	r3, [sp, #4]
 800f046:	6163      	str	r3, [r4, #20]
 800f048:	3020      	adds	r0, #32
 800f04a:	2201      	movs	r2, #1
 800f04c:	e7e8      	b.n	800f020 <__d2b+0x64>
 800f04e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f052:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f056:	6038      	str	r0, [r7, #0]
 800f058:	6918      	ldr	r0, [r3, #16]
 800f05a:	f7ff fd2d 	bl	800eab8 <__hi0bits>
 800f05e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f062:	e7e5      	b.n	800f030 <__d2b+0x74>
 800f064:	0800fd88 	.word	0x0800fd88
 800f068:	0800fd99 	.word	0x0800fd99

0800f06c <__ssputs_r>:
 800f06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f070:	688e      	ldr	r6, [r1, #8]
 800f072:	461f      	mov	r7, r3
 800f074:	42be      	cmp	r6, r7
 800f076:	680b      	ldr	r3, [r1, #0]
 800f078:	4682      	mov	sl, r0
 800f07a:	460c      	mov	r4, r1
 800f07c:	4690      	mov	r8, r2
 800f07e:	d82d      	bhi.n	800f0dc <__ssputs_r+0x70>
 800f080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f088:	d026      	beq.n	800f0d8 <__ssputs_r+0x6c>
 800f08a:	6965      	ldr	r5, [r4, #20]
 800f08c:	6909      	ldr	r1, [r1, #16]
 800f08e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f092:	eba3 0901 	sub.w	r9, r3, r1
 800f096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f09a:	1c7b      	adds	r3, r7, #1
 800f09c:	444b      	add	r3, r9
 800f09e:	106d      	asrs	r5, r5, #1
 800f0a0:	429d      	cmp	r5, r3
 800f0a2:	bf38      	it	cc
 800f0a4:	461d      	movcc	r5, r3
 800f0a6:	0553      	lsls	r3, r2, #21
 800f0a8:	d527      	bpl.n	800f0fa <__ssputs_r+0x8e>
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	f7ff fbd0 	bl	800e850 <_malloc_r>
 800f0b0:	4606      	mov	r6, r0
 800f0b2:	b360      	cbz	r0, 800f10e <__ssputs_r+0xa2>
 800f0b4:	6921      	ldr	r1, [r4, #16]
 800f0b6:	464a      	mov	r2, r9
 800f0b8:	f000 fa06 	bl	800f4c8 <memcpy>
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0c6:	81a3      	strh	r3, [r4, #12]
 800f0c8:	6126      	str	r6, [r4, #16]
 800f0ca:	6165      	str	r5, [r4, #20]
 800f0cc:	444e      	add	r6, r9
 800f0ce:	eba5 0509 	sub.w	r5, r5, r9
 800f0d2:	6026      	str	r6, [r4, #0]
 800f0d4:	60a5      	str	r5, [r4, #8]
 800f0d6:	463e      	mov	r6, r7
 800f0d8:	42be      	cmp	r6, r7
 800f0da:	d900      	bls.n	800f0de <__ssputs_r+0x72>
 800f0dc:	463e      	mov	r6, r7
 800f0de:	6820      	ldr	r0, [r4, #0]
 800f0e0:	4632      	mov	r2, r6
 800f0e2:	4641      	mov	r1, r8
 800f0e4:	f000 f9c6 	bl	800f474 <memmove>
 800f0e8:	68a3      	ldr	r3, [r4, #8]
 800f0ea:	1b9b      	subs	r3, r3, r6
 800f0ec:	60a3      	str	r3, [r4, #8]
 800f0ee:	6823      	ldr	r3, [r4, #0]
 800f0f0:	4433      	add	r3, r6
 800f0f2:	6023      	str	r3, [r4, #0]
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0fa:	462a      	mov	r2, r5
 800f0fc:	f000 fa36 	bl	800f56c <_realloc_r>
 800f100:	4606      	mov	r6, r0
 800f102:	2800      	cmp	r0, #0
 800f104:	d1e0      	bne.n	800f0c8 <__ssputs_r+0x5c>
 800f106:	6921      	ldr	r1, [r4, #16]
 800f108:	4650      	mov	r0, sl
 800f10a:	f7ff fb2d 	bl	800e768 <_free_r>
 800f10e:	230c      	movs	r3, #12
 800f110:	f8ca 3000 	str.w	r3, [sl]
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f11a:	81a3      	strh	r3, [r4, #12]
 800f11c:	f04f 30ff 	mov.w	r0, #4294967295
 800f120:	e7e9      	b.n	800f0f6 <__ssputs_r+0x8a>
	...

0800f124 <_svfiprintf_r>:
 800f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f128:	4698      	mov	r8, r3
 800f12a:	898b      	ldrh	r3, [r1, #12]
 800f12c:	061b      	lsls	r3, r3, #24
 800f12e:	b09d      	sub	sp, #116	@ 0x74
 800f130:	4607      	mov	r7, r0
 800f132:	460d      	mov	r5, r1
 800f134:	4614      	mov	r4, r2
 800f136:	d510      	bpl.n	800f15a <_svfiprintf_r+0x36>
 800f138:	690b      	ldr	r3, [r1, #16]
 800f13a:	b973      	cbnz	r3, 800f15a <_svfiprintf_r+0x36>
 800f13c:	2140      	movs	r1, #64	@ 0x40
 800f13e:	f7ff fb87 	bl	800e850 <_malloc_r>
 800f142:	6028      	str	r0, [r5, #0]
 800f144:	6128      	str	r0, [r5, #16]
 800f146:	b930      	cbnz	r0, 800f156 <_svfiprintf_r+0x32>
 800f148:	230c      	movs	r3, #12
 800f14a:	603b      	str	r3, [r7, #0]
 800f14c:	f04f 30ff 	mov.w	r0, #4294967295
 800f150:	b01d      	add	sp, #116	@ 0x74
 800f152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f156:	2340      	movs	r3, #64	@ 0x40
 800f158:	616b      	str	r3, [r5, #20]
 800f15a:	2300      	movs	r3, #0
 800f15c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f15e:	2320      	movs	r3, #32
 800f160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f164:	f8cd 800c 	str.w	r8, [sp, #12]
 800f168:	2330      	movs	r3, #48	@ 0x30
 800f16a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f308 <_svfiprintf_r+0x1e4>
 800f16e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f172:	f04f 0901 	mov.w	r9, #1
 800f176:	4623      	mov	r3, r4
 800f178:	469a      	mov	sl, r3
 800f17a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f17e:	b10a      	cbz	r2, 800f184 <_svfiprintf_r+0x60>
 800f180:	2a25      	cmp	r2, #37	@ 0x25
 800f182:	d1f9      	bne.n	800f178 <_svfiprintf_r+0x54>
 800f184:	ebba 0b04 	subs.w	fp, sl, r4
 800f188:	d00b      	beq.n	800f1a2 <_svfiprintf_r+0x7e>
 800f18a:	465b      	mov	r3, fp
 800f18c:	4622      	mov	r2, r4
 800f18e:	4629      	mov	r1, r5
 800f190:	4638      	mov	r0, r7
 800f192:	f7ff ff6b 	bl	800f06c <__ssputs_r>
 800f196:	3001      	adds	r0, #1
 800f198:	f000 80a7 	beq.w	800f2ea <_svfiprintf_r+0x1c6>
 800f19c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f19e:	445a      	add	r2, fp
 800f1a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f000 809f 	beq.w	800f2ea <_svfiprintf_r+0x1c6>
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1b6:	f10a 0a01 	add.w	sl, sl, #1
 800f1ba:	9304      	str	r3, [sp, #16]
 800f1bc:	9307      	str	r3, [sp, #28]
 800f1be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f1c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f1c4:	4654      	mov	r4, sl
 800f1c6:	2205      	movs	r2, #5
 800f1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1cc:	484e      	ldr	r0, [pc, #312]	@ (800f308 <_svfiprintf_r+0x1e4>)
 800f1ce:	f7f0 ffff 	bl	80001d0 <memchr>
 800f1d2:	9a04      	ldr	r2, [sp, #16]
 800f1d4:	b9d8      	cbnz	r0, 800f20e <_svfiprintf_r+0xea>
 800f1d6:	06d0      	lsls	r0, r2, #27
 800f1d8:	bf44      	itt	mi
 800f1da:	2320      	movmi	r3, #32
 800f1dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1e0:	0711      	lsls	r1, r2, #28
 800f1e2:	bf44      	itt	mi
 800f1e4:	232b      	movmi	r3, #43	@ 0x2b
 800f1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1f0:	d015      	beq.n	800f21e <_svfiprintf_r+0xfa>
 800f1f2:	9a07      	ldr	r2, [sp, #28]
 800f1f4:	4654      	mov	r4, sl
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	f04f 0c0a 	mov.w	ip, #10
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f202:	3b30      	subs	r3, #48	@ 0x30
 800f204:	2b09      	cmp	r3, #9
 800f206:	d94b      	bls.n	800f2a0 <_svfiprintf_r+0x17c>
 800f208:	b1b0      	cbz	r0, 800f238 <_svfiprintf_r+0x114>
 800f20a:	9207      	str	r2, [sp, #28]
 800f20c:	e014      	b.n	800f238 <_svfiprintf_r+0x114>
 800f20e:	eba0 0308 	sub.w	r3, r0, r8
 800f212:	fa09 f303 	lsl.w	r3, r9, r3
 800f216:	4313      	orrs	r3, r2
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	46a2      	mov	sl, r4
 800f21c:	e7d2      	b.n	800f1c4 <_svfiprintf_r+0xa0>
 800f21e:	9b03      	ldr	r3, [sp, #12]
 800f220:	1d19      	adds	r1, r3, #4
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	9103      	str	r1, [sp, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	bfbb      	ittet	lt
 800f22a:	425b      	neglt	r3, r3
 800f22c:	f042 0202 	orrlt.w	r2, r2, #2
 800f230:	9307      	strge	r3, [sp, #28]
 800f232:	9307      	strlt	r3, [sp, #28]
 800f234:	bfb8      	it	lt
 800f236:	9204      	strlt	r2, [sp, #16]
 800f238:	7823      	ldrb	r3, [r4, #0]
 800f23a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f23c:	d10a      	bne.n	800f254 <_svfiprintf_r+0x130>
 800f23e:	7863      	ldrb	r3, [r4, #1]
 800f240:	2b2a      	cmp	r3, #42	@ 0x2a
 800f242:	d132      	bne.n	800f2aa <_svfiprintf_r+0x186>
 800f244:	9b03      	ldr	r3, [sp, #12]
 800f246:	1d1a      	adds	r2, r3, #4
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	9203      	str	r2, [sp, #12]
 800f24c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f250:	3402      	adds	r4, #2
 800f252:	9305      	str	r3, [sp, #20]
 800f254:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f318 <_svfiprintf_r+0x1f4>
 800f258:	7821      	ldrb	r1, [r4, #0]
 800f25a:	2203      	movs	r2, #3
 800f25c:	4650      	mov	r0, sl
 800f25e:	f7f0 ffb7 	bl	80001d0 <memchr>
 800f262:	b138      	cbz	r0, 800f274 <_svfiprintf_r+0x150>
 800f264:	9b04      	ldr	r3, [sp, #16]
 800f266:	eba0 000a 	sub.w	r0, r0, sl
 800f26a:	2240      	movs	r2, #64	@ 0x40
 800f26c:	4082      	lsls	r2, r0
 800f26e:	4313      	orrs	r3, r2
 800f270:	3401      	adds	r4, #1
 800f272:	9304      	str	r3, [sp, #16]
 800f274:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f278:	4824      	ldr	r0, [pc, #144]	@ (800f30c <_svfiprintf_r+0x1e8>)
 800f27a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f27e:	2206      	movs	r2, #6
 800f280:	f7f0 ffa6 	bl	80001d0 <memchr>
 800f284:	2800      	cmp	r0, #0
 800f286:	d036      	beq.n	800f2f6 <_svfiprintf_r+0x1d2>
 800f288:	4b21      	ldr	r3, [pc, #132]	@ (800f310 <_svfiprintf_r+0x1ec>)
 800f28a:	bb1b      	cbnz	r3, 800f2d4 <_svfiprintf_r+0x1b0>
 800f28c:	9b03      	ldr	r3, [sp, #12]
 800f28e:	3307      	adds	r3, #7
 800f290:	f023 0307 	bic.w	r3, r3, #7
 800f294:	3308      	adds	r3, #8
 800f296:	9303      	str	r3, [sp, #12]
 800f298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f29a:	4433      	add	r3, r6
 800f29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f29e:	e76a      	b.n	800f176 <_svfiprintf_r+0x52>
 800f2a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2a4:	460c      	mov	r4, r1
 800f2a6:	2001      	movs	r0, #1
 800f2a8:	e7a8      	b.n	800f1fc <_svfiprintf_r+0xd8>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	3401      	adds	r4, #1
 800f2ae:	9305      	str	r3, [sp, #20]
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	f04f 0c0a 	mov.w	ip, #10
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2bc:	3a30      	subs	r2, #48	@ 0x30
 800f2be:	2a09      	cmp	r2, #9
 800f2c0:	d903      	bls.n	800f2ca <_svfiprintf_r+0x1a6>
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d0c6      	beq.n	800f254 <_svfiprintf_r+0x130>
 800f2c6:	9105      	str	r1, [sp, #20]
 800f2c8:	e7c4      	b.n	800f254 <_svfiprintf_r+0x130>
 800f2ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e7f0      	b.n	800f2b6 <_svfiprintf_r+0x192>
 800f2d4:	ab03      	add	r3, sp, #12
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	462a      	mov	r2, r5
 800f2da:	4b0e      	ldr	r3, [pc, #56]	@ (800f314 <_svfiprintf_r+0x1f0>)
 800f2dc:	a904      	add	r1, sp, #16
 800f2de:	4638      	mov	r0, r7
 800f2e0:	f7fd fe84 	bl	800cfec <_printf_float>
 800f2e4:	1c42      	adds	r2, r0, #1
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	d1d6      	bne.n	800f298 <_svfiprintf_r+0x174>
 800f2ea:	89ab      	ldrh	r3, [r5, #12]
 800f2ec:	065b      	lsls	r3, r3, #25
 800f2ee:	f53f af2d 	bmi.w	800f14c <_svfiprintf_r+0x28>
 800f2f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2f4:	e72c      	b.n	800f150 <_svfiprintf_r+0x2c>
 800f2f6:	ab03      	add	r3, sp, #12
 800f2f8:	9300      	str	r3, [sp, #0]
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	4b05      	ldr	r3, [pc, #20]	@ (800f314 <_svfiprintf_r+0x1f0>)
 800f2fe:	a904      	add	r1, sp, #16
 800f300:	4638      	mov	r0, r7
 800f302:	f7fe f90b 	bl	800d51c <_printf_i>
 800f306:	e7ed      	b.n	800f2e4 <_svfiprintf_r+0x1c0>
 800f308:	0800fef0 	.word	0x0800fef0
 800f30c:	0800fefa 	.word	0x0800fefa
 800f310:	0800cfed 	.word	0x0800cfed
 800f314:	0800f06d 	.word	0x0800f06d
 800f318:	0800fef6 	.word	0x0800fef6

0800f31c <__sflush_r>:
 800f31c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f324:	0716      	lsls	r6, r2, #28
 800f326:	4605      	mov	r5, r0
 800f328:	460c      	mov	r4, r1
 800f32a:	d454      	bmi.n	800f3d6 <__sflush_r+0xba>
 800f32c:	684b      	ldr	r3, [r1, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dc02      	bgt.n	800f338 <__sflush_r+0x1c>
 800f332:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f334:	2b00      	cmp	r3, #0
 800f336:	dd48      	ble.n	800f3ca <__sflush_r+0xae>
 800f338:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f33a:	2e00      	cmp	r6, #0
 800f33c:	d045      	beq.n	800f3ca <__sflush_r+0xae>
 800f33e:	2300      	movs	r3, #0
 800f340:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f344:	682f      	ldr	r7, [r5, #0]
 800f346:	6a21      	ldr	r1, [r4, #32]
 800f348:	602b      	str	r3, [r5, #0]
 800f34a:	d030      	beq.n	800f3ae <__sflush_r+0x92>
 800f34c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f34e:	89a3      	ldrh	r3, [r4, #12]
 800f350:	0759      	lsls	r1, r3, #29
 800f352:	d505      	bpl.n	800f360 <__sflush_r+0x44>
 800f354:	6863      	ldr	r3, [r4, #4]
 800f356:	1ad2      	subs	r2, r2, r3
 800f358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f35a:	b10b      	cbz	r3, 800f360 <__sflush_r+0x44>
 800f35c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f35e:	1ad2      	subs	r2, r2, r3
 800f360:	2300      	movs	r3, #0
 800f362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f364:	6a21      	ldr	r1, [r4, #32]
 800f366:	4628      	mov	r0, r5
 800f368:	47b0      	blx	r6
 800f36a:	1c43      	adds	r3, r0, #1
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	d106      	bne.n	800f37e <__sflush_r+0x62>
 800f370:	6829      	ldr	r1, [r5, #0]
 800f372:	291d      	cmp	r1, #29
 800f374:	d82b      	bhi.n	800f3ce <__sflush_r+0xb2>
 800f376:	4a2a      	ldr	r2, [pc, #168]	@ (800f420 <__sflush_r+0x104>)
 800f378:	410a      	asrs	r2, r1
 800f37a:	07d6      	lsls	r6, r2, #31
 800f37c:	d427      	bmi.n	800f3ce <__sflush_r+0xb2>
 800f37e:	2200      	movs	r2, #0
 800f380:	6062      	str	r2, [r4, #4]
 800f382:	04d9      	lsls	r1, r3, #19
 800f384:	6922      	ldr	r2, [r4, #16]
 800f386:	6022      	str	r2, [r4, #0]
 800f388:	d504      	bpl.n	800f394 <__sflush_r+0x78>
 800f38a:	1c42      	adds	r2, r0, #1
 800f38c:	d101      	bne.n	800f392 <__sflush_r+0x76>
 800f38e:	682b      	ldr	r3, [r5, #0]
 800f390:	b903      	cbnz	r3, 800f394 <__sflush_r+0x78>
 800f392:	6560      	str	r0, [r4, #84]	@ 0x54
 800f394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f396:	602f      	str	r7, [r5, #0]
 800f398:	b1b9      	cbz	r1, 800f3ca <__sflush_r+0xae>
 800f39a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f39e:	4299      	cmp	r1, r3
 800f3a0:	d002      	beq.n	800f3a8 <__sflush_r+0x8c>
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f7ff f9e0 	bl	800e768 <_free_r>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3ac:	e00d      	b.n	800f3ca <__sflush_r+0xae>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	47b0      	blx	r6
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	1c50      	adds	r0, r2, #1
 800f3b8:	d1c9      	bne.n	800f34e <__sflush_r+0x32>
 800f3ba:	682b      	ldr	r3, [r5, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d0c6      	beq.n	800f34e <__sflush_r+0x32>
 800f3c0:	2b1d      	cmp	r3, #29
 800f3c2:	d001      	beq.n	800f3c8 <__sflush_r+0xac>
 800f3c4:	2b16      	cmp	r3, #22
 800f3c6:	d11e      	bne.n	800f406 <__sflush_r+0xea>
 800f3c8:	602f      	str	r7, [r5, #0]
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	e022      	b.n	800f414 <__sflush_r+0xf8>
 800f3ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3d2:	b21b      	sxth	r3, r3
 800f3d4:	e01b      	b.n	800f40e <__sflush_r+0xf2>
 800f3d6:	690f      	ldr	r7, [r1, #16]
 800f3d8:	2f00      	cmp	r7, #0
 800f3da:	d0f6      	beq.n	800f3ca <__sflush_r+0xae>
 800f3dc:	0793      	lsls	r3, r2, #30
 800f3de:	680e      	ldr	r6, [r1, #0]
 800f3e0:	bf08      	it	eq
 800f3e2:	694b      	ldreq	r3, [r1, #20]
 800f3e4:	600f      	str	r7, [r1, #0]
 800f3e6:	bf18      	it	ne
 800f3e8:	2300      	movne	r3, #0
 800f3ea:	eba6 0807 	sub.w	r8, r6, r7
 800f3ee:	608b      	str	r3, [r1, #8]
 800f3f0:	f1b8 0f00 	cmp.w	r8, #0
 800f3f4:	dde9      	ble.n	800f3ca <__sflush_r+0xae>
 800f3f6:	6a21      	ldr	r1, [r4, #32]
 800f3f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f3fa:	4643      	mov	r3, r8
 800f3fc:	463a      	mov	r2, r7
 800f3fe:	4628      	mov	r0, r5
 800f400:	47b0      	blx	r6
 800f402:	2800      	cmp	r0, #0
 800f404:	dc08      	bgt.n	800f418 <__sflush_r+0xfc>
 800f406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	f04f 30ff 	mov.w	r0, #4294967295
 800f414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f418:	4407      	add	r7, r0
 800f41a:	eba8 0800 	sub.w	r8, r8, r0
 800f41e:	e7e7      	b.n	800f3f0 <__sflush_r+0xd4>
 800f420:	dfbffffe 	.word	0xdfbffffe

0800f424 <_fflush_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	690b      	ldr	r3, [r1, #16]
 800f428:	4605      	mov	r5, r0
 800f42a:	460c      	mov	r4, r1
 800f42c:	b913      	cbnz	r3, 800f434 <_fflush_r+0x10>
 800f42e:	2500      	movs	r5, #0
 800f430:	4628      	mov	r0, r5
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	b118      	cbz	r0, 800f43e <_fflush_r+0x1a>
 800f436:	6a03      	ldr	r3, [r0, #32]
 800f438:	b90b      	cbnz	r3, 800f43e <_fflush_r+0x1a>
 800f43a:	f7fe fa1b 	bl	800d874 <__sinit>
 800f43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d0f3      	beq.n	800f42e <_fflush_r+0xa>
 800f446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f448:	07d0      	lsls	r0, r2, #31
 800f44a:	d404      	bmi.n	800f456 <_fflush_r+0x32>
 800f44c:	0599      	lsls	r1, r3, #22
 800f44e:	d402      	bmi.n	800f456 <_fflush_r+0x32>
 800f450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f452:	f7fe fb3a 	bl	800daca <__retarget_lock_acquire_recursive>
 800f456:	4628      	mov	r0, r5
 800f458:	4621      	mov	r1, r4
 800f45a:	f7ff ff5f 	bl	800f31c <__sflush_r>
 800f45e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f460:	07da      	lsls	r2, r3, #31
 800f462:	4605      	mov	r5, r0
 800f464:	d4e4      	bmi.n	800f430 <_fflush_r+0xc>
 800f466:	89a3      	ldrh	r3, [r4, #12]
 800f468:	059b      	lsls	r3, r3, #22
 800f46a:	d4e1      	bmi.n	800f430 <_fflush_r+0xc>
 800f46c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f46e:	f7fe fb2d 	bl	800dacc <__retarget_lock_release_recursive>
 800f472:	e7dd      	b.n	800f430 <_fflush_r+0xc>

0800f474 <memmove>:
 800f474:	4288      	cmp	r0, r1
 800f476:	b510      	push	{r4, lr}
 800f478:	eb01 0402 	add.w	r4, r1, r2
 800f47c:	d902      	bls.n	800f484 <memmove+0x10>
 800f47e:	4284      	cmp	r4, r0
 800f480:	4623      	mov	r3, r4
 800f482:	d807      	bhi.n	800f494 <memmove+0x20>
 800f484:	1e43      	subs	r3, r0, #1
 800f486:	42a1      	cmp	r1, r4
 800f488:	d008      	beq.n	800f49c <memmove+0x28>
 800f48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f492:	e7f8      	b.n	800f486 <memmove+0x12>
 800f494:	4402      	add	r2, r0
 800f496:	4601      	mov	r1, r0
 800f498:	428a      	cmp	r2, r1
 800f49a:	d100      	bne.n	800f49e <memmove+0x2a>
 800f49c:	bd10      	pop	{r4, pc}
 800f49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4a6:	e7f7      	b.n	800f498 <memmove+0x24>

0800f4a8 <_sbrk_r>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	4d06      	ldr	r5, [pc, #24]	@ (800f4c4 <_sbrk_r+0x1c>)
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	4608      	mov	r0, r1
 800f4b2:	602b      	str	r3, [r5, #0]
 800f4b4:	f7f3 ffbe 	bl	8003434 <_sbrk>
 800f4b8:	1c43      	adds	r3, r0, #1
 800f4ba:	d102      	bne.n	800f4c2 <_sbrk_r+0x1a>
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	b103      	cbz	r3, 800f4c2 <_sbrk_r+0x1a>
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	bd38      	pop	{r3, r4, r5, pc}
 800f4c4:	200022c4 	.word	0x200022c4

0800f4c8 <memcpy>:
 800f4c8:	440a      	add	r2, r1
 800f4ca:	4291      	cmp	r1, r2
 800f4cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4d0:	d100      	bne.n	800f4d4 <memcpy+0xc>
 800f4d2:	4770      	bx	lr
 800f4d4:	b510      	push	{r4, lr}
 800f4d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4de:	4291      	cmp	r1, r2
 800f4e0:	d1f9      	bne.n	800f4d6 <memcpy+0xe>
 800f4e2:	bd10      	pop	{r4, pc}

0800f4e4 <__assert_func>:
 800f4e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4e6:	4614      	mov	r4, r2
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	4b09      	ldr	r3, [pc, #36]	@ (800f510 <__assert_func+0x2c>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4605      	mov	r5, r0
 800f4f0:	68d8      	ldr	r0, [r3, #12]
 800f4f2:	b954      	cbnz	r4, 800f50a <__assert_func+0x26>
 800f4f4:	4b07      	ldr	r3, [pc, #28]	@ (800f514 <__assert_func+0x30>)
 800f4f6:	461c      	mov	r4, r3
 800f4f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4fc:	9100      	str	r1, [sp, #0]
 800f4fe:	462b      	mov	r3, r5
 800f500:	4905      	ldr	r1, [pc, #20]	@ (800f518 <__assert_func+0x34>)
 800f502:	f000 f86f 	bl	800f5e4 <fiprintf>
 800f506:	f000 f87f 	bl	800f608 <abort>
 800f50a:	4b04      	ldr	r3, [pc, #16]	@ (800f51c <__assert_func+0x38>)
 800f50c:	e7f4      	b.n	800f4f8 <__assert_func+0x14>
 800f50e:	bf00      	nop
 800f510:	20000120 	.word	0x20000120
 800f514:	0800ff46 	.word	0x0800ff46
 800f518:	0800ff18 	.word	0x0800ff18
 800f51c:	0800ff0b 	.word	0x0800ff0b

0800f520 <_calloc_r>:
 800f520:	b570      	push	{r4, r5, r6, lr}
 800f522:	fba1 5402 	umull	r5, r4, r1, r2
 800f526:	b93c      	cbnz	r4, 800f538 <_calloc_r+0x18>
 800f528:	4629      	mov	r1, r5
 800f52a:	f7ff f991 	bl	800e850 <_malloc_r>
 800f52e:	4606      	mov	r6, r0
 800f530:	b928      	cbnz	r0, 800f53e <_calloc_r+0x1e>
 800f532:	2600      	movs	r6, #0
 800f534:	4630      	mov	r0, r6
 800f536:	bd70      	pop	{r4, r5, r6, pc}
 800f538:	220c      	movs	r2, #12
 800f53a:	6002      	str	r2, [r0, #0]
 800f53c:	e7f9      	b.n	800f532 <_calloc_r+0x12>
 800f53e:	462a      	mov	r2, r5
 800f540:	4621      	mov	r1, r4
 800f542:	f7fe fa44 	bl	800d9ce <memset>
 800f546:	e7f5      	b.n	800f534 <_calloc_r+0x14>

0800f548 <__ascii_mbtowc>:
 800f548:	b082      	sub	sp, #8
 800f54a:	b901      	cbnz	r1, 800f54e <__ascii_mbtowc+0x6>
 800f54c:	a901      	add	r1, sp, #4
 800f54e:	b142      	cbz	r2, 800f562 <__ascii_mbtowc+0x1a>
 800f550:	b14b      	cbz	r3, 800f566 <__ascii_mbtowc+0x1e>
 800f552:	7813      	ldrb	r3, [r2, #0]
 800f554:	600b      	str	r3, [r1, #0]
 800f556:	7812      	ldrb	r2, [r2, #0]
 800f558:	1e10      	subs	r0, r2, #0
 800f55a:	bf18      	it	ne
 800f55c:	2001      	movne	r0, #1
 800f55e:	b002      	add	sp, #8
 800f560:	4770      	bx	lr
 800f562:	4610      	mov	r0, r2
 800f564:	e7fb      	b.n	800f55e <__ascii_mbtowc+0x16>
 800f566:	f06f 0001 	mvn.w	r0, #1
 800f56a:	e7f8      	b.n	800f55e <__ascii_mbtowc+0x16>

0800f56c <_realloc_r>:
 800f56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f570:	4680      	mov	r8, r0
 800f572:	4615      	mov	r5, r2
 800f574:	460c      	mov	r4, r1
 800f576:	b921      	cbnz	r1, 800f582 <_realloc_r+0x16>
 800f578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f57c:	4611      	mov	r1, r2
 800f57e:	f7ff b967 	b.w	800e850 <_malloc_r>
 800f582:	b92a      	cbnz	r2, 800f590 <_realloc_r+0x24>
 800f584:	f7ff f8f0 	bl	800e768 <_free_r>
 800f588:	2400      	movs	r4, #0
 800f58a:	4620      	mov	r0, r4
 800f58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f590:	f000 f841 	bl	800f616 <_malloc_usable_size_r>
 800f594:	4285      	cmp	r5, r0
 800f596:	4606      	mov	r6, r0
 800f598:	d802      	bhi.n	800f5a0 <_realloc_r+0x34>
 800f59a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f59e:	d8f4      	bhi.n	800f58a <_realloc_r+0x1e>
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	4640      	mov	r0, r8
 800f5a4:	f7ff f954 	bl	800e850 <_malloc_r>
 800f5a8:	4607      	mov	r7, r0
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d0ec      	beq.n	800f588 <_realloc_r+0x1c>
 800f5ae:	42b5      	cmp	r5, r6
 800f5b0:	462a      	mov	r2, r5
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	bf28      	it	cs
 800f5b6:	4632      	movcs	r2, r6
 800f5b8:	f7ff ff86 	bl	800f4c8 <memcpy>
 800f5bc:	4621      	mov	r1, r4
 800f5be:	4640      	mov	r0, r8
 800f5c0:	f7ff f8d2 	bl	800e768 <_free_r>
 800f5c4:	463c      	mov	r4, r7
 800f5c6:	e7e0      	b.n	800f58a <_realloc_r+0x1e>

0800f5c8 <__ascii_wctomb>:
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	4608      	mov	r0, r1
 800f5cc:	b141      	cbz	r1, 800f5e0 <__ascii_wctomb+0x18>
 800f5ce:	2aff      	cmp	r2, #255	@ 0xff
 800f5d0:	d904      	bls.n	800f5dc <__ascii_wctomb+0x14>
 800f5d2:	228a      	movs	r2, #138	@ 0x8a
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5da:	4770      	bx	lr
 800f5dc:	700a      	strb	r2, [r1, #0]
 800f5de:	2001      	movs	r0, #1
 800f5e0:	4770      	bx	lr
	...

0800f5e4 <fiprintf>:
 800f5e4:	b40e      	push	{r1, r2, r3}
 800f5e6:	b503      	push	{r0, r1, lr}
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	ab03      	add	r3, sp, #12
 800f5ec:	4805      	ldr	r0, [pc, #20]	@ (800f604 <fiprintf+0x20>)
 800f5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5f2:	6800      	ldr	r0, [r0, #0]
 800f5f4:	9301      	str	r3, [sp, #4]
 800f5f6:	f000 f83f 	bl	800f678 <_vfiprintf_r>
 800f5fa:	b002      	add	sp, #8
 800f5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f600:	b003      	add	sp, #12
 800f602:	4770      	bx	lr
 800f604:	20000120 	.word	0x20000120

0800f608 <abort>:
 800f608:	b508      	push	{r3, lr}
 800f60a:	2006      	movs	r0, #6
 800f60c:	f000 fa08 	bl	800fa20 <raise>
 800f610:	2001      	movs	r0, #1
 800f612:	f7f3 fe97 	bl	8003344 <_exit>

0800f616 <_malloc_usable_size_r>:
 800f616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f61a:	1f18      	subs	r0, r3, #4
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bfbc      	itt	lt
 800f620:	580b      	ldrlt	r3, [r1, r0]
 800f622:	18c0      	addlt	r0, r0, r3
 800f624:	4770      	bx	lr

0800f626 <__sfputc_r>:
 800f626:	6893      	ldr	r3, [r2, #8]
 800f628:	3b01      	subs	r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	b410      	push	{r4}
 800f62e:	6093      	str	r3, [r2, #8]
 800f630:	da08      	bge.n	800f644 <__sfputc_r+0x1e>
 800f632:	6994      	ldr	r4, [r2, #24]
 800f634:	42a3      	cmp	r3, r4
 800f636:	db01      	blt.n	800f63c <__sfputc_r+0x16>
 800f638:	290a      	cmp	r1, #10
 800f63a:	d103      	bne.n	800f644 <__sfputc_r+0x1e>
 800f63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f640:	f000 b932 	b.w	800f8a8 <__swbuf_r>
 800f644:	6813      	ldr	r3, [r2, #0]
 800f646:	1c58      	adds	r0, r3, #1
 800f648:	6010      	str	r0, [r2, #0]
 800f64a:	7019      	strb	r1, [r3, #0]
 800f64c:	4608      	mov	r0, r1
 800f64e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <__sfputs_r>:
 800f654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f656:	4606      	mov	r6, r0
 800f658:	460f      	mov	r7, r1
 800f65a:	4614      	mov	r4, r2
 800f65c:	18d5      	adds	r5, r2, r3
 800f65e:	42ac      	cmp	r4, r5
 800f660:	d101      	bne.n	800f666 <__sfputs_r+0x12>
 800f662:	2000      	movs	r0, #0
 800f664:	e007      	b.n	800f676 <__sfputs_r+0x22>
 800f666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f66a:	463a      	mov	r2, r7
 800f66c:	4630      	mov	r0, r6
 800f66e:	f7ff ffda 	bl	800f626 <__sfputc_r>
 800f672:	1c43      	adds	r3, r0, #1
 800f674:	d1f3      	bne.n	800f65e <__sfputs_r+0xa>
 800f676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f678 <_vfiprintf_r>:
 800f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f67c:	460d      	mov	r5, r1
 800f67e:	b09d      	sub	sp, #116	@ 0x74
 800f680:	4614      	mov	r4, r2
 800f682:	4698      	mov	r8, r3
 800f684:	4606      	mov	r6, r0
 800f686:	b118      	cbz	r0, 800f690 <_vfiprintf_r+0x18>
 800f688:	6a03      	ldr	r3, [r0, #32]
 800f68a:	b90b      	cbnz	r3, 800f690 <_vfiprintf_r+0x18>
 800f68c:	f7fe f8f2 	bl	800d874 <__sinit>
 800f690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f692:	07d9      	lsls	r1, r3, #31
 800f694:	d405      	bmi.n	800f6a2 <_vfiprintf_r+0x2a>
 800f696:	89ab      	ldrh	r3, [r5, #12]
 800f698:	059a      	lsls	r2, r3, #22
 800f69a:	d402      	bmi.n	800f6a2 <_vfiprintf_r+0x2a>
 800f69c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f69e:	f7fe fa14 	bl	800daca <__retarget_lock_acquire_recursive>
 800f6a2:	89ab      	ldrh	r3, [r5, #12]
 800f6a4:	071b      	lsls	r3, r3, #28
 800f6a6:	d501      	bpl.n	800f6ac <_vfiprintf_r+0x34>
 800f6a8:	692b      	ldr	r3, [r5, #16]
 800f6aa:	b99b      	cbnz	r3, 800f6d4 <_vfiprintf_r+0x5c>
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	f000 f938 	bl	800f924 <__swsetup_r>
 800f6b4:	b170      	cbz	r0, 800f6d4 <_vfiprintf_r+0x5c>
 800f6b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6b8:	07dc      	lsls	r4, r3, #31
 800f6ba:	d504      	bpl.n	800f6c6 <_vfiprintf_r+0x4e>
 800f6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c0:	b01d      	add	sp, #116	@ 0x74
 800f6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c6:	89ab      	ldrh	r3, [r5, #12]
 800f6c8:	0598      	lsls	r0, r3, #22
 800f6ca:	d4f7      	bmi.n	800f6bc <_vfiprintf_r+0x44>
 800f6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6ce:	f7fe f9fd 	bl	800dacc <__retarget_lock_release_recursive>
 800f6d2:	e7f3      	b.n	800f6bc <_vfiprintf_r+0x44>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d8:	2320      	movs	r3, #32
 800f6da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6e2:	2330      	movs	r3, #48	@ 0x30
 800f6e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f894 <_vfiprintf_r+0x21c>
 800f6e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6ec:	f04f 0901 	mov.w	r9, #1
 800f6f0:	4623      	mov	r3, r4
 800f6f2:	469a      	mov	sl, r3
 800f6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6f8:	b10a      	cbz	r2, 800f6fe <_vfiprintf_r+0x86>
 800f6fa:	2a25      	cmp	r2, #37	@ 0x25
 800f6fc:	d1f9      	bne.n	800f6f2 <_vfiprintf_r+0x7a>
 800f6fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f702:	d00b      	beq.n	800f71c <_vfiprintf_r+0xa4>
 800f704:	465b      	mov	r3, fp
 800f706:	4622      	mov	r2, r4
 800f708:	4629      	mov	r1, r5
 800f70a:	4630      	mov	r0, r6
 800f70c:	f7ff ffa2 	bl	800f654 <__sfputs_r>
 800f710:	3001      	adds	r0, #1
 800f712:	f000 80a7 	beq.w	800f864 <_vfiprintf_r+0x1ec>
 800f716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f718:	445a      	add	r2, fp
 800f71a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f71c:	f89a 3000 	ldrb.w	r3, [sl]
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 809f 	beq.w	800f864 <_vfiprintf_r+0x1ec>
 800f726:	2300      	movs	r3, #0
 800f728:	f04f 32ff 	mov.w	r2, #4294967295
 800f72c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f730:	f10a 0a01 	add.w	sl, sl, #1
 800f734:	9304      	str	r3, [sp, #16]
 800f736:	9307      	str	r3, [sp, #28]
 800f738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f73c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f73e:	4654      	mov	r4, sl
 800f740:	2205      	movs	r2, #5
 800f742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f746:	4853      	ldr	r0, [pc, #332]	@ (800f894 <_vfiprintf_r+0x21c>)
 800f748:	f7f0 fd42 	bl	80001d0 <memchr>
 800f74c:	9a04      	ldr	r2, [sp, #16]
 800f74e:	b9d8      	cbnz	r0, 800f788 <_vfiprintf_r+0x110>
 800f750:	06d1      	lsls	r1, r2, #27
 800f752:	bf44      	itt	mi
 800f754:	2320      	movmi	r3, #32
 800f756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f75a:	0713      	lsls	r3, r2, #28
 800f75c:	bf44      	itt	mi
 800f75e:	232b      	movmi	r3, #43	@ 0x2b
 800f760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f764:	f89a 3000 	ldrb.w	r3, [sl]
 800f768:	2b2a      	cmp	r3, #42	@ 0x2a
 800f76a:	d015      	beq.n	800f798 <_vfiprintf_r+0x120>
 800f76c:	9a07      	ldr	r2, [sp, #28]
 800f76e:	4654      	mov	r4, sl
 800f770:	2000      	movs	r0, #0
 800f772:	f04f 0c0a 	mov.w	ip, #10
 800f776:	4621      	mov	r1, r4
 800f778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f77c:	3b30      	subs	r3, #48	@ 0x30
 800f77e:	2b09      	cmp	r3, #9
 800f780:	d94b      	bls.n	800f81a <_vfiprintf_r+0x1a2>
 800f782:	b1b0      	cbz	r0, 800f7b2 <_vfiprintf_r+0x13a>
 800f784:	9207      	str	r2, [sp, #28]
 800f786:	e014      	b.n	800f7b2 <_vfiprintf_r+0x13a>
 800f788:	eba0 0308 	sub.w	r3, r0, r8
 800f78c:	fa09 f303 	lsl.w	r3, r9, r3
 800f790:	4313      	orrs	r3, r2
 800f792:	9304      	str	r3, [sp, #16]
 800f794:	46a2      	mov	sl, r4
 800f796:	e7d2      	b.n	800f73e <_vfiprintf_r+0xc6>
 800f798:	9b03      	ldr	r3, [sp, #12]
 800f79a:	1d19      	adds	r1, r3, #4
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	9103      	str	r1, [sp, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bfbb      	ittet	lt
 800f7a4:	425b      	neglt	r3, r3
 800f7a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7aa:	9307      	strge	r3, [sp, #28]
 800f7ac:	9307      	strlt	r3, [sp, #28]
 800f7ae:	bfb8      	it	lt
 800f7b0:	9204      	strlt	r2, [sp, #16]
 800f7b2:	7823      	ldrb	r3, [r4, #0]
 800f7b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7b6:	d10a      	bne.n	800f7ce <_vfiprintf_r+0x156>
 800f7b8:	7863      	ldrb	r3, [r4, #1]
 800f7ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7bc:	d132      	bne.n	800f824 <_vfiprintf_r+0x1ac>
 800f7be:	9b03      	ldr	r3, [sp, #12]
 800f7c0:	1d1a      	adds	r2, r3, #4
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	9203      	str	r2, [sp, #12]
 800f7c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7ca:	3402      	adds	r4, #2
 800f7cc:	9305      	str	r3, [sp, #20]
 800f7ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f8a4 <_vfiprintf_r+0x22c>
 800f7d2:	7821      	ldrb	r1, [r4, #0]
 800f7d4:	2203      	movs	r2, #3
 800f7d6:	4650      	mov	r0, sl
 800f7d8:	f7f0 fcfa 	bl	80001d0 <memchr>
 800f7dc:	b138      	cbz	r0, 800f7ee <_vfiprintf_r+0x176>
 800f7de:	9b04      	ldr	r3, [sp, #16]
 800f7e0:	eba0 000a 	sub.w	r0, r0, sl
 800f7e4:	2240      	movs	r2, #64	@ 0x40
 800f7e6:	4082      	lsls	r2, r0
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	3401      	adds	r4, #1
 800f7ec:	9304      	str	r3, [sp, #16]
 800f7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f2:	4829      	ldr	r0, [pc, #164]	@ (800f898 <_vfiprintf_r+0x220>)
 800f7f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7f8:	2206      	movs	r2, #6
 800f7fa:	f7f0 fce9 	bl	80001d0 <memchr>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d03f      	beq.n	800f882 <_vfiprintf_r+0x20a>
 800f802:	4b26      	ldr	r3, [pc, #152]	@ (800f89c <_vfiprintf_r+0x224>)
 800f804:	bb1b      	cbnz	r3, 800f84e <_vfiprintf_r+0x1d6>
 800f806:	9b03      	ldr	r3, [sp, #12]
 800f808:	3307      	adds	r3, #7
 800f80a:	f023 0307 	bic.w	r3, r3, #7
 800f80e:	3308      	adds	r3, #8
 800f810:	9303      	str	r3, [sp, #12]
 800f812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f814:	443b      	add	r3, r7
 800f816:	9309      	str	r3, [sp, #36]	@ 0x24
 800f818:	e76a      	b.n	800f6f0 <_vfiprintf_r+0x78>
 800f81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f81e:	460c      	mov	r4, r1
 800f820:	2001      	movs	r0, #1
 800f822:	e7a8      	b.n	800f776 <_vfiprintf_r+0xfe>
 800f824:	2300      	movs	r3, #0
 800f826:	3401      	adds	r4, #1
 800f828:	9305      	str	r3, [sp, #20]
 800f82a:	4619      	mov	r1, r3
 800f82c:	f04f 0c0a 	mov.w	ip, #10
 800f830:	4620      	mov	r0, r4
 800f832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f836:	3a30      	subs	r2, #48	@ 0x30
 800f838:	2a09      	cmp	r2, #9
 800f83a:	d903      	bls.n	800f844 <_vfiprintf_r+0x1cc>
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0c6      	beq.n	800f7ce <_vfiprintf_r+0x156>
 800f840:	9105      	str	r1, [sp, #20]
 800f842:	e7c4      	b.n	800f7ce <_vfiprintf_r+0x156>
 800f844:	fb0c 2101 	mla	r1, ip, r1, r2
 800f848:	4604      	mov	r4, r0
 800f84a:	2301      	movs	r3, #1
 800f84c:	e7f0      	b.n	800f830 <_vfiprintf_r+0x1b8>
 800f84e:	ab03      	add	r3, sp, #12
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	462a      	mov	r2, r5
 800f854:	4b12      	ldr	r3, [pc, #72]	@ (800f8a0 <_vfiprintf_r+0x228>)
 800f856:	a904      	add	r1, sp, #16
 800f858:	4630      	mov	r0, r6
 800f85a:	f7fd fbc7 	bl	800cfec <_printf_float>
 800f85e:	4607      	mov	r7, r0
 800f860:	1c78      	adds	r0, r7, #1
 800f862:	d1d6      	bne.n	800f812 <_vfiprintf_r+0x19a>
 800f864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f866:	07d9      	lsls	r1, r3, #31
 800f868:	d405      	bmi.n	800f876 <_vfiprintf_r+0x1fe>
 800f86a:	89ab      	ldrh	r3, [r5, #12]
 800f86c:	059a      	lsls	r2, r3, #22
 800f86e:	d402      	bmi.n	800f876 <_vfiprintf_r+0x1fe>
 800f870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f872:	f7fe f92b 	bl	800dacc <__retarget_lock_release_recursive>
 800f876:	89ab      	ldrh	r3, [r5, #12]
 800f878:	065b      	lsls	r3, r3, #25
 800f87a:	f53f af1f 	bmi.w	800f6bc <_vfiprintf_r+0x44>
 800f87e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f880:	e71e      	b.n	800f6c0 <_vfiprintf_r+0x48>
 800f882:	ab03      	add	r3, sp, #12
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	462a      	mov	r2, r5
 800f888:	4b05      	ldr	r3, [pc, #20]	@ (800f8a0 <_vfiprintf_r+0x228>)
 800f88a:	a904      	add	r1, sp, #16
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7fd fe45 	bl	800d51c <_printf_i>
 800f892:	e7e4      	b.n	800f85e <_vfiprintf_r+0x1e6>
 800f894:	0800fef0 	.word	0x0800fef0
 800f898:	0800fefa 	.word	0x0800fefa
 800f89c:	0800cfed 	.word	0x0800cfed
 800f8a0:	0800f655 	.word	0x0800f655
 800f8a4:	0800fef6 	.word	0x0800fef6

0800f8a8 <__swbuf_r>:
 800f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8aa:	460e      	mov	r6, r1
 800f8ac:	4614      	mov	r4, r2
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	b118      	cbz	r0, 800f8ba <__swbuf_r+0x12>
 800f8b2:	6a03      	ldr	r3, [r0, #32]
 800f8b4:	b90b      	cbnz	r3, 800f8ba <__swbuf_r+0x12>
 800f8b6:	f7fd ffdd 	bl	800d874 <__sinit>
 800f8ba:	69a3      	ldr	r3, [r4, #24]
 800f8bc:	60a3      	str	r3, [r4, #8]
 800f8be:	89a3      	ldrh	r3, [r4, #12]
 800f8c0:	071a      	lsls	r2, r3, #28
 800f8c2:	d501      	bpl.n	800f8c8 <__swbuf_r+0x20>
 800f8c4:	6923      	ldr	r3, [r4, #16]
 800f8c6:	b943      	cbnz	r3, 800f8da <__swbuf_r+0x32>
 800f8c8:	4621      	mov	r1, r4
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f000 f82a 	bl	800f924 <__swsetup_r>
 800f8d0:	b118      	cbz	r0, 800f8da <__swbuf_r+0x32>
 800f8d2:	f04f 37ff 	mov.w	r7, #4294967295
 800f8d6:	4638      	mov	r0, r7
 800f8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8da:	6823      	ldr	r3, [r4, #0]
 800f8dc:	6922      	ldr	r2, [r4, #16]
 800f8de:	1a98      	subs	r0, r3, r2
 800f8e0:	6963      	ldr	r3, [r4, #20]
 800f8e2:	b2f6      	uxtb	r6, r6
 800f8e4:	4283      	cmp	r3, r0
 800f8e6:	4637      	mov	r7, r6
 800f8e8:	dc05      	bgt.n	800f8f6 <__swbuf_r+0x4e>
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f7ff fd99 	bl	800f424 <_fflush_r>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d1ed      	bne.n	800f8d2 <__swbuf_r+0x2a>
 800f8f6:	68a3      	ldr	r3, [r4, #8]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	60a3      	str	r3, [r4, #8]
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	1c5a      	adds	r2, r3, #1
 800f900:	6022      	str	r2, [r4, #0]
 800f902:	701e      	strb	r6, [r3, #0]
 800f904:	6962      	ldr	r2, [r4, #20]
 800f906:	1c43      	adds	r3, r0, #1
 800f908:	429a      	cmp	r2, r3
 800f90a:	d004      	beq.n	800f916 <__swbuf_r+0x6e>
 800f90c:	89a3      	ldrh	r3, [r4, #12]
 800f90e:	07db      	lsls	r3, r3, #31
 800f910:	d5e1      	bpl.n	800f8d6 <__swbuf_r+0x2e>
 800f912:	2e0a      	cmp	r6, #10
 800f914:	d1df      	bne.n	800f8d6 <__swbuf_r+0x2e>
 800f916:	4621      	mov	r1, r4
 800f918:	4628      	mov	r0, r5
 800f91a:	f7ff fd83 	bl	800f424 <_fflush_r>
 800f91e:	2800      	cmp	r0, #0
 800f920:	d0d9      	beq.n	800f8d6 <__swbuf_r+0x2e>
 800f922:	e7d6      	b.n	800f8d2 <__swbuf_r+0x2a>

0800f924 <__swsetup_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4b29      	ldr	r3, [pc, #164]	@ (800f9cc <__swsetup_r+0xa8>)
 800f928:	4605      	mov	r5, r0
 800f92a:	6818      	ldr	r0, [r3, #0]
 800f92c:	460c      	mov	r4, r1
 800f92e:	b118      	cbz	r0, 800f938 <__swsetup_r+0x14>
 800f930:	6a03      	ldr	r3, [r0, #32]
 800f932:	b90b      	cbnz	r3, 800f938 <__swsetup_r+0x14>
 800f934:	f7fd ff9e 	bl	800d874 <__sinit>
 800f938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f93c:	0719      	lsls	r1, r3, #28
 800f93e:	d422      	bmi.n	800f986 <__swsetup_r+0x62>
 800f940:	06da      	lsls	r2, r3, #27
 800f942:	d407      	bmi.n	800f954 <__swsetup_r+0x30>
 800f944:	2209      	movs	r2, #9
 800f946:	602a      	str	r2, [r5, #0]
 800f948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f94c:	81a3      	strh	r3, [r4, #12]
 800f94e:	f04f 30ff 	mov.w	r0, #4294967295
 800f952:	e033      	b.n	800f9bc <__swsetup_r+0x98>
 800f954:	0758      	lsls	r0, r3, #29
 800f956:	d512      	bpl.n	800f97e <__swsetup_r+0x5a>
 800f958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f95a:	b141      	cbz	r1, 800f96e <__swsetup_r+0x4a>
 800f95c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f960:	4299      	cmp	r1, r3
 800f962:	d002      	beq.n	800f96a <__swsetup_r+0x46>
 800f964:	4628      	mov	r0, r5
 800f966:	f7fe feff 	bl	800e768 <_free_r>
 800f96a:	2300      	movs	r3, #0
 800f96c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f96e:	89a3      	ldrh	r3, [r4, #12]
 800f970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f974:	81a3      	strh	r3, [r4, #12]
 800f976:	2300      	movs	r3, #0
 800f978:	6063      	str	r3, [r4, #4]
 800f97a:	6923      	ldr	r3, [r4, #16]
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	89a3      	ldrh	r3, [r4, #12]
 800f980:	f043 0308 	orr.w	r3, r3, #8
 800f984:	81a3      	strh	r3, [r4, #12]
 800f986:	6923      	ldr	r3, [r4, #16]
 800f988:	b94b      	cbnz	r3, 800f99e <__swsetup_r+0x7a>
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f994:	d003      	beq.n	800f99e <__swsetup_r+0x7a>
 800f996:	4621      	mov	r1, r4
 800f998:	4628      	mov	r0, r5
 800f99a:	f000 f883 	bl	800faa4 <__smakebuf_r>
 800f99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9a2:	f013 0201 	ands.w	r2, r3, #1
 800f9a6:	d00a      	beq.n	800f9be <__swsetup_r+0x9a>
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	60a2      	str	r2, [r4, #8]
 800f9ac:	6962      	ldr	r2, [r4, #20]
 800f9ae:	4252      	negs	r2, r2
 800f9b0:	61a2      	str	r2, [r4, #24]
 800f9b2:	6922      	ldr	r2, [r4, #16]
 800f9b4:	b942      	cbnz	r2, 800f9c8 <__swsetup_r+0xa4>
 800f9b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9ba:	d1c5      	bne.n	800f948 <__swsetup_r+0x24>
 800f9bc:	bd38      	pop	{r3, r4, r5, pc}
 800f9be:	0799      	lsls	r1, r3, #30
 800f9c0:	bf58      	it	pl
 800f9c2:	6962      	ldrpl	r2, [r4, #20]
 800f9c4:	60a2      	str	r2, [r4, #8]
 800f9c6:	e7f4      	b.n	800f9b2 <__swsetup_r+0x8e>
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	e7f7      	b.n	800f9bc <__swsetup_r+0x98>
 800f9cc:	20000120 	.word	0x20000120

0800f9d0 <_raise_r>:
 800f9d0:	291f      	cmp	r1, #31
 800f9d2:	b538      	push	{r3, r4, r5, lr}
 800f9d4:	4605      	mov	r5, r0
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	d904      	bls.n	800f9e4 <_raise_r+0x14>
 800f9da:	2316      	movs	r3, #22
 800f9dc:	6003      	str	r3, [r0, #0]
 800f9de:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e2:	bd38      	pop	{r3, r4, r5, pc}
 800f9e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9e6:	b112      	cbz	r2, 800f9ee <_raise_r+0x1e>
 800f9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9ec:	b94b      	cbnz	r3, 800fa02 <_raise_r+0x32>
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f000 f830 	bl	800fa54 <_getpid_r>
 800f9f4:	4622      	mov	r2, r4
 800f9f6:	4601      	mov	r1, r0
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9fe:	f000 b817 	b.w	800fa30 <_kill_r>
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d00a      	beq.n	800fa1c <_raise_r+0x4c>
 800fa06:	1c59      	adds	r1, r3, #1
 800fa08:	d103      	bne.n	800fa12 <_raise_r+0x42>
 800fa0a:	2316      	movs	r3, #22
 800fa0c:	6003      	str	r3, [r0, #0]
 800fa0e:	2001      	movs	r0, #1
 800fa10:	e7e7      	b.n	800f9e2 <_raise_r+0x12>
 800fa12:	2100      	movs	r1, #0
 800fa14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa18:	4620      	mov	r0, r4
 800fa1a:	4798      	blx	r3
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	e7e0      	b.n	800f9e2 <_raise_r+0x12>

0800fa20 <raise>:
 800fa20:	4b02      	ldr	r3, [pc, #8]	@ (800fa2c <raise+0xc>)
 800fa22:	4601      	mov	r1, r0
 800fa24:	6818      	ldr	r0, [r3, #0]
 800fa26:	f7ff bfd3 	b.w	800f9d0 <_raise_r>
 800fa2a:	bf00      	nop
 800fa2c:	20000120 	.word	0x20000120

0800fa30 <_kill_r>:
 800fa30:	b538      	push	{r3, r4, r5, lr}
 800fa32:	4d07      	ldr	r5, [pc, #28]	@ (800fa50 <_kill_r+0x20>)
 800fa34:	2300      	movs	r3, #0
 800fa36:	4604      	mov	r4, r0
 800fa38:	4608      	mov	r0, r1
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	602b      	str	r3, [r5, #0]
 800fa3e:	f7f3 fc71 	bl	8003324 <_kill>
 800fa42:	1c43      	adds	r3, r0, #1
 800fa44:	d102      	bne.n	800fa4c <_kill_r+0x1c>
 800fa46:	682b      	ldr	r3, [r5, #0]
 800fa48:	b103      	cbz	r3, 800fa4c <_kill_r+0x1c>
 800fa4a:	6023      	str	r3, [r4, #0]
 800fa4c:	bd38      	pop	{r3, r4, r5, pc}
 800fa4e:	bf00      	nop
 800fa50:	200022c4 	.word	0x200022c4

0800fa54 <_getpid_r>:
 800fa54:	f7f3 bc5e 	b.w	8003314 <_getpid>

0800fa58 <__swhatbuf_r>:
 800fa58:	b570      	push	{r4, r5, r6, lr}
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa60:	2900      	cmp	r1, #0
 800fa62:	b096      	sub	sp, #88	@ 0x58
 800fa64:	4615      	mov	r5, r2
 800fa66:	461e      	mov	r6, r3
 800fa68:	da0d      	bge.n	800fa86 <__swhatbuf_r+0x2e>
 800fa6a:	89a3      	ldrh	r3, [r4, #12]
 800fa6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fa70:	f04f 0100 	mov.w	r1, #0
 800fa74:	bf14      	ite	ne
 800fa76:	2340      	movne	r3, #64	@ 0x40
 800fa78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	6031      	str	r1, [r6, #0]
 800fa80:	602b      	str	r3, [r5, #0]
 800fa82:	b016      	add	sp, #88	@ 0x58
 800fa84:	bd70      	pop	{r4, r5, r6, pc}
 800fa86:	466a      	mov	r2, sp
 800fa88:	f000 f848 	bl	800fb1c <_fstat_r>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	dbec      	blt.n	800fa6a <__swhatbuf_r+0x12>
 800fa90:	9901      	ldr	r1, [sp, #4]
 800fa92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fa96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fa9a:	4259      	negs	r1, r3
 800fa9c:	4159      	adcs	r1, r3
 800fa9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800faa2:	e7eb      	b.n	800fa7c <__swhatbuf_r+0x24>

0800faa4 <__smakebuf_r>:
 800faa4:	898b      	ldrh	r3, [r1, #12]
 800faa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800faa8:	079d      	lsls	r5, r3, #30
 800faaa:	4606      	mov	r6, r0
 800faac:	460c      	mov	r4, r1
 800faae:	d507      	bpl.n	800fac0 <__smakebuf_r+0x1c>
 800fab0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fab4:	6023      	str	r3, [r4, #0]
 800fab6:	6123      	str	r3, [r4, #16]
 800fab8:	2301      	movs	r3, #1
 800faba:	6163      	str	r3, [r4, #20]
 800fabc:	b003      	add	sp, #12
 800fabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fac0:	ab01      	add	r3, sp, #4
 800fac2:	466a      	mov	r2, sp
 800fac4:	f7ff ffc8 	bl	800fa58 <__swhatbuf_r>
 800fac8:	9f00      	ldr	r7, [sp, #0]
 800faca:	4605      	mov	r5, r0
 800facc:	4639      	mov	r1, r7
 800face:	4630      	mov	r0, r6
 800fad0:	f7fe febe 	bl	800e850 <_malloc_r>
 800fad4:	b948      	cbnz	r0, 800faea <__smakebuf_r+0x46>
 800fad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fada:	059a      	lsls	r2, r3, #22
 800fadc:	d4ee      	bmi.n	800fabc <__smakebuf_r+0x18>
 800fade:	f023 0303 	bic.w	r3, r3, #3
 800fae2:	f043 0302 	orr.w	r3, r3, #2
 800fae6:	81a3      	strh	r3, [r4, #12]
 800fae8:	e7e2      	b.n	800fab0 <__smakebuf_r+0xc>
 800faea:	89a3      	ldrh	r3, [r4, #12]
 800faec:	6020      	str	r0, [r4, #0]
 800faee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800faf2:	81a3      	strh	r3, [r4, #12]
 800faf4:	9b01      	ldr	r3, [sp, #4]
 800faf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fafa:	b15b      	cbz	r3, 800fb14 <__smakebuf_r+0x70>
 800fafc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb00:	4630      	mov	r0, r6
 800fb02:	f000 f81d 	bl	800fb40 <_isatty_r>
 800fb06:	b128      	cbz	r0, 800fb14 <__smakebuf_r+0x70>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	f023 0303 	bic.w	r3, r3, #3
 800fb0e:	f043 0301 	orr.w	r3, r3, #1
 800fb12:	81a3      	strh	r3, [r4, #12]
 800fb14:	89a3      	ldrh	r3, [r4, #12]
 800fb16:	431d      	orrs	r5, r3
 800fb18:	81a5      	strh	r5, [r4, #12]
 800fb1a:	e7cf      	b.n	800fabc <__smakebuf_r+0x18>

0800fb1c <_fstat_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4d07      	ldr	r5, [pc, #28]	@ (800fb3c <_fstat_r+0x20>)
 800fb20:	2300      	movs	r3, #0
 800fb22:	4604      	mov	r4, r0
 800fb24:	4608      	mov	r0, r1
 800fb26:	4611      	mov	r1, r2
 800fb28:	602b      	str	r3, [r5, #0]
 800fb2a:	f7f3 fc5b 	bl	80033e4 <_fstat>
 800fb2e:	1c43      	adds	r3, r0, #1
 800fb30:	d102      	bne.n	800fb38 <_fstat_r+0x1c>
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	b103      	cbz	r3, 800fb38 <_fstat_r+0x1c>
 800fb36:	6023      	str	r3, [r4, #0]
 800fb38:	bd38      	pop	{r3, r4, r5, pc}
 800fb3a:	bf00      	nop
 800fb3c:	200022c4 	.word	0x200022c4

0800fb40 <_isatty_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4d06      	ldr	r5, [pc, #24]	@ (800fb5c <_isatty_r+0x1c>)
 800fb44:	2300      	movs	r3, #0
 800fb46:	4604      	mov	r4, r0
 800fb48:	4608      	mov	r0, r1
 800fb4a:	602b      	str	r3, [r5, #0]
 800fb4c:	f7f3 fc5a 	bl	8003404 <_isatty>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d102      	bne.n	800fb5a <_isatty_r+0x1a>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	b103      	cbz	r3, 800fb5a <_isatty_r+0x1a>
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	bd38      	pop	{r3, r4, r5, pc}
 800fb5c:	200022c4 	.word	0x200022c4

0800fb60 <_init>:
 800fb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb62:	bf00      	nop
 800fb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb66:	bc08      	pop	{r3}
 800fb68:	469e      	mov	lr, r3
 800fb6a:	4770      	bx	lr

0800fb6c <_fini>:
 800fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6e:	bf00      	nop
 800fb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb72:	bc08      	pop	{r3}
 800fb74:	469e      	mov	lr, r3
 800fb76:	4770      	bx	lr
